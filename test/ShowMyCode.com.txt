package {
    import flash.display.*;
    import mb.data.*;
    import mb.projections.*;
    import mb.*;
    import flash.geom.*;
    import mb.styles.*;
    import mb.importing.*;
    import mb.expressions.*;
    import mb.shapes.*;
    import mb.maps.*;
    import mb.symbols.*;
    import mb.text.*;
    import mb.placement.*;
    import mb.popups.*;
    import mb.utils.*;
    import flash.filters.*;

    public class HomicidesMap extends MapMain {

        public static const NAVIGATE:String = "nav";
        public static const LAT:Number = 40.752;
        public static const LONG:Number = -73.927;
        public static const MPP:Number = 152.8740578;

        private static var _halo:DropShadowFilter = new DropShadowFilter(0, 0, 0xEEEEEE, 1, 4, 4, 2, 1);
        private static var _shadow:DropShadowFilter = new DropShadowFilter(0, 0, 0, 1, 3, 3, 2, 1);
        private static var _blur:BlurFilter = new BlurFilter(20, 20, 3);
        public static var TEST:Boolean = false;
        public static var STREETS:Boolean = false;
        private static var _defaults:Object = {
            show_precincts:false,
            selected_precinct:null
        };

        private var _boroLabel_lyr:LabelLayer;
        private var _neighborhoodLabel_lyr:LabelLayer;
        private var _boro_lyr:ShapeLayer;
        private var _boro_vec:LegacyShapeSource;
        private var _neighborhood_data:PointDataTable;
        private var _boro_data:PointDataTable;
        private var _precinct_lyr:ShapeLayer;
        private var _precinct_vec:LegacyShapeSource;
        private var _precinct_data:PointDataTable;
        private var _incidents_vec:SymbolDataSource;
        private var _incidents_lyr:PointLayer;
        private var _incidents_style:PointStyle;
        private var _incidents_data:PointDataTable;
        private var _victims_data:DataTable;
        private var _perps_data:DataTable;
        private var _grid_lyr:ShapeLayer;
        private var _test_lyr:PointLayer;
        private var _projEll:IGeoProjection;
        private var _xySph:Point;
        private var _xyEll:Point;
        private var _llDiff:Point;
        private var _xyDiff:Point;
        private var _opts:Object;
        private var _initSingleIncident:Boolean = false;
        private var _gmapStyle:String = "sat";
        private var _mapView:String = "AllView";
        private var _selectedIncidentId:int = -1;
        private var _year:int = 0;
        private var _popup:Popup;
        private var _singlePopup:Popup;
        private var _marker:Marker;

        public function HomicidesMap(_arg1:MovieClip, _arg2:PointDataTable, _arg3:DataTable, _arg4:DataTable, _arg5:Object=null){
            super(_arg1);
            this._opts = Opts.init(_defaults, _arg5);
            this._projEll = new Mercator();
            this._projEll.useEllipsoid = true;
            var _local6:Number = LAT;
            var _local7:Number = LONG;
            var _local8:Alignment = new LatLongScaleAlignment(_align, this._projEll, _local6, _local7, MPP);
            _arg5 = {
                smooth_zoom:false,
                use_drag_pan:true,
                zoom_scales:[1, 2, 4, 8, 16, 32]
            };
            _map = new MapStack(_local8, _arg5);
            _map.navigation.limitPanning = false;
            var _local9:Waiter = new Waiter();
            this._victims_data = _arg3;
            this._perps_data = _arg4;
            this._incidents_data = _arg2;
            this._boro_data = new PointDataTable("LAT", "LONG");
            this._boro_data.load(new TabDataLoader((A.DATA_HOME + "boros.txt")));
            if (this._opts.show_precincts){
                this._precinct_vec = new LegacyShapeSource(new ShapeLoaderOne((A.DATA_HOME + "precincts.swf"), new NullProjection()), this._projEll);
                this._precinct_data = new PointDataTable("LAT", "LONG");
                this._precinct_data.load(new TabDataLoader((A.DATA_HOME + "precincts.txt")));
                _local9.waitFor(this._precinct_data);
            };
            this._neighborhood_data = new PointDataTable("LAT", "LONG");
            this._neighborhood_data.load(new TabDataLoader((A.DATA_HOME + "neighborhoods.txt")));
            _local9.waitFor(this._neighborhood_data);
            this._boro_vec = new LegacyShapeSource(new ShapeLoaderOne((A.DATA_HOME + "boros.swf"), this._projEll), this._projEll);
            _local9.waitFor(this._boro_data);
            _local9.addEventListener(C.READY, this.onDataLoad);
            _local9.startWaiting();
            _arg5 = {
                min_width:200,
                table_tabs:[0, 80],
                tab_align:["left", "left"]
            };
            this._singlePopup = new PopupDisplayWithTail(_map, _arg5);
            this._popup = new PopupDisplay(_arg5);
            Sprite(_root).addChild(this._popup);
            _map.addOverlay(this._singlePopup);
        }
        public function onDataLoad(_arg1:Object){
            var _local10:ShapeStyle;
            var _local11:LabelLayer;
            var _local12:LabelStyle;
            var _local2:Number = 0;
            if (this._opts.show_precincts){
                this._precinct_lyr = new ShapeLayer(this._precinct_vec, this._precinct_data);
                _local10 = new ShapeStyle();
                _local10.setStroke(2, A.BOUNDARY_COL, 1);
                this._precinct_lyr.setStyle(_local10);
                _local11 = new LabelLayer(new SymbolDataSource(this._precinct_data, this._projEll));
                _local12 = new FilteredLabelStyle(this.filterPrecinctLabel, this._precinct_data);
                _local12.useHalo = true;
                _local12.haloFilter = new GlowFilter(_local2, 0.7, 1.2, 1.2, 10, 2);
                _local11.setStyle(_local12);
                this._precinct_lyr.minScale = (_local11.minScale = 3.99);
                this._precinct_lyr.maxScale = (_local11.maxScale = 16);
            };
            this._boro_lyr = new ShapeLayer(this._boro_vec);
            var _local3:ShapeStyle = new ShapeStyle();
            _local3.setStroke(2, A.BOUNDARY_COL, 1);
            this._boro_lyr.setStyle(_local3);
            this._boro_lyr.maxLevel = 3;
            this._boroLabel_lyr = new LabelLayer(new SymbolDataSource(this._boro_data, this._projEll));
            var _local4:LabelStyle = new FilteredLabelStyle(this.filterBoroLabel, this._boro_data);
            _local4.useHalo = true;
            _local4.haloFilter = new GlowFilter(_local2, 0.65, 1.3, 1.3, 10, 2);
            this._boroLabel_lyr.setStyle(_local4);
            this._boroLabel_lyr.maxLevel = 3;
            this._neighborhoodLabel_lyr = new LabelLayer(new SymbolDataSource(this._neighborhood_data, this._projEll));
            var _local5:LabelStyle = new FilteredLabelStyle(this.filterNeighborhoodLabel, this._neighborhood_data);
            _local5.useHalo = true;
            _local5.textStyle.bold = false;
            _local5.textStyle.color = 0x333333;
            _local5.haloFilter = new GlowFilter(0xFFFFFF, 0.75, 1.3, 1.3, 10, 2);
            this._neighborhoodLabel_lyr.setStyle(_local5);
            this._neighborhoodLabel_lyr.maxLevel = (A.AUTO_SWITCH_LEVEL - 1);
            this._neighborhoodLabel_lyr.minLevel = 3;
            var _local6:Object = {use_stacking_order:true};
            var _local7:PointStyle = new FilteredPointStyle(this.filterPointStyle, this._incidents_data);
            _local7.setFill(A.DEFAULT_COL, 0.95);
            this._incidents_vec = new SymbolDataSource(this._incidents_data, this._projEll);
            this._incidents_lyr = new BubbleLayer(this._incidents_vec, _local6);
            this._incidents_lyr.setStyle(_local7);
            var _local8:ShapeHoverStyle = new ShapeHoverStyle();
            _local8.setStroke(1, 0, 1);
            _local8.matchFillColor = true;
            _local7.hoverStyle = _local8;
            this._incidents_lyr.addEventListener(C.ROLL_OVER, this.handlePointOver);
            this._incidents_lyr.addEventListener(C.ROLL_OUT, this.handlePointOut);
            this._marker = new Marker(new MarkerSymbol());
            var _local9:MarkerLayer = new MarkerLayer([this._marker]);
            if (this._opts.show_precincts){
                _map.addLayer(this._precinct_lyr);
            };
            _map.addLayer(this._boro_lyr);
            _map.addLayer(this._incidents_lyr);
            _map.addLayer(this._neighborhoodLabel_lyr);
            if (this._opts.show_precincts){
                _map.addLayer(_local11);
            };
            _map.addLayer(_local9);
            _map.addLayer(this._boroLabel_lyr);
            _map.navigation.zoomToLatLongLevel(LAT, LONG, 2, false);
            _map.display();
            _map.addEventListener(C.READY, this.onMapReady);
        }
        public function displayMarker(_arg1:Number, _arg2:Number){
            this._marker.display({
                lat:_arg1,
                long:_arg2
            });
        }
        public function hideMarker(){
            this._marker.hide();
        }
        public function showIncident(_arg1:int){
            var _local3:Number;
            var _local4:Number;
            var _local5:int;
            var _local6:Object;
            var _local2:Record = this._incidents_data.getMatchingRecord("id", _arg1);
            if (!_local2.isNull){
                _local3 = _local2.getNumber("LAT");
                _local4 = _local2.getNumber("LONG");
                _local5 = _map.navigation.level;
                if (!this._initSingleIncident){
                    _local5 = A.INCIDENT_LEVEL;
                    this._initSingleIncident = true;
                };
                _map.navigation.zoomToLatLongLevel(_local3, _local4, _local5, false);
                this._selectedIncidentId = _local2.id;
                _local6 = this.getPopupInfo(_local2);
                this._singlePopup.display(_local6);
            };
            this.setMapView(A.INCIDENT_VIEW);
        }
        public function testSingleIncidentVisibility():Boolean{
            if (this._selectedIncidentId == -1){
                return (false);
            };
            var _local1:Record = this._incidents_data.getRecordById(this._selectedIncidentId);
            var _local2:int = _local1.getNumber("year");
            if (((!((this._year == 0))) && (!((this._year == _local2))))){
                return (false);
            };
            if (this._mapView != A.INCIDENT_VIEW){
                return (false);
            };
            return (true);
        }
        public function showPrecinct(_arg1:int){
            this.zoomToPrecinct(_arg1);
            this.setMapView(A.PRECINCT_VIEW);
        }
        public function zoomToPrecinct(_arg1:int){
            var _local2:Record = this._precinct_data.getMatchingRecord("PRECINCT", _arg1);
            if (_local2.isNull){
                return;
            };
            var _local3:ShapeVector = this._precinct_vec.fetchShapeById(_local2.id);
            _map.navigation.zoomToBoundingBoxLevel(_local3, null, 0, false);
        }
        public function showLabels(){
            this._neighborhoodLabel_lyr.show();
            this._boroLabel_lyr.show();
        }
        public function hideLabels(){
            this._neighborhoodLabel_lyr.hide();
            this._boroLabel_lyr.hide();
        }
        public function setMapView(_arg1:String){
            this._mapView = _arg1;
            this._incidents_lyr.rescale();
            if (((!((this._selectedIncidentId == -1))) && (!((_arg1 == A.INCIDENT_VIEW))))){
                this._singlePopup.hide();
            };
        }
        public function setGMapStyle(_arg1:String){
            if (_arg1 == A.COMBO){
                _arg1 = (((_map.navigation.level >= A.AUTO_SWITCH_LEVEL)) ? A.MAP : A.SATELLITE);
            };
            this._gmapStyle = _arg1;
            this.useMultiply((_arg1 == A.MAP));
            this._incidents_lyr.refresh();
            if (_arg1 == A.MAP){
                this.hideLabels();
            } else {
                if (_arg1 == A.SATELLITE){
                    this.showLabels();
                };
            };
        }
        private function calcPtSize(_arg1:Record):Number{
            var _local2:Number = 0.2;
            var _local3:Number = 2;
            return ((((1 - _local2) + (_map.navigation.scale * _local2)) * _local3));
        }
        public function getCenterLatLong():GeoPoint{
            return (_map.navigation.getCenterAsLatLong());
        }
        public function testLatLongInRange(_arg1:Number, _arg2:Number):Boolean{
            return (true);
        }
        public function setLatLongLevel(_arg1:Number, _arg2:Number, _arg3:int){
            _map.navigation.zoomToLatLongLevel(_arg1, _arg2, _arg3, false);
        }
        private function getVictimDescription(_arg1:Record, _arg2:Boolean=true):String{
            var _local8:String;
            var _local9:String;
            if (!_arg1){
                return ("Not reported");
            };
            var _local3:String = _arg1.getString("race");
            var _local4:int = _arg1.getNumber("age");
            var _local5:String = _arg1.getString("sex");
            var _local6 = "";
            switch (_local3){
                case "H":
                    _local3 = "Hispanic";
                    break;
                case "B":
                    _local3 = "black";
                    break;
                case "W":
                    _local3 = "white";
                    break;
                case "A":
                    _local3 = "Asian";
                    break;
                default:
                    _local3 = "";
            };
            switch (_local5){
                case "M":
                    _local5 = "male";
                    break;
                case "F":
                    _local5 = "female";
                    break;
                default:
                    _local5 = "";
            };
            var _local7:* = "";
            if (_local4){
                _local7 = String(_local4);
            };
            if (_local3){
                _local6 = (_local6 + _local3);
            };
            if (_local5){
                if (_local6){
                    _local6 = (_local6 + " ");
                };
                _local6 = (_local6 + _local5);
            };
            if (_local7){
                if (_local6){
                    _local6 = (_local6 + ", age ");
                } else {
                    _local6 = (_local6 + "age ");
                };
                _local6 = (_local6 + _local7);
            };
            if (!_local6){
                _local6 = "Not reported";
            } else {
                _local8 = _arg1.getString("fname");
                _local9 = _arg1.getString("lname");
                if (((((_local8) && (_local9))) && (_arg2))){
                    _local6 = ((((_local8 + " ") + _local9) + ",\n") + _local6);
                } else {
                    _local6 = Text.capitalizeWord(_local6);
                };
            };
            return (_local6);
        }
        private function getPerpDescription(_arg1:Record):String{
            return (this.getVictimDescription(_arg1, false));
        }
        private function getWeaponDescription(_arg1:String):String{
            switch (_arg1){
                case A.GUN:
                    _arg1 = "Gun";
                    break;
                case A.KNIFE:
                    _arg1 = "Knife";
                    break;
                case A.CLUB:
                    _arg1 = "Blunt object";
                    break;
                case A.OTHER:
                    _arg1 = "Other";
                    break;
                default:
                    _arg1 = "Unknown";
            };
            return (_arg1);
        }
        private function handlePointOver(_arg1:Object){
            var _local2:Record = Record(_arg1.rec);
            if ((((_local2.id == this._selectedIncidentId)) && ((this._mapView == A.INCIDENT_VIEW)))){
                return;
            };
            var _local3:Object = this.getPopupInfo(_local2);
            this._popup.display(_local3);
        }
        private function getPopupInfo(_arg1:Record):Object{
            var _local19:Array;
            var _local20:int;
            var _local21:int;
            var _local22:String;
            var _local23:String;
            var _local24:String;
            var _local2:int = _arg1.getNumber("id");
            var _local3:int = _arg1.getNumber("year");
            var _local4:String = _arg1.getString("incident_date");
            var _local5:String = _arg1.getString("incident_time");
            var _local6 = "";
            if (((_local5) && (!((_local5 == "00:00"))))){
                _local19 = _local5.split(":");
                if (_local19.length == 2){
                    _local20 = parseInt(_local19[0]);
                    _local21 = parseInt(_local19[1]);
                    if (((_local20) || (_local21))){
                        _local22 = (((_local20 < 12)) ? "A.M." : "P.M.");
                        _local24 = _local19[1];
                        if (_local20 == 0){
                            _local23 = "12";
                        } else {
                            if (_local20 > 12){
                                _local23 = String((_local20 - 12));
                            } else {
                                _local23 = String(_local20);
                            };
                        };
                        _local6 = ((((("  " + _local23) + ":") + _local24) + " ") + _local22);
                    };
                };
            };
            var _local7:String = _arg1.getString("primary_motive");
            if (!_local7){
                _local7 = "Unknown";
            } else {
                _local7 = _local7.toLowerCase();
                _local7 = Text.capitalizeWord(_local7);
            };
            var _local8:RecordSet = this._victims_data.getIndexedRecordSet(_local2);
            var _local9:RecordSet = this._perps_data.getIndexedRecordSet(_local2);
            var _local10:Record = _local8.firstRecord;
            var _local11:Record = _local9.firstRecord;
            var _local12:String = _local4;
            _local12 = (_local12 + _local6);
            var _local13:Object = {};
            _local13.title = _local12;
            var _local14:int = _arg1.getNumber("id");
            var _local15:String = _arg1.getString("boro");
            _local13.incident_id = _local14;
            var _local16:String = _arg1.getString("weapon");
            _local16 = this.getWeaponDescription(_local16);
            var _local17:Array = [];
            if (_local8.size() < 2){
                _local17.push(["Victim:", this.getVictimDescription(_local8.firstRecord)]);
            } else {
                _local17.push(["Victims:", this.getVictimDescription(_local8.firstRecord)]);
                while (_local8.hasNext) {
                    _local17.push(["", this.getVictimDescription(_local8.nextRecord)]);
                };
            };
            if (_local9.size() < 2){
                _local17.push(["Perpetrator:", this.getPerpDescription(_local9.firstRecord)]);
            } else {
                _local17.push(["Perpetrators:", this.getPerpDescription(_local9.firstRecord)]);
                while (_local9.hasNext) {
                    _local17.push(["", this.getPerpDescription(_local9.nextRecord)]);
                };
            };
            _local17.push(["Primary motive:", _local7]);
            _local17.push(["Weapon:", _local16]);
            _local13.table = _local17;
            var _local18:SymbolData = this._incidents_vec.fetchById(_arg1.id);
            _local13.x = _local18.x;
            _local13.y = _local18.y;
            return (_local13);
        }
        private function handlePointOut(_arg1:Object){
            this._popup.hide();
        }
        private function filterBoroLabel(_arg1:LabelStyle, _arg2:Record):LabelStyle{
            var _local3:Number = _map.navigation.level;
            var _local4:String = _arg2.getString("NAME");
            _arg1.text = _local4;
            _arg1.textStyle.color = A.LABEL_COL;
            var _local5:Number = (11 + (_local3 * 1.5));
            _arg1.textStyle.size = _local5;
            _arg1.textStyle.bold = true;
            return (_arg1);
        }
        private function filterNeighborhoodLabel(_arg1:LabelStyle, _arg2:Record):LabelStyle{
            var _local3:Number = _map.navigation.scale;
            var _local4:Number = _map.navigation.level;
            var _local5:String = _arg2.getString("LABEL");
            var _local6:int = _arg2.getNumber("CLASS");
            var _local7:int = A.NEIGHBORHOOD_LABEL_LEVEL;
            var _local8:Boolean;
            if ((((_local4 > _local7)) && ((_local4 < (_local7 + 3))))){
                if ((((_local4 < (_local7 + 2))) && ((_local6 == 1)))){
                    _local8 = true;
                } else {
                    if ((((_local4 >= (_local7 + 2))) && ((_local6 > 0)))){
                        _local8 = true;
                    };
                };
            };
            _arg1.visible = _local8;
            _arg1.text = _local5;
            var _local9:Number = 8;
            _local9 = (_local9 + _local4);
            _arg1.textStyle.size = _local9;
            return (_arg1);
        }
        private function filterPrecinctLabel(_arg1:LabelStyle, _arg2:Record):LabelStyle{
            var _local3:Number = _map.navigation.scale;
            var _local4:int = _arg2.getNumber("PRECINCT");
            _arg1.text = String(_local4);
            _arg1.textStyle.color = A.LABEL_COL;
            var _local5:Number = (13 + _local3);
            _arg1.textStyle.size = _local5;
            _arg1.textStyle.bold = true;
            return (_arg1);
        }
        private function filterPointStyle(_arg1:PointStyle, _arg2:Record):PointStyle{
            var _local3:Number = _map.navigation.scale;
            var _local4:Number = _map.navigation.level;
            var _local5:Number = ((_local4 * 1.2) + 0.4);
            _arg1.size = _local5;
            var _local6:Number = 1;
            var _local7:Number = 1;
            _arg1.strokeColor = 0xFFFFFF;
            if (_local4 == 1){
                _local6 = 0.25;
            } else {
                if (_local4 == 2){
                    _local6 = 0.4;
                } else {
                    if (_local4 == 3){
                        _local6 = 0.75;
                    } else {
                        if (_local4 == 4){
                            _local6 = 0.9;
                            _local7 = 1.4;
                        };
                    };
                };
            };
            _arg1.strokeWeight = _local7;
            var _local8:Number = A.DEFAULT_COL;
            var _local9:int = _arg2.getNumber("id");
            this.filterPointByView(_arg1, _arg2, this._mapView);
            if (_arg1.fillColor == A.NODATA_COL){
                _local6 = (((_local4 <= 2)) ? 0.7 : 1);
                _arg1.size = (_arg1.size * 0.85);
                _arg1.strokeWeight = 1;
                _arg1.strokeColor = 0x666666;
                _arg1.fillColor = 0xEEEEEE;
                _arg1.fillAlpha = 1;
                _arg1.z = 0;
            } else {
                _arg1.fillAlpha = 1;
                _arg1.z = 1;
            };
            if (_arg2.id == this._selectedIncidentId){
                _arg1.size = (_arg1.size - 0.1);
            };
            _arg1.strokeAlpha = _local6;
            return (_arg1);
        }
        private function filterPointByView(_arg1:PointStyle, _arg2:Record, _arg3:String){
            var _local5:int;
            var _local6:String;
            var _local7:int;
            var _local8:int;
            var _local9:String;
            var _local10:int;
            var _local11:Record;
            var _local12:Record;
            var _local13:Record;
            var _local14:Number;
            var _local15:String;
            var _local16:String;
            var _local17:String;
            var _local4:Number = A.NODATA_COL;
            if ((((((_arg3 == A.ALL_VIEW)) || ((_arg3 == A.PRECINCT_VIEW)))) || ((_arg3 == A.INCIDENT_VIEW)))){
                _local4 = A.DEFAULT_COL;
                if ((((_arg3 == A.INCIDENT_VIEW)) && ((_arg2.id == this._selectedIncidentId)))){
                    _local4 = A.SELECTED_COL;
                };
            } else {
                if (_arg3 == A.CUSTOM_VIEW){
                    _local5 = _arg2.getNumber(A.SELECTION_FIELD);
                    if (_local5 == 1){
                        _local4 = A.HIGH_COL;
                    } else {
                        if (_local5 == 0){
                            _local4 = A.LOW_COL;
                        };
                    };
                } else {
                    _local10 = _arg2.getNumber("id");
                    _local11 = this._perps_data.getIndexedRecord(_local10);
                    _local12 = this._victims_data.getIndexedRecord(_local10);
                    if (_arg3 == A.VICTIM_RACE_VIEW){
                        if (_local12){
                            _local6 = _local12.getString("race");
                            if (_local6){
                                if (_local6 == "W"){
                                    _local4 = A.WHITE_COL;
                                } else {
                                    if (_local6 == "B"){
                                        _local4 = A.BLACK_COL;
                                    } else {
                                        if ((((_local6 == "H")) || ((_local6 == "HB")))){
                                            _local4 = A.HISPANIC_COL;
                                        } else {
                                            if (_local6 == "A"){
                                                _local4 = A.ASIAN_COL;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } else {
                        if (_arg3 == A.PERP_RACE_VIEW){
                            if (_local11){
                                _local6 = _local11.getString("race");
                                if (_local6){
                                    if (_local6 == "W"){
                                        _local4 = A.WHITE_COL;
                                    } else {
                                        if (_local6 == "B"){
                                            _local4 = A.BLACK_COL;
                                        } else {
                                            if (_local6 == "H"){
                                                _local4 = A.HISPANIC_COL;
                                            } else {
                                                if (_local6 == "A"){
                                                    _local4 = A.ASIAN_COL;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        } else {
                            if ((((_arg3 == A.VICTIM_AGE_VIEW)) || ((_arg3 == A.PERP_AGE_VIEW)))){
                                _local13 = (((_arg3 == A.VICTIM_AGE_VIEW)) ? _local12 : _local11);
                                if (_local13){
                                    _local14 = _local13.getNumber("age");
                                    if (((!(isNaN(_local14))) && ((((_arg3 == A.VICTIM_AGE_VIEW)) || (!((_local14 == 0))))))){
                                        if (_local14 < A.UNDER_18){
                                            _local4 = A.AGE_COLORS[0];
                                        } else {
                                            if (_local14 < A.UNDER_25){
                                                _local4 = A.AGE_COLORS[1];
                                            } else {
                                                if (_local14 < A.UNDER_35){
                                                    _local4 = A.AGE_COLORS[2];
                                                } else {
                                                    if (_local14 < A.UNDER_45){
                                                        _local4 = A.AGE_COLORS[3];
                                                    } else {
                                                        if (_local14 < A.UNDER_55){
                                                            _local4 = A.AGE_COLORS[4];
                                                        } else {
                                                            if (_local14 < A.SENIORS){
                                                                _local4 = A.AGE_COLORS[5];
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            } else {
                                if (_arg3 == A.VICTIM_SEX_VIEW){
                                    if (_local12){
                                        _local9 = _local12.getString("sex");
                                        if (_local9 == "F"){
                                            _local4 = A.DAY_COL;
                                        } else {
                                            if (_local9 == "M"){
                                                _local4 = A.NIGHT_COL;
                                            };
                                        };
                                    };
                                } else {
                                    if (_arg3 == A.PERP_SEX_VIEW){
                                        if (_local11){
                                            _local9 = _local11.getString("sex");
                                            if (_local9 == "F"){
                                                _local4 = A.DAY_COL;
                                            } else {
                                                if (_local9 == "M"){
                                                    _local4 = A.NIGHT_COL;
                                                };
                                            };
                                        };
                                    } else {
                                        if (_arg3 == A.WEAPON_VIEW){
                                            _local15 = _arg2.getString("weapon");
                                            if (_local15 == A.GUN){
                                                _local4 = A.GUN_COL;
                                            } else {
                                                if (_local15 == A.KNIFE){
                                                    _local4 = A.KNIFE_COL;
                                                } else {
                                                    if (_local15 == A.OTHER){
                                                        _local4 = A.OTHER_WEAPON_COL;
                                                    };
                                                };
                                            };
                                        } else {
                                            if (_arg3 == A.TIME_VIEW){
                                                _local16 = _arg2.getString("light_dark");
                                                if (_local16 == "D"){
                                                    _local4 = A.NIGHT_COL;
                                                } else {
                                                    if (_local16 == "L"){
                                                        _local4 = A.DAY_COL;
                                                    };
                                                };
                                            } else {
                                                if (_arg3 == A.BORO_VIEW){
                                                    _local17 = _arg2.getString("boro");
                                                    switch (_local17){
                                                        case "Brooklyn":
                                                            _local4 = A.BROOKLYN_COL;
                                                            break;
                                                        case "Bronx":
                                                            _local4 = A.BRONX_COL;
                                                            break;
                                                        case "Queens":
                                                            _local4 = A.QUEENS_COL;
                                                            break;
                                                        case "Manhattan":
                                                            _local4 = A.MANHATTAN_COL;
                                                            break;
                                                        case "Staten Island":
                                                            _local4 = A.STATEN_COL;
                                                            break;
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
            _arg1.fillColor = _local4;
        }
        public function showYear(_arg1:int){
            var _local3:String;
            if (this._year == _arg1){
                return;
            };
            this._year = _arg1;
            if (this.testSingleIncidentVisibility()){
                this._singlePopup.show();
            } else {
                this._singlePopup.hide();
            };
            var _local2:IFilter;
            if (_arg1 == A.RECENT_CODE){
                _local2 = new ExpressionFilter((A.F_RECENT_FLAG + " 1 == "), this._incidents_data);
            } else {
                if (_arg1){
                    _local3 = (_arg1 + " year ==");
                    _local2 = new ExpressionFilter(_local3, this._incidents_data);
                };
            };
            this._incidents_vec.applyPrefilter(_local2);
            this._incidents_lyr.rescale();
        }
        private function onRescale(_arg1:Object){
        }
        public function useMultiply(_arg1:Boolean){
            var _local2:String = ((_arg1) ? BlendMode.DARKEN : BlendMode.NORMAL);
            _map.layers.container.blendMode = _local2;
        }
        private function onMapReady(_arg1:Object){
            _map.navigation.addEventListener(C.RESCALE, this.onRescale, false, 1);
            this.useMultiply((this._gmapStyle == A.MAP));
        }
        private function onCellOver(_arg1:Object){
        }

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class SliderGroup extends MovieClip {

        public var track:MovieClip;
        public var ptr:Pointer;

    }
}//package 
﻿package {

    public class A {

        public static const FIRST_YEAR:int = 2003;
        public static const F_RECENT_FLAG:String = "recent_flag";
        public static const F_COMPARISON_FLAG:String = "comp_flag";
        public static const DAYS_TO_SHOW:int = 30;
        public static const RECENT_CODE:int = 999;
        public static const LAST_YEAR_RECENT_CODE:int = 998;
        public static const LAST_YEAR_CODE:int = 997;
        public static const DEBUG:Boolean = false;
        public static const WEB_HOME:String = "http://graphics8.nytimes.com/packages/flash/newsgraphics/projects/homicides/";
        public static const DATA_HOME:String = (WEB_HOME + "data/");
        public static const PROPERTY_DATA_HOME:String = (DATA_HOME + "properties/");
        public static const DATA_FEED_HOME:String = "http://graphics8.nytimes.com/packages/xml/";
        public static const INCIDENTS_FILE:String = (DATA_FEED_HOME + "map_feed_incidents.txt");
        public static const VICTIMS_FILE:String = (DATA_FEED_HOME + "map_feed_victims.txt");
        public static const PERPETRATORS_FILE:String = (DATA_FEED_HOME + "map_feed_perpetrators.txt");
        public static const RIGHT_COLUMN_XPOS:int = 782;
        public static const VIEW_TOGGLE_XPOS:int = 644;
        public static const VIEW_TOGGLE_YPOS:int = 22;
        public static const BG_FILL_ALPHA:Number = 0.93;
        public static const AUTO_SWITCH_LEVEL:int = 4;
        public static const NORMAL_MAP_THRESHOLD:int = 7;
        public static const STREET_VIEW_LEVEL:int = 99;
        public static const INCIDENT_LEVEL:int = 6;
        public static const NEIGHBORHOOD_LABEL_LEVEL:int = 2;
        public static const AUTO_SWITCH_GMAP:Boolean = true;
        public static const SATELLITE:String = "sat";
        public static const MAP:String = "map";
        public static const COMBO:String = "combo";
        public static const RED:Number = 14498084;
        public static const YELLOW:Number = 15388991;
        public static const GREEN:Number = 3853491;
        public static const PURPLE:Number = 8532113;
        public static const BLUE:Number = 3966414;
        public static const ORANGE:Number = 15375132;
        public static const ORANGE2:Number = 14845971;
        public static const BLUE2:Number = 3039904;
        public static const ORANGE3:Number = 14188051;
        public static const BLUE3:Number = 3236520;
        public static const GREEN3:Number = 4562443;
        public static const PURPLE3:Number = 11751133;
        public static const PINK:Number = 11751133;
        public static const LIME:Number = 11393039;
        public static const TAN:Number = 15918999;
        public static const LT_BLUE:Number = 15463164;
        public static const NULL_COL:Number = 0xE2E2E2;
        public static const NODATA_COL:Number = 0xFFFFFF;
        public static const INCIDENT_COL:Number = 2768301;
        public static const DEFAULT_COL:Number = 3039904;
        public static const SELECTED_COL:Number = 14845971;
        public static const HIGH_COL:Number = 14845971;
        public static const LOW_COL:Number = 3039904;
        public static const LOW_STROKE_COL:Number = 0x222222;
        public static const LABEL_COL:Number = 15464447;
        public static const BOUNDARY_COL:Number = 15463164;
        public static const GREY_BAR_COL:Number = 0xE2E2E2;
        public static const CHART_COL:Number = 11978449;
        public static const OTHER_DISPUTE:String = "dispute";
        public static const DOMESTIC:String = "domestic dispute";
        public static const DRUGS:String = "drugs";
        public static const GANG:String = "gang";
        public static const ROBBERY:String = "robbery";
        public static const UNKNOWN_MOTIVE:String = "not reported";
        public static const GUN:String = "gun";
        public static const KNIFE:String = "knife";
        public static const CLUB:String = "club";
        public static const OTHER:String = "other";
        public static const UNKNOWN:String = "";
        public static const WHITE:String = "W";
        public static const HISPANIC:String = "H";
        public static const BLACK:String = "B";
        public static const ASIAN:String = "A";
        public static const UNKNOWN_AGE:int = 0;
        public static const UNDER_18:int = 18;
        public static const UNDER_25:int = 25;
        public static const UNDER_35:int = 35;
        public static const UNDER_45:int = 45;
        public static const UNDER_55:int = 55;
        public static const UNDER_65:int = 65;
        public static const SENIORS:int = 200;
        public static const MALE:String = "M";
        public static const FEMALE:String = "F";
        public static const PURPLE_1:Number = 15188719;
        public static const PURPLE_2:Number = 14522845;
        public static const PURPLE_3:Number = 13396395;
        public static const PURPLE_4:Number = 13384330;
        public static const PURPLE_5:Number = 12197983;
        public static const PURPLE_6:Number = 0x990043;
        public static const PURPLE_7:Number = 0x67001E;
        public static const BLUE_0:Number = 11130111;
        public static const BLUE_1:Number = 8764671;
        public static const BLUE_2:Number = 7380446;
        public static const BLUE_3:Number = 5669311;
        public static const BLUE_4:Number = 3892385;
        public static const BLUE_5:Number = 2115714;
        public static const BLUE_6:Number = 1455449;
        public static const AGE_COLORS:Array = [BLUE_1, BLUE_2, BLUE_3, BLUE_4, BLUE_5, BLUE_6];
        public static const GUN_COL:Number = 4562443;
        public static const KNIFE_COL:Number = 14188051;
        public static const OTHER_WEAPON_COL:Number = 11751133;
        public static const WEAPON_COLORS:Array = [GUN_COL, KNIFE_COL, OTHER_WEAPON_COL];
        public static const MANHATTAN_COL:Number = 5669311;
        public static const BROOKLYN_COL:Number = 1455449;
        public static const QUEENS_COL:Number = 3892385;
        public static const BRONX_COL:Number = 2115714;
        public static const STATEN_COL:Number = 7380446;
        public static const BLACK_COL:Number = 3236520;
        public static const HISPANIC_COL:Number = 14188051;
        public static const WHITE_COL:Number = 4562443;
        public static const ASIAN_COL:Number = 11751133;
        public static const AGE_1_COL:Number = 15375132;
        public static const AGE_2_COL:Number = 11393039;
        public static const AGE_3_COL:Number = 8532113;
        public static const DAY_COL:Number = 14845971;
        public static const NIGHT_COL:Number = 3039904;
        public static const MALE_COL:Number = 3039904;
        public static const FEMALE_COL:Number = 14845971;
        public static const SUMMARY:String = "summary";
        public static const BY_YEAR:String = "years";
        public static const PERP_RACE:String = "p_race";
        public static const VICTIM_RACE:String = "v_race";
        public static const PERP_AGE:String = "p_age";
        public static const VICTIM_AGE:String = "v_age";
        public static const PERP_SEX:String = "p_sex";
        public static const VICTIM_SEX:String = "v_sex";
        public static const WEAPON:String = "weap";
        public static const TIME_OF_DAY:String = "dayt";
        public static const BY_MONTH:String = "month";
        public static const BORO:String = "boro";
        public static const NORMALIZED_BORO:String = "normboro";
        public static const PERP_NUMBER:String = "p_num";
        public static const VICTIM_NUMBER:String = "v_num";
        public static const YEAR:String = "year";
        public static const MONTH:String = "month";
        public static const WHITE_PERP:String = "wp";
        public static const BLACK_PERP:String = "bp";
        public static const WHITE_VICTIM:String = "hp";
        public static const BLACK_VICTIM:String = "bv";
        public static const OLDER_VICTIM:String = "ov";
        public static const YOUNGER_VICTIM:String = "yv";
        public static const INCIDENT_VIEW:String = "IncidentView";
        public static const PRECINCT_VIEW:String = "precinct";
        public static const ALL_VIEW:String = "AllView";
        public static const PERP_RACE_VIEW:String = "PerpView";
        public static const VICTIM_RACE_VIEW:String = "VictimRaceView";
        public static const PERP_AGE_VIEW:String = "PerpAgeView";
        public static const VICTIM_AGE_VIEW:String = "VictimAgeView";
        public static const BOTH_AGE_VIEW:String = "bav";
        public static const WEAPON_VIEW:String = "WeaponView";
        public static const BORO_VIEW:String = "BoroView";
        public static const VICTIM_SEX_VIEW:String = "VictimSexView";
        public static const PERP_SEX_VIEW:String = "PerpSexView";
        public static const TIME_VIEW:String = "TimeView";
        public static const CUSTOM_VIEW:String = "cust";
        public static const CUSTOM_1_VIEW:String = "cust1";
        public static const CUSTOM_2_VIEW:String = "cust2";
        public static const CUSTOM_3_VIEW:String = "cust3";
        public static const SAT_MATRIX_1:Array = [0.18920894, 0.30037326, 0.0404178, 0, 154.925, 0.15210894, 0.33747326, 0.0404178, 0, 154.925, 0.15210894, 0.30037326, 0.0775178, 0, 154.925, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1];
        public static const SAT_MATRIX_2:Array = [0.21485988, 0.27776452, 0.0373756, 0, 144.325, 0.14065988, 0.35196452, 0.0373756, 0, 144.325, 0.14065988, 0.27776452, 0.1115756, 0, 144.325, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1];
        public static const STREETS_MATRIX_2:Array = [];
        public static const MAP_MATRIX_1:Array = [0.28079742, 0.39592718, 0.0532754, 0, 75.545, 0.20049742, 0.47622718, 0.0532754, 0, 75.545, 0.20049742, 0.39592718, 0.1335754, 0, 75.545, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1];
        private static const _popEstimates:Object = {
            citywide:[19230877, 19301113, 19336376, 19367028, 19429316, 19490297],
            Bronx:[1354935, 1359751, 1364566, 1371353, 1385122, 1391903],
            Brooklyn:[2483164, 2497859, 2511408, 2523047, 2539206, 2556598],
            Manhattan:[1576621, 1590911, 1606275, 1612630, 1625251, 1634795],
            Queens:[2244238, 2250718, 2256576, 2264661, 2277779, 2293007],
            Staten Island:[466539, 471112, 475014, 478876, 482854, 487407]
        };

        public static var LAST_YEAR:int = 2010;
        public static var SLIDER_YEARS:Array;
        public static var SLIDER_YEAR_LABELS:Array;
        public static var CHART_YEARS:Array;
        public static var CHART_YEAR_LABELS:Array;
        public static var SELECTION_FIELD:String = "_custom_view";
        public static var ZOOM_LEVELS:int = 6;

        private var _dataHome:String = "data/";

        public static function getBoroPopulations(_arg1:Array, _arg2:int):Array{
            var _local7:int;
            var _local8:String;
            var _local3:Array = [0, 0, 0, 0, 0];
            var _local4:int = _arg2;
            var _local5:int = _arg2;
            if (_arg2 == 0){
                _local5 = 2003;
                _local4 = 2008;
            };
            var _local6:int = _local5;
            while (_local6 <= _local4) {
                _local7 = 0;
                while (_local7 < _arg1.length) {
                    _local8 = _arg1[_local7];
                    _local3[_local7] = (_local3[_local7] + getBoroPopulation(_local8, _local6));
                    _local7++;
                };
                _local6++;
            };
            return (_local3);
        }
        public static function getBoroPopulation(_arg1:String, _arg2:int):Number{
            var _local3:Array = _popEstimates[_arg1];
            if (!_local3){
                return (0);
            };
            var _local4:int = (_arg2 - 2003);
            if (_local4 >= _local3.length){
                _local4 = (_local3.length - 1);
            };
            return (_local3[_local4]);
        }

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class TextInput_disabledSkin extends MovieClip {

    }
}//package 
﻿package mx.utils {
    import flash.utils.*;

    public class Base64Encoder {

        private static const ALPHABET:Array = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "+", "/"];

        private var _output:String = "";
        private var _work:Array;
        private var _line:uint = 0;
        private var _count:uint = 0;

        public function Base64Encoder(){
            _output = "";
            _work = [0, 0, 0];
            _count = 0;
            _line = 0;
            super();
        }
        public function flush():String{
            var _local1:String;
            if (_count > 0){
                encodeBlock();
            };
            _local1 = drain();
            _count = 0;
            _line = 0;
            _work[0] = 0;
            _work[1] = 0;
            _work[2] = 0;
            return (_local1);
        }
        public function encodeBytes(_arg1:ByteArray, _arg2:uint=0, _arg3:uint=0):void{
            var _local4:uint;
            var _local5:uint;
            if (_arg3 == 0){
                _arg3 = _arg1.length;
            };
            _local4 = _arg1.position;
            _arg1.position = _arg2;
            _local5 = _arg2;
            while (_local5 < _arg3) {
                _work[_count] = _arg1[_local5];
                _count++;
                if ((((_count == _work.length)) || ((((_arg2 + _arg3) - _local5) == 1)))){
                    encodeBlock();
                    _count = 0;
                    _work[0] = 0;
                    _work[1] = 0;
                    _work[2] = 0;
                };
                _local5++;
            };
            _arg1.position = _local4;
        }
        public function encode(_arg1:String, _arg2:uint=0, _arg3:uint=0):void{
            var _local4:uint;
            if (_arg3 == 0){
                _arg3 = _arg1.length;
            };
            _local4 = _arg2;
            while (_local4 < (_arg2 + _arg3)) {
                _work[_count] = _arg1.charCodeAt(_local4);
                _count++;
                if ((((_count == _work.length)) || ((((_arg2 + _arg3) - _local4) == 1)))){
                    encodeBlock();
                    _count = 0;
                    _work[0] = 0;
                    _work[1] = 0;
                    _work[2] = 0;
                };
                _local4++;
            };
        }
        private function encodeBlock():void{
            _output = (_output + ALPHABET[((_work[0] & 0xFF) >> 2)]);
            _output = (_output + ALPHABET[(((_work[0] & 3) << 4) | ((_work[1] & 240) >> 4))]);
            if (_count > 1){
                _output = (_output + ALPHABET[(((_work[1] & 15) << 2) | ((_work[2] & 192) >> 6))]);
            } else {
                _output = (_output + "=");
            };
            if (_count > 2){
                _output = (_output + ALPHABET[(_work[2] & 63)]);
            } else {
                _output = (_output + "=");
            };
            if ((_line = (_line + 4)) == 76){
                _output = (_output + "\n");
                _line = 0;
            };
        }
        public function drain():String{
            var _local1:String;
            _local1 = _output.toString();
            _output = "";
            return (_local1);
        }

    }
}//package mx.utils 
﻿package sjc.tests {
    import flash.utils.*;

    public class Watch {

        private static var _time:Number = 0;
        private static var _timeElapsed:Number = 0;
        private static var _index:Number = 0;
        private static var _running:Boolean;

        public static function start(_arg1:String=""){
            if (!_running){
                _running = true;
                _time = getTimer();
                _index++;
            };
        }
        public static function stop(_arg1:String=""):Number{
            if (_running){
                _timeElapsed = (getTimer() - _time);
                _running = false;
            };
            return ((_timeElapsed / 1000));
        }
        public static function get timeElapsed():Number{
            return (_timeElapsed);
        }

    }
}//package sjc.tests 
﻿package sjc.ui.buttons {
    import flash.display.*;
    import flash.events.*;
    import sjc.utils.*;

    public class ButtonSet extends Sprite {

        private var _style:ButtonStyle;
        private var _layout:ButtonLayout;
        private var _type:String;
        private var _labels:Array;
        private var _buttons:Array;
        private var _selected:Array;
        private var _defaultSelected:int = 0;
        private var _unselected:Array;
        private var _lastChanged:Number;

        public function ButtonSet(_arg1:Array, _arg2:ButtonStyle, _arg3:ButtonLayout, _arg4:int=0, _arg5:String="radio"){
            this._buttons = [];
            this._selected = [];
            this._unselected = [];
            this._style = _arg2;
            this._layout = _arg3;
            this._labels = _arg1;
            this._type = _arg5;
            this._defaultSelected = _arg4;
            this.createButtons();
            this.positionButtons();
            this.select(this._buttons[this._defaultSelected]);
        }
        public function createButtons():void{
            var _local2:Button;
            var _local1:int;
            while (_local1 < this._labels.length) {
                _local2 = new Button(this._style, this._labels[_local1], this._layout.minWidth, this._layout.minHeight);
                _local2.addEventListener(MouseEvent.CLICK, this.onButtonClick);
                this._buttons.push(_local2);
                this.addChild(_local2);
                _local1++;
            };
        }
        public function positionButtons():void{
            var _local2:Number;
            var _local3:Number;
            var _local4:Number;
            var _local1:int;
            while (_local1 < this._buttons.length) {
                switch (this._layout.align){
                    case "horizontal":
                        this._buttons[_local1].x = ((this._layout.minWidth + this._layout.padding) * _local1);
                        _local2 = (this._buttons.length * this._layout.minWidth);
                        if (this._layout.tabLineLength > _local2){
                            if (this._layout.tabLinePosition == "t"){
                                _local3 = 0;
                            } else {
                                _local3 = this._layout.minHeight;
                            };
                            this.graphics.lineStyle(1, Colors.LTGREY, 1);
                            this.graphics.moveTo(_local2, _local3);
                            this.graphics.lineTo(this._layout.tabLineLength, _local3);
                        };
                        break;
                    case "vertical":
                        this._buttons[_local1].y = ((this._layout.minHeight + this._layout.padding) * _local1);
                        _local2 = (this._buttons.length * this._layout.minHeight);
                        if (this._layout.tabLineLength > _local2){
                            if (this._layout.tabLinePosition == "l"){
                                _local4 = 0;
                            } else {
                                _local4 = this._layout.minWidth;
                            };
                            this.graphics.lineStyle(1, Colors.LTGREY, 1);
                            this.graphics.moveTo(_local4, _local2);
                            this.graphics.lineTo(_local4, this._layout.tabLineLength);
                        };
                        break;
                };
                if (this._layout.separator){
                };
                _local1++;
            };
        }
        public function onButtonClick(_arg1:Event):void{
            this.select(_arg1.target);
        }
        public function select(_arg1:Object):void{
            var btn:* = _arg1;
            this._lastChanged = this.getButtonId(btn);
            if (this._type == "radio"){
                if (btn != this._selected[0]){
                    try {
                        this._selected[0].selected = false;
                        this._selected[0].buttonMode = true;
                    } catch(e:Error) {
                    };
                    btn.selected = true;
                    btn.buttonMode = false;
                    this._selected[0] = btn;
                    dispatchEvent(new Event("change"));
                };
            } else {
                if ((this._type = "checkbox")){
                };
            };
        }
        public function clearSelection(){
            var _local1:Button;
            for each (_local1 in this._selected) {
                _local1.selected = false;
                _local1.buttonMode = true;
            };
            this._selected = [];
        }
        public function getButtonId(_arg1:Object):int{
            var _local2:Number = -1;
            var _local3:int;
            while (_local3 < this._buttons.length) {
                if (this._buttons[_local3] == _arg1){
                    _local2 = _local3;
                };
                _local3++;
            };
            return (_local2);
        }
        public function getButtonById(_arg1:Number):Button{
            return (this._buttons[_arg1]);
        }
        public function getButtonByLabel(_arg1:String):Button{
            var _local2:Number = -1;
            var _local3:int;
            while (_local3 < this._labels.length) {
                if (StringUtils.looseCompare(_arg1, this._labels[_local3])){
                    _local2 = _local3;
                };
                _local3++;
            };
            if (_local2 < 0){
                return (null);
            };
            return (this._buttons[_local2]);
        }
        public function selectNext():void{
        }
        public function selectPrevious():void{
        }
        public function get labels():Array{
            return (this._labels);
        }
        public function get buttons():Array{
            return (this._buttons);
        }
        public function get lastChanged():Number{
            return (this._lastChanged);
        }

    }
}//package sjc.ui.buttons 
﻿package sjc.ui.buttons {

    public class ButtonLayout {

        private var _align:String = "horizontal";
        private var _padding:Number = 10;
        private var _separator:Boolean = true;
        private var _tabLineLength:Number = 0;
        private var _tabLinePosition:String = "b";
        private var _minWidth:Number = 100;
        private var _minHeight:Number = 30;

        public function get align():String{
            return (this._align);
        }
        public function set align(_arg1:String):void{
            if (_arg1 !== this._align){
                this._align = _arg1;
            };
        }
        public function get padding():Number{
            return (this._padding);
        }
        public function set padding(_arg1:Number):void{
            if (_arg1 !== this._padding){
                this._padding = _arg1;
            };
        }
        public function get minWidth():Number{
            return (this._minWidth);
        }
        public function set minWidth(_arg1:Number):void{
            if (_arg1 !== this._minWidth){
                this._minWidth = _arg1;
            };
        }
        public function get minHeight():Number{
            return (this._minHeight);
        }
        public function set minHeight(_arg1:Number):void{
            if (_arg1 !== this._minHeight){
                this._minHeight = _arg1;
            };
        }
        public function get separator():Boolean{
            return (this._separator);
        }
        public function set separator(_arg1:Boolean):void{
            if (_arg1 !== this._separator){
                this._separator = _arg1;
            };
        }
        public function get tabLineLength():Number{
            return (this._tabLineLength);
        }
        public function set tabLineLength(_arg1:Number):void{
            if (_arg1 !== this._tabLineLength){
                this._tabLineLength = _arg1;
            };
        }
        public function get tabLinePosition():String{
            return (this._tabLinePosition);
        }
        public function set tabLinePosition(_arg1:String):void{
            if (_arg1 !== this._tabLinePosition){
                this._tabLinePosition = _arg1;
            };
        }

    }
}//package sjc.ui.buttons 
﻿package sjc.ui.buttons {
    import flash.display.*;
    import flash.geom.*;
    import sjc.utils.*;
    import sjc.ui.*;
    import gs.*;

    public class ButtonState extends Sprite {

        private var _bg:Sprite;
        private var _fg:Sprite;
        private var _style:Object;
        private var _label:String;
        private var _hitWidth:Number;
        private var _hitHeight:Number;
        private var _stf:SexyTextField;

        public function ButtonState(_arg1:String, _arg2:Number, _arg3:Number, _arg4:Object){
            this._style = _arg4;
            this._hitWidth = ((_arg4.minWidth) ? _arg4.minWidth : _arg2);
            this._hitHeight = _arg3;
            this._label = _arg1;
            this._bg = new Sprite();
            this._fg = new Sprite();
            this.drawBg();
            this.drawText();
            this.addChild(this._bg);
            this.addChild(this._fg);
        }
        public function drawBg():void{
            this._bg.graphics.beginFill(this._style.bgColor, this._style.bgAlpha);
            if (this._style.roundedCorners == 0){
                this._bg.graphics.drawRect(0, 0, this._hitWidth, this._hitHeight);
            } else {
                this._bg.graphics.lineStyle(this._style.borderWidth, this._style.borderColor, 1, true);
                this._bg.graphics.drawRoundRect(0, 0, this._hitWidth, this._hitHeight, this._style.roundedCorners);
            };
            this._bg.graphics.endFill();
            this._bg.graphics.lineStyle(this._style.borderWidth, this._style.borderColor, 1, true);
            var _local1:int;
            while (_local1 < this._style.borderCoverage.length) {
                switch (this._style.borderCoverage.charAt(_local1)){
                    case "t":
                        this._bg.graphics.moveTo(0, 0);
                        this._bg.graphics.lineTo(this._hitWidth, 0);
                        break;
                    case "r":
                        this._bg.graphics.moveTo(this._hitWidth, 0);
                        this._bg.graphics.lineTo(this._hitWidth, this._hitHeight);
                        break;
                    case "b":
                        this._bg.graphics.moveTo(this._hitWidth, this._hitHeight);
                        this._bg.graphics.lineTo(0, this._hitHeight);
                        break;
                    case "l":
                        this._bg.graphics.moveTo(0, 0);
                        this._bg.graphics.lineTo(0, this._hitHeight);
                        break;
                };
                _local1++;
            };
        }
        public function drawText():void{
            this._stf = new SexyTextField();
            this._stf.underline = this._style.textUnderline;
            this._stf.color = this._style.textColor;
            this._stf.bold = this._style.textBold;
            this._stf.align = this._style.textAlign;
            this._stf.font = this._style.font;
            this._stf.size = this._style.textSize;
            this._stf.verticalAlign = "middle";
            switch (this._style.textTransform){
                case "none":
                    this._stf.text = this._label;
                    break;
                case "uppercase":
                    this._stf.text = this._label.toUpperCase();
                    break;
            };
            this._stf.y = (this._hitHeight / 2);
            this._stf.x = ((this._hitHeight / 2) - (this._style.textSize / 2));
            this._fg.addChild(this._stf);
        }
        public function get style():Object{
            return (this._style);
        }
        public function set style(_arg1:Object):void{
            if (_arg1 !== this._style){
                this._style = _arg1;
            };
        }

    }
}//package sjc.ui.buttons 
﻿package sjc.ui.buttons {
    import flash.display.*;
    import flash.events.*;
    import sjc.utils.*;
    import sjc.ui.*;
    import gs.*;

    public class Button extends Sprite {

        private var _style:ButtonStyle;
        private var _up:ButtonState;
        private var _over:ButtonState;
        private var _down:ButtonState;
        private var _downOver:ButtonState;
        private var _off:ButtonState;
        private var _currentButtonState;
        private var _selected:Boolean = false;
        private var _isMouseOver:Boolean = false;
        private var _states:Array;
        private var _label:String = "";
        private var _hitWidth:Number = 70;
        private var _hitHeight:Number = 18;
        private var _hitArea:Sprite;
        private var _autoSize:Boolean = false;

        public function Button(_arg1:ButtonStyle, _arg2:String, _arg3:Number, _arg4:Number){
            this.buttonMode = true;
            this.mouseChildren = false;
            this.mouseEnabled = true;
            this._label = _arg2;
            this._hitWidth = _arg3;
            this._hitHeight = _arg4;
            this._style = _arg1;
            this.drawStates();
            this._currentButtonState = this._up;
            this._up.visible = true;
            this.addEventListener(MouseEvent.ROLL_OVER, this.rollOver);
            this.addEventListener(MouseEvent.ROLL_OUT, this.rollOut);
        }
        public function drawStates():void{
            try {
                this.removeChild(this._up);
                this.removeChild(this._over);
                this.removeChild(this._down);
                this.removeChild(this._downOver);
                this.removeChild(this._off);
                this.removeChild(this._hitArea);
            } catch(e:Error) {
            };
            this._up = new ButtonState(this._label, this._hitWidth, this._hitHeight, this._style.up);
            this._over = new ButtonState(this._label, this._hitWidth, this._hitHeight, this._style.over);
            this._down = new ButtonState(this._label, this._hitWidth, this._hitHeight, this._style.down);
            this._downOver = new ButtonState(this._label, this._hitWidth, this._hitHeight, this._style.downOver);
            this._off = new ButtonState(this._label, this._hitWidth, this._hitHeight, this._style.off);
            this._hitArea = new Sprite();
            this._hitArea.graphics.beginFill(0, 0);
            this._hitArea.graphics.drawRect(0, 0, this._hitWidth, this._hitHeight);
            this._hitArea.graphics.endFill();
            this.addChild(this._up);
            this.addChild(this._over);
            this.addChild(this._down);
            this.addChild(this._downOver);
            this.addChild(this._off);
            this.addChild(this._hitArea);
            this._up.visible = false;
            this._over.visible = false;
            this._down.visible = false;
            this._downOver.visible = false;
            this._off.visible = false;
            this._hitArea.visible = false;
        }
        public function toggleSelected():void{
            this._selected = !(this._selected);
            this.updateSelected();
        }
        public function updateSelected():void{
            if (this._selected){
                if (this._isMouseOver){
                    this.setDownOver();
                } else {
                    this.setDown();
                };
            } else {
                if (this._isMouseOver){
                    this.setOver();
                } else {
                    this.setUp();
                };
            };
        }
        public function rollOver(_arg1:Event=null):void{
            this._isMouseOver = true;
            if (this._selected){
                this.setDownOver();
            } else {
                this.setOver();
            };
        }
        public function rollOut(_arg1:Event=null):void{
            this._isMouseOver = false;
            if (this._selected){
                this.setDown();
            } else {
                this.setUp();
            };
        }
        public function setUp(_arg1:Event=null):void{
            this._currentButtonState.visible = false;
            this._up.visible = true;
            this._currentButtonState = this._up;
        }
        public function setDown(_arg1:Event=null):void{
            this._currentButtonState.visible = false;
            this._down.visible = true;
            this._currentButtonState = this._down;
        }
        public function setOver(_arg1:Event=null):void{
            this._currentButtonState.visible = false;
            this._over.visible = true;
            this._currentButtonState = this._over;
        }
        public function setOff(_arg1:Event=null):void{
            this._currentButtonState.visible = false;
            this._off.visible = true;
            this._currentButtonState = this._off;
        }
        public function setDownOver(_arg1:Event=null):void{
            this._currentButtonState.visible = false;
            this._downOver.visible = true;
            this._currentButtonState = this._downOver;
        }
        public function get label():String{
            return (this._label);
        }
        public function set label(_arg1:String):void{
            if (_arg1 !== this._label){
                this._label = _arg1;
            };
        }
        public function get states():Array{
            return (this._states);
        }
        public function get style():ButtonStyle{
            return (this._style);
        }
        public function set style(_arg1:ButtonStyle):void{
            if (_arg1 !== this._style){
                this._style = _arg1;
            };
        }
        public function get hitWidth():Number{
            return (this._hitWidth);
        }
        public function set hitWidth(_arg1:Number):void{
            if (_arg1 !== this._hitWidth){
                this._hitWidth = _arg1;
            };
        }
        public function get hitHeight():Number{
            return (this._hitHeight);
        }
        public function set hitHeight(_arg1:Number):void{
            if (_arg1 !== this._hitHeight){
                this._hitHeight = _arg1;
            };
        }
        public function get selected():Boolean{
            return (this._selected);
        }
        public function set selected(_arg1:Boolean):void{
            if (_arg1 !== this._selected){
                this._selected = _arg1;
                this.updateSelected();
            };
        }

    }
}//package sjc.ui.buttons 
﻿package sjc.ui.buttons {
    import flash.display.*;
    import sjc.utils.*;

    public class ButtonStyle {

        public static var STYLE_OPTIONS:Array = ["borderWidth", "borderColor", "borderCoverage", "roundedCorners", "minWidth", "bgColor", "bgAlpha", "textColor", "textSize", "textAlign", "textUnderline", "textBold", "font", "textTransform", "icon"];

        private var _up:Object;
        private var _over:Object;
        private var _down:Object;
        private var _downOver:Object;
        private var _off:Object;

        public function ButtonStyle(_arg1:Object){
            var opts:* = _arg1;
            super();
            try {
                this._up = opts.up;
                this.verifyUp(this._up);
            } catch(e:Error) {
            };
            if (opts.over){
                this._over = opts.over;
            } else {
                this._over = this._up;
            };
            if (opts.down){
                this._down = opts.down;
            } else {
                this._down = this._up;
            };
            if (opts.downOver){
                this._downOver = opts.downOver;
            } else {
                this._downOver = this._down;
            };
            if (opts.off){
                this._off = opts.off;
            } else {
                this._off = this._up;
            };
            this.verifyOthers(this._over);
            this.verifyOthers(this._down);
            this.verifyDownOver(this._downOver);
            this.verifyOthers(this._off);
        }
        public function verifyUp(_arg1:Object):void{
            if (_arg1.borderWidth){
            } else {
                _arg1.borderWidth = 1;
            };
            if (_arg1.borderColor){
            } else {
                _arg1.borderColor = Colors.LTGREY;
            };
            if (_arg1.borderCoverage){
            } else {
                _arg1.borderCoverage = "tblr";
            };
            if (_arg1.roundedCorners){
            } else {
                _arg1.roundedCorners = 0;
            };
            if (_arg1.bgColor){
            } else {
                _arg1.bgColor = Colors.TABS;
            };
            if (_arg1.bgAlpha !== undefined){
            } else {
                _arg1.bgAlpha = 1;
            };
            if (_arg1.minWidth !== undefined){
            } else {
                _arg1.minWidth = 0;
            };
            if (_arg1.textColor){
            } else {
                _arg1.textColor = Colors.BLACK;
            };
            if (_arg1.textSize){
            } else {
                _arg1.textSize = 9;
            };
            if (_arg1.textAlign){
            } else {
                _arg1.textAlign = "left";
            };
            if (_arg1.textUnderline){
            } else {
                _arg1.textUnderline = false;
            };
            if (_arg1.textBold){
            } else {
                _arg1.textBold = false;
            };
            if (_arg1.font){
            } else {
                _arg1.font = "Arial";
            };
            if (_arg1.textTransform){
            } else {
                _arg1.textTransform = "none";
            };
            if (_arg1.icon){
            } else {
                _arg1.icon = null;
            };
        }
        public function verifyDownOver(_arg1:Object):void{
            if (_arg1.borderWidth){
            } else {
                _arg1.borderWidth = this._down.borderWidth;
            };
            if (_arg1.borderColor){
            } else {
                _arg1.borderColor = this._down.borderColor;
            };
            if (_arg1.borderCoverage){
            } else {
                _arg1.borderCoverage = this._down.borderCoverage;
            };
            if (_arg1.roundedCorners){
            } else {
                _arg1.roundedCorners = this._down.roundedCorners;
            };
            if (_arg1.bgColor){
            } else {
                _arg1.bgColor = this._down.bgColor;
            };
            if (_arg1.bgAlpha !== undefined){
            } else {
                _arg1.bgAlpha = this._down.bgAlpha;
            };
            if (_arg1.minWidth !== undefined){
            } else {
                _arg1.minWidth = this._down.minWidth;
            };
            if (_arg1.textColor){
            } else {
                _arg1.textColor = this._down.textColor;
            };
            if (_arg1.textSize){
            } else {
                _arg1.textSize = this._down.textSize;
            };
            if (_arg1.textAlign){
            } else {
                _arg1.textAlign = this._down.textAlign;
            };
            if (_arg1.textUnderline){
            } else {
                _arg1.textUnderline = this._down.textUnderline;
            };
            if (_arg1.textBold){
            } else {
                _arg1.textBold = this._down.textBold;
            };
            if (_arg1.font){
            } else {
                _arg1.font = this._down.font;
            };
            if (_arg1.textTransform){
            } else {
                _arg1.textTransform = this._down.textTransform;
            };
            if (_arg1.icon){
            } else {
                _arg1.icon = this._down.icon;
            };
        }
        public function verifyOthers(_arg1:Object):void{
            if (_arg1.borderWidth){
            } else {
                _arg1.borderWidth = this._up.borderWidth;
            };
            if (_arg1.borderColor){
            } else {
                _arg1.borderColor = this._up.borderColor;
            };
            if (_arg1.borderCoverage){
            } else {
                _arg1.borderCoverage = this._up.borderCoverage;
            };
            if (_arg1.roundedCorners){
            } else {
                _arg1.roundedCorners = this._up.roundedCorners;
            };
            if (_arg1.bgColor){
            } else {
                _arg1.bgColor = this._up.bgColor;
            };
            if (_arg1.bgAlpha !== undefined){
            } else {
                _arg1.bgAlpha = this._up.bgAlpha;
            };
            if (_arg1.minWidth !== undefined){
            } else {
                _arg1.minWidth = this._up.minWidth;
            };
            if (_arg1.textColor){
            } else {
                _arg1.textColor = this._up.textColor;
            };
            if (_arg1.textSize){
            } else {
                _arg1.textSize = this._up.textSize;
            };
            if (_arg1.textAlign){
            } else {
                _arg1.textAlign = this._up.textAlign;
            };
            if (_arg1.textUnderline){
            } else {
                _arg1.textUnderline = this._up.textUnderline;
            };
            if (_arg1.textBold){
            } else {
                _arg1.textBold = this._up.textBold;
            };
            if (_arg1.font){
            } else {
                _arg1.font = this._up.font;
            };
            if (_arg1.textTransform){
            } else {
                _arg1.textTransform = this._up.textTransform;
            };
            if (_arg1.icon){
            } else {
                _arg1.icon = this._up.icon;
            };
        }
        public function get up():Object{
            return (this._up);
        }
        public function set up(_arg1:Object):void{
            if (_arg1 !== this._up){
                this._up = _arg1;
            };
        }
        public function get over():Object{
            return (this._over);
        }
        public function set over(_arg1:Object):void{
            if (_arg1 !== this._over){
                this._over = _arg1;
            };
        }
        public function get down():Object{
            return (this._down);
        }
        public function set down(_arg1:Object):void{
            if (_arg1 !== this._down){
                this._down = _arg1;
            };
        }
        public function get off():Object{
            return (this._off);
        }
        public function set off(_arg1:Object):void{
            if (_arg1 !== this._off){
                this._off = _arg1;
            };
        }
        public function get downOver():Object{
            return (this._downOver);
        }
        public function set downOver(_arg1:Object):void{
            if (_arg1 !== this._downOver){
                this._downOver = _arg1;
            };
        }

    }
}//package sjc.ui.buttons 
﻿package sjc.ui {
    import flash.display.*;
    import flash.text.*;

    public class SexyTextField extends Sprite {

        private var _size:Number = 9;
        private var _lineHeight:Number;
        private var _color:uint = 0;
        private var _font:String = "Arial";
        private var _bold:Boolean = false;
        private var _underline:Boolean = false;
        private var _tf:TextFormat;
        private var _autoSize:String = "left";
        private var _align:String = "left";
        private var _verticalAlign:String = "top";
        private var _text:String = "";
        private var _textField:TextField;

        public function SexyTextField(){
            this._textField = new TextField();
            this._tf = new TextFormat();
            this._textField.defaultTextFormat = this._tf;
            this._textField.selectable = false;
            this._textField.autoSize = TextFieldAutoSize.LEFT;
            this.addChild(this._textField);
            this.mouseEnabled = false;
        }
        public function update():void{
            switch (this._align.toLowerCase()){
                case "left":
                    this._tf.align = TextFormatAlign.LEFT;
                    this._textField.autoSize = TextFieldAutoSize.LEFT;
                    break;
                case "right":
                    this._tf.align = TextFormatAlign.RIGHT;
                    this._textField.autoSize = TextFieldAutoSize.RIGHT;
                    break;
                case "center":
                    this._tf.align = TextFormatAlign.CENTER;
                    this._textField.autoSize = TextFieldAutoSize.CENTER;
                    break;
            };
            this._tf.font = this._font;
            this._tf.size = this._size;
            this._tf.underline = this._underline;
            this._tf.color = this._color;
            this._tf.bold = this._bold;
            this._textField.defaultTextFormat = this._tf;
            this._textField.text = this._text;
            var _local1:Number = this._textField.width;
            this._textField.autoSize = TextFieldAutoSize.NONE;
            this._textField.width = (_local1 + 2);
            switch (this._align.toLowerCase()){
                case "left":
                    this._textField.x = 0;
                    break;
                case "right":
                    this._textField.x = -(this._textField.width);
                    break;
                case "center":
                    this._textField.x = (-(this._textField.width) / 2);
                    break;
            };
            switch (this._verticalAlign.toLowerCase()){
                case "top":
                    this._textField.y = 0;
                    break;
                case "bottom":
                    this._textField.y = -(this._textField.height);
                    break;
                case "middle":
                    this._textField.y = (-(this._textField.height) / 2);
                    break;
            };
        }
        public function get bold():Boolean{
            return (this._bold);
        }
        public function set bold(_arg1:Boolean):void{
            if (_arg1 !== this._bold){
                this._bold = _arg1;
                this.update();
            };
        }
        public function get size():Number{
            return (this._size);
        }
        public function set size(_arg1:Number):void{
            if (_arg1 !== this._size){
                this._size = _arg1;
                this.update();
            };
        }
        public function get text():String{
            return (this._text);
        }
        public function set text(_arg1:String):void{
            if (_arg1 !== this.text){
                this._text = _arg1;
                this.update();
            };
        }
        public function get align():String{
            return (this._align);
        }
        public function set align(_arg1:String):void{
            this._align = _arg1;
            this.update();
        }
        public function get verticalAlign():String{
            return (this._verticalAlign);
        }
        public function set verticalAlign(_arg1:String):void{
            if (_arg1 !== this._verticalAlign){
                this._verticalAlign = _arg1;
                this.update();
            };
        }
        public function get color():uint{
            return (this._color);
        }
        public function set color(_arg1:uint):void{
            if (_arg1 !== this._color){
                this._color = _arg1;
                this.update();
            };
        }
        public function get underline():Boolean{
            return (this._underline);
        }
        public function set underline(_arg1:Boolean):void{
            if (_arg1 !== this._underline){
                this._underline = _arg1;
                this.update();
            };
        }
        public function get font():String{
            return (this._font);
        }
        public function set font(_arg1:String):void{
            if (_arg1 !== this._font){
                this._font = _arg1;
            };
        }

    }
}//package sjc.ui 
﻿package sjc.utils {
    import sjc.tests.*;

    public class StringUtils {

        public static function removeSpaces(_arg1:String):String{
            return (remove(_arg1, " "));
        }
        public static function underscore(_arg1:String):String{
            return (replace(_arg1, " ", "_"));
        }
        public static function stripNonLetters(_arg1:String):String{
            var _local2:RegExp = /[^\w]/g;
            _arg1 = _arg1.replace(_local2, "");
            return (_arg1);
        }
        public static function capWord(_arg1:String):String{
            return ((_arg1.charAt(0).toUpperCase() + _arg1.substr(1)));
        }
        public static function cleanVarName(_arg1:String):String{
            var _local2:RegExp = /\s/g;
            var _local3:RegExp = /[^\w]/g;
            _arg1 = StringUtils.trim(_arg1);
            if (_arg1.charAt(0) == "\""){
                _arg1 = _arg1.slice(1, -1);
            };
            _arg1 = _arg1.replace(_local2, "_");
            _arg1 = _arg1.replace(_local3, "");
            return (_arg1.toLowerCase());
        }
        public static function looseCompare(_arg1:String, _arg2:String):Boolean{
            _arg1 = remove(stripNonLetters(removeSpaces(_arg1.toLowerCase())), "_");
            _arg2 = remove(stripNonLetters(removeSpaces(_arg2.toLowerCase())), "_");
            if (_arg1 == _arg2){
                return (true);
            };
            return (false);
        }
        public static function trim(_arg1:String):String{
            return (StringUtils.ltrim(StringUtils.rtrim(_arg1)));
        }
        public static function ltrim(_arg1:String):String{
            var _local2:Number = _arg1.length;
            var _local3:Number = 0;
            while (_local3 < _local2) {
                if (_arg1.charCodeAt(_local3) > 32){
                    return (_arg1.substring(_local3));
                };
                _local3++;
            };
            return ("");
        }
        public static function rtrim(_arg1:String):String{
            var _local2:Number = _arg1.length;
            var _local3:Number = _local2;
            while (_local3 > 0) {
                if (_arg1.charCodeAt((_local3 - 1)) > 32){
                    return (_arg1.substring(0, _local3));
                };
                _local3--;
            };
            return ("");
        }
        public static function beginsWith(_arg1:String, _arg2:String):Boolean{
            return ((_arg2 == _arg1.substring(0, _arg2.length)));
        }
        public static function endsWith(_arg1:String, _arg2:String):Boolean{
            return ((_arg2 == _arg1.substring((_arg1.length - _arg2.length))));
        }
        public static function remove(_arg1:String, _arg2:String):String{
            return (StringUtils.replace(_arg1, _arg2, ""));
        }
        public static function replace(_arg1:String, _arg2:String, _arg3:String):String{
            var _local9:Number;
            var _local4:String = new String();
            var _local5:Boolean;
            var _local6:Number = _arg1.length;
            var _local7:Number = _arg2.length;
            var _local8:Number = 0;
            for (;_local8 < _local6;_local8++) {
                if (_arg1.charAt(_local8) == _arg2.charAt(0)){
                    _local5 = true;
                    _local9 = 0;
                    while (_local9 < _local7) {
                        if (_arg1.charAt((_local8 + _local9)) != _arg2.charAt(_local9)){
                            _local5 = false;
                            break;
                        };
                        _local9++;
                    };
                    if (_local5){
                        _local4 = (_local4 + _arg3);
                        _local8 = (_local8 + (_local7 - 1));
                        continue;
                    };
                };
                _local4 = (_local4 + _arg1.charAt(_local8));
            };
            return (_local4);
        }
        public static function test():void{
            Watch.start();
            if (looseCompare("test string", "test_string") == true){
            };
            if (looseCompare("dont", "don,t") == true){
            };
            if (cleanVarName("test var()/-") == "test_var"){
            };
            if (removeSpaces("test var") == "testvar"){
            };
            if (underscore("test var") == "test_var"){
            };
            if (stripNonLetters("test var") == "testvar"){
            };
            if (capWord("test") == "Test"){
            };
            Watch.stop();
        }

    }
}//package sjc.utils 
﻿package sjc.utils {

    public class Colors {

        public static const TABS:uint = 15791349;
        public static const LINE:uint = 0xE2E2E2;
        public static const TEXT:uint = 0x666666;
        public static const TIME_STAMP:uint = 11016215;
        public static const ICONS:uint = 2579338;
        public static const LINKS:uint = 17014;
        public static const BLACK:uint = 1;
        public static const WHITE:uint = 0xFFFFFF;
        public static const GREY:uint = 0x666666;
        public static const LTGREY:uint = 0x999999;
        public static const EL_BLUE:uint = 4216469;
        public static const EL_LTBLUE:uint = 11784167;
        public static const EL_RED:uint = 11808816;
        public static const EL_LTRED:uint = 16623524;
        public static const EL_YELLOW:uint = 16509846;
        public static const EL_BLUE_STRIPES_FG:uint = 7440833;
        public static const EL_BLUE_STRIPES_BG:uint = 4876460;
        public static const EL_RED_STRIPES_FG:uint = 13985382;
        public static const EL_RED_STRIPES_BG:uint = 13121335;
        public static const EL_YELLOW_STRIPES_FG:uint = 15917713;
        public static const EL_YELLOW_STRIPES_BG:uint = 16509846;

    }
}//package sjc.utils 
﻿package {
    import flash.display.*;

    public dynamic class focusRectSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;
    import mb.data.*;
    import flash.text.*;
    import mb.projections.*;
    import com.google.maps.*;
    import com.google.maps.services.*;
    import flash.events.*;
    import mb.*;
    import mb.easing.*;
    import com.google.maps.interfaces.*;
    import flash.geom.*;
    import mb.importing.*;
    import mb.maps.*;
    import mb.text.*;
    import mb.placement.*;
    import mb.controls.*;
    import fl.managers.*;
    import sjc.ui.buttons.*;
    import mb.popups.*;
    import mb.google.*;
    import sjc.utils.*;
    import mb.browser.*;
    import flash.filters.*;
    import flash.external.*;
    import sjc.utils.draw.*;

    public class Homicides extends MovieClip {

        public static const GMAP_INIT_LEVEL:int = 11;

        private static var _panelViews:Object = {};

        public var colorPicker:ColorMatrixPicker;
        public var yearSlider_mc:SliderGroup;
        public var gmap_mc:MovieClip;
        public var blanket_mc:MovieClip;
        public var missingNote_txt:TextField;
        public var menuBg_mc:MovieClip;
        public var changeNote_txt:TextField;
        public var input_mc:MovieClip;
        public var zoomSlider_mc:MovieClip;
        public var homicideCount_txt:TextField;
        public var zoomSlider_mc_old:MovieClip;
        public var map_mc:MovieClip;
        public var homicidesLabel_txt:TextField;
        public var headerBg_mc:MovieClip;
        private var _incidents_data:PointDataTable;
        private var _victims_data:DataTable;
        private var _perps_data:DataTable;
        private var _homicidesLabelField:PlacedTextField;
        private var _homicidesValueField:PlacedTextField;
        private var _comparisonField:PlacedTextField;
        private var _changeNote:PlacedTextField;
        private var _missingField:PlacedTextField;
        private var _customViewIndex:Object;
        private var _tableMaker:HomicidesTable;
        private var _urlArgs:Object;
        private var _viewBtns:ButtonSet;
        private var _viewLabels:Array;
        private var _viewCodes:Array;
        private var _zoomedOut:Boolean = true;
        private var _gmap:GoogleMap;
        private var _map:HomicidesMap;
        private var _geocoder:ClientGeocoder;
        private var _fm:FocusManager;
        private var _minLevel:int = 1;
        private var _maxLevel:int = 6;
        private var _currLevel:int = -1;
        private var _colorPickerInit:Boolean = false;
        private var _mapStyle:String = "combo";
        private var _useTerrainMap:Boolean = true;
        private var _yearSlider:SliderController;
        private var _yearLabels:Array;
        private var _years:Array;
        private var _victimCountYears:Array;
        private var _year:int;
        private var _view:String;
        private var _zoomer:ZoomSlider;
        private var _activePanel:Sprite;
        private var _activeKey:Sprite;
        private var _defaultSearchFmt:TextFormat;
        private var _emptySearchFmt:TextFormat;
        private var _emptySearchStr:String = "Zoom to address or ZIP";
        private var _emptySearchHTML:String;
        private var _notFoundStr:String = "Address not found";
        private var _chartPopup:Popup;

        public function Homicides(){
            this._viewLabels = ["All homicides", "Month and time of day", "Race/ethnicity of victim", "Race/ethnicity of perpetrator", "Sex of victim", "Sex of perpetrator", "Age of victim", "Age of perpetrator", "Weapon used", "Borough"];
            this._viewCodes = [A.ALL_VIEW, A.TIME_VIEW, A.VICTIM_RACE_VIEW, A.PERP_RACE_VIEW, A.VICTIM_SEX_VIEW, A.PERP_SEX_VIEW, A.VICTIM_AGE_VIEW, A.PERP_AGE_VIEW, A.WEAPON_VIEW, A.BORO_VIEW, A.CUSTOM_1_VIEW];
            this._yearLabels = ["All years", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010"];
            this._years = [0, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010];
            this._emptySearchHTML = (("<font color='#999999'>" + this._emptySearchStr) + "</font>");
            super();
            this._defaultSearchFmt = new TextFormat(null, null, 0);
            this._emptySearchFmt = new TextFormat();
            this._emptySearchFmt.color = 0xCCCCCC;
            this._homicidesLabelField = new PlacedTextField(this.homicidesLabel_txt);
            this._homicidesValueField = new PlacedTextField(this.homicideCount_txt);
            this._missingField = new PlacedTextField(this.missingNote_txt);
            this._changeNote = new PlacedTextField(this.changeNote_txt);
            this._customViewIndex = {};
            _panelViews[A.ALL_VIEW] = {charts:[A.BY_YEAR]};
            _panelViews[A.BORO_VIEW] = {
                key:A.BORO,
                charts:[A.BORO, A.NORMALIZED_BORO]
            };
            _panelViews[A.WEAPON_VIEW] = {
                key:A.WEAPON,
                charts:[A.WEAPON]
            };
            _panelViews[A.PERP_RACE_VIEW] = {
                key:A.PERP_RACE,
                charts:[A.PERP_RACE]
            };
            _panelViews[A.VICTIM_RACE_VIEW] = {
                key:A.VICTIM_RACE,
                charts:[A.VICTIM_RACE]
            };
            _panelViews[A.VICTIM_SEX_VIEW] = {
                key:A.VICTIM_SEX,
                charts:[A.VICTIM_SEX]
            };
            _panelViews[A.PERP_SEX_VIEW] = {
                key:A.PERP_SEX,
                charts:[A.PERP_SEX]
            };
            _panelViews[A.VICTIM_AGE_VIEW] = {
                key:A.VICTIM_AGE,
                charts:[A.VICTIM_AGE]
            };
            _panelViews[A.PERP_AGE_VIEW] = {
                key:A.PERP_AGE,
                charts:[A.PERP_AGE]
            };
            _panelViews[A.TIME_VIEW] = {
                key:A.TIME_OF_DAY,
                charts:[A.TIME_OF_DAY, A.MONTH]
            };
            this._fm = new FocusManager(this);
            this._victims_data = new DataTable();
            this._perps_data = new DataTable();
            this._incidents_data = new PointDataTable("LAT", "LONG");
            var _local1 = "";
            this._victims_data.load(new TabDataLoader((A.VICTIMS_FILE + _local1), {nocache:true}));
            this._perps_data.load(new TabDataLoader((A.PERPETRATORS_FILE + _local1), {nocache:true}));
            this._incidents_data.load(new TabDataLoader((A.INCIDENTS_FILE + _local1), {nocache:true}));
            var _local2:Waiter = new Waiter();
            _local2.addEventListener(C.READY, this.handleDataLoad);
            _local2.waitFor(this._incidents_data);
            _local2.waitFor(this._victims_data);
            _local2.waitFor(this._perps_data);
            _local2.startWaiting();
            Layout.init(stage, 970, 570);
            Layout.addObject(this.zoomSlider_mc, C.RIGHT, C.TOP);
            Layout.addObject(this.input_mc, C.RIGHT, C.TOP);
            Layout.addObject(this.headerBg_mc, Layout.H_SCALE, C.TOP);
            Layout.addObject(this.menuBg_mc, C.LEFT, Layout.V_SCALE);
        }
        private function handleDataLoad(_arg1:Object){
            var _local4:Object;
            var _local5:String;
            var _local6:String;
            var _local2:int = HomicideData.getLatestYearFromIncidentsTable(this._incidents_data);
            if ((((_local2 < 2010)) || ((_local2 > 2015)))){
                _local2 = A.LAST_YEAR;
            };
            A.LAST_YEAR = _local2;
            A.SLIDER_YEARS = [0];
            A.SLIDER_YEAR_LABELS = ["All years"];
            A.CHART_YEARS = [];
            A.CHART_YEAR_LABELS = [];
            this._victimCountYears = [];
            var _local3:int = A.FIRST_YEAR;
            while (_local3 <= A.LAST_YEAR) {
                _local5 = String(_local3);
                _local6 = (((_local3 == A.LAST_YEAR)) ? _local5 : ("'" + _local5.substr(2, 2)));
                A.SLIDER_YEARS.push(_local3);
                A.CHART_YEARS.unshift(_local3);
                A.SLIDER_YEAR_LABELS.push(_local5);
                A.CHART_YEAR_LABELS.unshift(_local6);
                if (_local3 < A.LAST_YEAR){
                    this._victimCountYears.push(_local3);
                };
                _local3++;
            };
            this._yearLabels = A.SLIDER_YEAR_LABELS;
            this._years = A.SLIDER_YEARS;
            Analytics.init("Homicides", stage, false);
            this._urlArgs = Browser.getQueryVars();
            _local4 = {};
            _local4.show_precincts = !((this._urlArgs.precinct === undefined));
            HomicideData.filterPersonData(this._perps_data);
            HomicideData.filterPersonData(this._victims_data);
            HomicideData.filterIncidentsData(this._incidents_data);
            TableJoin.insertFields(this._incidents_data, this._victims_data, new Key("id"), new Key("incident_id"), ["year", "month", "boro", "time", A.F_RECENT_FLAG]);
            TableJoin.insertFields(this._incidents_data, this._perps_data, new Key("id"), new Key("incident_id"), ["year", A.F_RECENT_FLAG]);
            this._victims_data.indexOnField("incident_id", true);
            this._perps_data.indexOnField("incident_id", true);
            this._map = new HomicidesMap(this.map_mc.align_mc, this._incidents_data, this._victims_data, this._perps_data, _local4);
            this._map.map.navigation.addEventListener(C.NAVIGATE, this.onNavigate);
            this._map.map.addEventListener(C.READY, this.onMapReady);
            Layout.addMap(this._map.map);
            this.initZoom();
            this._tableMaker = new HomicidesTable(this._incidents_data, this._victims_data, this._perps_data);
            _local4 = {
                bg_fill_alpha:1,
                bg_stroke_weight:0,
                margins:[8, 8, 7, 8],
                use_dropshadow:false,
                bg_stroke_width:0,
                mouse_enabled:true
            };
            this._chartPopup = new Popup(_local4);
            addChild(this._chartPopup);
            this._chartPopup.x = (this.map_mc.x - 9);
            this._chartPopup.y = (this.map_mc.y - 6);
        }
        private function onMapReady(_arg1:Object){
            var _local3:Object;
            var _local7:int;
            var _local8:Record;
            Fader.hideObject(this.blanket_mc);
            var _local2:SliderGroup = this.yearSlider_mc;
            _local3 = {
                tic_color:0xFFFFFF,
                text_color:0xFFFFFF,
                tic_length:3,
                pointer_padding:18,
                tic_offset:3,
                label_offset:5
            };
            this._yearSlider = new SliderController(_local2.track, _local2.ptr, this._yearLabels, _local3);
            this._yearSlider.addEventListener(C.CHANGE, this.handleYearSliderChange);
            var _local4:Boolean;
            if (this._urlArgs.incident){
                _local7 = int(this._urlArgs.incident);
                if (_local7 != 0){
                    _local8 = this._incidents_data.getMatchingRecord("id", _local7);
                    if (((!(_local8.isNull)) && (!(isNaN(_local8.getNumber("LAT")))))){
                        _local4 = true;
                    };
                };
            };
            if (_local4){
                this.showIncident(_local7);
                this._viewCodes.unshift(A.INCIDENT_VIEW);
                this._viewLabels.unshift("Single incident");
            } else {
                if (this._urlArgs.precinct){
                    this._viewCodes.unshift(A.PRECINCT_VIEW);
                    this._viewLabels.unshift("Precinct view");
                    this._map.showPrecinct(this._urlArgs.precinct);
                };
            };
            var _local5 = 160;
            var _local6 = 24;
            this._viewBtns = this.initViewButtons(_local6, _local5, this._viewLabels);
            this._viewBtns.addEventListener("change", this.handleViewChange);
            this.setView(this._viewCodes[0]);
            _local3 = {
                type:GoogleMap.SATELLITE,
                blend_mode:null
            };
            this._gmap = new GoogleMap(_local3);
            this._gmap.init(this._map.map);
            this._gmap.addEventListener(C.READY, this.onGMapReady);
        }
        private function showIncident(_arg1:int){
            var _local3:int;
            this._map.showIncident(_arg1);
            var _local2:Record = this._incidents_data.getMatchingRecord("id", _arg1);
            if (!_local2.isNull){
                _local3 = _local2.getNumber("year");
                this.setInitialYear(_local3);
            };
        }
        private function setInitialYear(_arg1:int){
            this._year = _arg1;
            var _local2:int = this._years.indexOf(_arg1);
            if (_local2 != -1){
                this._yearSlider.setSliderIndex(_local2);
            };
        }
        private function handleYearSliderChange(_arg1:Object){
            Analytics.trackEventOnce("SliderUse");
            var _local2:int = this._yearSlider.selectedIndex;
            var _local3:int = this._years[_local2];
            this._year = _local3;
            this._map.showYear(_local3);
            this.updateChart(this._view, this._year);
        }
        private function updateHomicidesFields(_arg1:int){
            var _local10:String;
            var _local11:Array;
            var _local12:int;
            var _local13:int;
            var _local14:Number;
            var _local15:int;
            var _local16:int;
            var _local17:Array;
            var _local18:int;
            var _local19:int;
            var _local20:int;
            var _local2:Array = this._tableMaker.getVictimCountsByYear([_arg1]);
            var _local3:int = _local2[0];
            var _local4:String = Text.formatNumber(_local3);
            var _local5:Array = this._tableMaker.getMissingLocationByYear([_arg1]);
            var _local6:int = _local5[0];
            var _local7:String = ("Homicides " + (((_arg1 == 0)) ? ("2003-" + A.LAST_YEAR) : ("in " + _arg1)));
            if (_arg1 == A.RECENT_CODE){
                _local7 = "Homicides, past 30 days";
            };
            this._homicidesLabelField.text = _local7;
            this._homicidesValueField.text = _local4;
            var _local8 = "";
            if (_local6 > 0){
                _local10 = (((_local6 == 1)) ? " location" : " locations");
                _local8 = ((("Map does not show " + _local6) + _local10) + " that the police have not released.");
            };
            this._missingField.text = _local8;
            var _local9 = "";
            if (_arg1 == 0){
                _local11 = this._tableMaker.getVictimCountsByYear(this._victimCountYears);
                _local12 = 0;
                for each (_local13 in _local11) {
                    _local12 = (_local12 + _local13);
                };
                _local14 = Math.round((_local12 / this._victimCountYears.length));
                _local9 = ("Average homicides per year: " + _local14);
            } else {
                if (_arg1 == 2003){
                    _local15 = 614;
                    _local16 = 640;
                    _local9 = "36 more homicides than the previous year.";
                } else {
                    if ((((_arg1 > 2003)) && ((_arg1 < A.LAST_YEAR)))){
                        _local17 = this._tableMaker.getVictimCountsByYear([(_arg1 - 1)]);
                        _local18 = _local17[0];
                        _local19 = (_local3 - _local18);
                        if (_local19 > 0){
                            _local9 = (_local19 + " more homicides than the previous year.");
                        } else {
                            if (_local19 < 0){
                                _local9 = (Math.abs(_local19) + " fewer homicides than the previous year.");
                            };
                        };
                    } else {
                        if ((((_arg1 == A.LAST_YEAR)) || ((_arg1 == A.RECENT_CODE)))){
                            _local20 = (((_arg1 == A.LAST_YEAR)) ? A.LAST_YEAR_CODE : A.LAST_YEAR_RECENT_CODE);
                            _local17 = this._tableMaker.getVictimCountsByYear([_local20]);
                            _local18 = _local17[0];
                            _local19 = (_local3 - _local18);
                            if (_local19 > 0){
                                _local9 = (_local19 + " more homicides than the same period last year.");
                            } else {
                                if (_local19 < 0){
                                    _local9 = (Math.abs(_local19) + " fewer homicides than the same period last year.");
                                };
                            };
                        } else {
                            if (_arg1 == A.RECENT_CODE){
                            };
                        };
                    };
                };
            };
            this._changeNote.text = _local9;
        }
        private function handleZoomSlider(_arg1:Object){
            Analytics.trackEventOnce("NavigationUse");
            var _local2:int = this._zoomer.currentLevel;
            var _local3:Point = this.currLatLong();
            this.zoomToLatLongLevel(_local3.y, _local3.x, _local2);
        }
        private function initZoom(){
            var _local1:Object = {
                tic_offset:0,
                tic_length:3,
                tic_color:0xAAAAAA,
                pointer_offset:4,
                smooth_zoom:false,
                pointer_padding:8
            };
            var _local2:* = new ComboZoomControl(this._map.map, this.zoomSlider_mc.in_mc, this.zoomSlider_mc.out_mc, this.zoomSlider_mc.track_mc, this.zoomSlider_mc.ptr_mc, _local1);
        }
        private function onZoomIn(_arg1:Object){
            var _local2:Point = this.currLatLong();
            var _local3:Number = (this._map.map.navigation.level + 1);
            if (_local3 <= this._maxLevel){
                this.zoomToLatLongLevel(_local2.y, _local2.x, _local3);
            };
        }
        private function onZoomOut(_arg1:Object){
            var _local2:Point = this.currLatLong();
            var _local3:Number = (this._map.map.navigation.level - 1);
            if (_local3 >= this._minLevel){
                this.zoomToLatLongLevel(_local2.y, _local2.x, _local3);
            };
        }
        private function currLatLong():Point{
            var _local1:LatLng = this._gmap.map.getCenter();
            return (new Point(_local1.lng(), _local1.lat()));
        }
        private function onGMapReady(_arg1:Object){
            this.initGeocoding();
            var _local2:DisplayObject = (this._gmap.map.getChildAt(3) as DisplayObject);
            this.map_mc.addChild(_local2);
            this.desaturateGMap(1, A.SATELLITE);
        }
        private function handleViewChange(_arg1:Event){
            var _local2:int = _arg1.target.lastChanged;
            var _local3:String = this._viewCodes[_local2];
            this.setView(_local3);
            Analytics.trackEvent("ViewChange", _local3);
        }
        private function setView(_arg1:String){
            var _local3:HomicideSelection;
            var _local2:String = _arg1;
            if ((((((_arg1 == A.CUSTOM_1_VIEW)) || ((_arg1 == A.CUSTOM_2_VIEW)))) || ((_arg1 == A.CUSTOM_3_VIEW)))){
                _local3 = this._customViewIndex[_arg1];
                if (!_local3){
                    _local3 = new HomicideSelection(this._incidents_data, this._victims_data, this._perps_data);
                    _local3.setSelectionCriterion(A.VICTIM_RACE, [A.ASIAN, A.HISPANIC]);
                    _local3.update();
                    _local2 = A.CUSTOM_VIEW;
                };
            };
            this._view = _arg1;
            this.updateChart(this._view, this._year);
            this.updateKey(this._view);
            if (_arg1 == A.INCIDENT_VIEW){
                this.showIncident(int(this._urlArgs.incident));
            } else {
                this._map.setMapView(_local2);
            };
        }
        private function updateKey(_arg1:String){
        }
        private function updateChart(_arg1:String, _arg2:int){
            if (this._activePanel){
                this._activePanel = null;
                this._chartPopup.hide();
            };
            var _local3:Array = _panelViews[_arg1].charts;
            if (_local3){
                _local3 = _local3.concat();
            } else {
                _local3 = [];
            };
            var _local4:String = ((_panelViews[_arg1].key) ? _panelViews[_arg1].key : "");
            this._activePanel = this._tableMaker.fetchTableSet(_arg1, _local3, _arg2, _local4);
            this._chartPopup.addContent(this._activePanel);
            this._chartPopup.show();
            this.updateHomicidesFields(_arg2);
        }
        private function initGeocoding(){
            this._geocoder = new ClientGeocoder();
            this._geocoder.addEventListener(GeocodingEvent.GEOCODING_SUCCESS, this.onGeocodeSuccess);
            this._geocoder.addEventListener(GeocodingEvent.GEOCODING_FAILURE, this.onGeocodeFailure);
            this.input_mc.input_cmp.addEventListener("enter", this.onAddressInput);
            this.input_mc.input_cmp.addEventListener(FocusEvent.FOCUS_IN, this.onFocusIn);
            this.input_mc.input_cmp.addEventListener(FocusEvent.FOCUS_OUT, this.onFocusOut);
            this.input_mc.input_cmp.addEventListener("change", this.onAddressChange);
            this.input_mc.go_mc.addEventListener(MouseEvent.CLICK, this.onGoClick);
            this.input_mc.go_mc.buttonMode = (this.input_mc.go_mc.useHandCursor = true);
            this.input_mc.input_cmp.htmlText = this._emptySearchHTML;
        }
        private function onGoClick(_arg1:Object){
            this.onAddressInput(null);
        }
        private function onClearClick(_arg1:Object){
            this.input_mc.input_cmp.text = this._emptySearchHTML;
            this._map.hideMarker();
        }
        private function onFocusIn(_arg1:FocusEvent):void{
            var _local2:String = this.input_mc.input_cmp.text;
            if ((((_local2 == this._emptySearchStr)) || ((_local2 == this._notFoundStr)))){
                this.input_mc.input_cmp.text = "";
            };
            this.input_mc.input_cmp.drawFocus(false);
        }
        private function onFocusOut(_arg1:FocusEvent):void{
            var _local2:String = this.input_mc.input_cmp.text;
            if (_local2 == ""){
                this.input_mc.input_cmp.htmlText = this._emptySearchHTML;
                this._map.hideMarker();
            };
            this.input_mc.input_cmp.drawFocus(false);
        }
        private function onAddressChange(_arg1:Object){
            var _local2:String = this.input_mc.input_cmp.text;
            if (_local2){
            };
        }
        private function onAddressInput(_arg1:Object){
            var _local2:String = this.input_mc.input_cmp.text;
            if (((((!(_local2)) || ((_local2 == this._emptySearchStr)))) || ((_local2 == this._notFoundStr)))){
                this.input_mc.input_cmp.focusManager.setFocus(null);
                return;
            };
            _local2 = (_local2 + ", New York, NY");
            this._geocoder.geocode(_local2);
        }
        private function cleanupAddress(_arg1:String):String{
            var _local2:int = _arg1.indexOf(", USA");
            if (_local2 != -1){
                _arg1 = _arg1.slice(0, _local2);
            };
            return (_arg1);
        }
        private function onGeocodeSuccess(_arg1:GeocodingEvent){
            var _local4:Number;
            var _local5:Number;
            var _local6:Placemark;
            this.input_mc.input_cmp.focusManager.setFocus(null);
            var _local2:Boolean;
            var _local3 = "";
            if (_arg1.response.placemarks){
                _local6 = _arg1.response.placemarks[0];
                _local4 = _local6.point.lat();
                _local5 = _local6.point.lng();
                _local3 = _local6.address;
                if (this._map.testLatLongInRange(_local4, _local5)){
                    _local3 = this.cleanupAddress(_local3);
                    if (_local3 == "New York, NY"){
                    } else {
                        _local2 = true;
                        this._map.displayMarker(_local4, _local5);
                    };
                    //unresolved jump
                };
            };
            if (_local2){
                this.input_mc.input_cmp.text = _local3;
                this.zoomToLatLongLevel(_local4, _local5, 6);
                Analytics.trackEvent("GeocodeSuccess");
            } else {
                Analytics.trackEvent("GeocodeFailure");
                this.handleGeocodeFailure();
            };
        }
        private function zoomToLatLongLevel(_arg1:Number, _arg2:Number, _arg3:Number){
            this.setMapLatLongZoom(_arg1, _arg2, _arg3);
        }
        private function handleGeocodeFailure(){
            this.input_mc.input_cmp.focusManager.setFocus(null);
            this.input_mc.input_cmp.text = this._notFoundStr;
        }
        private function onGeocodeFailure(_arg1:GeocodingEvent){
            this.handleGeocodeFailure();
        }
        private function getMapCenter():Object{
            var _local1:GeoPoint = this._map.getCenterLatLong();
            var _local2:Number = this._map.map.navigation.level;
            var _local3:Object = {
                lat:_local1.lat,
                long:_local1.long,
                level:_local2
            };
            return (_local3);
        }
        private function getGMapLevel(_arg1:int):int{
            _arg1 = (_arg1 + (GMAP_INIT_LEVEL - 1));
            var _local2:int = _arg1;
            _local2--;
            return (_local2);
        }
        private function onNavigate(_arg1:Object){
            if (((!(this._gmap)) || (!(this._gmap.ready)))){
                return;
            };
            var _local2:Object = this.getMapCenter();
            var _local3:Number = _local2.level;
            var _local4 = !((this._currLevel == _local3));
            this._currLevel = _local3;
            var _local5:IMapType = this.getGMapView(_local3);
            if (_local4){
                this.desaturateGMap(_local3, this._mapStyle);
                this._gmap.map.setMapType(_local5);
            };
        }
        private function getGMapView(_arg1:int):IMapType{
            var _local2:IMapType = MapType.SATELLITE_MAP_TYPE;
            if (this._mapStyle == A.MAP){
                _local2 = MapType.NORMAL_MAP_TYPE;
                if (((this._useTerrainMap) && ((_arg1 < A.NORMAL_MAP_THRESHOLD)))){
                    _local2 = MapType.PHYSICAL_MAP_TYPE;
                };
            } else {
                if (this._mapStyle == A.SATELLITE){
                    _local2 = (((_arg1 >= A.STREET_VIEW_LEVEL)) ? MapType.HYBRID_MAP_TYPE : MapType.SATELLITE_MAP_TYPE);
                } else {
                    if (this._mapStyle == A.COMBO){
                        _local2 = (((_arg1 >= A.AUTO_SWITCH_LEVEL)) ? MapType.PHYSICAL_MAP_TYPE : MapType.SATELLITE_MAP_TYPE);
                    };
                };
            };
            return (_local2);
        }
        private function setGMapLatLongZoom(_arg1:Number, _arg2:Number, _arg3:Number){
        }
        private function setMapLatLongZoom(_arg1:Number, _arg2:Number, _arg3:Number){
            this._map.setLatLongLevel(_arg1, _arg2, _arg3);
        }
        private function initViewButtons(_arg1:Number, _arg2:Number, _arg3:Array):ButtonSet{
            var _local4:ButtonStyle = new ButtonStyle({
                up:{
                    textSize:11,
                    font:"Arial",
                    textColor:Colors.LINKS,
                    borderColor:0xCCCCCC,
                    bgColor:15791349,
                    borderCoverage:"tb",
                    bgAlpha:0,
                    minWidth:205
                },
                over:{textUnderline:true},
                down:{
                    textBold:true,
                    bgColor:Colors.WHITE,
                    textColor:65793,
                    borderCoverage:"lbt",
                    bgAlpha:1,
                    minWidth:221
                },
                downOver:{},
                off:{}
            });
            var _local5:ButtonLayout = new ButtonLayout();
            _local5.padding = 0;
            _local5.minWidth = 226;
            _local5.minHeight = 26;
            _local5.align = "vertical";
            var _local6:ButtonSet = new ButtonSet(_arg3, _local4, _local5, 0);
            addChild(_local6);
            _local6.x = _arg1;
            _local6.y = _arg2;
            return (_local6);
        }
        private function initMapButtons(_arg1:Number, _arg2:Number, _arg3:Array):ButtonSet{
            var _local4:ButtonStyle = new ButtonStyle({
                up:{
                    textSize:11,
                    font:"Arial",
                    textColor:Colors.LINKS,
                    borderColor:0xBBBBBB,
                    bgColor:15791351
                },
                over:{textUnderline:true},
                down:{
                    textBold:true,
                    bgColor:Colors.WHITE,
                    textColor:65793,
                    borderCoverage:"brlt"
                },
                downOver:{},
                off:{}
            });
            var _local5:ButtonLayout = new ButtonLayout();
            _local5.padding = 0;
            _local5.minWidth = 86;
            _local5.minHeight = 22;
            _local5.align = "horizontal";
            var _local6:ButtonSet = new ButtonSet(_arg3, _local4, _local5, 0);
            addChild(_local6);
            _local6.x = _arg1;
            _local6.y = _arg2;
            return (_local6);
        }
        public function desaturateGMap(_arg1:int, _arg2:String){
            var _local4:ColorMatrixFilter;
            var _local3:Sprite = (this._gmap.map.getChildAt(1) as Sprite);
            if (A.DEBUG){
                if (!this._colorPickerInit){
                    this._colorPickerInit = true;
                };
                this.colorPicker.setClip(_local3);
                return;
            };
            var _local5:Array = [];
            if (_arg1 >= A.AUTO_SWITCH_LEVEL){
                _local4 = new ColorMatrixFilter(A.MAP_MATRIX_1);
            } else {
                _local4 = new ColorMatrixFilter(A.SAT_MATRIX_1);
            };
            _local5.push(_local4);
            _local3.filters = _local5;
        }

    }
}//package 
﻿package {
    import flash.text.*;

    public dynamic class ArialBold extends Font {

    }
}//package 
﻿package {
    import flash.text.*;

    public dynamic class ArialRegular extends Font {

    }
}//package 
﻿package {
    import flash.text.*;

    public dynamic class GeorgiaRegular extends Font {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class TextInput_upSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class ColorMatrixPicker extends MovieClip {

        public var printBtn:MovieClip;
        public var bPtr:Pointer;
        public var cPtr:Pointer;
        public var resetBtn:MovieClip;
        public var sPtr:Pointer;
        public var bTrack:MovieClip;
        public var cTrack:MovieClip;
        public var sTrack:MovieClip;

    }
}//package 
﻿package {
    import mb.data.*;
    import mb.*;

    public class HomicideSelection {

        private var _incidents_data:PointDataTable;
        private var _victims_data:DataTable;
        private var _perps_data:DataTable;
        private var _criterionIndex:Object;

        public function HomicideSelection(_arg1:PointDataTable, _arg2:DataTable, _arg3:DataTable){
            this._victims_data = _arg2;
            this._perps_data = _arg3;
            this._incidents_data = _arg1;
            if (!this._incidents_data.fieldExists(A.SELECTION_FIELD)){
                this._incidents_data.addField(A.SELECTION_FIELD, C.INTEGER);
            };
            this._criterionIndex = {};
        }
        public function setSelectionCriterion(_arg1:String, _arg2:Array){
            if (((!(_arg2)) || ((_arg2.length == 0)))){
                this.clearSelectionCriterion(_arg1);
            } else {
                this._criterionIndex[_arg1] = _arg2;
            };
        }
        public function clearSelectionCriterion(_arg1:String){
            if (this._criterionIndex[_arg1]){
                delete this._criterionIndex[_arg1];
            };
        }
        private function getTableByAttribute(_arg1:String):DataTable{
            var _local2:DataTable = this._incidents_data;
            switch (_arg1){
                case A.PERP_RACE:
                case A.PERP_SEX:
                case A.PERP_AGE:
                    _local2 = this._perps_data;
                    break;
                case A.VICTIM_RACE:
                case A.VICTIM_SEX:
                case A.VICTIM_AGE:
                    _local2 = this._victims_data;
                    break;
            };
            return (_local2);
        }
        private function getFieldByAttribute(_arg1:String):String{
            var _local2 = "";
            switch (_arg1){
                case A.PERP_RACE:
                    _local2 = "race";
                    break;
                case A.PERP_SEX:
                    _local2 = "sex";
                    break;
                case A.PERP_AGE:
                    _local2 = "age";
                    break;
                case A.VICTIM_RACE:
                    _local2 = "race";
                    break;
                case A.VICTIM_SEX:
                    _local2 = "sex";
                    break;
                case A.VICTIM_AGE:
                    _local2 = "age";
                    break;
                case A.WEAPON:
                    _local2 = "weapon";
                    break;
                case A.YEAR:
                    _local2 = "year";
                    break;
                case A.MONTH:
                    _local2 = "month";
                    break;
            };
            return (_local2);
        }
        public function update(){
            var _local4:String;
            var _local5:int;
            var _local6:RecordSet;
            var _local7:Array;
            var _local8:DataTable;
            var _local9:String;
            var _local10:Record;
            var _local11:int;
            var _local12:int;
            var _local13:DataTable;
            var _local14:String;
            var _local15:Object;
            var _local16:int;
            var _local17:Record;
            var _local18:int;
            var _local1:Array = [];
            var _local2:Array = [];
            var _local3:Array = [];
            for (_local4 in this._criterionIndex) {
                _local7 = this._criterionIndex[_local4];
                _local8 = this.getTableByAttribute(_local4);
                _local9 = this.getFieldByAttribute(_local4);
                _local1.push(_local9);
                _local2.push(_local7);
                _local3.push(_local8);
            };
            _local5 = _local1.length;
            _local6 = this._incidents_data.getRecordSet();
            while (_local6.hasNext) {
                _local10 = _local6.nextRecord;
                _local11 = 1;
                _local12 = 0;
                while (_local12 < _local5) {
                    _local13 = _local3[_local12];
                    _local14 = _local1[_local12];
                    _local7 = _local2[_local12];
                    if (_local13 == this._incidents_data){
                        _local17 = _local10;
                    } else {
                        _local18 = _local10.getNumber("id");
                        _local17 = _local13.getIndexedRecord(_local18);
                        if (!_local17){
                            _local11 = 2;
                            break;
                        };
                    };
                    _local15 = _local17.getObject(_local14);
                    _local16 = _local7.indexOf(_local15);
                    if (_local16 == -1){
                        _local11 = 0;
                        break;
                    };
                    _local12++;
                };
                _local10.insertNumber(A.SELECTION_FIELD, _local11);
            };
        }

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class MarkerIcon extends MovieClip {

    }
}//package 
﻿package fl.controls {
    import flash.display.*;
    import fl.core.*;
    import flash.events.*;
    import flash.utils.*;
    import fl.events.*;

    public class BaseButton extends UIComponent {

        private static var defaultStyles:Object = {
            upSkin:"Button_upSkin",
            downSkin:"Button_downSkin",
            overSkin:"Button_overSkin",
            disabledSkin:"Button_disabledSkin",
            selectedDisabledSkin:"Button_selectedDisabledSkin",
            selectedUpSkin:"Button_selectedUpSkin",
            selectedDownSkin:"Button_selectedDownSkin",
            selectedOverSkin:"Button_selectedOverSkin",
            focusRectSkin:null,
            focusRectPadding:null,
            repeatDelay:500,
            repeatInterval:35
        };

        protected var _selected:Boolean = false;
        private var unlockedMouseState:String;
        protected var pressTimer:Timer;
        protected var mouseState:String;
        protected var background:DisplayObject;
        private var _mouseStateLocked:Boolean = false;
        protected var _autoRepeat:Boolean = false;

        public function BaseButton(){
            _selected = false;
            _autoRepeat = false;
            _mouseStateLocked = false;
            super();
            buttonMode = true;
            mouseChildren = false;
            useHandCursor = false;
            setupMouseEvents();
            setMouseState("up");
            pressTimer = new Timer(1, 0);
            pressTimer.addEventListener(TimerEvent.TIMER, buttonDown, false, 0, true);
        }
        public static function getStyleDefinition():Object{
            return (defaultStyles);
        }

        protected function endPress():void{
            pressTimer.reset();
        }
        public function set mouseStateLocked(_arg1:Boolean):void{
            _mouseStateLocked = _arg1;
            if (_arg1 == false){
                setMouseState(unlockedMouseState);
            } else {
                unlockedMouseState = mouseState;
            };
        }
        public function get autoRepeat():Boolean{
            return (_autoRepeat);
        }
        public function set autoRepeat(_arg1:Boolean):void{
            _autoRepeat = _arg1;
        }
        override public function set enabled(_arg1:Boolean):void{
            super.enabled = _arg1;
            mouseEnabled = _arg1;
        }
        public function get selected():Boolean{
            return (_selected);
        }
        protected function mouseEventHandler(_arg1:MouseEvent):void{
            if (_arg1.type == MouseEvent.MOUSE_DOWN){
                setMouseState("down");
                startPress();
            } else {
                if ((((_arg1.type == MouseEvent.ROLL_OVER)) || ((_arg1.type == MouseEvent.MOUSE_UP)))){
                    setMouseState("over");
                    endPress();
                } else {
                    if (_arg1.type == MouseEvent.ROLL_OUT){
                        setMouseState("up");
                        endPress();
                    };
                };
            };
        }
        public function setMouseState(_arg1:String):void{
            if (_mouseStateLocked){
                unlockedMouseState = _arg1;
                return;
            };
            if (mouseState == _arg1){
                return;
            };
            mouseState = _arg1;
            invalidate(InvalidationType.STATE);
        }
        protected function startPress():void{
            if (_autoRepeat){
                pressTimer.delay = Number(getStyleValue("repeatDelay"));
                pressTimer.start();
            };
            dispatchEvent(new ComponentEvent(ComponentEvent.BUTTON_DOWN, true));
        }
        protected function buttonDown(_arg1:TimerEvent):void{
            if (!_autoRepeat){
                endPress();
                return;
            };
            if (pressTimer.currentCount == 1){
                pressTimer.delay = Number(getStyleValue("repeatInterval"));
            };
            dispatchEvent(new ComponentEvent(ComponentEvent.BUTTON_DOWN, true));
        }
        public function set selected(_arg1:Boolean):void{
            if (_selected == _arg1){
                return;
            };
            _selected = _arg1;
            invalidate(InvalidationType.STATE);
        }
        override public function get enabled():Boolean{
            return (super.enabled);
        }
        override protected function draw():void{
            if (isInvalid(InvalidationType.STYLES, InvalidationType.STATE)){
                drawBackground();
                invalidate(InvalidationType.SIZE, false);
            };
            if (isInvalid(InvalidationType.SIZE)){
                drawLayout();
            };
            super.draw();
        }
        protected function setupMouseEvents():void{
            addEventListener(MouseEvent.ROLL_OVER, mouseEventHandler, false, 0, true);
            addEventListener(MouseEvent.MOUSE_DOWN, mouseEventHandler, false, 0, true);
            addEventListener(MouseEvent.MOUSE_UP, mouseEventHandler, false, 0, true);
            addEventListener(MouseEvent.ROLL_OUT, mouseEventHandler, false, 0, true);
        }
        protected function drawLayout():void{
            background.width = width;
            background.height = height;
        }
        protected function drawBackground():void{
            var _local1:String;
            var _local2:DisplayObject;
            _local1 = ((enabled) ? mouseState : "disabled");
            if (selected){
                _local1 = (("selected" + _local1.substr(0, 1).toUpperCase()) + _local1.substr(1));
            };
            _local1 = (_local1 + "Skin");
            _local2 = background;
            background = getDisplayObjectInstance(getStyleValue(_local1));
            addChildAt(background, 0);
            if (((!((_local2 == null))) && (!((_local2 == background))))){
                removeChild(_local2);
            };
        }

    }
}//package fl.controls 
﻿package fl.controls {
    import flash.display.*;
    import flash.text.*;
    import fl.core.*;
    import flash.events.*;
    import fl.managers.*;
    import fl.events.*;
    import flash.ui.*;

    public class TextInput extends UIComponent implements IFocusManagerComponent {

        private static var defaultStyles:Object = {
            upSkin:"TextInput_upSkin",
            disabledSkin:"TextInput_disabledSkin",
            focusRectSkin:null,
            focusRectPadding:null,
            textFormat:null,
            disabledTextFormat:null,
            textPadding:0,
            embedFonts:false
        };
        public static var createAccessibilityImplementation:Function;

        protected var _html:Boolean = false;
        protected var _savedHTML:String;
        protected var background:DisplayObject;
        protected var _editable:Boolean = true;
        public var textField:TextField;

        public function TextInput(){
            _editable = true;
            _html = false;
            super();
        }
        public static function getStyleDefinition():Object{
            return (defaultStyles);
        }

        override public function drawFocus(_arg1:Boolean):void{
            if (focusTarget != null){
                focusTarget.drawFocus(_arg1);
                return;
            };
            super.drawFocus(_arg1);
        }
        public function set imeMode(_arg1:String):void{
            _imeMode = _arg1;
        }
        override protected function isOurFocus(_arg1:DisplayObject):Boolean{
            return ((((_arg1 == textField)) || (super.isOurFocus(_arg1))));
        }
        protected function handleKeyDown(_arg1:KeyboardEvent):void{
            if (_arg1.keyCode == Keyboard.ENTER){
                dispatchEvent(new ComponentEvent(ComponentEvent.ENTER, true));
            };
        }
        public function set text(_arg1:String):void{
            textField.text = _arg1;
            _html = false;
            invalidate(InvalidationType.DATA);
            invalidate(InvalidationType.STYLES);
        }
        protected function updateTextFieldType():void{
            textField.type = ((((enabled) && (editable))) ? TextFieldType.INPUT : TextFieldType.DYNAMIC);
            textField.selectable = enabled;
        }
        public function get selectionEndIndex():int{
            return (textField.selectionEndIndex);
        }
        public function get editable():Boolean{
            return (_editable);
        }
        override protected function focusInHandler(_arg1:FocusEvent):void{
            var _local2:IFocusManager;
            if (_arg1.target == this){
                stage.focus = textField;
            };
            _local2 = focusManager;
            if (((editable) && (_local2))){
                _local2.showFocusIndicator = true;
                if (((textField.selectable) && ((textField.selectionBeginIndex == textField.selectionBeginIndex)))){
                    setSelection(0, textField.length);
                };
            };
            super.focusInHandler(_arg1);
            if (editable){
                setIMEMode(true);
            };
        }
        public function get selectionBeginIndex():int{
            return (textField.selectionBeginIndex);
        }
        public function set alwaysShowSelection(_arg1:Boolean):void{
            textField.alwaysShowSelection = _arg1;
        }
        override public function set enabled(_arg1:Boolean):void{
            super.enabled = _arg1;
            updateTextFieldType();
        }
        protected function setEmbedFont(){
            var _local1:Object;
            _local1 = getStyleValue("embedFonts");
            if (_local1 != null){
                textField.embedFonts = _local1;
            };
        }
        public function get horizontalScrollPosition():int{
            return (textField.scrollH);
        }
        public function set condenseWhite(_arg1:Boolean):void{
            textField.condenseWhite = _arg1;
        }
        public function set displayAsPassword(_arg1:Boolean):void{
            textField.displayAsPassword = _arg1;
        }
        public function set horizontalScrollPosition(_arg1:int):void{
            textField.scrollH = _arg1;
        }
        public function get restrict():String{
            return (textField.restrict);
        }
        public function get textWidth():Number{
            return (textField.textWidth);
        }
        public function get textHeight():Number{
            return (textField.textHeight);
        }
        public function set editable(_arg1:Boolean):void{
            _editable = _arg1;
            updateTextFieldType();
        }
        public function get maxChars():int{
            return (textField.maxChars);
        }
        public function get length():int{
            return (textField.length);
        }
        public function getLineMetrics(_arg1:int):TextLineMetrics{
            return (textField.getLineMetrics(_arg1));
        }
        public function get imeMode():String{
            return (_imeMode);
        }
        override protected function focusOutHandler(_arg1:FocusEvent):void{
            super.focusOutHandler(_arg1);
            if (editable){
                setIMEMode(false);
            };
        }
        public function set htmlText(_arg1:String):void{
            if (_arg1 == ""){
                text = "";
                return;
            };
            _html = true;
            _savedHTML = _arg1;
            textField.htmlText = _arg1;
            invalidate(InvalidationType.DATA);
            invalidate(InvalidationType.STYLES);
        }
        public function get text():String{
            return (textField.text);
        }
        override public function get enabled():Boolean{
            return (super.enabled);
        }
        public function get condenseWhite():Boolean{
            return (textField.condenseWhite);
        }
        public function get alwaysShowSelection():Boolean{
            return (textField.alwaysShowSelection);
        }
        override protected function draw():void{
            var _local1:Object;
            if (isInvalid(InvalidationType.STYLES, InvalidationType.STATE)){
                drawTextFormat();
                drawBackground();
                _local1 = getStyleValue("embedFonts");
                if (_local1 != null){
                    textField.embedFonts = _local1;
                };
                invalidate(InvalidationType.SIZE, false);
            };
            if (isInvalid(InvalidationType.SIZE)){
                drawLayout();
            };
            super.draw();
        }
        protected function handleTextInput(_arg1:TextEvent):void{
            _arg1.stopPropagation();
            dispatchEvent(new TextEvent(TextEvent.TEXT_INPUT, true, false, _arg1.text));
        }
        override protected function configUI():void{
            super.configUI();
            tabChildren = true;
            textField = new TextField();
            addChild(textField);
            updateTextFieldType();
            textField.addEventListener(TextEvent.TEXT_INPUT, handleTextInput, false, 0, true);
            textField.addEventListener(Event.CHANGE, handleChange, false, 0, true);
            textField.addEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown, false, 0, true);
        }
        public function setSelection(_arg1:int, _arg2:int):void{
            textField.setSelection(_arg1, _arg2);
        }
        public function get displayAsPassword():Boolean{
            return (textField.displayAsPassword);
        }
        public function appendText(_arg1:String):void{
            textField.appendText(_arg1);
        }
        public function set restrict(_arg1:String):void{
            if (((componentInspectorSetting) && ((_arg1 == "")))){
                _arg1 = null;
            };
            textField.restrict = _arg1;
        }
        public function get htmlText():String{
            return (textField.htmlText);
        }
        protected function drawBackground():void{
            var _local1:DisplayObject;
            var _local2:String;
            _local1 = background;
            _local2 = ((enabled) ? "upSkin" : "disabledSkin");
            background = getDisplayObjectInstance(getStyleValue(_local2));
            if (background == null){
                return;
            };
            addChildAt(background, 0);
            if (((((!((_local1 == null))) && (!((_local1 == background))))) && (contains(_local1)))){
                removeChild(_local1);
            };
        }
        override public function setFocus():void{
            stage.focus = textField;
        }
        protected function drawLayout():void{
            var _local1:Number;
            _local1 = Number(getStyleValue("textPadding"));
            if (background != null){
                background.width = width;
                background.height = height;
            };
            textField.width = (width - (2 * _local1));
            textField.height = (height - (2 * _local1));
            textField.x = (textField.y = _local1);
        }
        public function set maxChars(_arg1:int):void{
            textField.maxChars = _arg1;
        }
        public function get maxHorizontalScrollPosition():int{
            return (textField.maxScrollH);
        }
        protected function drawTextFormat():void{
            var _local1:Object;
            var _local2:TextFormat;
            var _local3:TextFormat;
            _local1 = UIComponent.getStyleDefinition();
            _local2 = ((enabled) ? (_local1.defaultTextFormat as TextFormat) : (_local1.defaultDisabledTextFormat as TextFormat));
            textField.setTextFormat(_local2);
            _local3 = (getStyleValue(((enabled) ? "textFormat" : "disabledTextFormat")) as TextFormat);
            if (_local3 != null){
                textField.setTextFormat(_local3);
            } else {
                _local3 = _local2;
            };
            textField.defaultTextFormat = _local3;
            setEmbedFont();
            if (_html){
                textField.htmlText = _savedHTML;
            };
        }
        protected function handleChange(_arg1:Event):void{
            _arg1.stopPropagation();
            dispatchEvent(new Event(Event.CHANGE, true));
        }

    }
}//package fl.controls 
﻿package fl.controls {
    import flash.display.*;
    import flash.text.*;
    import fl.core.*;
    import flash.events.*;
    import fl.managers.*;
    import fl.events.*;
    import flash.ui.*;

    public class LabelButton extends BaseButton implements IFocusManagerComponent {

        private static var defaultStyles:Object = {
            icon:null,
            upIcon:null,
            downIcon:null,
            overIcon:null,
            disabledIcon:null,
            selectedDisabledIcon:null,
            selectedUpIcon:null,
            selectedDownIcon:null,
            selectedOverIcon:null,
            textFormat:null,
            disabledTextFormat:null,
            textPadding:5,
            embedFonts:false
        };
        public static var createAccessibilityImplementation:Function;

        protected var _labelPlacement:String = "right";
        protected var _toggle:Boolean = false;
        protected var icon:DisplayObject;
        protected var oldMouseState:String;
        protected var mode:String = "center";
        public var textField:TextField;
        protected var _label:String = "Label";

        public function LabelButton(){
            _labelPlacement = ButtonLabelPlacement.RIGHT;
            _toggle = false;
            _label = "Label";
            mode = "center";
            super();
        }
        public static function getStyleDefinition():Object{
            return (mergeStyles(defaultStyles, BaseButton.getStyleDefinition()));
        }

        protected function toggleSelected(_arg1:MouseEvent):void{
            selected = !(selected);
            dispatchEvent(new Event(Event.CHANGE, true));
        }
        public function get labelPlacement():String{
            return (_labelPlacement);
        }
        override protected function keyDownHandler(_arg1:KeyboardEvent):void{
            if (!enabled){
                return;
            };
            if (_arg1.keyCode == Keyboard.SPACE){
                if (oldMouseState == null){
                    oldMouseState = mouseState;
                };
                setMouseState("down");
                startPress();
            };
        }
        protected function setEmbedFont(){
            var _local1:Object;
            _local1 = getStyleValue("embedFonts");
            if (_local1 != null){
                textField.embedFonts = _local1;
            };
        }
        override protected function keyUpHandler(_arg1:KeyboardEvent):void{
            if (!enabled){
                return;
            };
            if (_arg1.keyCode == Keyboard.SPACE){
                setMouseState(oldMouseState);
                oldMouseState = null;
                endPress();
                dispatchEvent(new MouseEvent(MouseEvent.CLICK));
            };
        }
        override public function get selected():Boolean{
            return (((_toggle) ? _selected : false));
        }
        public function set labelPlacement(_arg1:String):void{
            _labelPlacement = _arg1;
            invalidate(InvalidationType.SIZE);
        }
        public function set toggle(_arg1:Boolean):void{
            if (((!(_arg1)) && (super.selected))){
                selected = false;
            };
            _toggle = _arg1;
            if (_toggle){
                addEventListener(MouseEvent.CLICK, toggleSelected, false, 0, true);
            } else {
                removeEventListener(MouseEvent.CLICK, toggleSelected);
            };
            invalidate(InvalidationType.STATE);
        }
        public function get label():String{
            return (_label);
        }
        override public function set selected(_arg1:Boolean):void{
            _selected = _arg1;
            if (_toggle){
                invalidate(InvalidationType.STATE);
            };
        }
        override protected function draw():void{
            if (textField.text != _label){
                label = _label;
            };
            if (isInvalid(InvalidationType.STYLES, InvalidationType.STATE)){
                drawBackground();
                drawIcon();
                drawTextFormat();
                invalidate(InvalidationType.SIZE, false);
            };
            if (isInvalid(InvalidationType.SIZE)){
                drawLayout();
            };
            if (isInvalid(InvalidationType.SIZE, InvalidationType.STYLES)){
                if (((isFocused) && (focusManager.showFocusIndicator))){
                    drawFocus(true);
                };
            };
            validate();
        }
        public function get toggle():Boolean{
            return (_toggle);
        }
        override protected function configUI():void{
            super.configUI();
            textField = new TextField();
            textField.type = TextFieldType.DYNAMIC;
            textField.selectable = false;
            addChild(textField);
        }
        override protected function drawLayout():void{
            var _local1:Number;
            var _local2:String;
            var _local3:Number;
            var _local4:Number;
            var _local5:Number;
            var _local6:Number;
            var _local7:Number;
            var _local8:Number;
            _local1 = Number(getStyleValue("textPadding"));
            _local2 = (((((icon == null)) && ((mode == "center")))) ? ButtonLabelPlacement.TOP : _labelPlacement);
            textField.height = (textField.textHeight + 4);
            _local3 = (textField.textWidth + 4);
            _local4 = (textField.textHeight + 4);
            _local5 = ((icon)==null) ? 0 : (icon.width + _local1);
            _local6 = ((icon)==null) ? 0 : (icon.height + _local1);
            textField.visible = (label.length > 0);
            if (icon != null){
                icon.x = Math.round(((width - icon.width) / 2));
                icon.y = Math.round(((height - icon.height) / 2));
            };
            if (textField.visible == false){
                textField.width = 0;
                textField.height = 0;
            } else {
                if ((((_local2 == ButtonLabelPlacement.BOTTOM)) || ((_local2 == ButtonLabelPlacement.TOP)))){
                    _local7 = Math.max(0, Math.min(_local3, (width - (2 * _local1))));
                    if ((height - 2) > _local4){
                        _local8 = _local4;
                    } else {
                        _local8 = (height - 2);
                    };
                    _local3 = _local7;
                    textField.width = _local3;
                    _local4 = _local8;
                    textField.height = _local4;
                    textField.x = Math.round(((width - _local3) / 2));
                    textField.y = Math.round(((((height - textField.height) - _local6) / 2) + ((_local2)==ButtonLabelPlacement.BOTTOM) ? _local6 : 0));
                    if (icon != null){
                        icon.y = Math.round(((_local2)==ButtonLabelPlacement.BOTTOM) ? (textField.y - _local6) : ((textField.y + textField.height) + _local1));
                    };
                } else {
                    _local7 = Math.max(0, Math.min(_local3, ((width - _local5) - (2 * _local1))));
                    _local3 = _local7;
                    textField.width = _local3;
                    textField.x = Math.round(((((width - _local3) - _local5) / 2) + ((_local2)!=ButtonLabelPlacement.LEFT) ? _local5 : 0));
                    textField.y = Math.round(((height - textField.height) / 2));
                    if (icon != null){
                        icon.x = Math.round(((_local2)!=ButtonLabelPlacement.LEFT) ? (textField.x - _local5) : ((textField.x + _local3) + _local1));
                    };
                };
            };
            super.drawLayout();
        }
        override protected function initializeAccessibility():void{
            if (LabelButton.createAccessibilityImplementation != null){
                LabelButton.createAccessibilityImplementation(this);
            };
        }
        protected function drawIcon():void{
            var _local1:DisplayObject;
            var _local2:String;
            var _local3:Object;
            _local1 = icon;
            _local2 = ((enabled) ? mouseState : "disabled");
            if (selected){
                _local2 = (("selected" + _local2.substr(0, 1).toUpperCase()) + _local2.substr(1));
            };
            _local2 = (_local2 + "Icon");
            _local3 = getStyleValue(_local2);
            if (_local3 == null){
                _local3 = getStyleValue("icon");
            };
            if (_local3 != null){
                icon = getDisplayObjectInstance(_local3);
            };
            if (icon != null){
                addChildAt(icon, 1);
            };
            if (((!((_local1 == null))) && (!((_local1 == icon))))){
                removeChild(_local1);
            };
        }
        public function set label(_arg1:String):void{
            _label = _arg1;
            if (textField.text != _label){
                textField.text = _label;
                dispatchEvent(new ComponentEvent(ComponentEvent.LABEL_CHANGE));
            };
            invalidate(InvalidationType.SIZE);
            invalidate(InvalidationType.STYLES);
        }
        protected function drawTextFormat():void{
            var _local1:Object;
            var _local2:TextFormat;
            var _local3:TextFormat;
            _local1 = UIComponent.getStyleDefinition();
            _local2 = ((enabled) ? (_local1.defaultTextFormat as TextFormat) : (_local1.defaultDisabledTextFormat as TextFormat));
            textField.setTextFormat(_local2);
            _local3 = (getStyleValue(((enabled) ? "textFormat" : "disabledTextFormat")) as TextFormat);
            if (_local3 != null){
                textField.setTextFormat(_local3);
            } else {
                _local3 = _local2;
            };
            textField.defaultTextFormat = _local3;
            setEmbedFont();
        }

    }
}//package fl.controls 
﻿package fl.controls {
    import flash.display.*;
    import fl.core.*;
    import fl.managers.*;

    public class Button extends LabelButton implements IFocusManagerComponent {

        private static var defaultStyles:Object = {
            emphasizedSkin:"Button_emphasizedSkin",
            emphasizedPadding:2
        };
        public static var createAccessibilityImplementation:Function;

        protected var emphasizedBorder:DisplayObject;
        protected var _emphasized:Boolean = false;

        public function Button(){
            _emphasized = false;
            super();
        }
        public static function getStyleDefinition():Object{
            return (UIComponent.mergeStyles(LabelButton.getStyleDefinition(), defaultStyles));
        }

        override public function drawFocus(_arg1:Boolean):void{
            var _local2:Number;
            var _local3:*;
            super.drawFocus(_arg1);
            if (_arg1){
                _local2 = Number(getStyleValue("emphasizedPadding"));
                if ((((_local2 < 0)) || (!(_emphasized)))){
                    _local2 = 0;
                };
                _local3 = getStyleValue("focusRectPadding");
                _local3 = ((_local3)==null) ? 2 : _local3;
                _local3 = (_local3 + _local2);
                uiFocusRect.x = -(_local3);
                uiFocusRect.y = -(_local3);
                uiFocusRect.width = (width + (_local3 * 2));
                uiFocusRect.height = (height + (_local3 * 2));
            };
        }
        public function set emphasized(_arg1:Boolean):void{
            _emphasized = _arg1;
            invalidate(InvalidationType.STYLES);
        }
        override protected function draw():void{
            if (((isInvalid(InvalidationType.STYLES)) || (isInvalid(InvalidationType.SIZE)))){
                drawEmphasized();
            };
            super.draw();
            if (emphasizedBorder != null){
                setChildIndex(emphasizedBorder, (numChildren - 1));
            };
        }
        public function get emphasized():Boolean{
            return (_emphasized);
        }
        override protected function initializeAccessibility():void{
            if (Button.createAccessibilityImplementation != null){
                Button.createAccessibilityImplementation(this);
            };
        }
        protected function drawEmphasized():void{
            var _local1:Object;
            var _local2:Number;
            if (emphasizedBorder != null){
                removeChild(emphasizedBorder);
            };
            emphasizedBorder = null;
            if (!_emphasized){
                return;
            };
            _local1 = getStyleValue("emphasizedSkin");
            if (_local1 != null){
                emphasizedBorder = getDisplayObjectInstance(_local1);
            };
            if (emphasizedBorder != null){
                addChildAt(emphasizedBorder, 0);
                _local2 = Number(getStyleValue("emphasizedPadding"));
                emphasizedBorder.x = (emphasizedBorder.y = -(_local2));
                emphasizedBorder.width = (width + (_local2 * 2));
                emphasizedBorder.height = (height + (_local2 * 2));
            };
        }

    }
}//package fl.controls 
﻿package fl.controls {

    public class ButtonLabelPlacement {

        public static const TOP:String = "top";
        public static const LEFT:String = "left";
        public static const BOTTOM:String = "bottom";
        public static const RIGHT:String = "right";

    }
}//package fl.controls 
﻿package fl.motion {

    public class ColorMatrix extends DynamicMatrix {

        protected static const LUMINANCER:Number = 0.3086;
        protected static const LUMINANCEG:Number = 0.6094;
        protected static const LUMINANCEB:Number = 0.082;

        public function ColorMatrix(){
            super(5, 5);
            LoadIdentity();
        }
        public function SetBrightnessMatrix(_arg1:Number):void{
            if (!m_matrix){
                return;
            };
            m_matrix[0][4] = _arg1;
            m_matrix[1][4] = _arg1;
            m_matrix[2][4] = _arg1;
        }
        public function SetContrastMatrix(_arg1:Number):void{
            if (!m_matrix){
                return;
            };
            var _local2:Number = (0.5 * (127 - _arg1));
            _arg1 = (_arg1 / 127);
            m_matrix[0][0] = _arg1;
            m_matrix[1][1] = _arg1;
            m_matrix[2][2] = _arg1;
            m_matrix[0][4] = _local2;
            m_matrix[1][4] = _local2;
            m_matrix[2][4] = _local2;
        }
        public function SetSaturationMatrix(_arg1:Number):void{
            if (!m_matrix){
                return;
            };
            var _local2:Number = (1 - _arg1);
            var _local3:Number = (_local2 * LUMINANCER);
            m_matrix[0][0] = (_local3 + _arg1);
            m_matrix[1][0] = _local3;
            m_matrix[2][0] = _local3;
            _local3 = (_local2 * LUMINANCEG);
            m_matrix[0][1] = _local3;
            m_matrix[1][1] = (_local3 + _arg1);
            m_matrix[2][1] = _local3;
            _local3 = (_local2 * LUMINANCEB);
            m_matrix[0][2] = _local3;
            m_matrix[1][2] = _local3;
            m_matrix[2][2] = (_local3 + _arg1);
        }
        public function SetHueMatrix(_arg1:Number):void{
            var _local11:int;
            if (!m_matrix){
                return;
            };
            LoadIdentity();
            var _local2:DynamicMatrix = new DynamicMatrix(3, 3);
            var _local3:DynamicMatrix = new DynamicMatrix(3, 3);
            var _local4:DynamicMatrix = new DynamicMatrix(3, 3);
            var _local5:Number = Math.cos(_arg1);
            var _local6:Number = Math.sin(_arg1);
            var _local7:Number = 0.213;
            var _local8:Number = 0.715;
            var _local9:Number = 0.072;
            _local2.SetValue(0, 0, _local7);
            _local2.SetValue(1, 0, _local7);
            _local2.SetValue(2, 0, _local7);
            _local2.SetValue(0, 1, _local8);
            _local2.SetValue(1, 1, _local8);
            _local2.SetValue(2, 1, _local8);
            _local2.SetValue(0, 2, _local9);
            _local2.SetValue(1, 2, _local9);
            _local2.SetValue(2, 2, _local9);
            _local3.SetValue(0, 0, (1 - _local7));
            _local3.SetValue(1, 0, -(_local7));
            _local3.SetValue(2, 0, -(_local7));
            _local3.SetValue(0, 1, -(_local8));
            _local3.SetValue(1, 1, (1 - _local8));
            _local3.SetValue(2, 1, -(_local8));
            _local3.SetValue(0, 2, -(_local9));
            _local3.SetValue(1, 2, -(_local9));
            _local3.SetValue(2, 2, (1 - _local9));
            _local3.MultiplyNumber(_local5);
            _local4.SetValue(0, 0, -(_local7));
            _local4.SetValue(1, 0, 0.143);
            _local4.SetValue(2, 0, -((1 - _local7)));
            _local4.SetValue(0, 1, -(_local8));
            _local4.SetValue(1, 1, 0.14);
            _local4.SetValue(2, 1, _local8);
            _local4.SetValue(0, 2, (1 - _local9));
            _local4.SetValue(1, 2, -0.283);
            _local4.SetValue(2, 2, _local9);
            _local4.MultiplyNumber(_local6);
            _local2.Add(_local3);
            _local2.Add(_local4);
            var _local10:int;
            while (_local10 < 3) {
                _local11 = 0;
                while (_local11 < 3) {
                    m_matrix[_local10][_local11] = _local2.GetValue(_local10, _local11);
                    _local11++;
                };
                _local10++;
            };
        }
        public function GetFlatArray():Array{
            var _local4:int;
            if (!m_matrix){
                return (null);
            };
            var _local1:Array = new Array();
            var _local2:int;
            var _local3:int;
            while (_local3 < 4) {
                _local4 = 0;
                while (_local4 < 5) {
                    _local1[_local2] = m_matrix[_local3][_local4];
                    _local2++;
                    _local4++;
                };
                _local3++;
            };
            return (_local1);
        }

    }
}//package fl.motion 

class XFormData {

    public var ox:Number;
    public var oy:Number;
    public var oz:Number;

    public function XFormData(){
    }
}
﻿package fl.motion {

    public class AdjustColor {

        private static var s_arrayOfDeltaIndex:Array = [0, 0.01, 0.02, 0.04, 0.05, 0.06, 0.07, 0.08, 0.1, 0.11, 0.12, 0.14, 0.15, 0.16, 0.17, 0.18, 0.2, 0.21, 0.22, 0.24, 0.25, 0.27, 0.28, 0.3, 0.32, 0.34, 0.36, 0.38, 0.4, 0.42, 0.44, 0.46, 0.48, 0.5, 0.53, 0.56, 0.59, 0.62, 0.65, 0.68, 0.71, 0.74, 0.77, 0.8, 0.83, 0.86, 0.89, 0.92, 0.95, 0.98, 1, 1.06, 1.12, 1.18, 1.24, 1.3, 1.36, 1.42, 1.48, 1.54, 1.6, 1.66, 1.72, 1.78, 1.84, 1.9, 1.96, 2, 2.12, 2.25, 2.37, 2.5, 2.62, 2.75, 2.87, 3, 3.2, 3.4, 3.6, 3.8, 4, 4.3, 4.7, 4.9, 5, 5.5, 6, 6.5, 6.8, 7, 7.3, 7.5, 7.8, 8, 8.4, 8.7, 9, 9.4, 9.6, 9.8, 10];

        private var m_brightnessMatrix:ColorMatrix;
        private var m_contrastMatrix:ColorMatrix;
        private var m_saturationMatrix:ColorMatrix;
        private var m_hueMatrix:ColorMatrix;
        private var m_finalMatrix:ColorMatrix;

        public function set brightness(_arg1:Number):void{
            if (this.m_brightnessMatrix == null){
                this.m_brightnessMatrix = new ColorMatrix();
            };
            if (_arg1 != 0){
                this.m_brightnessMatrix.SetBrightnessMatrix(_arg1);
            };
        }
        public function set contrast(_arg1:Number):void{
            var _local2:Number = _arg1;
            if (_arg1 == 0){
                _local2 = 127;
            } else {
                if (_arg1 > 0){
                    _local2 = ((s_arrayOfDeltaIndex[int(_arg1)] * 127) + 127);
                } else {
                    _local2 = (((_arg1 / 100) * 127) + 127);
                };
            };
            if (this.m_contrastMatrix == null){
                this.m_contrastMatrix = new ColorMatrix();
            };
            this.m_contrastMatrix.SetContrastMatrix(_local2);
        }
        public function set saturation(_arg1:Number):void{
            var _local2:Number = _arg1;
            if (_arg1 == 0){
                _local2 = 1;
            } else {
                if (_arg1 > 0){
                    _local2 = (1 + ((3 * _arg1) / 100));
                } else {
                    _local2 = ((_arg1 / 100) + 1);
                };
            };
            if (this.m_saturationMatrix == null){
                this.m_saturationMatrix = new ColorMatrix();
            };
            this.m_saturationMatrix.SetSaturationMatrix(_local2);
        }
        public function set hue(_arg1:Number):void{
            if (this.m_hueMatrix == null){
                this.m_hueMatrix = new ColorMatrix();
            };
            if (_arg1 != 0){
                this.m_hueMatrix.SetHueMatrix(((_arg1 * Math.PI) / 180));
            };
        }
        public function AllValuesAreSet():Boolean{
            return (((((((this.m_brightnessMatrix) && (this.m_contrastMatrix))) && (this.m_saturationMatrix))) && (this.m_hueMatrix)));
        }
        public function CalculateFinalFlatArray():Array{
            if (this.CalculateFinalMatrix()){
                return (this.m_finalMatrix.GetFlatArray());
            };
            return (null);
        }
        private function CalculateFinalMatrix():Boolean{
            if (!this.AllValuesAreSet()){
                return (false);
            };
            this.m_finalMatrix = new ColorMatrix();
            this.m_finalMatrix.Multiply(this.m_brightnessMatrix);
            this.m_finalMatrix.Multiply(this.m_contrastMatrix);
            this.m_finalMatrix.Multiply(this.m_saturationMatrix);
            this.m_finalMatrix.Multiply(this.m_hueMatrix);
            return (true);
        }

    }
}//package fl.motion 
﻿package fl.motion {

    public class DynamicMatrix {

        public static const MATRIX_ORDER_PREPEND:int = 0;
        public static const MATRIX_ORDER_APPEND:int = 1;

        protected var m_width:int;
        protected var m_height:int;
        protected var m_matrix:Array;

        public function DynamicMatrix(_arg1:int, _arg2:int){
            this.Create(_arg1, _arg2);
        }
        protected function Create(_arg1:int, _arg2:int):void{
            var _local3:int;
            var _local4:int;
            if ((((_arg1 > 0)) && ((_arg2 > 0)))){
                this.m_width = _arg1;
                this.m_height = _arg2;
                this.m_matrix = new Array(_arg2);
                _local3 = 0;
                while (_local3 < _arg2) {
                    this.m_matrix[_local3] = new Array(_arg1);
                    _local4 = 0;
                    while (_local4 < _arg2) {
                        this.m_matrix[_local3][_local4] = 0;
                        _local4++;
                    };
                    _local3++;
                };
            };
        }
        protected function Destroy():void{
            this.m_matrix = null;
        }
        public function GetWidth():Number{
            return (this.m_width);
        }
        public function GetHeight():Number{
            return (this.m_height);
        }
        public function GetValue(_arg1:int, _arg2:int):Number{
            var _local3:Number = 0;
            if ((((((((_arg1 >= 0)) && ((_arg1 < this.m_height)))) && ((_arg2 >= 0)))) && ((_arg2 <= this.m_width)))){
                _local3 = this.m_matrix[_arg1][_arg2];
            };
            return (_local3);
        }
        public function SetValue(_arg1:int, _arg2:int, _arg3:Number):void{
            if ((((((((_arg1 >= 0)) && ((_arg1 < this.m_height)))) && ((_arg2 >= 0)))) && ((_arg2 <= this.m_width)))){
                this.m_matrix[_arg1][_arg2] = _arg3;
            };
        }
        public function LoadIdentity():void{
            var _local1:int;
            var _local2:int;
            if (this.m_matrix){
                _local1 = 0;
                while (_local1 < this.m_height) {
                    _local2 = 0;
                    while (_local2 < this.m_width) {
                        if (_local1 == _local2){
                            this.m_matrix[_local1][_local2] = 1;
                        } else {
                            this.m_matrix[_local1][_local2] = 0;
                        };
                        _local2++;
                    };
                    _local1++;
                };
            };
        }
        public function LoadZeros():void{
            var _local1:int;
            var _local2:int;
            if (this.m_matrix){
                _local1 = 0;
                while (_local1 < this.m_height) {
                    _local2 = 0;
                    while (_local2 < this.m_width) {
                        this.m_matrix[_local1][_local2] = 0;
                        _local2++;
                    };
                    _local1++;
                };
            };
        }
        public function Multiply(_arg1:DynamicMatrix, _arg2:int=0):Boolean{
            var _local5:DynamicMatrix;
            var _local6:int;
            var _local7:int;
            var _local8:Number;
            var _local9:int;
            var _local10:int;
            if (((!(this.m_matrix)) || (!(_arg1)))){
                return (false);
            };
            var _local3:int = _arg1.GetHeight();
            var _local4:int = _arg1.GetWidth();
            if (_arg2 == MATRIX_ORDER_APPEND){
                if (this.m_width != _local3){
                    return (false);
                };
                _local5 = new DynamicMatrix(_local4, this.m_height);
                _local6 = 0;
                while (_local6 < this.m_height) {
                    _local7 = 0;
                    while (_local7 < _local4) {
                        _local8 = 0;
                        _local9 = 0;
                        _local10 = 0;
                        while ((((_local9 < Math.max(this.m_height, _local3))) && ((_local10 < Math.max(this.m_width, _local4))))) {
                            _local8 = (_local8 + (_arg1.GetValue(_local9, _local7) * this.m_matrix[_local6][_local10]));
                            _local9++;
                            _local10++;
                        };
                        _local5.SetValue(_local6, _local7, _local8);
                        _local7++;
                    };
                    _local6++;
                };
                this.Destroy();
                this.Create(_local4, this.m_height);
                _local6 = 0;
                while (_local6 < _local3) {
                    _local7 = 0;
                    while (_local7 < this.m_width) {
                        this.m_matrix[_local6][_local7] = _local5.GetValue(_local6, _local7);
                        _local7++;
                    };
                    _local6++;
                };
            } else {
                if (this.m_height != _local4){
                    return (false);
                };
                _local5 = new DynamicMatrix(this.m_width, _local3);
                _local6 = 0;
                while (_local6 < _local3) {
                    _local7 = 0;
                    while (_local7 < this.m_width) {
                        _local8 = 0;
                        _local9 = 0;
                        _local10 = 0;
                        while ((((_local9 < Math.max(_local3, this.m_height))) && ((_local10 < Math.max(_local4, this.m_width))))) {
                            _local8 = (_local8 + (this.m_matrix[_local9][_local7] * _arg1.GetValue(_local6, _local10)));
                            _local9++;
                            _local10++;
                        };
                        _local5.SetValue(_local6, _local7, _local8);
                        _local7++;
                    };
                    _local6++;
                };
                this.Destroy();
                this.Create(this.m_width, _local3);
                _local6 = 0;
                while (_local6 < _local3) {
                    _local7 = 0;
                    while (_local7 < this.m_width) {
                        this.m_matrix[_local6][_local7] = _local5.GetValue(_local6, _local7);
                        _local7++;
                    };
                    _local6++;
                };
            };
            return (true);
        }
        public function MultiplyNumber(_arg1:Number):Boolean{
            var _local3:int;
            var _local4:Number;
            if (!this.m_matrix){
                return (false);
            };
            var _local2:int;
            while (_local2 < this.m_height) {
                _local3 = 0;
                while (_local3 < this.m_width) {
                    _local4 = 0;
                    _local4 = (this.m_matrix[_local2][_local3] * _arg1);
                    this.m_matrix[_local2][_local3] = _local4;
                    _local3++;
                };
                _local2++;
            };
            return (true);
        }
        public function Add(_arg1:DynamicMatrix):Boolean{
            var _local5:int;
            var _local6:Number;
            if (((!(this.m_matrix)) || (!(_arg1)))){
                return (false);
            };
            var _local2:int = _arg1.GetHeight();
            var _local3:int = _arg1.GetWidth();
            if (((!((this.m_width == _local3))) || (!((this.m_height == _local2))))){
                return (false);
            };
            var _local4:int;
            while (_local4 < this.m_height) {
                _local5 = 0;
                while (_local5 < this.m_width) {
                    _local6 = 0;
                    _local6 = (this.m_matrix[_local4][_local5] + _arg1.GetValue(_local4, _local5));
                    this.m_matrix[_local4][_local5] = _local6;
                    _local5++;
                };
                _local4++;
            };
            return (true);
        }

    }
}//package fl.motion 
﻿package fl.core {

    public class InvalidationType {

        public static const SIZE:String = "size";
        public static const ALL:String = "all";
        public static const DATA:String = "data";
        public static const SCROLL:String = "scroll";
        public static const STATE:String = "state";
        public static const STYLES:String = "styles";
        public static const SELECTED:String = "selected";
        public static const RENDERER_STYLES:String = "rendererStyles";

    }
}//package fl.core 
﻿package fl.core {
    import flash.display.*;
    import flash.text.*;
    import flash.events.*;
    import flash.system.*;
    import flash.utils.*;
    import fl.managers.*;
    import fl.events.*;

    public class UIComponent extends Sprite {

        public static var inCallLaterPhase:Boolean = false;
        private static var defaultStyles:Object = {
            focusRectSkin:"focusRectSkin",
            focusRectPadding:2,
            textFormat:new TextFormat("_sans", 11, 0, false, false, false, "", "", TextFormatAlign.LEFT, 0, 0, 0, 0),
            disabledTextFormat:new TextFormat("_sans", 11, 0x999999, false, false, false, "", "", TextFormatAlign.LEFT, 0, 0, 0, 0),
            defaultTextFormat:new TextFormat("_sans", 11, 0, false, false, false, "", "", TextFormatAlign.LEFT, 0, 0, 0, 0),
            defaultDisabledTextFormat:new TextFormat("_sans", 11, 0x999999, false, false, false, "", "", TextFormatAlign.LEFT, 0, 0, 0, 0)
        };
        public static var createAccessibilityImplementation:Function;
        private static var focusManagers:Dictionary = new Dictionary(false);

        protected var _enabled:Boolean = true;
        private var _mouseFocusEnabled:Boolean = true;
        protected var startHeight:Number;
        protected var _height:Number;
        protected var _oldIMEMode:String = null;
        protected var startWidth:Number;
        public var focusTarget:IFocusManagerComponent;
        protected var errorCaught:Boolean = false;
        protected var uiFocusRect:DisplayObject;
        protected var _width:Number;
        public var version:String = "3.0.0.15";
        protected var isFocused:Boolean = false;
        protected var callLaterMethods:Dictionary;
        private var _focusEnabled:Boolean = true;
        private var tempText:TextField;
        protected var invalidateFlag:Boolean = false;
        protected var _inspector:Boolean = false;
        protected var sharedStyles:Object;
        protected var invalidHash:Object;
        protected var isLivePreview:Boolean = false;
        protected var _imeMode:String = null;
        protected var instanceStyles:Object;
        protected var _x:Number;
        protected var _y:Number;

        public function UIComponent(){
            version = "3.0.0.15";
            isLivePreview = false;
            invalidateFlag = false;
            _enabled = true;
            isFocused = false;
            _focusEnabled = true;
            _mouseFocusEnabled = true;
            _imeMode = null;
            _oldIMEMode = null;
            errorCaught = false;
            _inspector = false;
            super();
            instanceStyles = {};
            sharedStyles = {};
            invalidHash = {};
            callLaterMethods = new Dictionary();
            StyleManager.registerInstance(this);
            configUI();
            invalidate(InvalidationType.ALL);
            tabEnabled = (this is IFocusManagerComponent);
            focusRect = false;
            if (tabEnabled){
                addEventListener(FocusEvent.FOCUS_IN, focusInHandler);
                addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler);
                addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);
                addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);
            };
            initializeFocusManager();
            addEventListener(Event.ENTER_FRAME, hookAccessibility, false, 0, true);
        }
        public static function getStyleDefinition():Object{
            return (defaultStyles);
        }
        public static function mergeStyles(... _args):Object{
            var _local2:Object;
            var _local3:uint;
            var _local4:uint;
            var _local5:Object;
            var _local6:String;
            _local2 = {};
            _local3 = _args.length;
            _local4 = 0;
            while (_local4 < _local3) {
                _local5 = _args[_local4];
                for (_local6 in _local5) {
                    if (_local2[_local6] != null){
                    } else {
                        _local2[_local6] = _args[_local4][_local6];
                    };
                };
                _local4++;
            };
            return (_local2);
        }

        public function drawFocus(_arg1:Boolean):void{
            var _local2:Number;
            isFocused = _arg1;
            if (((!((uiFocusRect == null))) && (contains(uiFocusRect)))){
                removeChild(uiFocusRect);
                uiFocusRect = null;
            };
            if (_arg1){
                uiFocusRect = (getDisplayObjectInstance(getStyleValue("focusRectSkin")) as Sprite);
                if (uiFocusRect == null){
                    return;
                };
                _local2 = Number(getStyleValue("focusRectPadding"));
                uiFocusRect.x = -(_local2);
                uiFocusRect.y = -(_local2);
                uiFocusRect.width = (width + (_local2 * 2));
                uiFocusRect.height = (height + (_local2 * 2));
                addChildAt(uiFocusRect, 0);
            };
        }
        private function callLaterDispatcher(_arg1:Event):void{
            var _local2:Dictionary;
            var _local3:Object;
            if (_arg1.type == Event.ADDED_TO_STAGE){
                removeEventListener(Event.ADDED_TO_STAGE, callLaterDispatcher);
                stage.addEventListener(Event.RENDER, callLaterDispatcher, false, 0, true);
                stage.invalidate();
                return;
            };
            _arg1.target.removeEventListener(Event.RENDER, callLaterDispatcher);
            if (stage == null){
                addEventListener(Event.ADDED_TO_STAGE, callLaterDispatcher, false, 0, true);
                return;
            };
            inCallLaterPhase = true;
            _local2 = callLaterMethods;
            for (_local3 in _local2) {
                _local3();
                delete _local2[_local3];
            };
            inCallLaterPhase = false;
        }
        private function addedHandler(_arg1:Event):void{
            removeEventListener("addedToStage", addedHandler);
            initializeFocusManager();
        }
        protected function getStyleValue(_arg1:String):Object{
            return (((instanceStyles[_arg1])==null) ? sharedStyles[_arg1] : instanceStyles[_arg1]);
        }
        protected function isOurFocus(_arg1:DisplayObject):Boolean{
            return ((_arg1 == this));
        }
        override public function get scaleX():Number{
            return ((width / startWidth));
        }
        override public function get scaleY():Number{
            return ((height / startHeight));
        }
        override public function set height(_arg1:Number):void{
            if (_height == _arg1){
                return;
            };
            setSize(width, _arg1);
        }
        protected function keyDownHandler(_arg1:KeyboardEvent):void{
        }
        protected function focusInHandler(_arg1:FocusEvent):void{
            var _local2:IFocusManager;
            if (isOurFocus((_arg1.target as DisplayObject))){
                _local2 = focusManager;
                if (((_local2) && (_local2.showFocusIndicator))){
                    drawFocus(true);
                    isFocused = true;
                };
            };
        }
        public function setStyle(_arg1:String, _arg2:Object):void{
            if ((((instanceStyles[_arg1] === _arg2)) && (!((_arg2 is TextFormat))))){
                return;
            };
            instanceStyles[_arg1] = _arg2;
            invalidate(InvalidationType.STYLES);
        }
        override public function get visible():Boolean{
            return (super.visible);
        }
        public function get componentInspectorSetting():Boolean{
            return (_inspector);
        }
        override public function get x():Number{
            return (((isNaN(_x)) ? super.x : _x));
        }
        override public function get y():Number{
            return (((isNaN(_y)) ? super.y : _y));
        }
        protected function setIMEMode(_arg1:Boolean){
            var enabled:* = _arg1;
            if (_imeMode != null){
                if (enabled){
                    IME.enabled = true;
                    _oldIMEMode = IME.conversionMode;
                    try {
                        if (((!(errorCaught)) && (!((IME.conversionMode == IMEConversionMode.UNKNOWN))))){
                            IME.conversionMode = _imeMode;
                        };
                        errorCaught = false;
                    } catch(e:Error) {
                        errorCaught = true;
                        throw (new Error(("IME mode not supported: " + _imeMode)));
                    };
                } else {
                    if (((!((IME.conversionMode == IMEConversionMode.UNKNOWN))) && (!((_oldIMEMode == IMEConversionMode.UNKNOWN))))){
                        IME.conversionMode = _oldIMEMode;
                    };
                    IME.enabled = false;
                };
            };
        }
        public function set enabled(_arg1:Boolean):void{
            if (_arg1 == _enabled){
                return;
            };
            _enabled = _arg1;
            invalidate(InvalidationType.STATE);
        }
        public function setSharedStyle(_arg1:String, _arg2:Object):void{
            if ((((sharedStyles[_arg1] === _arg2)) && (!((_arg2 is TextFormat))))){
                return;
            };
            sharedStyles[_arg1] = _arg2;
            if (instanceStyles[_arg1] == null){
                invalidate(InvalidationType.STYLES);
            };
        }
        protected function keyUpHandler(_arg1:KeyboardEvent):void{
        }
        public function set focusEnabled(_arg1:Boolean):void{
            _focusEnabled = _arg1;
        }
        override public function set scaleX(_arg1:Number):void{
            setSize((startWidth * _arg1), height);
        }
        public function get mouseFocusEnabled():Boolean{
            return (_mouseFocusEnabled);
        }
        override public function set scaleY(_arg1:Number):void{
            setSize(width, (startHeight * _arg1));
        }
        protected function getDisplayObjectInstance(_arg1:Object):DisplayObject{
            var classDef:* = null;
            var skin:* = _arg1;
            classDef = null;
            if ((skin is Class)){
                return ((new (skin)() as DisplayObject));
            };
            if ((skin is DisplayObject)){
                (skin as DisplayObject).x = 0;
                (skin as DisplayObject).y = 0;
                return ((skin as DisplayObject));
            };
            try {
                classDef = getDefinitionByName(skin.toString());
            } catch(e:Error) {
                try {
                    classDef = (loaderInfo.applicationDomain.getDefinition(skin.toString()) as Object);
                } catch(e:Error) {
                };
            };
            if (classDef == null){
                return (null);
            };
            return ((new (classDef)() as DisplayObject));
        }
        protected function copyStylesToChild(_arg1:UIComponent, _arg2:Object):void{
            var _local3:String;
            for (_local3 in _arg2) {
                _arg1.setStyle(_local3, getStyleValue(_arg2[_local3]));
            };
        }
        protected function beforeComponentParameters():void{
        }
        protected function callLater(_arg1:Function):void{
            if (inCallLaterPhase){
                return;
            };
            callLaterMethods[_arg1] = true;
            if (stage != null){
                stage.addEventListener(Event.RENDER, callLaterDispatcher, false, 0, true);
                stage.invalidate();
            } else {
                addEventListener(Event.ADDED_TO_STAGE, callLaterDispatcher, false, 0, true);
            };
        }
        protected function createFocusManager():void{
            if (focusManagers[stage] == null){
                focusManagers[stage] = new FocusManager(stage);
            };
        }
        override public function set visible(_arg1:Boolean):void{
            var _local2:String;
            if (super.visible == _arg1){
                return;
            };
            super.visible = _arg1;
            _local2 = ((_arg1) ? ComponentEvent.SHOW : ComponentEvent.HIDE);
            dispatchEvent(new ComponentEvent(_local2, true));
        }
        protected function hookAccessibility(_arg1:Event):void{
            removeEventListener(Event.ENTER_FRAME, hookAccessibility);
            initializeAccessibility();
        }
        public function set componentInspectorSetting(_arg1:Boolean):void{
            _inspector = _arg1;
            if (_inspector){
                beforeComponentParameters();
            } else {
                afterComponentParameters();
            };
        }
        override public function set x(_arg1:Number):void{
            move(_arg1, _y);
        }
        public function drawNow():void{
            draw();
        }
        override public function set y(_arg1:Number):void{
            move(_x, _arg1);
        }
        protected function checkLivePreview():Boolean{
            var className:* = null;
            if (parent == null){
                return (false);
            };
            try {
                className = getQualifiedClassName(parent);
            } catch(e:Error) {
            };
            return ((className == "fl.livepreview::LivePreviewParent"));
        }
        protected function focusOutHandler(_arg1:FocusEvent):void{
            if (isOurFocus((_arg1.target as DisplayObject))){
                drawFocus(false);
                isFocused = false;
            };
        }
        public function set mouseFocusEnabled(_arg1:Boolean):void{
            _mouseFocusEnabled = _arg1;
        }
        public function getFocus():InteractiveObject{
            if (stage){
                return (stage.focus);
            };
            return (null);
        }
        protected function validate():void{
            invalidHash = {};
        }
        override public function get height():Number{
            return (_height);
        }
        public function invalidate(_arg1:String="all", _arg2:Boolean=true):void{
            invalidHash[_arg1] = true;
            if (_arg2){
                this.callLater(draw);
            };
        }
        public function get enabled():Boolean{
            return (_enabled);
        }
        protected function getScaleX():Number{
            return (super.scaleX);
        }
        protected function getScaleY():Number{
            return (super.scaleY);
        }
        public function get focusEnabled():Boolean{
            return (_focusEnabled);
        }
        protected function afterComponentParameters():void{
        }
        protected function draw():void{
            if (isInvalid(InvalidationType.SIZE, InvalidationType.STYLES)){
                if (((isFocused) && (focusManager.showFocusIndicator))){
                    drawFocus(true);
                };
            };
            validate();
        }
        protected function configUI():void{
            var _local1:Number;
            var _local2:Number;
            var _local3:Number;
            isLivePreview = checkLivePreview();
            _local1 = rotation;
            rotation = 0;
            _local2 = super.width;
            _local3 = super.height;
            var _local4 = 1;
            super.scaleY = _local4;
            super.scaleX = _local4;
            setSize(_local2, _local3);
            move(super.x, super.y);
            rotation = _local1;
            startWidth = _local2;
            startHeight = _local3;
            if (numChildren > 0){
                removeChildAt(0);
            };
        }
        protected function setScaleX(_arg1:Number):void{
            super.scaleX = _arg1;
        }
        protected function setScaleY(_arg1:Number):void{
            super.scaleY = _arg1;
        }
        private function initializeFocusManager():void{
            if (stage == null){
                addEventListener(Event.ADDED_TO_STAGE, addedHandler, false, 0, true);
            } else {
                createFocusManager();
            };
        }
        public function set focusManager(_arg1:IFocusManager):void{
            UIComponent.focusManagers[this] = _arg1;
        }
        public function clearStyle(_arg1:String):void{
            setStyle(_arg1, null);
        }
        protected function isInvalid(_arg1:String, ... _args):Boolean{
            if (((invalidHash[_arg1]) || (invalidHash[InvalidationType.ALL]))){
                return (true);
            };
            while (_args.length > 0) {
                if (invalidHash[_args.pop()]){
                    return (true);
                };
            };
            return (false);
        }
        public function setSize(_arg1:Number, _arg2:Number):void{
            _width = _arg1;
            _height = _arg2;
            invalidate(InvalidationType.SIZE);
            dispatchEvent(new ComponentEvent(ComponentEvent.RESIZE, false));
        }
        override public function set width(_arg1:Number):void{
            if (_width == _arg1){
                return;
            };
            setSize(_arg1, height);
        }
        public function setFocus():void{
            if (stage){
                stage.focus = this;
            };
        }
        protected function initializeAccessibility():void{
            if (UIComponent.createAccessibilityImplementation != null){
                UIComponent.createAccessibilityImplementation(this);
            };
        }
        public function get focusManager():IFocusManager{
            var _local1:DisplayObject;
            _local1 = this;
            while (_local1) {
                if (UIComponent.focusManagers[_local1] != null){
                    return (IFocusManager(UIComponent.focusManagers[_local1]));
                };
                _local1 = _local1.parent;
            };
            return (null);
        }
        override public function get width():Number{
            return (_width);
        }
        public function move(_arg1:Number, _arg2:Number):void{
            _x = _arg1;
            _y = _arg2;
            super.x = Math.round(_arg1);
            super.y = Math.round(_arg2);
            dispatchEvent(new ComponentEvent(ComponentEvent.MOVE));
        }
        public function validateNow():void{
            invalidate(InvalidationType.ALL, false);
            draw();
        }
        public function getStyle(_arg1:String):Object{
            return (instanceStyles[_arg1]);
        }

    }
}//package fl.core 
﻿package fl.core {
    import flash.display.*;

    public dynamic class ComponentShim extends MovieClip {

    }
}//package fl.core 
﻿package fl.managers {
    import fl.controls.*;
    import flash.display.*;

    public interface IFocusManager {

        function getFocus():InteractiveObject;
        function deactivate():void;
        function set defaultButton(_arg1:Button):void;
        function set showFocusIndicator(_arg1:Boolean):void;
        function get defaultButtonEnabled():Boolean;
        function get nextTabIndex():int;
        function get defaultButton():Button;
        function get showFocusIndicator():Boolean;
        function setFocus(_arg1:InteractiveObject):void;
        function activate():void;
        function showFocus():void;
        function set defaultButtonEnabled(_arg1:Boolean):void;
        function hideFocus():void;
        function findFocusManagerComponent(_arg1:InteractiveObject):InteractiveObject;
        function getNextFocusManagerComponent(_arg1:Boolean=false):InteractiveObject;

    }
}//package fl.managers 
﻿package fl.managers {

    public interface IFocusManagerComponent {

        function set focusEnabled(_arg1:Boolean):void;
        function drawFocus(_arg1:Boolean):void;
        function setFocus():void;
        function get focusEnabled():Boolean;
        function get tabEnabled():Boolean;
        function get tabIndex():int;
        function get mouseFocusEnabled():Boolean;

    }
}//package fl.managers 
﻿package fl.managers {
    import flash.text.*;
    import fl.core.*;
    import flash.utils.*;

    public class StyleManager {

        private static var _instance:StyleManager;

        private var globalStyles:Object;
        private var classToDefaultStylesDict:Dictionary;
        private var styleToClassesHash:Object;
        private var classToStylesDict:Dictionary;
        private var classToInstancesDict:Dictionary;

        public function StyleManager(){
            styleToClassesHash = {};
            classToInstancesDict = new Dictionary(true);
            classToStylesDict = new Dictionary(true);
            classToDefaultStylesDict = new Dictionary(true);
            globalStyles = UIComponent.getStyleDefinition();
        }
        public static function clearComponentStyle(_arg1:Object, _arg2:String):void{
            var _local3:Class;
            var _local4:Object;
            _local3 = getClassDef(_arg1);
            _local4 = getInstance().classToStylesDict[_local3];
            if (((!((_local4 == null))) && (!((_local4[_arg2] == null))))){
                delete _local4[_arg2];
                invalidateComponentStyle(_local3, _arg2);
            };
        }
        private static function getClassDef(_arg1:Object):Class{
            var component:* = _arg1;
            if ((component is Class)){
                return ((component as Class));
            };
            try {
                return ((getDefinitionByName(getQualifiedClassName(component)) as Class));
            } catch(e:Error) {
                if ((component is UIComponent)){
                    try {
                        return ((component.loaderInfo.applicationDomain.getDefinition(getQualifiedClassName(component)) as Class));
                    } catch(e:Error) {
                    };
                };
            };
            return (null);
        }
        public static function clearStyle(_arg1:String):void{
            setStyle(_arg1, null);
        }
        public static function setComponentStyle(_arg1:Object, _arg2:String, _arg3:Object):void{
            var _local4:Class;
            var _local5:Object;
            _local4 = getClassDef(_arg1);
            _local5 = getInstance().classToStylesDict[_local4];
            if (_local5 == null){
                _local5 = (getInstance().classToStylesDict[_local4] = {});
            };
            if (_local5 == _arg3){
                return;
            };
            _local5[_arg2] = _arg3;
            invalidateComponentStyle(_local4, _arg2);
        }
        private static function setSharedStyles(_arg1:UIComponent):void{
            var _local2:StyleManager;
            var _local3:Class;
            var _local4:Object;
            var _local5:String;
            _local2 = getInstance();
            _local3 = getClassDef(_arg1);
            _local4 = _local2.classToDefaultStylesDict[_local3];
            for (_local5 in _local4) {
                _arg1.setSharedStyle(_local5, getSharedStyle(_arg1, _local5));
            };
        }
        public static function getComponentStyle(_arg1:Object, _arg2:String):Object{
            var _local3:Class;
            var _local4:Object;
            _local3 = getClassDef(_arg1);
            _local4 = getInstance().classToStylesDict[_local3];
            return (((_local4)==null) ? null : _local4[_arg2]);
        }
        private static function getInstance(){
            if (_instance == null){
                _instance = new (StyleManager)();
            };
            return (_instance);
        }
        private static function invalidateComponentStyle(_arg1:Class, _arg2:String):void{
            var _local3:Dictionary;
            var _local4:Object;
            var _local5:UIComponent;
            _local3 = getInstance().classToInstancesDict[_arg1];
            if (_local3 == null){
                return;
            };
            for (_local4 in _local3) {
                _local5 = (_local4 as UIComponent);
                if (_local5 == null){
                } else {
                    _local5.setSharedStyle(_arg2, getSharedStyle(_local5, _arg2));
                };
            };
        }
        private static function invalidateStyle(_arg1:String):void{
            var _local2:Dictionary;
            var _local3:Object;
            _local2 = getInstance().styleToClassesHash[_arg1];
            if (_local2 == null){
                return;
            };
            for (_local3 in _local2) {
                invalidateComponentStyle(Class(_local3), _arg1);
            };
        }
        public static function registerInstance(_arg1:UIComponent):void{
            var inst:* = null;
            var classDef:* = null;
            var target:* = null;
            var defaultStyles:* = null;
            var styleToClasses:* = null;
            var n:* = null;
            var instance:* = _arg1;
            inst = getInstance();
            classDef = getClassDef(instance);
            if (classDef == null){
                return;
            };
            if (inst.classToInstancesDict[classDef] == null){
                inst.classToInstancesDict[classDef] = new Dictionary(true);
                target = classDef;
                while (defaultStyles == null) {
                    if (target["getStyleDefinition"] != null){
                        defaultStyles = target["getStyleDefinition"]();
                        break;
                    };
                    try {
                        target = (instance.loaderInfo.applicationDomain.getDefinition(getQualifiedSuperclassName(target)) as Class);
                    } catch(err:Error) {
                        try {
                            target = (getDefinitionByName(getQualifiedSuperclassName(target)) as Class);
                        } catch(e:Error) {
                            defaultStyles = UIComponent.getStyleDefinition();
                            break;
                        };
                    };
                };
                styleToClasses = inst.styleToClassesHash;
                for (n in defaultStyles) {
                    if (styleToClasses[n] == null){
                        styleToClasses[n] = new Dictionary(true);
                    };
                    styleToClasses[n][classDef] = true;
                };
                inst.classToDefaultStylesDict[classDef] = defaultStyles;
                inst.classToStylesDict[classDef] = {};
            };
            inst.classToInstancesDict[classDef][instance] = true;
            setSharedStyles(instance);
        }
        public static function getStyle(_arg1:String):Object{
            return (getInstance().globalStyles[_arg1]);
        }
        private static function getSharedStyle(_arg1:UIComponent, _arg2:String):Object{
            var _local3:Class;
            var _local4:StyleManager;
            var _local5:Object;
            _local3 = getClassDef(_arg1);
            _local4 = getInstance();
            _local5 = _local4.classToStylesDict[_local3][_arg2];
            if (_local5 != null){
                return (_local5);
            };
            _local5 = _local4.globalStyles[_arg2];
            if (_local5 != null){
                return (_local5);
            };
            return (_local4.classToDefaultStylesDict[_local3][_arg2]);
        }
        public static function setStyle(_arg1:String, _arg2:Object):void{
            var _local3:Object;
            _local3 = getInstance().globalStyles;
            if ((((_local3[_arg1] === _arg2)) && (!((_arg2 is TextFormat))))){
                return;
            };
            _local3[_arg1] = _arg2;
            invalidateStyle(_arg1);
        }

    }
}//package fl.managers 
﻿package fl.managers {

    public interface IFocusManagerGroup {

        function set groupName(_arg1:String):void;
        function set selected(_arg1:Boolean):void;
        function get groupName():String;
        function get selected():Boolean;

    }
}//package fl.managers 
﻿package fl.managers {
    import fl.controls.*;
    import flash.display.*;
    import flash.text.*;
    import fl.core.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.ui.*;

    public class FocusManager implements IFocusManager {

        private var focusableObjects:Dictionary;
        private var _showFocusIndicator:Boolean = true;
        private var defButton:Button;
        private var focusableCandidates:Array;
        private var _form:DisplayObjectContainer;
        private var _defaultButtonEnabled:Boolean = true;
        private var activated:Boolean = false;
        private var _defaultButton:Button;
        private var calculateCandidates:Boolean = true;
        private var lastFocus:InteractiveObject;
        private var lastAction:String;

        public function FocusManager(_arg1:DisplayObjectContainer){
            activated = false;
            calculateCandidates = true;
            _showFocusIndicator = true;
            _defaultButtonEnabled = true;
            super();
            focusableObjects = new Dictionary(true);
            if (_arg1 != null){
                _form = _arg1;
                addFocusables(DisplayObject(_arg1));
                _arg1.addEventListener(Event.ADDED, addedHandler);
                _arg1.addEventListener(Event.REMOVED, removedHandler);
                activate();
            };
        }
        public function get showFocusIndicator():Boolean{
            return (_showFocusIndicator);
        }
        private function getIndexOfNextObject(_arg1:int, _arg2:Boolean, _arg3:Boolean, _arg4:String):int{
            var _local5:int;
            var _local6:int;
            var _local7:DisplayObject;
            var _local8:IFocusManagerGroup;
            var _local9:int;
            var _local10:DisplayObject;
            var _local11:IFocusManagerGroup;
            _local5 = focusableCandidates.length;
            _local6 = _arg1;
            while (true) {
                if (_arg2){
                    _arg1--;
                } else {
                    _arg1++;
                };
                if (_arg3){
                    if (((_arg2) && ((_arg1 < 0)))){
                        break;
                    };
                    if (((!(_arg2)) && ((_arg1 == _local5)))){
                        break;
                    };
                } else {
                    _arg1 = ((_arg1 + _local5) % _local5);
                    if (_local6 == _arg1){
                        break;
                    };
                };
                if (isValidFocusCandidate(focusableCandidates[_arg1], _arg4)){
                    _local7 = DisplayObject(findFocusManagerComponent(focusableCandidates[_arg1]));
                    if ((_local7 is IFocusManagerGroup)){
                        _local8 = IFocusManagerGroup(_local7);
                        _local9 = 0;
                        while (_local9 < focusableCandidates.length) {
                            _local10 = focusableCandidates[_local9];
                            if ((_local10 is IFocusManagerGroup)){
                                _local11 = IFocusManagerGroup(_local10);
                                if ((((_local11.groupName == _local8.groupName)) && (_local11.selected))){
                                    _arg1 = _local9;
                                    break;
                                };
                            };
                            _local9++;
                        };
                    };
                    return (_arg1);
                };
            };
            return (_arg1);
        }
        public function set form(_arg1:DisplayObjectContainer):void{
            _form = _arg1;
        }
        private function addFocusables(_arg1:DisplayObject, _arg2:Boolean=false):void{
            var focusable:* = null;
            var io:* = null;
            var doc:* = null;
            var i:* = 0;
            var child:* = null;
            var o:* = _arg1;
            var skipTopLevel:Boolean = _arg2;
            if (!skipTopLevel){
                if ((o is IFocusManagerComponent)){
                    focusable = IFocusManagerComponent(o);
                    if (focusable.focusEnabled){
                        if (((focusable.tabEnabled) && (isTabVisible(o)))){
                            focusableObjects[o] = true;
                            calculateCandidates = true;
                        };
                        o.addEventListener(Event.TAB_ENABLED_CHANGE, tabEnabledChangeHandler);
                        o.addEventListener(Event.TAB_INDEX_CHANGE, tabIndexChangeHandler);
                    };
                } else {
                    if ((o is InteractiveObject)){
                        io = (o as InteractiveObject);
                        if (((((io) && (io.tabEnabled))) && ((findFocusManagerComponent(io) == io)))){
                            focusableObjects[io] = true;
                            calculateCandidates = true;
                        };
                        io.addEventListener(Event.TAB_ENABLED_CHANGE, tabEnabledChangeHandler);
                        io.addEventListener(Event.TAB_INDEX_CHANGE, tabIndexChangeHandler);
                    };
                };
            };
            if ((o is DisplayObjectContainer)){
                doc = DisplayObjectContainer(o);
                o.addEventListener(Event.TAB_CHILDREN_CHANGE, tabChildrenChangeHandler);
                if ((((((doc is Stage)) || ((doc.parent is Stage)))) || (doc.tabChildren))){
                    i = 0;
                    while (i < doc.numChildren) {
                        try {
                            child = doc.getChildAt(i);
                            if (child != null){
                                addFocusables(doc.getChildAt(i));
                            };
                        } catch(error:SecurityError) {
                        };
                        i = (i + 1);
                    };
                };
            };
        }
        private function getChildIndex(_arg1:DisplayObjectContainer, _arg2:DisplayObject):int{
            return (_arg1.getChildIndex(_arg2));
        }
        private function mouseFocusChangeHandler(_arg1:FocusEvent):void{
            if ((_arg1.relatedObject is TextField)){
                return;
            };
            _arg1.preventDefault();
        }
        private function focusOutHandler(_arg1:FocusEvent):void{
            var _local2:InteractiveObject;
            _local2 = (_arg1.target as InteractiveObject);
        }
        private function isValidFocusCandidate(_arg1:DisplayObject, _arg2:String):Boolean{
            var _local3:IFocusManagerGroup;
            if (!isEnabledAndVisible(_arg1)){
                return (false);
            };
            if ((_arg1 is IFocusManagerGroup)){
                _local3 = IFocusManagerGroup(_arg1);
                if (_arg2 == _local3.groupName){
                    return (false);
                };
            };
            return (true);
        }
        public function findFocusManagerComponent(_arg1:InteractiveObject):InteractiveObject{
            var _local2:InteractiveObject;
            _local2 = _arg1;
            while (_arg1) {
                if ((((_arg1 is IFocusManagerComponent)) && (IFocusManagerComponent(_arg1).focusEnabled))){
                    return (_arg1);
                };
                _arg1 = _arg1.parent;
            };
            return (_local2);
        }
        private function sortFocusableObjectsTabIndex():void{
            var _local1:Object;
            var _local2:InteractiveObject;
            focusableCandidates = [];
            for (_local1 in focusableObjects) {
                _local2 = InteractiveObject(_local1);
                if (((_local2.tabIndex) && (!(isNaN(Number(_local2.tabIndex)))))){
                    focusableCandidates.push(_local2);
                };
            };
            focusableCandidates.sort(sortByTabIndex);
        }
        private function removeFocusables(_arg1:DisplayObject):void{
            var _local2:Object;
            var _local3:DisplayObject;
            if ((_arg1 is DisplayObjectContainer)){
                _arg1.removeEventListener(Event.TAB_CHILDREN_CHANGE, tabChildrenChangeHandler);
                _arg1.removeEventListener(Event.TAB_INDEX_CHANGE, tabIndexChangeHandler);
                for (_local2 in focusableObjects) {
                    _local3 = DisplayObject(_local2);
                    if (DisplayObjectContainer(_arg1).contains(_local3)){
                        if (_local3 == lastFocus){
                            lastFocus = null;
                        };
                        _local3.removeEventListener(Event.TAB_ENABLED_CHANGE, tabEnabledChangeHandler);
                        delete focusableObjects[_local2];
                        calculateCandidates = true;
                    };
                };
            };
        }
        private function addedHandler(_arg1:Event):void{
            var _local2:DisplayObject;
            _local2 = DisplayObject(_arg1.target);
            if (_local2.stage){
                addFocusables(DisplayObject(_arg1.target));
            };
        }
        private function getTopLevelFocusTarget(_arg1:InteractiveObject):InteractiveObject{
            while (_arg1 != InteractiveObject(form)) {
                if ((((((((_arg1 is IFocusManagerComponent)) && (IFocusManagerComponent(_arg1).focusEnabled))) && (IFocusManagerComponent(_arg1).mouseFocusEnabled))) && (UIComponent(_arg1).enabled))){
                    return (_arg1);
                };
                _arg1 = _arg1.parent;
                if (_arg1 == null){
                    break;
                };
            };
            return (null);
        }
        private function tabChildrenChangeHandler(_arg1:Event):void{
            var _local2:DisplayObjectContainer;
            if (_arg1.target != _arg1.currentTarget){
                return;
            };
            calculateCandidates = true;
            _local2 = DisplayObjectContainer(_arg1.target);
            if (_local2.tabChildren){
                addFocusables(_local2, true);
            } else {
                removeFocusables(_local2);
            };
        }
        public function sendDefaultButtonEvent():void{
            defButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
        }
        public function getFocus():InteractiveObject{
            var _local1:InteractiveObject;
            _local1 = form.stage.focus;
            return (findFocusManagerComponent(_local1));
        }
        private function isEnabledAndVisible(_arg1:DisplayObject):Boolean{
            var _local2:DisplayObjectContainer;
            var _local3:TextField;
            var _local4:SimpleButton;
            _local2 = DisplayObject(form).parent;
            while (_arg1 != _local2) {
                if ((_arg1 is UIComponent)){
                    if (!UIComponent(_arg1).enabled){
                        return (false);
                    };
                } else {
                    if ((_arg1 is TextField)){
                        _local3 = TextField(_arg1);
                        if ((((_local3.type == TextFieldType.DYNAMIC)) || (!(_local3.selectable)))){
                            return (false);
                        };
                    } else {
                        if ((_arg1 is SimpleButton)){
                            _local4 = SimpleButton(_arg1);
                            if (!_local4.enabled){
                                return (false);
                            };
                        };
                    };
                };
                if (!_arg1.visible){
                    return (false);
                };
                _arg1 = _arg1.parent;
            };
            return (true);
        }
        public function set defaultButton(_arg1:Button):void{
            var _local2:Button;
            _local2 = ((_arg1) ? Button(_arg1) : null);
            if (_local2 != _defaultButton){
                if (_defaultButton){
                    _defaultButton.emphasized = false;
                };
                if (defButton){
                    defButton.emphasized = false;
                };
                _defaultButton = _local2;
                defButton = _local2;
                if (_local2){
                    _local2.emphasized = true;
                };
            };
        }
        private function deactivateHandler(_arg1:Event):void{
            var _local2:InteractiveObject;
            _local2 = InteractiveObject(_arg1.target);
        }
        public function setFocus(_arg1:InteractiveObject):void{
            if ((_arg1 is IFocusManagerComponent)){
                IFocusManagerComponent(_arg1).setFocus();
            } else {
                form.stage.focus = _arg1;
            };
        }
        private function setFocusToNextObject(_arg1:FocusEvent):void{
            var _local2:InteractiveObject;
            if (!hasFocusableObjects()){
                return;
            };
            _local2 = getNextFocusManagerComponent(_arg1.shiftKey);
            if (_local2){
                setFocus(_local2);
            };
        }
        private function hasFocusableObjects():Boolean{
            var _local1:Object;
            for (_local1 in focusableObjects) {
                return (true);
            };
            return (false);
        }
        private function tabIndexChangeHandler(_arg1:Event):void{
            calculateCandidates = true;
        }
        private function sortFocusableObjects():void{
            var _local1:Object;
            var _local2:InteractiveObject;
            focusableCandidates = [];
            for (_local1 in focusableObjects) {
                _local2 = InteractiveObject(_local1);
                if (((((_local2.tabIndex) && (!(isNaN(Number(_local2.tabIndex)))))) && ((_local2.tabIndex > 0)))){
                    sortFocusableObjectsTabIndex();
                    return;
                };
                focusableCandidates.push(_local2);
            };
            focusableCandidates.sort(sortByDepth);
        }
        private function keyFocusChangeHandler(_arg1:FocusEvent):void{
            showFocusIndicator = true;
            if ((((((_arg1.keyCode == Keyboard.TAB)) || ((_arg1.keyCode == 0)))) && (!(_arg1.isDefaultPrevented())))){
                setFocusToNextObject(_arg1);
                _arg1.preventDefault();
            };
        }
        private function getIndexOfFocusedObject(_arg1:DisplayObject):int{
            var _local2:int;
            var _local3:int;
            _local2 = focusableCandidates.length;
            _local3 = 0;
            _local3 = 0;
            while (_local3 < _local2) {
                if (focusableCandidates[_local3] == _arg1){
                    return (_local3);
                };
                _local3++;
            };
            return (-1);
        }
        public function hideFocus():void{
        }
        private function removedHandler(_arg1:Event):void{
            var _local2:int;
            var _local3:DisplayObject;
            var _local4:InteractiveObject;
            _local3 = DisplayObject(_arg1.target);
            if ((((_local3 is IFocusManagerComponent)) && ((focusableObjects[_local3] == true)))){
                if (_local3 == lastFocus){
                    IFocusManagerComponent(lastFocus).drawFocus(false);
                    lastFocus = null;
                };
                _local3.removeEventListener(Event.TAB_ENABLED_CHANGE, tabEnabledChangeHandler);
                delete focusableObjects[_local3];
                calculateCandidates = true;
            } else {
                if ((((_local3 is InteractiveObject)) && ((focusableObjects[_local3] == true)))){
                    _local4 = (_local3 as InteractiveObject);
                    if (_local4){
                        if (_local4 == lastFocus){
                            lastFocus = null;
                        };
                        delete focusableObjects[_local4];
                        calculateCandidates = true;
                    };
                    _local3.addEventListener(Event.TAB_ENABLED_CHANGE, tabEnabledChangeHandler);
                };
            };
            removeFocusables(_local3);
        }
        private function sortByDepth(_arg1:InteractiveObject, _arg2:InteractiveObject):Number{
            var _local3:String;
            var _local4:String;
            var _local5:int;
            var _local6:String;
            var _local7:String;
            var _local8:String;
            var _local9:DisplayObject;
            var _local10:DisplayObject;
            _local3 = "";
            _local4 = "";
            _local8 = "0000";
            _local9 = DisplayObject(_arg1);
            _local10 = DisplayObject(_arg2);
            while (((!((_local9 == DisplayObject(form)))) && (_local9.parent))) {
                _local5 = getChildIndex(_local9.parent, _local9);
                _local6 = _local5.toString(16);
                if (_local6.length < 4){
                    _local7 = (_local8.substring(0, (4 - _local6.length)) + _local6);
                };
                _local3 = (_local7 + _local3);
                _local9 = _local9.parent;
            };
            while (((!((_local10 == DisplayObject(form)))) && (_local10.parent))) {
                _local5 = getChildIndex(_local10.parent, _local10);
                _local6 = _local5.toString(16);
                if (_local6.length < 4){
                    _local7 = (_local8.substring(0, (4 - _local6.length)) + _local6);
                };
                _local4 = (_local7 + _local4);
                _local10 = _local10.parent;
            };
            return ((((_local3 > _local4)) ? 1 : (((_local3 < _local4)) ? -1 : 0)));
        }
        public function get defaultButton():Button{
            return (_defaultButton);
        }
        private function activateHandler(_arg1:Event):void{
            var _local2:InteractiveObject;
            _local2 = InteractiveObject(_arg1.target);
            if (lastFocus){
                if ((lastFocus is IFocusManagerComponent)){
                    IFocusManagerComponent(lastFocus).setFocus();
                } else {
                    form.stage.focus = lastFocus;
                };
            };
            lastAction = "ACTIVATE";
        }
        public function showFocus():void{
        }
        public function set defaultButtonEnabled(_arg1:Boolean):void{
            _defaultButtonEnabled = _arg1;
        }
        public function getNextFocusManagerComponent(_arg1:Boolean=false):InteractiveObject{
            var _local2:DisplayObject;
            var _local3:String;
            var _local4:int;
            var _local5:Boolean;
            var _local6:int;
            var _local7:int;
            var _local8:IFocusManagerGroup;
            if (!hasFocusableObjects()){
                return (null);
            };
            if (calculateCandidates){
                sortFocusableObjects();
                calculateCandidates = false;
            };
            _local2 = form.stage.focus;
            _local2 = DisplayObject(findFocusManagerComponent(InteractiveObject(_local2)));
            _local3 = "";
            if ((_local2 is IFocusManagerGroup)){
                _local8 = IFocusManagerGroup(_local2);
                _local3 = _local8.groupName;
            };
            _local4 = getIndexOfFocusedObject(_local2);
            _local5 = false;
            _local6 = _local4;
            if (_local4 == -1){
                if (_arg1){
                    _local4 = focusableCandidates.length;
                };
                _local5 = true;
            };
            _local7 = getIndexOfNextObject(_local4, _arg1, _local5, _local3);
            return (findFocusManagerComponent(focusableCandidates[_local7]));
        }
        private function mouseDownHandler(_arg1:MouseEvent):void{
            var _local2:InteractiveObject;
            if (_arg1.isDefaultPrevented()){
                return;
            };
            _local2 = getTopLevelFocusTarget(InteractiveObject(_arg1.target));
            if (!_local2){
                return;
            };
            showFocusIndicator = false;
            if (((((!((_local2 == lastFocus))) || ((lastAction == "ACTIVATE")))) && (!((_local2 is TextField))))){
                setFocus(_local2);
            };
            lastAction = "MOUSEDOWN";
        }
        private function isTabVisible(_arg1:DisplayObject):Boolean{
            var _local2:DisplayObjectContainer;
            _local2 = _arg1.parent;
            while (((((_local2) && (!((_local2 is Stage))))) && (!(((_local2.parent) && ((_local2.parent is Stage))))))) {
                if (!_local2.tabChildren){
                    return (false);
                };
                _local2 = _local2.parent;
            };
            return (true);
        }
        public function get nextTabIndex():int{
            return (0);
        }
        private function keyDownHandler(_arg1:KeyboardEvent):void{
            if (_arg1.keyCode == Keyboard.TAB){
                lastAction = "KEY";
                if (calculateCandidates){
                    sortFocusableObjects();
                    calculateCandidates = false;
                };
            };
            if (((((((defaultButtonEnabled) && ((_arg1.keyCode == Keyboard.ENTER)))) && (defaultButton))) && (defButton.enabled))){
                sendDefaultButtonEvent();
            };
        }
        private function focusInHandler(_arg1:FocusEvent):void{
            var _local2:InteractiveObject;
            var _local3:Button;
            _local2 = InteractiveObject(_arg1.target);
            if (form.contains(_local2)){
                lastFocus = findFocusManagerComponent(InteractiveObject(_local2));
                if ((lastFocus is Button)){
                    _local3 = Button(lastFocus);
                    if (defButton){
                        defButton.emphasized = false;
                        defButton = _local3;
                        _local3.emphasized = true;
                    };
                } else {
                    if (((defButton) && (!((defButton == _defaultButton))))){
                        defButton.emphasized = false;
                        defButton = _defaultButton;
                        _defaultButton.emphasized = true;
                    };
                };
            };
        }
        private function tabEnabledChangeHandler(_arg1:Event):void{
            var _local2:InteractiveObject;
            var _local3:Boolean;
            calculateCandidates = true;
            _local2 = InteractiveObject(_arg1.target);
            _local3 = (focusableObjects[_local2] == true);
            if (_local2.tabEnabled){
                if (((!(_local3)) && (isTabVisible(_local2)))){
                    if (!(_local2 is IFocusManagerComponent)){
                        _local2.focusRect = false;
                    };
                    focusableObjects[_local2] = true;
                };
            } else {
                if (_local3){
                    delete focusableObjects[_local2];
                };
            };
        }
        public function set showFocusIndicator(_arg1:Boolean):void{
            _showFocusIndicator = _arg1;
        }
        public function get form():DisplayObjectContainer{
            return (_form);
        }
        private function sortByTabIndex(_arg1:InteractiveObject, _arg2:InteractiveObject):int{
            return ((((_arg1.tabIndex > _arg2.tabIndex)) ? 1 : (((_arg1.tabIndex < _arg2.tabIndex)) ? -1 : sortByDepth(_arg1, _arg2))));
        }
        public function activate():void{
            if (activated){
                return;
            };
            form.stage.addEventListener(FocusEvent.MOUSE_FOCUS_CHANGE, mouseFocusChangeHandler, false, 0, true);
            form.stage.addEventListener(FocusEvent.KEY_FOCUS_CHANGE, keyFocusChangeHandler, false, 0, true);
            form.addEventListener(FocusEvent.FOCUS_IN, focusInHandler, true);
            form.addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler, true);
            form.stage.addEventListener(Event.ACTIVATE, activateHandler, false, 0, true);
            form.stage.addEventListener(Event.DEACTIVATE, deactivateHandler, false, 0, true);
            form.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
            form.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler, true);
            activated = true;
            if (lastFocus){
                setFocus(lastFocus);
            };
        }
        public function deactivate():void{
            form.stage.removeEventListener(FocusEvent.MOUSE_FOCUS_CHANGE, mouseFocusChangeHandler);
            form.stage.removeEventListener(FocusEvent.KEY_FOCUS_CHANGE, keyFocusChangeHandler);
            form.removeEventListener(FocusEvent.FOCUS_IN, focusInHandler, true);
            form.removeEventListener(FocusEvent.FOCUS_OUT, focusOutHandler, true);
            form.stage.removeEventListener(Event.ACTIVATE, activateHandler);
            form.stage.removeEventListener(Event.DEACTIVATE, deactivateHandler);
            form.removeEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
            form.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler, true);
            activated = false;
        }
        public function get defaultButtonEnabled():Boolean{
            return (_defaultButtonEnabled);
        }

    }
}//package fl.managers 
﻿package fl.events {
    import flash.events.*;

    public class ComponentEvent extends Event {

        public static const HIDE:String = "hide";
        public static const BUTTON_DOWN:String = "buttonDown";
        public static const MOVE:String = "move";
        public static const RESIZE:String = "resize";
        public static const ENTER:String = "enter";
        public static const LABEL_CHANGE:String = "labelChange";
        public static const SHOW:String = "show";

        public function ComponentEvent(_arg1:String, _arg2:Boolean=false, _arg3:Boolean=false){
            super(_arg1, _arg2, _arg3);
        }
        override public function toString():String{
            return (formatToString("ComponentEvent", "type", "bubbles", "cancelable"));
        }
        override public function clone():Event{
            return (new ComponentEvent(type, bubbles, cancelable));
        }

    }
}//package fl.events 
﻿package mb {
    import flash.display.*;
    import flash.geom.*;

    public class Context {

        private var _p:PixelPoint;

        public function Context(_arg1:DisplayObject):void{
            this._p = new PixelPoint(_arg1.x, _arg1.y, _arg1.parent);
        }
        public static function wrapObject(_arg1:DisplayObject):Context{
            return (new Context(_arg1));
        }
        public static function addObjectToContainer(_arg1:DisplayObject, _arg2:DisplayObjectContainer):void{
            var _local3:PixelPoint = new PixelPoint(_arg1.x, _arg1.y, _arg1.parent);
            _local3.setContext(_arg2);
            _arg2.addChild(_arg1);
            _arg1.x = _local3.x;
            _arg1.y = _local3.y;
        }
        public static function translateObjectXY(_arg1:DisplayObject, _arg2:DisplayObjectContainer):Point{
            var _local3:Point = new Point(_arg1.x, _arg1.y);
            if (_arg1.parent != _arg2){
                _local3 = PixelPoint.translateXY(_local3.x, _local3.y, _arg1.parent, _arg2);
            };
            return (_local3);
        }

        public function setContext(_arg1:DisplayObjectContainer):Context{
            this._p.setContext(_arg1);
            return (this);
        }
        public function get x():Number{
            return (this._p.x);
        }
        public function get y():Number{
            return (this._p.y);
        }

    }
}//package mb 
﻿package mb.symbols {
    import flash.display.*;

    public class BitmapSymbol {

        public var bitmap:BitmapData;
        public var height:Number;
        public var width:Number;
        public var xOff:Number;
        public var yOff:Number;
        public var xIns:Number;
        public var yIns:Number;

    }
}//package mb.symbols 
﻿package mb.symbols {
    import mb.*;

    public class SymbolData implements ISymbolData {

        public static var _hitBounds:BoundingBox = new BoundingBox();

        public var id:int;
        public var x:Number;
        public var y:Number;
        public var useBox:Boolean = false;
        public var width:Number = 0;
        public var height:Number = 0;
        public var xoff:Number = 0;
        public var yoff:Number = 0;
        public var hidden:Boolean = false;
        public var visible:Boolean = true;
        public var size:Number = 0;
        public var minHitRadius:Number = 10;
        public var fade:Number = 1;
        public var prevSize:Number = 0;
        public var nextSize:Number;
        public var cacheKey:uint = 0;

        public function SymbolData(_arg1:int){
            this.id = _arg1;
        }
        public function inView(_arg1:BoundingBox, _arg2:Number):Boolean{
            var _local4:Number;
            var _local5:Number;
            var _local6:Number;
            var _local3:Boolean;
            if (this.useBox){
                _local4 = (this.y - (this.yoff * _arg2));
                _local5 = (this.x + (this.xoff * _arg2));
                _hitBounds.top = _local4;
                _hitBounds.left = _local5;
                _hitBounds.right = (_local5 + (this.width * _arg2));
                _hitBounds.bottom = (_local4 - (this.height * _arg2));
                _hitBounds.hasBounds = true;
                _local3 = _arg1.intersects(_hitBounds);
            } else {
                _local6 = (this.size * 0.5);
                if (this.minHitRadius > _local6){
                    _local6 = this.minHitRadius;
                };
                _local3 = _arg1.containsBufferedPoint(this.x, this.y, (_local6 * _arg2));
            };
            return (_local3);
        }

    }
}//package mb.symbols 
﻿package mb.symbols {
    import mb.data.*;
    import mb.projections.*;
    import mb.*;
    import flash.geom.*;

    public class SymbolDataSource extends Waiter {

        protected static var _defaults:Object = {jitter:null};

        protected var _data:PointDataTable;
        protected var _cache:SymbolDataCache;
        protected var _proj:IGeoProjection;
        protected var _prefilter:IFilter;
        protected var _opts:Object;

        public function SymbolDataSource(_arg1:PointDataTable, _arg2:IGeoProjection, _arg3:Object=null){
            this._opts = Opts.init(_defaults, _arg3);
            this._proj = _arg2;
            this._data = _arg1;
            if (this._data){
                waitFor(_arg1);
            };
            startWaiting();
        }
        public function replaceDataTable(_arg1:PointDataTable):void{
            this._data = _arg1;
            this.importPointData();
        }
        public function get data():PointDataTable{
            return (this._data);
        }
        public function get bounds():BoundingBox{
            return (this._cache);
        }
        public function get cache():SymbolDataCache{
            return (this._cache);
        }
        override protected function handleReadyState():void{
            if (this._data){
                this.importPointData();
            };
        }
        public function set projection(_arg1:IGeoProjection):void{
            this._proj = _arg1;
            if (!ready){
                return;
            };
            this.importPointData();
        }
        public function applyPrefilter(_arg1:IFilter):void{
            var _local2:Array;
            var _local3:int;
            var _local4:int;
            var _local5:int;
            var _local6:SymbolData;
            var _local7:Boolean;
            this._prefilter = _arg1;
            if (this._cache){
                _local2 = this._cache.getSymbols();
                _local3 = _local2.length;
                _local4 = 0;
                _local5 = 0;
                while (_local5 < _local3) {
                    _local6 = _local2[_local5];
                    _local7 = false;
                    if (_arg1){
                        _local7 = !(_arg1.testId(_local6.id));
                    };
                    _local6.hidden = _local7;
                    if (_local7){
                        _local4++;
                    };
                    _local5++;
                };
            };
        }
        protected function importPointData():void{
            var _local3:Point;
            var _local4:SymbolData;
            this._cache = new SymbolDataCache();
            var _local1:int = this._data.length;
            var _local2:int;
            while (_local2 < _local1) {
                _local3 = this._data.getXY(_local2, this._proj);
                if (_local3.x === Infinity){
                    return;
                };
                if (this._opts.jitter){
                    _local3 = this._opts.jitter.shift(_local3.x, _local3.y);
                };
                _local4 = new PointSymbolData(_local2);
                _local4.x = _local3.x;
                _local4.y = _local3.y;
                this._cache.addSymbolData(_local4);
                if (this._prefilter){
                    _local4.hidden = !(this._prefilter.testId(_local2));
                };
                _local2++;
            };
        }
        public function fetchBubblesInBox(_arg1:BoundingBox, _arg2:Number):SymbolDataSet{
            return (this.fetchSymbolsInBox(_arg1, _arg2));
        }
        public function fetchSymbolsInBox(_arg1:BoundingBox, _arg2:Number):SymbolDataSet{
            return (this._cache.getSymbolsInBox(_arg1, _arg2, 0));
        }
        public function fetchSymbolsById(_arg1:Array):SymbolDataSet{
            return (this._cache.getSymbolsById(_arg1));
        }
        public function fetchSymbols(_arg1:IFilter=null):SymbolDataSet{
            var _local2:int = this._cache.size();
            var _local3:Array = [];
            var _local4:int;
            while (_local4 < _local2) {
                _local3[_local4] = _local4;
                _local4++;
            };
            var _local5:SymbolDataSet = new SymbolDataSet(_local3, this._cache.getSymbols());
            if (_arg1){
                _local5.applyFilter(_arg1);
            };
            return (_local5);
        }
        public function fetchById(_arg1:int):SymbolData{
            var _local2:SymbolData = this._cache.fetch(_arg1);
            return (_local2);
        }

    }
}//package mb.symbols 
﻿package mb.symbols {
    import flash.display.*;
    import flash.text.*;
    import mb.*;
    import mb.styles.*;
    import mb.text.*;
    import flash.filters.*;

    public class MapLabel extends Sprite implements IVectorSymbol {

        private var _txt:FormattedTextField;
        private var _x:Number = 0;
        private var _y:Number = 0;
        private var _xSpace:Number = 0;
        private var _ySpace:Number = 0;
        private var _placement:String = "center";
        private var _halo:Boolean = false;
        private var _haloFilter:DropShadowFilter;
        private var _haloColor:Number = 0xFFFFFF;
        private var _dotBitmap:Bitmap;
        private var _dotSize:Number = 0;

        public function MapLabel(){
            addChild((this._txt = new FormattedTextField()));
            this._txt.format.font = "Arial";
        }
        public function setState(_arg1:String):void{
        }
        public function getState():String{
            return ("");
        }
        public function get container():DisplayObject{
            return (this);
        }
        public function get field():FormattedTextField{
            return (this._txt);
        }
        public function get format():TextFormat{
            return (this._txt.format);
        }
        public function set halo(_arg1:Boolean):void{
            this._halo = _arg1;
        }
        private function setPlacement(_arg1:String, _arg2:Number, _arg3:Number):void{
            this._placement = _arg1.toLowerCase();
            this._x = _arg2;
            this._y = _arg3;
        }
        public function update(_arg1:ISymbolStyle):void{
            var _local2:LabelStyle = LabelStyle(_arg1);
            if (_local2.pointStyle){
                this._dotSize = _local2.pointStyle.size;
            };
            this._placement = _local2.placement.toLowerCase();
            this._x = _local2.xOff;
            this._y = _local2.yOff;
            this._xSpace = _local2.xSpace;
            this._ySpace = _local2.ySpace;
            this._halo = _local2.useHalo;
            this._txt.format.size = _local2.textStyle.size;
            this._txt.format.color = _local2.textStyle.color;
            this._txt.format.bold = _local2.textStyle.bold;
            this._txt.format.italic = _local2.textStyle.italic;
            this._txt.text = _local2.text;
            this.updatePlacement();
            if (_local2.haloFilter != null){
                this.filters = [_local2.haloFilter];
            };
            if (_local2.textStyle.alpha != alpha){
                alpha = _local2.textStyle.alpha;
            };
        }
        public function updateDot(_arg1:BitmapSymbol):void{
            if (!this._dotBitmap){
                this._dotBitmap = new Bitmap();
                addChild(this._dotBitmap);
            };
            this._dotBitmap.bitmapData = _arg1.bitmap;
            this._dotBitmap.x = _arg1.xIns;
            this._dotBitmap.y = _arg1.yIns;
        }
        private function updatePlacement():void{
            var _local1:Number = (this._dotSize * 0.3);
            var _local2:Number = (this._dotSize * 0.7);
            var _local3:Number = this._txt.height;
            var _local4:Number = this._y;
            switch (this._placement){
                case C.CENTER:
                case C.E:
                case C.W:
                    _local4 = (_local4 + ((-(_local3) / 2) - 1));
                    break;
                case C.N:
                case C.NW:
                case C.NE:
                    _local4 = -(_local4);
                    _local4 = (_local4 + (-(_local3) - 2));
                    _local4 = (_local4 - this._ySpace);
                    break;
                case C.SE:
                case C.SW:
                case C.S:
                    _local4 = (_local4 + this._ySpace);
                    _local4 = (_local4 + 1);
                    break;
            };
            var _local5:Number = this._txt.width;
            var _local6:Number = this._x;
            switch (this._placement){
                case C.CENTER:
                case C.N:
                case C.S:
                    _local6 = (_local6 + (-(_local5) / 2));
                    break;
                case C.NW:
                case C.SW:
                    _local6 = -(_local6);
                    _local6 = (_local6 + (-(_local5) + 0));
                    _local6 = (_local6 - _local1);
                    break;
                case C.NE:
                case C.SE:
                    _local6 = (_local6 + -1);
                    _local6 = (_local6 + _local1);
                    break;
                case C.E:
                    _local6 = (_local6 + 1);
                    _local6 = (_local6 + this._xSpace);
                    _local6 = (_local6 + _local2);
                    break;
                case C.W:
                    _local6 = -(_local6);
                    _local6 = (_local6 + (-(_local5) - 1));
                    _local6 = (_local6 - this._xSpace);
                    _local6 = (_local6 - _local2);
                    break;
            };
            _local6 = Math.round(_local6);
            _local4 = Math.round(_local4);
            this._txt.x = _local6;
            this._txt.y = _local4;
        }

    }
}//package mb.symbols 
﻿package mb.symbols {
    import mb.*;

    public class SymbolDataSet extends IdSet {

        private var _index:Array;
        public var nextSymbol:SymbolData;

        public function SymbolDataSet(_arg1:Array, _arg2:Array){
            super(_arg1);
            this._index = _arg2;
        }
        override public function get hasNext():Boolean{
            if (_i < _size){
                nextId = _ids[_i++];
                this.nextSymbol = this._index[nextId];
                return (true);
            };
            reset();
            return (false);
        }
        public function subtractSet(_arg1:SymbolDataSet):SymbolDataSet{
            return (new SymbolDataSet(subtractIds(_arg1), this._index));
        }
        public function addSet(_arg1:SymbolDataSet):SymbolDataSet{
            return (new SymbolDataSet(addIds(_arg1), this._index));
        }
        public function mergeSet(_arg1:SymbolDataSet):SymbolDataSet{
            return (new SymbolDataSet(spliceIds(_arg1), this._index));
        }

    }
}//package mb.symbols 
﻿package mb.symbols {
    import flash.display.*;
    import mb.styles.*;

    public interface IVectorSymbol {

        function update(_arg1:ISymbolStyle):void;
        function getState():String;
        function setState(_arg1:String):void;
        function get container():DisplayObject;

    }
}//package mb.symbols 
﻿package mb.symbols {
    import flash.display.*;
    import mb.projections.*;
    import flash.events.*;
    import mb.*;
    import mb.easing.*;
    import flash.geom.*;
    import mb.maps.*;

    public class Marker extends EventDispatcher {

        public static const DISPLAY:String = "display";
        public static const PLACEMENT:String = "placement";

        private static var _defaults = {
            draggable:false,
            use_fading:true,
            fade_alpha:0.45
        };

        public var lat:Number = NaN;
        public var long:Number = NaN;
        private var _metersX:Number;
        private var _metersY:Number;
        private var _isPlaced:Boolean = false;
        public var name:String = "";
        private var _xStart:Number;
        private var _yStart:Number;
        private var _xMouseDown:Number;
        private var _yMouseDown:Number;
        private var _dragging:Boolean = false;
        private var _clip:Sprite;
        private var _faded:Boolean = false;
        private var _placement:PixelPoint;
        private var _opts:Object;

        public function Marker(_arg1:Sprite, _arg2:Object=null){
            if (_arg1.stage){
                this._placement = new PixelPoint(_arg1.x, _arg1.y, _arg1.parent);
                this._placement.setContext(_arg1.stage);
            };
            this._opts = Opts.init(_defaults, _arg2);
            this._clip = _arg1;
            if (this._opts.draggable){
                this.initDragging();
            };
            if (this._opts.use_fading){
                this._clip.addEventListener(MouseEvent.ROLL_OVER, this.handleOver);
                this._clip.addEventListener(MouseEvent.ROLL_OUT, this.handleOut);
            };
        }
        private function handleOver(_arg1):void{
            if (this._faded){
                this.container.alpha = 1;
            };
        }
        private function handleOut(_arg1):void{
            if (this._faded){
                this.container.alpha = this._opts.fade_alpha;
            };
        }
        public function get container():Sprite{
            return (this._clip);
        }
        public function updatePlacement(_arg1:XY, _arg2:IGeoProjection):void{
            if (((!(this._isPlaced)) || (isNaN(this.lat)))){
                return;
            };
            var _local3:Point = _arg2.projectLatLongFast(this.lat, this.long);
            var _local4:Point = _arg1.projToLayer(_local3.x, _local3.y);
            var _local5:Number = _local4.x;
            var _local6:Number = _local4.y;
            _local5 = Math.round(_local5);
            _local6 = Math.round(_local6);
            this.container.x = _local5;
            this.container.y = _local6;
        }
        public function initPlacement(_arg1:XY, _arg2:IGeoProjection):void{
            var _local3:Point;
            var _local4:GeoPoint;
            this._isPlaced = true;
            if (((this.lat) && (this.long))){
            } else {
                if (this._placement){
                    this._placement.setContext(this.container.parent);
                    _local3 = _arg1.screenToProj(this._placement.x, this._placement.y);
                    _local4 = _arg2.unprojectXY(_local3.x, _local3.y);
                    this.lat = _local4.lat;
                    this.long = _local4.long;
                } else {
                    return;
                };
            };
            this.updatePlacement(_arg1, _arg2);
        }
        private function initDragging():void{
            this._clip.useHandCursor = (this._clip.buttonMode = true);
            this._clip.addEventListener(MouseEvent.MOUSE_DOWN, this.handleDown);
        }
        private function startDragging():void{
            if (this._dragging){
                return;
            };
            this._clip.stage.addEventListener(MouseEvent.MOUSE_MOVE, this.handleMove);
            this._clip.stage.addEventListener(MouseEvent.MOUSE_UP, this.handleUp);
            this._dragging = true;
            this._xMouseDown = this._clip.parent.mouseX;
            this._yMouseDown = this._clip.parent.mouseY;
            this._xStart = this._clip.x;
            this._yStart = this._clip.y;
        }
        private function stopDragging():void{
            if (!this._dragging){
                return;
            };
            this._dragging = false;
            this._clip.stage.removeEventListener(MouseEvent.MOUSE_MOVE, this.handleMove);
            this._clip.stage.removeEventListener(MouseEvent.MOUSE_UP, this.handleUp);
        }
        private function handleDown(_arg1):void{
            this.startDragging();
        }
        private function handleUp(_arg1):void{
            this.stopDragging();
            dispatchEvent(new Event(PLACEMENT));
        }
        private function handleMove(_arg1):void{
            var _local2:Number = this._clip.parent.mouseX;
            var _local3:Number = this._clip.parent.mouseY;
            var _local4:Number = (_local2 - this._xMouseDown);
            var _local5:Number = (_local3 - this._yMouseDown);
            this._clip.x = (this._xStart + _local4);
            this._clip.y = (this._yStart + _local5);
        }
        public function display(_arg1:Object):void{
            dispatchEvent(new Event(DISPLAY));
        }
        public function fadeIn(_arg1:int):void{
            Fader.showObject(this.container, _arg1);
            this._faded = false;
        }
        public function fadeOut(_arg1:int):void{
            Fader.hideObject(this.container, _arg1);
            this._faded = false;
        }
        public function fadeToAlpha(_arg1:int):void{
            var _local2:Number = this._opts.fade_alpha;
            if (!this.container.visible){
                if (_local2 == 0){
                    return;
                };
                this.container.visible = true;
                this.container.alpha = 0;
            };
            PropertyTween.start(this.container, {alpha:_local2}, 250);
            this._faded = true;
        }
        public function hide():void{
            this.container.visible = false;
            this.container.alpha = 1;
            this._faded = false;
        }
        public function show():void{
            this.container.visible = true;
            this.container.alpha = 1;
            this._faded = false;
        }

    }
}//package mb.symbols 
﻿package mb.symbols {
    import mb.styles.*;

    public class PointSymbolData extends SymbolData {

        public var shapeStyle:ShapeStyle;
        public var bmp:BitmapSymbol;
        public var refreshCount:int = 0;

        public function PointSymbolData(_arg1:int){
            super(_arg1);
            this.shapeStyle = new ShapeStyle();
        }
    }
}//package mb.symbols 
﻿package mb.symbols {
    import mb.*;

    public interface ISymbolData {

        function inView(_arg1:BoundingBox, _arg2:Number):Boolean;

    }
}//package mb.symbols 
﻿package mb.symbols {
    import mb.*;
    import flash.geom.*;

    public class SymbolDataCache extends BoundingBox {

        private static var _p:Point = new Point();

        private var _data:Array;
        private var _len:int = 0;

        public function SymbolDataCache(){
            this._data = [];
        }
        public function fetch(_arg1:int):SymbolData{
            return (this._data[_arg1]);
        }
        public function size():int{
            return (this._len);
        }
        public function getSymbolsById(_arg1:Array):SymbolDataSet{
            return (new SymbolDataSet(_arg1, this._data));
        }
        public function mergeCache(_arg1:SymbolDataCache):void{
            var _local5:SymbolData;
            var _local6:int;
            var _local2:Array = _arg1.getSymbols();
            var _local3:int = _local2.length;
            var _local4:int;
            while (_local4 < _local3) {
                _local5 = _local2[_local4];
                _local6 = (_local4 + this._len);
                _local5.id = _local6;
                this._data[_local6] = _local5;
                _local4++;
            };
            mergeBounds(_arg1);
            this._len = (this._len + _local3);
        }
        public function addSymbolData(_arg1:SymbolData):void{
            if (this._len != _arg1.id){
            };
            var _local2 = this._len++;
            this._data[_local2] = _arg1;
            mergePoint(_arg1.x, _arg1.y);
        }
        public function addNullPoint(_arg1:int):void{
            var _local2:SymbolData = new SymbolData(_arg1);
            _local2.x = Infinity;
            _local2.y = Infinity;
            var _local3 = this._len++;
            this._data[_local3] = _local2;
        }
        public function getSymbols():Array{
            return (this._data);
        }
        public function getSymbolsInBox(_arg1:BoundingBox, _arg2:Number, _arg3:Number):SymbolDataSet{
            var _local7:Number;
            var _local8:SymbolData;
            var _local4:BoundingBox = new BoundingBox();
            var _local5:Array = [];
            if (_arg3 > 0){
                _arg1 = _arg1.clone();
                _local7 = (_arg2 + _arg3);
                _arg1.left = (_arg1.left - _local7);
                _arg1.top = (_arg1.top + _local7);
                _arg1.right = (_arg1.right + _local7);
                _arg1.bottom = (_arg1.bottom + _local7);
            };
            var _local6:int;
            while (_local6 < this._len) {
                _local8 = this._data[_local6];
                if (_local8.hidden){
                } else {
                    if (_local8.inView(_arg1, _arg2)){
                        _local5.push(_local6);
                    };
                };
                _local6++;
            };
            return (new SymbolDataSet(_local5, this._data));
        }

    }
}//package mb.symbols 
﻿package mb {

    public class C {

        public static const TEXT:String = "TEXT";
        public static const STRING:String = "STRING";
        public static const INTEGER:String = "INTEGER";
        public static const DOUBLE:String = "DOUBLE";
        public static const UNDEFINED:String = "UNDEFINED";
        public static const OBJECT:String = "OBJECT";
        public static const DATE:String = "DATE";
        public static const POLYGONS:String = "polygons";
        public static const POLYLINES:String = "lines";
        public static const INNER_LINES:String = "inner";
        public static const OUTER_LINES:String = "outer";
        public static const N:String = "n";
        public static const S:String = "s";
        public static const E:String = "e";
        public static const W:String = "w";
        public static const NW:String = "nw";
        public static const NE:String = "ne";
        public static const SE:String = "se";
        public static const SW:String = "sw";
        public static const CENTER:String = "center";
        public static const LEFT:String = "lt";
        public static const TOP:String = "tp";
        public static const RIGHT:String = "rt";
        public static const BOTTOM:String = "bt";
        public static const PLACEMENT_FIELD:String = "PLACEMENT";
        public static const XOFF_FIELD:String = "XOFF";
        public static const YOFF_FIELD:String = "YOFF";
        public static const ROLL_OUT:String = "mbRollOut";
        public static const ROLL_OVER:String = "mbRollOver";
        public static const MOUSE_DOWN:String = "mbMouseDown";
        public static const MOUSE_MOVE:String = "mbMouseMove";
        public static const MOUSE_UP:String = "mbMouseUp";
        public static const CLICK:String = "mbClick";
        public static const SAFE_CLICK:String = "mbSafeClick";
        public static const PRESS:String = "mbPress";
        public static const DOUBLE_CLICK:String = "mbDoubleClick";
        public static const MOUSE_DRAG:String = "mbMouseDrag";
        public static const DRAG_START:String = "mbDragStart";
        public static const DRAG_END:String = "mbDragEnd";
        public static const SELECT:String = "select";
        public static const DESELECT:String = "deselect";
        public static const SCROLL:String = "mbScroll";
        public static const SCROLL_STEP:String = "mbScrollStep";
        public static const LAYER_OVER:String = "mbLayerOver";
        public static const LAYER_OUT:String = "mbLayerOut";
        public static const SHAPE_OVER:String = "mbShapeOver";
        public static const SHAPE_OUT:String = "mbShapeOut";
        public static const REVERT:String = "mbRevert";
        public static const UPDATE:String = "mbUpdate";
        public static const CHANGE:String = "mbChange";
        public static const DONE:String = "mbDone";
        public static const SUCCESS:String = "mbSuccess";
        public static const SLIDE:String = "mbSlide";
        public static const READY:String = "ready";
        public static const ERROR:String = "error";
        public static const NAVIGATE:String = "navigate";
        public static const NAVIGATE_COMPLETE:String = "nav_complete";
        public static const RESCALE:String = "rescale";
        public static const PAN:String = "pan";
        public static const RESIZE:String = "resize";
        public static const REDRAW:String = "refresh";
        public static const DEFAULT:String = "default";
        public static const SCALE:int = 1;
        public static const POSITION:int = 2;
        public static const STYLE:int = 4;
        public static const SYMBOLS:int = 8;
        public static const PREFETCH:int = 16;
        public static const APPEND:int = 32;
        public static const PREV:String = "prev";
        public static const NEXT:String = "next";
        public static const EASING:int = 16;
        public static const TWEEN:String = "tween";
        public static const ZOOM_IN:String = "zoomIn";

    }
}//package mb 
﻿package mb.importing {

    public interface IFieldParser {

        function get headerCode():String;
        function get fieldType():String;
        function parseString(_arg1:String):Object;

    }
}//package mb.importing 
﻿package mb.importing {
    import flash.events.*;
    import mb.*;
    import flash.net.*;
    import flash.utils.*;

    public class BinaryFileLoader extends Waiter {

        private var _loader:URLLoader;
        protected var _url:String;
        private var _zlib:Boolean;
        private var _loaded:Boolean = false;
        private var _bytes:ByteArray;

        public function BinaryFileLoader(_arg1:String, _arg2:Boolean=false, _arg3:Boolean=false){
            this._url = _arg1;
            this._zlib = _arg3;
            this.load();
        }
        public function get bytes():ByteArray{
            return (this._bytes);
        }
        public function load():void{
            if ((((this._loaded == true)) || (!(this._url)))){
                return;
            };
            this._loaded = true;
            this._loader = new URLLoader();
            this._loader.dataFormat = URLLoaderDataFormat.BINARY;
            this._loader.load(new URLRequest(this._url));
            this._loader.addEventListener(Event.COMPLETE, this.handleLoadComplete);
            this._loader.addEventListener(IOErrorEvent.IO_ERROR, this.handleLoadFailure);
            this._loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, this.handleLoadFailure);
        }
        private function handleLoadComplete(_arg1:Event):void{
            var _local2:ByteArray;
            if (this._loader.data){
                _local2 = this._loader.data;
                if (this._zlib){
                    _local2.uncompress();
                };
                this.procFile(_local2);
                this._loader = null;
                dispatchEvent(new Event(C.READY));
            };
        }
        protected function procFile(_arg1:ByteArray):void{
            if (this._zlib){
                _arg1.uncompress();
            };
            this._bytes = _arg1;
        }
        private function handleLoadFailure(_arg1:Event):void{
            dispatchEvent(new Event("error"));
        }

    }
}//package mb.importing 
﻿package mb.importing {
    import flash.events.*;

    public interface ILoader extends IEventDispatcher {

        function get data():Object;
        function load(_arg1:String):void;
        function get success():Boolean;

    }
}//package mb.importing 
﻿package mb.importing {
    import mb.*;

    public interface IDataLoader extends IWaiter {

        function get length():int;
        function get schema():Object;
        function get data():Object;
        function setFieldType(_arg1:String, _arg2:String):void;
        function load():void;
        function get url():String;

    }
}//package mb.importing 
﻿package mb.importing {
    import flash.display.*;
    import mb.projections.*;
    import mb.*;
    import flash.geom.*;
    import flash.net.*;
    import flash.utils.*;
    import mb.shapes.*;
    import mb.symbols.*;

    public class ShapeLoaderOne extends BinaryFileLoader {

        private static var xarr:Array = [];
        private static var yarr:Array = [];

        private const PROJECT:int = 1;
        private const REPROJECT:int = 2;
        private const NO_PROJECT:int = 3;

        private var _mUnpack:Number = 1;
        private var _bxUnpack:Number = 0;
        private var _byUnpack:Number = 0;
        private var _shift:Number = 0;
        private var _srcProj:IGeoProjection;
        private var _destProj:IGeoProjection;
        private var _meta:Object;
        private var _enforceClosure:Boolean = false;
        private var _bytes:ByteArray;
        private var _headerLen:int = 0;

        public function ShapeLoaderOne(_arg1:String, _arg2:IGeoProjection, _arg3:Boolean=true){
            super(_arg1, false, _arg3);
            this._srcProj = _arg2;
            this._meta = {};
        }
        override protected function procFile(_arg1:ByteArray):void{
            this._bytes = _arg1;
            _arg1.endian = "littleEndian";
            this.unpackHeader(_arg1);
        }
        private function unpackShapePart(_arg1:ByteArray, _arg2:int):VertexSet{
            var _local3:Point;
            var _local4:Number;
            var _local5:Number;
            var _local6:Number;
            var _local7:Number;
            var _local9:uint;
            var _local10:Number;
            var _local11:Number;
            var _local12:Number;
            var _local13:Number;
            var _local14:Number;
            var _local15:Number;
            var _local16:Number;
            var _local17:Number;
            var _local18:VertexSet;
            var _local19:int;
            var _local20:int;
            var _local8:int = _arg1.readUnsignedShort();
            if (_local8 > 0){
                _local9 = _arg1.readUnsignedInt();
                _local16 = (((_local9 & 0xFFFF) * this._mUnpack) + this._bxUnpack);
                _local17 = ((((_local9 >> 16) & 0xFFFF) * this._mUnpack) + this._byUnpack);
                if (_arg2 == this.NO_PROJECT){
                    _local10 = _local16;
                    _local11 = _local17;
                } else {
                    if (_arg2 == this.PROJECT){
                        _local3 = this._destProj.projectLatLongFast(_local17, _local16);
                    } else {
                        _local3 = this._destProj.reprojectXYFast(_local16, _local17, this._srcProj);
                    };
                    _local10 = _local3.x;
                    _local11 = _local3.y;
                };
                _local6 = _local10;
                _local4 = _local6;
                _local7 = _local11;
                _local5 = _local7;
                xarr[0] = _local10;
                yarr[0] = _local11;
                _local19 = (_local8 - 1);
                _local20 = 1;
                while (_local20 <= _local19) {
                    _local9 = _arg1.readUnsignedInt();
                    if ((((_local20 == _local19)) && (this._enforceClosure))){
                        _local12 = _local10;
                        _local13 = _local11;
                    } else {
                        _local14 = (((_local9 & 0xFFFF) - this._shift) * this._mUnpack);
                        _local15 = ((((_local9 >> 16) & 0xFFFF) - this._shift) * this._mUnpack);
                        _local16 = (_local16 + _local14);
                        _local17 = (_local17 + _local15);
                        if (_arg2 == this.NO_PROJECT){
                            _local12 = _local16;
                            _local13 = _local17;
                        } else {
                            if (_arg2 == this.PROJECT){
                                _local3 = this._destProj.projectLatLongFast(_local17, _local16);
                            } else {
                                _local3 = this._destProj.reprojectXYFast(_local16, _local17, this._srcProj);
                            };
                            _local12 = _local3.x;
                            _local13 = _local3.y;
                        };
                        if (_local12 < _local4){
                            _local4 = _local12;
                        } else {
                            if (_local12 > _local6){
                                _local6 = _local12;
                            };
                        };
                        if (_local13 < _local5){
                            _local5 = _local13;
                        } else {
                            if (_local13 > _local7){
                                _local7 = _local13;
                            };
                        };
                    };
                    xarr[_local20] = _local12;
                    yarr[_local20] = _local13;
                    _local20++;
                };
            };
            if (_local8 == 2){
                _local18 = new TinyPartVertexSet(xarr[0], yarr[0], xarr[1], yarr[1]);
            } else {
                _local18 = new SimplePartVertexSet(xarr.slice(0, _local8), yarr.slice(0, _local8));
            };
            _local18.setBounds(_local4, _local7, _local6, _local5);
            return (_local18);
        }
        private function unpackHeader(_arg1:ByteArray):void{
            this._meta.topology = false;
            this._meta.version = 4;
            this._meta.num_vertices = _arg1.readUnsignedInt();
            this._meta.minx = _arg1.readDouble();
            this._meta.miny = _arg1.readDouble();
            this._meta.maxx = _arg1.readDouble();
            this._meta.maxy = _arg1.readDouble();
            this._meta.m_pack = _arg1.readDouble();
            this._meta.bx_pack = _arg1.readDouble();
            this._meta.by_pack = _arg1.readDouble();
            this._meta.bit_precision = _arg1.readByte();
            this._meta.shp_type = _arg1.readByte();
            this._meta.num_shapes = _arg1.readUnsignedInt();
            this._enforceClosure = (this._meta.shp_type == 5);
            this._headerLen = _arg1.position;
            this._shift = (1 << (this._meta.bit_precision - 1));
            this._mUnpack = (1 / this._meta.m_pack);
            this._bxUnpack = (-(this._meta.bx_pack) * this._mUnpack);
            this._byUnpack = (-(this._meta.by_pack) * this._mUnpack);
        }
        private function unpackShapes(_arg1:ByteArray, _arg2:int):Object{
            var _local8:int;
            var _local9:VertexSet;
            _arg1.position = this._headerLen;
            var _local3:int;
            var _local4:ShapeVector;
            var _local5:int = this._meta.num_shapes;
            var _local6:Array = new Array(_local5);
            var _local7:BoundingBox = new BoundingBox();
            while (_arg1.bytesAvailable > 0) {
                _local8 = _arg1.readByte();
                _local9 = this.unpackShapePart(this._bytes, _arg2);
                _local7.mergeBounds(_local9);
                if (_local8 != 0){
                    if (_local4 !== null){
                        _local6[_local3] = _local4;
                        _local3++;
                    };
                    _local4 = new ShapeVector(_local3, _local9);
                } else {
                    _local4.addPartData(_local9);
                };
            };
            if (_local4){
                _local6[_local3] = _local4;
            };
            return ({
                bounds:_local7,
                shapes:_local6
            });
        }
        private function reprojectXY(_arg1:Number, _arg2:Number):Point{
            return (this._destProj.reprojectXYFast(_arg1, _arg2, this._srcProj));
        }
        public function extractProjectedShapes(_arg1:IGeoProjection):Object{
            var _local3:int;
            this._destProj = _arg1;
            var _local2:Function;
            if (this._destProj.compare(this._srcProj)){
                _local3 = this.NO_PROJECT;
            } else {
                _local3 = ((this._srcProj.compare(new NullProjection())) ? this.PROJECT : this.REPROJECT);
            };
            var _local4:Object = this.unpackShapes(this._bytes, _local3);
            xarr = [];
            yarr = [];
            return (_local4);
        }

    }
}//package mb.importing 
﻿package mb.importing {
    import mb.*;
    import com.adobe.serialization.json.*;
    import mb.text.*;

    public class TabDataParser {

        private static const STRING:String = "STRING";
        private static const DOUBLE:String = "DOUBLE";
        private static const INTEGER:String = "INTEGER";
        private static const _defaults:Object = {
            delimiter:"\t",
            default_type:STRING,
            clean_strings:true,
            predefined:null
        };

        private static var _parsers:Object = {};
        private static var _haveParser:Boolean = false;
        private static var _parserIndex:Array;
        private static var _opts:Object;
        private static var _textFieldRxp:RegExp = /\\n|&(ndash|mdash|raquo|lsquo|rsquo|ldquo|rdquo|lb|lf);|(<br *\/?>)/gi;
        private static var _replacements:Object = {
            ndash:Text.EN_DASH,
            mdash:Text.EM_DASH,
            raquo:Text.CHEVRON,
            lsquo:Text.L_SQUOTE,
            rsquo:Text.R_SQUOTE,
            ldquo:Text.L_DQUOTE,
            rdquo:Text.R_DQUOTE,
            lb:"\n",
            lf:"\n"
        };

        public static function procString(_arg1:String, _arg2:Object=null):Object{
            var _local3:Array = Text.strToLines(_arg1);
            while (_local3[(_local3.length - 1)] === "") {
                _local3.pop();
            };
            return (procLines(_local3, _arg2));
        }
        public static function procLines(_arg1:Array, _arg2:Object=null):Object{
            var _local13:String;
            var _local21:String;
            var _local22:Object;
            var _local23:String;
            var _local24:int;
            var _local25:int;
            var _local26:String;
            var _local27:JSONDecoder;
            var _local28:Object;
            var _local29:String;
            var _local30:String;
            var _local31:int;
            var _local32:String;
            var _local33:int;
            _opts = Opts.init(_defaults, _arg2);
            var _local3:Object = _opts.predefined;
            var _local4:String = _opts.default_type;
            var _local5:String = _opts.delimiter;
            var _local6 = "\n";
            var _local7:int = _arg1.length;
            var _local8:Array = [];
            var _local9:Array = [];
            var _local10:Array = [];
            var _local11:Object = {};
            var _local12:Array = [];
            var _local14:int;
            do  {
                _local23 = _arg1[_local14];
                _local14 = (_local14 + 1);
                _local24 = _local23.indexOf("{");
                _local25 = _local23.lastIndexOf("}");
                if ((((_local24 >= 0)) && ((_local25 > _local24)))){
                    _local26 = _local23.substring(_local24, (_local25 + 1));
                    _local27 = new JSONDecoder(_local26, false);
                    Opts.mergeProperties(_local27, _local28, true);
                };
            } while (_local23.charAt(0) == "#");
            var _local15:Array = _local23.split(_local5);
            var _local16:int = _local15.length;
            var _local17:int;
            while (_local17 < _local16) {
                _local13 = _local15[_local17];
                _local28 = parseFieldHeader(_local13, _local4);
                _local29 = _local28.name;
                _local30 = _local28.type;
                if (((_local3) && (_local3[_local29]))){
                    _local30 = _local3[_local29];
                };
                if (_local30 == C.UNDEFINED){
                    _local12[_local17] = true;
                } else {
                    _local12[_local17] = false;
                    _local11[_local29] = _local17;
                    _local9[_local17] = _local30;
                    _local8[_local17] = [];
                    _local10.push(_local29);
                };
                _local17++;
            };
            var _local18:int;
            while (_local14 < _local7) {
                _local23 = _arg1[_local14];
                _local15 = _local23.split(_local5);
                _local31 = _local15.length;
                if (_local23.charAt(0) == "#"){
                } else {
                    _local17 = 0;
                    while (_local17 < _local16) {
                        if (_local12[_local17]){
                        } else {
                            if (_local17 >= _local31){
                                _local13 = "";
                            } else {
                                _local13 = _local15[_local17];
                            };
                            _local32 = _local9[_local17];
                            _local8[_local17].push(convertValue(_local13, _local32));
                        };
                        _local17++;
                    };
                    _local18++;
                };
                _local14++;
            };
            var _local19:Object = {};
            var _local20:Object = {};
            for (_local21 in _local11) {
                _local33 = _local11[_local21];
                _local19[_local21] = _local9[_local33];
                _local20[_local21] = _local8[_local33];
            };
            _local22 = {
                schema:_local19,
                data:_local20,
                size:_local18,
                fields:_local10
            };
            return (_local22);
        }
        public static function addParser(_arg1:IFieldParser):void{
            var _local2:String = _arg1.headerCode;
            _parsers[_local2] = _arg1;
            _haveParser = true;
        }
        private static function parseFieldHeader(_arg1:String, _arg2:String):Object{
            var _local3:Array;
            var _local4:String;
            var _local5:String;
            var _local6:String;
            var _local7:IFieldParser;
            _arg1 = cleanString(_arg1);
            if (_arg1.indexOf(":") != -1){
                _local3 = _arg1.split(":");
                _local4 = _local3[0];
                _local5 = _local3[1].toUpperCase();
                _local6 = C.UNDEFINED;
                if (_parsers[_local5]){
                    _local7 = _parsers[_local5];
                    _local6 = _local7.fieldType;
                } else {
                    _local6 = parseFieldType(_local5);
                };
            } else {
                _local4 = _arg1;
                _local6 = ((_arg2) ? _arg2 : C.UNDEFINED);
            };
            return ({
                name:_local4,
                type:_local6
            });
        }
        public static function parseFieldType(_arg1:String):String{
            _arg1 = _arg1.toUpperCase();
            var _local2:String = C.UNDEFINED;
            switch (_arg1){
                case "STRING":
                case "STR":
                    _local2 = C.STRING;
                    break;
                case "INT":
                case "INTEGER":
                    _local2 = C.INTEGER;
                    break;
                case "DOUBLE":
                case "DECIMAL":
                case "NUMBER":
                    _local2 = C.DOUBLE;
                    break;
                case "TEXT":
                    _local2 = C.TEXT;
                    break;
                case "DATE":
                    _local2 = C.DATE;
                    break;
            };
            return (_local2);
        }
        public static function cleanString(_arg1:String):String{
            var _local3:String;
            var _local4:String;
            var _local2:int = _arg1.length;
            while (_local2 > 1) {
                _local3 = _arg1.charAt(0);
                _local4 = _arg1.charAt((_local2 - 1));
                if (_local3 == " "){
                    --_local2;
                    _arg1 = _arg1.substr(1, _local2);
                } else {
                    if (_local4 == " "){
                        --_local2;
                        _arg1 = _arg1.substr(0, _local2);
                    } else {
                        if ((((_local3 == "\"")) && ((_local4 == "\"")))){
                            _local2 = (_local2 - 2);
                            _arg1 = _arg1.substr(1, _local2);
                        } else {
                            break;
                        };
                    };
                };
            };
            return (_arg1);
        }
        private static function replaceTextEntity():String{
            var _local3:String;
            var _local2:String = arguments[0];
            if (_local2 == "\\n"){
                _local2 = "\n";
            } else {
                if (_local2 == "�"){
                    _local2 = Text.R_SQUOTE;
                } else {
                    if (arguments[2]){
                        _local2 = "\n";
                    } else {
                        _local3 = arguments[1];
                        _local2 = _replacements[_local3];
                    };
                };
            };
            return (_local2);
        }
        public static function parseText(_arg1:String):String{
            _arg1 = _arg1.replace(_textFieldRxp, replaceTextEntity);
            return (_arg1);
        }
        private static function convertValue(_arg1:String, _arg2:String):Object{
            var _local3:Object;
            if (_arg2 == STRING){
                _local3 = ((_opts.clean_strings) ? cleanString(_arg1) : _arg1);
            } else {
                if (_arg2 == DOUBLE){
                    _local3 = parseFloat(_arg1);
                } else {
                    if (_arg2 == INTEGER){
                        _local3 = parseInt(_arg1);
                    } else {
                        if (_arg2 == C.TEXT){
                            _local3 = parseText(_arg1);
                        } else {
                            if (!_arg1){
                                _local3 = null;
                            } else {
                                if (_arg2 == C.DATE){
                                    _local3 = cleanString(_arg1);
                                } else {
                                    if (_parsers[_arg2]){
                                        _local3 = _parsers[_arg2].parseString(_arg1);
                                    } else {
                                        _local3 = null;
                                    };
                                };
                            };
                        };
                    };
                };
            };
            return (_local3);
        }

    }
}//package mb.importing 
﻿package mb.importing {
    import flash.events.*;
    import mb.*;
    import flash.net.*;
    import flash.system.*;
    import flash.utils.*;
    import mb.browser.*;
    import mb.utils.*;

    public class FileLoader extends EventDispatcher implements ILoader {

        public static const DONE:String = "mbDone";
        public static const SUCCESS:String = "mbSuccess";

        private static var _defaults:Object = {
            nocache:false,
            nocache_minutes:3,
            zlib:false,
            binary:false
        };

        private var _loader:URLLoader;
        private var _busy:Boolean = false;
        private var _success:Boolean = false;
        private var _url:String = "";
        private var _data;
        protected var _opts:Object;

        public function FileLoader(_arg1:Object=false){
            this._opts = Opts.init(_defaults, _arg1);
        }
        public static function addNoCacheString(_arg1:String, _arg2:Number):String{
            var _local3:Date = new Date();
            var _local4:Number = (_local3.time / 60000);
            var _local5:int = ((60 * 24) * 7);
            var _local6:int = int(((_local4 % _local5) / _arg2));
            if (_arg1.indexOf("?") == -1){
                _arg1 = (_arg1 + "?");
            } else {
                _arg1 = (_arg1 + "&");
            };
            _arg1 = (_arg1 + ("c=" + _local6));
            return (_arg1);
        }

        public function get url():String{
            return (this._url);
        }
        public function cancel():void{
            if (this.busy){
                this._loader.close();
                this._busy = false;
            };
        }
        private function initLoader():void{
            this._loader = new URLLoader();
            var _local1:Boolean;
            this._loader.addEventListener(Event.COMPLETE, this.handleLoadComplete, false, 0, _local1);
            this._loader.addEventListener(IOErrorEvent.IO_ERROR, this.handleLoadFailure, false, 0, _local1);
            this._loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, this.handleLoadFailure, false, 0, _local1);
        }
        private function destroyLoader():void{
            if (this._loader){
                this._loader.removeEventListener(Event.COMPLETE, this.handleLoadComplete, false);
                this._loader.removeEventListener(IOErrorEvent.IO_ERROR, this.handleLoadFailure, false);
                this._loader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, this.handleLoadFailure, false);
                this._loader = null;
            };
        }
        public function load(_arg1:String):void{
            if (this.busy){
                this.cancel();
            };
            if (((this._loader) && (this.busy))){
                this.cancel();
            } else {
                this.initLoader();
            };
            if (this._opts.nocache){
                if (((Browser.swfIsEmbedded()) || ((_arg1.indexOf("http://") == 0)))){
                    _arg1 = addNoCacheString(_arg1, this._opts.nocache_minutes);
                };
            };
            this._url = _arg1;
            var _local2:URLRequest = new URLRequest(_arg1);
            if (((this._opts.binary) || (this._opts.zlib))){
                this._loader.dataFormat = URLLoaderDataFormat.BINARY;
            };
            this._busy = true;
            this._loader.load(_local2);
        }
        public function get busy():Boolean{
            return (this._busy);
        }
        public function get success():Boolean{
            return (((this._success) && (!(this._busy))));
        }
        public function get text():String{
            if ((!(this.data) is String)){
                return ("");
            };
            return ((this.data as String));
        }
        public function get data():Object{
            return (this._data);
        }
        public function unload():void{
            this.destroyLoader();
            this._data = null;
        }
        private function handleLoadFailure(_arg1:Event):void{
            this._busy = false;
            this._success = false;
            dispatchEvent(new Event(DONE));
            dispatchEvent(new Event(C.ERROR));
        }
        private function handleLoadComplete(_arg1:Event):void{
            var _local2:ByteArray;
            this._busy = false;
            this._success = true;
            if (this._loader.dataFormat == URLLoaderDataFormat.BINARY){
                _local2 = (this._loader.data as ByteArray);
                if (this._opts.zlib){
                    _local2.uncompress();
                };
                if (this._opts.binary){
                    this._data = _local2;
                } else {
                    this._data = _local2.toString();
                };
            } else {
                this._data = (this._loader.data as String);
            };
            this._loader.data = null;
            dispatchEvent(new Event(DONE));
            dispatchEvent(new Event(SUCCESS));
        }

    }
}//package mb.importing 
﻿package mb.importing {
    import flash.events.*;
    import mb.*;
    import mb.utils.*;

    public class TabDataLoader extends Waiter implements IDataLoader {

        private static var _defaults:Object = {
            save_file:false,
            delimiter:"\t",
            default_type:C.STRING
        };

        private var _schemaObj:Object;
        private var _fields:Array;
        private var _preloadSchemaObj:Object;
        private var _importedRecords:int = 0;
        private var _dataObj:Object;
        private var _url:String;
        private var _loader:FileLoader;
        private var _rawString:String;
        private var _opts:Object;

        public function TabDataLoader(_arg1:String, _arg2:Object=null){
            this._opts = Opts.init(_defaults, _arg2);
            this._url = _arg1;
            this._schemaObj = {};
            this._preloadSchemaObj = {};
            this._loader = new FileLoader(_arg2);
            this._loader.addEventListener(FileLoader.DONE, this.handleLoad);
            this.load();
        }
        public function get url():String{
            return (this._url);
        }
        public function load():void{
            this._loader.load(this._url);
        }
        public function setFieldType(_arg1:String, _arg2:String):void{
            this._preloadSchemaObj[_arg1] = _arg2;
        }
        public function get length():int{
            return (this._importedRecords);
        }
        public function get rawString():String{
            if (!this._rawString){
                return ("");
            };
            return (this._rawString);
        }
        public function get data():Object{
            return (this._dataObj);
        }
        public function get schema():Object{
            return (this._schemaObj);
        }
        public function get fields():Array{
            return (this._fields);
        }
        private function handleLoad(_arg1):void{
            var _local2:String;
            var _local3:Object;
            var _local4:Object;
            if (this._loader.success){
                _local2 = this._loader.text;
                if (this._opts.save_file){
                    this._rawString = _local2;
                };
                this._loader.unload();
                _local3 = Opts.init(this._opts, null);
                if (this._preloadSchemaObj){
                    _local3.predefined = this._preloadSchemaObj;
                };
                _local4 = TabDataParser.procString(_local2, this._opts);
                this._schemaObj = _local4.schema;
                this._dataObj = _local4.data;
                this._importedRecords = _local4.size;
                this._fields = _local4.fields;
                startWaiting();
            } else {
                dispatchEvent(new Event(C.ERROR));
            };
        }

    }
}//package mb.importing 
﻿package mb.importing {
    import mb.projections.*;
    import mb.*;
    import flash.utils.*;

    public interface IShapeLoader extends IWaiter {

        function getShapesByType(_arg1:String):Object;
        function getProjectedShapes(_arg1:IGeoProjection, _arg2:String):Object;
        function initFromByteArray(_arg1:ByteArray):void;

    }
}//package mb.importing 
﻿package mb {
    import flash.display.*;
    import flash.events.*;

    public interface IMouseDriver extends IEventDispatcher {

        function get mouseX():Number;
        function get mouseY():Number;
        function get stage():Stage;
        function get screen():Sprite;
        function get buttonDown():Boolean;
        function get mouseDown():Boolean;
        function set useHandCursor(_arg1:Boolean):void;
        function get overScreen():Boolean;
        function get scrollStep():int;
        function setMasterScreen(_arg1:Sprite):void;

    }
}//package mb 
﻿package mb.controls {
    import flash.events.*;

    public class SequenceControllerBase extends EventDispatcher {

        private var _length:int = 0;
        private var _currId:int = 0;
        public var circular:Boolean = false;

        public function get length():int{
            return (this._length);
        }
        public function set length(_arg1:int):void{
            if (_arg1 < 0){
                _arg1 = 0;
            };
            this._length = _arg1;
            if (this._currId >= _arg1){
                this.position = (_arg1 - 1);
            };
        }
        public function get position():int{
            return (this._currId);
        }
        public function set position(_arg1:int):void{
            if ((((_arg1 >= 0)) && ((_arg1 < this._length)))){
                this._currId = _arg1;
            };
        }
        public function get nextId():int{
            var _local1:int = this.position;
            if (this.hasNext){
                _local1++;
                if (((this.circular) && ((_local1 >= this.length)))){
                    _local1 = 0;
                };
            };
            return (_local1);
        }
        public function get prevId():int{
            var _local1:int = this.position;
            if (this.hasPrev){
                _local1--;
                if (((this.circular) && ((_local1 < 0)))){
                    _local1 = (this._length - 1);
                };
            };
            return (_local1);
        }
        public function get hasNext():Boolean{
            if (this.circular){
                return ((this._length > 0));
            };
            return ((this._currId < (this._length - 1)));
        }
        public function get hasPrev():Boolean{
            if (this.circular){
                return ((this._length > 0));
            };
            return ((this._currId > 0));
        }

    }
}//package mb.controls 
﻿package mb.controls {
    import flash.display.*;
    import mb.projections.*;
    import flash.events.*;
    import mb.*;
    import mb.maps.*;

    public class ComboZoomControl extends EventDispatcher {

        private static var _defaults:Object = {
            smooth_zoom:false,
            vertical:true,
            tic_length:1,
            tic_color:0x333333,
            pointer_padding:4,
            pointer_offset:0,
            tic_offset:-7,
            num_steps:0,
            init_level:1,
            min_level:1
        };

        private const _minIndex:int = 0;

        private var _selectedIndex:int = 0;
        private var _slider:SliderController;
        private var _buttons:SimpleZoomControl;
        private var _maxIndex:int;
        private var _ptrIdx:int = -1;
        private var _map:MapStack;
        private var _ptr:MovieClip;
        private var _track:MovieClip;
        private var _opts:Object;

        public function ComboZoomControl(_arg1:MapStack, _arg2:MovieClip, _arg3:MovieClip, _arg4:MovieClip, _arg5:MovieClip, _arg6:Object=null){
            this._opts = Opts.init(_defaults, _arg6);
            this._opts.vertical = (_arg4.width < _arg4.height);
            this._ptr = _arg5;
            this._ptr.visible = false;
            this._track = _arg4;
            this._buttons = new SimpleZoomControl(_arg1, _arg2, _arg3, _arg6);
            this._buttons.addEventListener("in", this.handleInButton);
            this._buttons.addEventListener("out", this.handleOutButton);
            this._map = _arg1;
            _arg1.addEventListener(C.READY, this.handleMapReady);
        }
        private function initSlider():void{
            var _local1:int = this._opts.num_steps;
            this._maxIndex = (_local1 - 1);
            this._ptrIdx = this.convLevelToIndex(this._opts.init_level);
            var _local2:Array = [];
            var _local3:int;
            while (_local3 < _local1) {
                _local2.push("");
                _local3++;
            };
            this._ptr.visible = true;
            this._slider = new SliderController(this._track, this._ptr, _local2, this._opts);
            this._slider.setSliderIndex(this._ptrIdx, false);
            this._slider.addEventListener(C.CHANGE, this.handleSliderChange);
        }
        private function handleButtonChange(_arg1:Event):void{
            dispatchEvent(new Event(C.CHANGE));
        }
        private function handleInButton(_arg1:Event):void{
            if (this.setLevel((this.convIndexToLevel(this._ptrIdx) + 1))){
                dispatchEvent(new Event(C.CHANGE));
            };
        }
        private function handleOutButton(_arg1:Event):void{
            if (this.setLevel((this.convIndexToLevel(this._ptrIdx) - 1))){
                dispatchEvent(new Event(C.CHANGE));
            };
        }
        private function handleMapReady(_arg1):void{
            var _local2:int = this._map.navigation.numLevels;
            this._opts.num_steps = _local2;
            if (!this._opts.pointer_padding){
                this._opts.pointer_padding = Math.round(((this._track.height / (_local2 + 1)) * 0.7));
            };
            this.initSlider();
            this.setLevel(this._map.navigation.level);
            this._map.navigation.addEventListener(C.RESCALE, this.handleMapRescale);
        }
        private function handleMapRescale(_arg1):void{
            this.setLevel(Math.round(this._map.navigation.levelFraction));
        }
        public function get currentLevel():int{
            return (this.convIndexToLevel(this._ptrIdx));
        }
        public function setLevel(_arg1:int):Boolean{
            if (_arg1 < 1){
                _arg1 = 1;
            } else {
                if (_arg1 > this._opts.num_steps){
                    _arg1 = this._opts.num_steps;
                };
            };
            var _local2:int = this.convLevelToIndex(_arg1);
            if (this._ptrIdx != _local2){
                this._ptrIdx = _local2;
                this._slider.setSliderIndex(this._ptrIdx, false);
                return (true);
            };
            return (false);
        }
        private function updateMap():void{
            var _local2:GeoPoint;
            var _local3:Boolean;
            var _local1:int = this.convIndexToLevel(this._ptrIdx);
            if (((this._map) && (!((this._map.navigation.level == _local1))))){
                _local2 = this._map.navigation.getCenterAsLatLong();
                _local3 = false;
                this._map.navigation.zoomToLatLongLevel(_local2.lat, _local2.long, _local1, _local3);
            };
        }
        private function handleSliderChange(_arg1:Object):void{
            var _local2:int = this._slider.selectedIndex;
            if (_local2 != this._ptrIdx){
                this._ptrIdx = _local2;
                dispatchEvent(new Event(C.CHANGE));
            };
            this.updateMap();
        }
        private function convIndexToLevel(_arg1:int):int{
            var _local2:int = ((this._opts.vertical) ? (this._opts.num_steps - _arg1) : (_arg1 + 1));
            return (_local2);
        }
        private function convLevelToIndex(_arg1:int):int{
            var _local2:int;
            if (this._opts.vertical){
                _local2 = (this._opts.num_steps - _arg1);
            } else {
                _local2 = (_arg1 - 1);
            };
            return (_local2);
        }

    }
}//package mb.controls 
﻿package mb.controls {
    import flash.display.*;
    import flash.events.*;
    import mb.*;
    import mb.maps.*;

    public class SimpleZoomControl extends EventDispatcher {

        private static const _defaults:Object = {smooth_zoom:true};

        private var _inClip:MovieClip;
        private var _outClip:MovieClip;
        private var _map:MapStack;
        private var _opts:Object;

        public function SimpleZoomControl(_arg1:MapStack, _arg2:MovieClip, _arg3:MovieClip, _arg4:Object=null):void{
            this._opts = Opts.init(_defaults, _arg4);
            this._inClip = _arg2;
            this._outClip = _arg3;
            this._inClip.buttonMode = true;
            this._inClip.useHandCursor = true;
            this._outClip.buttonMode = true;
            this._outClip.useHandCursor = true;
            this._map = _arg1;
            this._map.addEventListener(C.READY, this.handleMapReady);
        }
        private function handleMapReady(_arg1):void{
            this._inClip.addEventListener(MouseEvent.MOUSE_DOWN, this.handleZoomIn);
            this._outClip.addEventListener(MouseEvent.MOUSE_DOWN, this.handleZoomOut);
        }
        private function handleZoomIn(_arg1:Object):void{
            dispatchEvent(new Event("in"));
            this._map.navigation.zoomIn(this._opts.smooth_zoom);
            this.sendChangeEvent();
        }
        public function handleZoomOut(_arg1:Object):void{
            dispatchEvent(new Event("out"));
            this._map.navigation.zoomOut(this._opts.smooth_zoom);
            this.sendChangeEvent();
        }
        private function sendChangeEvent():void{
            dispatchEvent(new Event(C.CHANGE));
        }

    }
}//package mb.controls 
﻿package mb.controls {
    import flash.text.*;
    import flash.events.*;
    import mb.*;
    import mb.text.*;

    public class PrevNextButtons extends SequenceControllerBase {

        private var _prev:ButtonControl;
        private var _next:ButtonControl;
        private var _txt:TextField;
        private var _formatter:Function;

        public function PrevNextButtons(_arg1:ButtonControl, _arg2:ButtonControl, _arg3:TextField=null, _arg4:Object=null){
            if (_arg3){
                Text.fixField(_arg3);
                this._txt = _arg3;
            };
            this._prev = _arg1;
            this._next = _arg2;
            _arg1.addEventListener(C.CLICK, this.handlePrevClick);
            _arg2.addEventListener(C.CLICK, this.handleNextClick);
            this._formatter = this.defaultLabelFormatter;
            if (((_arg4) && (_arg4.formatter))){
                this.setFormatter(_arg4.formatter);
            };
        }
        public function setFormatter(_arg1:Function):void{
            this._formatter = _arg1;
        }
        private function defaultLabelFormatter(_arg1:int, _arg2:int):String{
            var _local3:String = (((_arg1 + 1) + " of ") + _arg2);
            return (_local3);
        }
        private function handlePrevClick(_arg1:Event):void{
            if (!hasPrev){
                return;
            };
            this.position = prevId;
            dispatchEvent(new Event(C.CHANGE));
            dispatchEvent(new Event(C.PREV));
        }
        private function handleNextClick(_arg1:Event):void{
            if (!hasNext){
                return;
            };
            this.position = nextId;
            dispatchEvent(new Event(C.CHANGE));
            dispatchEvent(new Event(C.NEXT));
        }
        protected function updateText():void{
            if (this._txt){
                this._txt.text = this._formatter(position, length);
            };
        }
        override public function set length(_arg1:int):void{
            super.length = _arg1;
            this.position = position;
        }
        override public function set position(_arg1:int):void{
            super.position = _arg1;
            if (!hasPrev){
                this._prev.enabled = false;
            } else {
                if (this._prev.enabled == false){
                    this._prev.enabled = true;
                };
            };
            if (!hasNext){
                this._next.enabled = false;
            } else {
                if (this._next.enabled == false){
                    this._next.enabled = true;
                };
            };
            this.updateText();
        }

    }
}//package mb.controls 
﻿package mb.controls {
    import flash.display.*;
    import flash.text.*;
    import flash.events.*;
    import mb.*;
    import mb.easing.*;
    import flash.geom.*;
    import flash.utils.*;
    import mb.text.*;

    public class SliderController extends EventDispatcher {

        public static const PLAY_STOP:String = "play_stop";

        private static var _defaults:Object = {
            font:"_sans",
            clickable_labels:false,
            mouse_down_click:true,
            initial_percent:0,
            initial_index:0,
            text_size:10,
            text_color:0x444444,
            tic_color:0x999999,
            tic_length:0,
            label_tic_length:0,
            tic_offset:5,
            pointer_offset:10,
            label_offset:3,
            label_shift:0,
            snappy:true,
            pointer_padding:5,
            label_xoffset:0,
            vertical:false,
            play_through_time:16000,
            play_through_frames:0,
            play_step_time:300,
            auto_restart:true
        };
        private static var _playing:Boolean = false;

        private var _container:Sprite;
        private var _clickArea:Sprite;
        protected var _track:MovieClip;
        protected var _pointer:MovieClip;
        private var _haveStage:Boolean = false;
        private var _playTween:NumberTween;
        private var _playTimer:Timer;
        private var _framePlayStarted:Boolean = false;
        private var _currFrame:int = 0;
        protected var _opts:Object;
        private var _dragging:Boolean = false;
        protected var _width:Number = 100;
        private var _trackHeight:int;
        protected var _length:int = 0;
        private var _uMouseDown:Number;
        private var _uPointerStart:Number;
        public var _selectedIndex:int = 0;
        public var _currPct:Number = 0;
        private var _labels:Array;

        public function SliderController(_arg1:MovieClip, _arg2:MovieClip, _arg3:Array, _arg4:Object=null){
            this._opts = Opts.init(_defaults, _arg4);
            this._container = new Sprite();
            this._track = _arg1;
            if (_arg1.height > _arg1.width){
                this._opts.vertical = true;
                this._trackHeight = _arg1.width;
            } else {
                this._trackHeight = _arg1.height;
            };
            this._pointer = _arg2;
            _arg1.parent.addChild(this._container);
            this._container.x = _arg1.x;
            this._container.y = _arg1.y;
            if (this._opts.vertical){
                this._container.y = (this._container.y + this._opts.pointer_padding);
                this._width = (_arg1.height - (2 * this._opts.pointer_padding));
            } else {
                this._container.x = (this._container.x + this._opts.pointer_padding);
                this._width = (_arg1.width - (2 * this._opts.pointer_padding));
            };
            this._playTween = new NumberTween();
            if (((this._opts.snappy) && (this._opts.play_step_time))){
                this._playTimer = new Timer(this._opts.play_step_time, 0);
                this._playTimer.addEventListener("timer", this.handlePlayTimer);
            };
            this._length = _arg3.length;
            this.initTics(_arg3);
            this.initClickArea();
            this.initPointer();
        }
        public function get container():Sprite{
            return (this._container);
        }
        public function get length():int{
            return (this._length);
        }
        public function get isPlaying():Boolean{
            return (_playing);
        }
        public function setPlayStepTime(_arg1:int):void{
            this._opts.play_step_time = _arg1;
        }
        public function play():void{
            var _local3:int;
            var _local4:int;
            var _local5:int;
            if (_playing){
                return;
            };
            var _local1:Number = this.sliderPercent;
            var _local2:Number = this.getMaxPercent();
            if (((this._opts.snappy) && ((this.selectedIndex >= (this.length - 1))))){
                this.setSliderIndex(0, false);
            } else {
                if (_local1 >= (_local2 - 0.0002)){
                    if (this._opts.auto_restart){
                        _local1 = 0;
                    } else {
                        return;
                    };
                } else {
                    if (this._opts.snappy){
                        _local3 = (this.selectedIndex + 1);
                        _local1 = this.convPointerPosToPercent(this.convIndexToUPos(_local3));
                    };
                };
            };
            _playing = true;
            if (this._opts.play_through_frames){
                if (!this._framePlayStarted){
                    this._framePlayStarted = true;
                    this._track.stage.addEventListener(Event.ENTER_FRAME, this.handleFramePlay);
                };
            } else {
                if (((this._opts.play_step_time) && (this._opts.snappy))){
                    _local4 = (this._opts.play_step_time * (this.length - 1));
                } else {
                    _local4 = this._opts.play_through_time;
                };
                if (this._playTimer){
                    this._playTimer.start();
                } else {
                    if (_local2 <= _local1){
                        return;
                    };
                    _local5 = int(((_local2 - _local1) * _local4));
                    this._playTween.start(_local5, TweenMethods.linear, this.handlePlayTween, _local1, _local2);
                };
            };
        }
        public function handlePlayTimer(_arg1):void{
            if (!_playing){
                this.stop();
                return;
            };
            this.detectSliderChange();
            var _local2:int = (this.currentIndex + 1);
            var _local3:int = this.getMaxIndex();
            if (_local2 > _local3){
                this.stopPlaying();
            } else {
                this.setSliderIndex(_local2, true);
            };
        }
        public function handlePlayTween(_arg1:Number, _arg2:Boolean):void{
            this.setSliderPercent(_arg1, true);
            if (_arg2){
                this.stopPlaying();
            };
        }
        private function stopPlaying():void{
            if (_playing){
                this.stop();
                dispatchEvent(new Event(PLAY_STOP));
            };
        }
        public function stop():void{
            _playing = false;
            this._playTween.stop();
            if (this._playTimer){
                this._playTimer.reset();
            };
        }
        private function initClickArea():void{
            this._clickArea = new Sprite();
            this._container.addChild(this._clickArea);
            this._clickArea.graphics.beginFill(0xFFFFFF, 0);
            var _local1 = 10;
            var _local2:Number = (this._width + (_local1 * 2));
            var _local3:Number = (_local1 * 2);
            var _local4:Number = ((this._opts.vertical) ? _local3 : _local2);
            var _local5:Number = ((this._opts.vertical) ? _local2 : _local3);
            this._clickArea.graphics.drawRect(-(_local1), -(_local1), _local4, _local5);
            this._clickArea.graphics.endFill();
            if (this._opts.mouse_down_click){
                this._clickArea.addEventListener(MouseEvent.MOUSE_DOWN, this.handleClick);
            } else {
                this._clickArea.addEventListener(MouseEvent.CLICK, this.handleClick);
            };
        }
        private function initPointer():void{
            this._container.addChild(this._pointer);
            var _local1:Number = this._opts.pointer_offset;
            if (this._opts.vertical){
                this._pointer.x = _local1;
            } else {
                this._pointer.y = _local1;
            };
            if (this._opts.initial_index != 0){
                this.setSliderPosByIndex(this._opts.initial_index);
            } else {
                this.setSliderPercent(this._opts.initial_percent, false);
            };
            this._pointer.buttonMode = true;
            this._pointer.useHandCursor = true;
            this._pointer.addEventListener(MouseEvent.MOUSE_DOWN, this.handleMouseDown);
        }
        private function handleClick(_arg1:MouseEvent):void{
            if (_playing){
                this.stopPlaying();
            };
            this.setPointerPos(((this._opts.vertical) ? this._container.mouseY : this._container.mouseX));
            if (this._opts.snappy){
                this.snapPointerToNearestTic(this.detectPointerUPos());
            };
            this.detectSliderChange();
            if (this._opts.mouse_down_click){
                this.handleMouseDown(null);
            };
        }
        protected function setPointerPos(_arg1:Number):void{
            var _local2:Number = ((this._opts.vertical) ? this._pointer.y : this._pointer.x);
            if (Math.abs((_local2 - _arg1)) > 0.1){
                if (this._opts.vertical){
                    this._pointer.y = _arg1;
                } else {
                    this._pointer.x = _arg1;
                };
            };
        }
        private function handleMouseDown(_arg1:MouseEvent):void{
            if (_playing){
                this.stopPlaying();
            };
            if (!this._haveStage){
                if (this._pointer.stage){
                    this.initStageEvents();
                    this._haveStage = true;
                };
            };
            this._dragging = true;
            this._uMouseDown = ((this._opts.vertical) ? this._container.mouseY : this._container.mouseX);
            this._uPointerStart = ((this._opts.vertical) ? this._pointer.y : this._pointer.x);
        }
        private function initStageEvents():void{
            this._pointer.stage.addEventListener(MouseEvent.MOUSE_UP, this.handleMouseUp);
            this._pointer.stage.addEventListener(Event.MOUSE_LEAVE, this.handleMouseUp);
            this._pointer.stage.addEventListener(MouseEvent.ROLL_OUT, this.handleMouseUp);
            this._pointer.stage.addEventListener(MouseEvent.ROLL_OVER, this.handleMouseUp);
            this._pointer.stage.addEventListener(Event.DEACTIVATE, this.handleMouseUp);
            this._pointer.stage.addEventListener(Event.ACTIVATE, this.handleMouseUp);
            this._pointer.stage.addEventListener(Event.ENTER_FRAME, this.handleMouseMove);
        }
        private function handleMouseUp(_arg1:Event):void{
            if (!this._dragging){
                return;
            };
            this._dragging = false;
            if (this._opts.snappy){
                this.snapPointerToNearestTic(this.detectPointerUPos());
            };
            this.detectSliderChange();
            dispatchEvent(new Event(C.DONE));
        }
        private function detectPointerUPos():Number{
            return (((this._opts.vertical) ? this._pointer.y : this._pointer.x));
        }
        private function detectSliderChange():void{
            var _local1:Number = this.detectPointerUPos();
            var _local2:int = this.convPointerPosToIndex(_local1);
            if (_local2 != this._selectedIndex){
                this.updateSliderIndex(_local2);
            };
            if (!this._opts.snappy){
                dispatchEvent(new Event(C.SLIDE));
            };
        }
        private function handleFramePlay(_arg1):void{
            if (!_playing){
                return;
            };
            var _local2:Number = (1 / this._opts.play_through_frames);
            this._currFrame = Math.round((this._currPct * this._opts.play_through_frames));
            this.setSliderPercent(this._currPct, true);
            if ((this._currPct + 0.0001) >= 1){
                this._currPct = 1;
                this.stopPlaying();
            } else {
                this._currPct = (this._currPct + _local2);
            };
        }
        private function handleMouseMove(_arg1:Event):void{
            if (!this._dragging){
                return;
            };
            var _local2:Number = ((this._opts.vertical) ? this._container.mouseY : this._container.mouseX);
            var _local3:int = (this._uPointerStart + (_local2 - this._uMouseDown));
            if (_local3 < 0){
                _local3 = 0;
            } else {
                if (_local3 > this._width){
                    _local3 = this._width;
                };
            };
            if (this._opts.snappy){
                this.snapPointerToNearestTic(_local3);
            } else {
                this.setPointerPos(_local3);
            };
            this.detectSliderChange();
        }
        private function snapPointerToNearestTic(_arg1:Number):void{
            var _local2:int = this.convPointerPosToIndex(_arg1);
            _arg1 = this.convIndexToUPos(_local2);
            this.setPointerPos(_arg1);
        }
        protected function convIndexToUPos(_arg1:Number):Number{
            var _local2:Number = (_arg1 / (this._length - 1));
            var _local3:Number = Math.round((_local2 * this._width));
            if (_arg1 == (this._length - 1)){
                _local3--;
            };
            return (_local3);
        }
        public function convIndexToTrackPos(_arg1:Number):Number{
            var _local2:Number = (_arg1 / (this.length - 1));
            var _local3:Number = (Math.round((_local2 * this._width)) + this._opts.pointer_padding);
            return (_local3);
        }
        private function convPointerPosToPercent(_arg1:Number):Number{
            var _local2:Number = (_arg1 / this._width);
            if (_local2 < 0){
                _local2 = 0;
            } else {
                if (_local2 > 1){
                    _local2 = 1;
                };
            };
            _local2 = Math.min(_local2, this.getMaxPercent());
            return (_local2);
        }
        private function convPointerPosToIndex(_arg1:Number):int{
            var _local2:Number = this.convPointerPosToPercent(_arg1);
            var _local3:int = Math.round((_local2 * (this._length - 1)));
            return (_local3);
        }
        public function setSliderPercent(_arg1:Number, _arg2:Boolean=false):void{
            var _local3:Number = this.convPercentToIndexFraction(_arg1);
            if (this._opts.snappy){
                _local3 = Math.floor(_local3);
            };
            this._currPct = _arg1;
            this.setSliderPosByIndex(_local3);
            this.updateSliderIndex(_local3);
            if (_arg2){
                this.detectSliderChange();
            };
        }
        public function getIndexFraction():Number{
            return (this.convPercentToIndexFraction(this.sliderPercent));
        }
        protected function convPercentToIndexFraction(_arg1:Number):Number{
            return ((_arg1 * (this._length - 1)));
        }
        public function get selectedIndex():int{
            return (this._selectedIndex);
        }
        public function get currentFrame():int{
            return (this._currFrame);
        }
        public function get currentIndex():int{
            return (this.selectedIndex);
        }
        public function get sliderPercent():Number{
            if (_playing){
                return (this._currPct);
            };
            return (this.convPointerPosToPercent(this.detectPointerUPos()));
        }
        private function handleLabelClick(_arg1:Event):void{
            var _local2:InteractiveTextField = (_arg1.target as InteractiveTextField);
            var _local3:int = this._labels.indexOf(_local2);
            if (_local3 == -1){
            } else {
                this.setSliderIndex(_local3, true);
            };
        }
        private function clearSelectedLabels():void{
            var _local1:InteractiveTextField;
            for each (_local1 in this._labels) {
                if (_local1.selected){
                    _local1.unselect();
                };
            };
        }
        private function initTics(_arg1:Array):void{
            var _local4:String;
            this._labels = [];
            var _local2:Number = this._width;
            this._length = _arg1.length;
            var _local3:int;
            while (_local3 < this._length) {
                if (_arg1[_local3] == undefined){
                } else {
                    _local4 = _arg1[_local3];
                    this.initTic(this.convIndexToUPos(_local3), _local4);
                };
                _local3++;
            };
        }
        public function updateTics(_arg1:Array):void{
            var _local2:FormattedTextField;
            for each (_local2 in this._labels) {
                if (_local2){
                    _local2.parent.removeChild(_local2);
                };
            };
            this._container.graphics.clear();
            this.initTics(_arg1);
            this._length = _arg1.length;
        }
        private function initTic(_arg1:int, _arg2:String):void{
            var _local6:InteractiveTextField;
            var _local3:FormattedTextField;
            if (_arg2){
                if (this._opts.clickable_labels){
                    _local6 = new InteractiveTextField();
                    if (this._opts.mouse_down_click){
                        _local6.addEventListener(MouseEvent.MOUSE_DOWN, this.handleLabelClick);
                    } else {
                        _local6.addEventListener(MouseEvent.CLICK, this.handleLabelClick);
                    };
                    _local3 = _local6;
                } else {
                    _local3 = new FormattedTextField();
                };
                _local3.format.font = this._opts.font;
                _local3.format.size = this._opts.text_size;
                _local3.format.color = this._opts.text_color;
                _local3.text = _arg2;
                this._container.addChild(_local3);
            };
            this._labels.push(_local3);
            var _local4:int = this._opts.tic_length;
            if (((this._opts.label_tic_length) && (_arg2))){
                _local4 = this._opts.label_tic_length;
            };
            this._container.graphics.lineStyle(1, this._opts.tic_color, 1, true);
            var _local5:int = this._trackHeight;
            if (this._opts.vertical){
                if (_local4){
                    this._container.graphics.moveTo((_local5 + this._opts.tic_offset), _arg1);
                    this._container.graphics.lineTo(((_local5 + this._opts.tic_offset) + _local4), _arg1);
                };
                if (_local3){
                    _local3.x = (this._opts.label_offset + _local5);
                    _local3.y = (Math.round((_arg1 - (_local3.height / 2))) + this._opts.label_shift);
                };
            } else {
                if (_local4){
                    this._container.graphics.moveTo(_arg1, (_local5 + this._opts.tic_offset));
                    this._container.graphics.lineTo(_arg1, ((_local5 + this._opts.tic_offset) + _local4));
                };
                if (_local3){
                    _local3.y = (this._opts.label_offset + _local5);
                    _local3.x = Math.round((_arg1 - (_local3.width / 2)));
                    if (this._opts.label_shift){
                        _local3.x = Math.round((_arg1 + this._opts.label_shift));
                    };
                };
            };
        }
        public function setSliderIndex(_arg1:int, _arg2:Boolean=true):void{
            this.setSliderPosByIndex(_arg1);
            this.updateSliderIndex(_arg1, _arg2);
        }
        public function setSliderPosByIndex(_arg1:Number):void{
            var _local2:Number = this.convIndexToUPos(_arg1);
            this.setPointerPos(_local2);
        }
        public function getPointerPos(_arg1:DisplayObjectContainer):Point{
            var _local2:Point = Context.translateObjectXY(this._pointer, _arg1);
            return (_local2);
        }
        private function updateSliderIndex(_arg1:Number, _arg2:Boolean=true):void{
            var _local4:InteractiveTextField;
            var _local3:int = Math.round(_arg1);
            if (_local3 == this._selectedIndex){
                return;
            };
            this._selectedIndex = _local3;
            if (((this._opts.clickable_labels) && (this._labels[_local3]))){
                this.clearSelectedLabels();
                _local4 = this._labels[_local3];
                _local4.select();
            };
            if (_arg2){
                dispatchEvent(new Event(C.CHANGE));
            };
        }
        public function getMaxIndex():int{
            return ((this._length - 1));
        }
        protected function getMaxPercent():Number{
            return (1);
        }

    }
}//package mb.controls 
﻿package mb.controls {
    import flash.display.*;
    import mb.*;
    import mb.styles.*;

    public class ButtonIcon {

        public static function makeArrowIcon(_arg1:String, _arg2:int, _arg3:int, _arg4:int, _arg5:int, _arg6:int=0):MovieClip{
            var _local7:MovieClip = new MovieClip();
            var _local8:ShapeStyle = new ShapeStyle();
            var _local9:Number = 0xFFFFFF;
            var _local10:Number = 0xBBBBBB;
            _local8.setFill(_local9, 1);
            _local8.setStroke(1, _local10, 1);
            paintBackground(_local7, _local8, _arg2, _arg3, 2);
            paintArrow(_local7, 0, _arg4, _arg5, _arg1, _arg6);
            return (_local7);
        }
        public static function paintBackground(_arg1:Sprite, _arg2:ShapeStyle, _arg3:int, _arg4:int, _arg5:int=0):void{
            _arg2.beginDrawing(_arg1.graphics, true);
            if (_arg5 > 0){
                _arg1.graphics.drawRoundRect(0, 0, _arg3, _arg4, (_arg5 * 2));
            } else {
                _arg1.graphics.drawRect(0, 0, _arg3, _arg4);
            };
            _arg1.graphics.lineStyle();
        }
        public static function paintArrow(_arg1:Sprite, _arg2:Number, _arg3:int, _arg4:int, _arg5:String, _arg6:int=0, _arg7:int=0):void{
            var _local12:Array;
            var _local13:Array;
            var _local8:Number = 0;
            var _local9:Number = 0;
            var _local10:Number = (_local8 + _arg3);
            var _local11:Number = (_local9 + _arg4);
            if (_arg5 == C.LEFT){
                _local12 = [_local10, _local10, _local8];
                _local13 = [_local9, _local11, ((_local9 + _local11) * 0.5)];
            } else {
                _local12 = [_local8, _local8, _local10];
                _local13 = [_local9, _local11, ((_local9 + _local11) * 0.5)];
            };
            _arg1.graphics.beginFill(_arg2);
            drawPolygon(_arg1.graphics, _local12, _local13);
            _arg1.graphics.endFill();
        }
        private static function drawPolygon(_arg1:Graphics, _arg2:Array, _arg3:Array):void{
            var _local4:int = (_arg2.length - 1);
            _arg1.moveTo(_arg2[_local4], _arg3[_local4]);
            var _local5:int;
            while (_local5 <= _local4) {
                _arg1.lineTo(_arg2[_local5], _arg3[_local5]);
                _local5++;
            };
        }

    }
}//package mb.controls 
﻿package mb.controls {
    import flash.display.*;
    import mb.projections.*;
    import flash.events.*;
    import mb.*;
    import mb.maps.*;

    public class ZoomSlider extends EventDispatcher {

        private static var _defaults:Object = {
            vertical:true,
            tic_length:1,
            tic_color:0x333333,
            pointer_padding:0,
            pointer_offset:0,
            tic_offset:-7,
            num_steps:0,
            init_level:1,
            min_level:1
        };

        private const _minIndex:int = 0;

        private var _selectedIndex:int = 0;
        private var _slider:SliderController;
        private var _buttons:ZoomTool;
        private var _maxIndex:int;
        private var _ptrIdx:int = -1;
        private var _map:MapStack;
        private var _ptr:MovieClip;
        private var _track:MovieClip;
        private var _opts:Object;

        public function ZoomSlider(_arg1:MovieClip, _arg2:MovieClip, _arg3:MovieClip, _arg4:MovieClip, _arg5:Object=null){
            this._opts = Opts.init(_defaults, _arg5);
            this._ptr = _arg4;
            this._ptr.visible = false;
            this._track = _arg3;
            this._buttons = new ZoomTool(_arg1, _arg2, this.inCallback, this.outCallback);
        }
        private function initSlider():void{
            var _local2:Array;
            var _local1:int = this._opts.num_steps;
            this._maxIndex = (_local1 - 1);
            this._ptrIdx = this.convLevelToIndex(this._opts.init_level);
            _local2 = [];
            var _local3:int;
            while (_local3 < _local1) {
                _local2.push("");
                _local3++;
            };
            this._ptr.visible = true;
            this._slider = new SliderController(this._track, this._ptr, _local2, this._opts);
            this._slider.setSliderIndex(this._ptrIdx, false);
            this._slider.addEventListener(C.CHANGE, this.handleSliderChange);
        }
        public function initFromMap(_arg1:MapStack):void{
            if (this._slider){
                return;
            };
            this._map = _arg1;
            _arg1.addEventListener(C.READY, this.handleMapReady);
        }
        private function handleMapReady(_arg1):void{
            var _local2:int = this._map.navigation.numLevels;
            this._opts.num_steps = _local2;
            if (!this._opts.pointer_padding){
                this._opts.pointer_padding = Math.round(((this._track.height / (_local2 + 1)) * 0.7));
            };
            this.initSlider();
            this.setLevel(this._map.navigation.level);
            this._map.navigation.addEventListener(C.RESCALE, this.handleMapRescale);
        }
        private function handleMapRescale(_arg1):void{
            this.setLevel(Math.round(this._map.navigation.levelFraction));
        }
        public function get currentLevel():int{
            return (this.convIndexToLevel(this._ptrIdx));
        }
        public function setLevel(_arg1:int):void{
            var _local2:int = this.convLevelToIndex(_arg1);
            if (this._ptrIdx != _local2){
                this._ptrIdx = _local2;
                this._slider.setSliderIndex(this._ptrIdx, false);
            };
        }
        private function updateMap():void{
            var _local2:GeoPoint;
            var _local1:int = this.convIndexToLevel(this._ptrIdx);
            if (((this._map) && (!((this._map.navigation.level == _local1))))){
                _local2 = this._map.navigation.getCenterAsLatLong();
                this._map.navigation.zoomToLatLongLevel(_local2.lat, _local2.long, _local1, false);
            };
        }
        private function handleSliderChange(_arg1:Object):void{
            var _local2:int = this._slider.selectedIndex;
            if (_local2 != this._ptrIdx){
                this._ptrIdx = _local2;
                dispatchEvent(new Event(C.CHANGE));
            };
            this.updateMap();
        }
        private function outCallback():void{
            if (this._ptrIdx < this._maxIndex){
                this._ptrIdx++;
                this._slider.setSliderIndex(this._ptrIdx, false);
                this.updateMap();
                dispatchEvent(new Event(C.CHANGE));
            };
        }
        private function inCallback():void{
            if (this._ptrIdx > this._minIndex){
                this._ptrIdx--;
                this._slider.setSliderIndex(this._ptrIdx, false);
                this.updateMap();
                dispatchEvent(new Event(C.CHANGE));
            };
        }
        private function convIndexToLevel(_arg1:int):int{
            return ((this._opts.num_steps - _arg1));
        }
        private function convLevelToIndex(_arg1:int):int{
            return ((this._opts.num_steps - _arg1));
        }

    }
}//package mb.controls 
﻿package mb.controls {
    import flash.display.*;
    import flash.events.*;

    public class ZoomTool {

        private var _inClip:MovieClip;
        private var _outClip:MovieClip;
        private var _inCallback:Function;
        private var _outCallback:Function;

        public function ZoomTool(_arg1:MovieClip, _arg2:MovieClip, _arg3:Function, _arg4:Function):void{
            this._inClip = _arg1;
            this._outClip = _arg2;
            this._inClip.buttonMode = true;
            this._inClip.useHandCursor = true;
            this._outClip.buttonMode = true;
            this._outClip.useHandCursor = true;
            this._inCallback = _arg3;
            this._outCallback = _arg4;
            this.init();
        }
        private function init():void{
            this._inClip.addEventListener(MouseEvent.MOUSE_DOWN, this.handleZoomIn);
            this._outClip.addEventListener(MouseEvent.MOUSE_DOWN, this.handleZoomOut);
        }
        private function handleZoomIn(_arg1:Object):void{
            this._inCallback();
        }
        public function handleZoomOut(_arg1:Object):void{
            this._outCallback();
        }

    }
}//package mb.controls 
﻿package mb.controls {
    import flash.display.*;
    import flash.events.*;
    import mb.*;
    import mb.easing.*;
    import flash.utils.*;

    public class ButtonControl extends EventDispatcher {

        public static const UP:String = "up";
        public static const HOVER:String = "hover";
        public static const DOWN:String = "down";
        public static const DISABLED:String = "disabled";
        public static const DEFAULT:String = "default";
        private static const _defaults:Object = {
            auto_repeat:false,
            slow_interval:260,
            fast_interval:70
        };

        public var key:Object = null;
        protected var _mc:MovieClip;
        private var _enabled:Boolean = false;
        private var _state:String = "up";
        private var _savedState:String;
        public var name:String = "";
        private var _closures:Object;
        private var _repeatTimer:Timer;
        private var _repeatTime:Number;
        private var _repeating:Boolean = false;
        private var _opts:Object;

        public function ButtonControl(_arg1:MovieClip, _arg2:Array=null, _arg3:Object=null){
            this._opts = Opts.init(_defaults, _arg3);
            this._mc = _arg1;
            _arg1.mouseChildren = false;
            if (!_arg2){
                _arg2 = [DEFAULT];
            };
            this._closures = {};
            this.registerFrameStates(_arg2);
            this.initEvents();
            if (this._opts.auto_repeat){
                this._repeatTimer = new Timer(this._opts.slow_interval);
                this._repeatTimer.addEventListener("timer", this.handleTimer);
            };
        }
        public function get container():DisplayObject{
            return (this._mc);
        }
        public function get state():String{
            return (this._state);
        }
        public function registerFrameState(_arg1:int, _arg2:String):void{
            var frame:* = _arg1;
            var state:* = _arg2;
            var closure:* = function ():void{
                _mc.gotoAndStop(frame);
                _state = state;
            };
            this._closures[state] = closure;
            if (frame == 1){
                closure();
            };
        }
        public function registerFrameStates(_arg1:Array):void{
            var _local2:int;
            while (_local2 < _arg1.length) {
                this.registerFrameState((_local2 + 1), _arg1[_local2]);
                _local2++;
            };
        }
        public function setState(_arg1:String):void{
            if (!this._closures[_arg1]){
                return;
            };
            var _local2 = this._closures;
            _local2[_arg1]();
        }
        public function get enabled():Boolean{
            return (this._enabled);
        }
        public function set enabled(_arg1:Boolean):void{
            if (_arg1 == this._enabled){
                return;
            };
            this._enabled = _arg1;
            this._mc.buttonMode = (this._mc.useHandCursor = _arg1);
            this._mc.tabEnabled = false;
            if (this._closures[DISABLED]){
                if (((((_arg1) && (this._savedState))) && (this._closures[this._savedState]))){
                    var _local2 = this._closures;
                    _local2[this._savedState]();
                };
                if (!_arg1){
                    this._savedState = this._state;
                    _local2 = this._closures;
                    _local2[DISABLED]();
                };
            };
        }
        private function initEvents():void{
            this.enabled = true;
            this._mc.addEventListener(MouseEvent.CLICK, this.handleClick);
            this._mc.addEventListener(MouseEvent.ROLL_OVER, this.handleOver);
            this._mc.addEventListener(MouseEvent.ROLL_OUT, this.handleOut);
            this._mc.addEventListener(MouseEvent.MOUSE_DOWN, this.handleDown);
            this._mc.addEventListener(MouseEvent.MOUSE_UP, this.handleUp);
        }
        private function handleDown(_arg1):void{
            if (((!(this._opts.auto_repeat)) || (!(this.enabled)))){
                return;
            };
            this.resetTimer();
            this._repeatTimer.delay = this._opts.slow_interval;
            this._repeatTimer.start();
        }
        private function handleUp(_arg1):void{
            this.resetTimer();
        }
        private function resetTimer():void{
            if (((this._repeatTimer) && (this._repeatTimer.running))){
                this._repeatTimer.reset();
            };
        }
        private function handleTimer(_arg1):void{
            var _local4:int;
            var _local2:int = this._repeatTimer.currentCount;
            var _local3:Number = (_local2 / 12);
            if (_local3 < 1){
                _local3 = TweenMethods.standard(_local3);
                _local4 = Math.round((((1 - _local3) * this._opts.slow_interval) + (_local3 * this._opts.fast_interval)));
            } else {
                _local4 = this._opts.fast_interval;
            };
            this._repeatTimer.delay = _local4;
            this.fireClickEvent();
        }
        private function fireClickEvent():void{
            dispatchEvent(new MouseEvent(MouseEvent.CLICK));
            dispatchEvent(new Event(C.CLICK));
        }
        private function handleClick(_arg1:MouseEvent):void{
            if (this.enabled){
                if (((this._repeatTimer) && ((this._repeatTimer.repeatCount > 0)))){
                    return;
                };
                this.fireClickEvent();
            };
        }
        private function handleOver(_arg1:MouseEvent):void{
            if (this.enabled){
                dispatchEvent(new Event(C.ROLL_OVER));
            };
        }
        private function handleOut(_arg1:MouseEvent):void{
            if (this.enabled){
                dispatchEvent(new Event(C.ROLL_OUT));
            };
            this.resetTimer();
        }

    }
}//package mb.controls 
﻿package mb.maps {
    import flash.display.*;
    import mb.data.*;
    import mb.*;
    import mb.styles.*;
    import mb.shapes.*;
    import mb.rendering.*;

    public class ShapeOverlayLayer extends VectorLayer {

        private static var _defaults:Object = {renderer:null};

        protected var _shapes:IShapeDataSource;
        protected var _style:IShapeStyle;
        protected var _renderer:IShapeLayerRenderer;
        private var _activeIds:Array = null;
        private var _parent:MapLayer;
        protected var popupSuppressed:Boolean = false;
        private var _opts:Object;

        public function ShapeOverlayLayer(_arg1:IShapeDataSource, _arg2:DataTable, _arg3:MapLayer, _arg4:Object=null):void{
            super(_arg2, null);
            this._opts = Opts.init(_defaults, _arg4);
            this._activeIds = [];
            this._renderer = new ShapeOverlayLayerRenderer(this._opts);
            this._shapes = _arg1;
            type = SHAPE_OVERLAY;
            this._parent = _arg3;
            waitFor(_arg1);
        }
        override protected function handleReadyState():void{
            this._renderer.embed(_container, _map);
        }
        override public function refresh():Boolean{
            this.renderActiveShapes(C.SYMBOLS);
            return (true);
        }
        override public function rescale():void{
            this.renderActiveShapes(C.SCALE);
        }
        override public function reposition():void{
        }
        protected function renderActiveShapes(_arg1:int):void{
            if (!_rendered){
                if (((!(ready)) || (!(_map.navigation.ready)))){
                    return;
                };
                this._renderer.embed(_container, _map);
                _rendered = true;
            };
            var _local2:ShapeDataSet;
            var _local3 = (this._activeIds.length > 0);
            if (((this._parent) && (!(this._parent.inrange)))){
                _local3 = false;
            };
            if (_local3){
                _local2 = this._shapes.fetchShapesByIds(this._activeIds);
            };
            this._renderer.update(_arg1, _local2);
        }
        public function setActiveId(_arg1:int):void{
            if ((((this._activeIds.length == 1)) && ((this._activeIds[0] == _arg1)))){
                return;
            };
            if (_arg1 == -1){
                this.setActiveIds([]);
            } else {
                this.setActiveIds([_arg1]);
            };
        }
        public function setActiveIds(_arg1:Array):void{
            if ((((_arg1.length == 0)) && ((this._activeIds.length == 0)))){
                return;
            };
            this._activeIds = _arg1;
            this.renderActiveShapes(C.SYMBOLS);
        }
        public function clearActiveShape():void{
            this.setActiveIds([]);
        }
        public function getActiveIds():Array{
            return (this._activeIds.concat());
        }
        public function getActiveId():int{
            if (this._activeIds.length == 0){
                return (-1);
            };
            return (this._activeIds[0]);
        }
        public function setStyle(_arg1:IShapeStyle):void{
            this._renderer.setStyle(_arg1);
        }

    }
}//package mb.maps 
﻿package mb.maps {
    import mb.data.*;
    import flash.events.*;

    public interface ISymbolHit extends IEventDispatcher {

        function getMouseHitId():int;
        function getMouseHitIds():Array;
        function layerIsActive():Boolean;
        function set enabled(_arg1:Boolean):void;
        function get enabled():Boolean;
        function get priority():int;
        function set priority(_arg1:int):void;
        function setFilter(_arg1:IFilter):void;
        function testMouseHit():Boolean;
        function getHitIdAtXY(_arg1:Number, _arg2:Number, _arg3:Number=0, _arg4:int=-1):int;
        function startMouseInteraction(_arg1:MouseService):void;
        function set useSafeClick(_arg1:Boolean):void;
        function set useMultiHit(_arg1:Boolean):void;

    }
}//package mb.maps 
﻿package mb.maps {
    import flash.display.*;

    public class LayerManager {

        private var _map:MapStack;
        private var _baseContainer:Sprite;
        private var _shapeContainer:Sprite;
        private var _shapeOverlayContainer:Sprite;
        private var _symbolContainer:Sprite;
        private var _markerContainer:Sprite;
        private var _container:Sprite;
        private var _layers:Array;

        public function LayerManager(_arg1:Sprite, _arg2:MapStack):void{
            this._map = _arg2;
            this._layers = [];
            this._container = _arg1;
            _arg1.addChild((this._baseContainer = new Sprite()));
            _arg1.addChild((this._shapeContainer = new Sprite()));
            _arg1.addChild((this._symbolContainer = new Sprite()));
            _arg1.addChild((this._shapeOverlayContainer = new Sprite()));
            _arg1.addChild((this._markerContainer = new Sprite()));
            this._baseContainer.mouseEnabled = false;
            this._baseContainer.mouseChildren = false;
            this._shapeContainer.mouseEnabled = false;
            this._shapeContainer.mouseChildren = false;
            this._shapeOverlayContainer.mouseEnabled = false;
            this._shapeOverlayContainer.mouseChildren = false;
            this._symbolContainer.mouseEnabled = false;
            this._symbolContainer.mouseChildren = false;
            this._shapeContainer.cacheAsBitmap = true;
        }
        public function raiseShapeOverlayContainer():void{
            if (this._container.getChildIndex(this._symbolContainer) > this._container.getChildIndex(this._shapeOverlayContainer)){
                this._container.swapChildren(this._symbolContainer, this._shapeOverlayContainer);
            };
        }
        public function get shapeContainer():Sprite{
            return (this._shapeContainer);
        }
        public function get labelContainer():Sprite{
            return (this._symbolContainer);
        }
        public function get symbolContainer():Sprite{
            return (this._symbolContainer);
        }
        public function get overlayContainer():Sprite{
            return (this._shapeOverlayContainer);
        }
        public function get container():Sprite{
            return (this._container);
        }
        public function get markerContainer():Sprite{
            return (this._markerContainer);
        }
        public function disableMarkerEvents():void{
            this.markerContainer.mouseEnabled = false;
            this.markerContainer.mouseChildren = false;
        }
        public function getLayerByName(_arg1:String):MapLayer{
            var _local2:MapLayer;
            for each (_local2 in this._layers) {
                if (_local2.name == _arg1){
                    return (_local2);
                };
            };
            return (null);
        }
        public function getLayersByType(_arg1:String):Array{
            var _local3:MapLayer;
            var _local2:Array = [];
            for each (_local3 in this._layers) {
                if (_local3.type == _arg1){
                    _local2.push(_local3);
                };
            };
            return (_local2);
        }
        public function removeLayer(_arg1:MapLayer):void{
            var _local2:int = this._layers.indexOf(_arg1);
            if (_local2 != -1){
                if (!_arg1.ready){
                };
                this._layers.splice(_local2, 1);
                if (((_arg1.container) && (_arg1.container.parent))){
                    _arg1.container.parent.removeChild(_arg1.container);
                };
            };
        }
        public function addLayer(_arg1:MapLayer):void{
            var _local3:Sprite;
            var _local6:MapLayer;
            var _local2:String = _arg1.type;
            if (_local2 == MapLayer.BASE){
                _local3 = this._baseContainer;
            } else {
                if (_local2 == MapLayer.SHAPE){
                    _local3 = this._shapeContainer;
                } else {
                    if (_local2 == MapLayer.SYMBOL){
                        _local3 = this._symbolContainer;
                    } else {
                        if (_local2 == MapLayer.SHAPE_OVERLAY){
                            _local3 = this._shapeOverlayContainer;
                        } else {
                            if (_local2 == MapLayer.MARKER){
                                _local3 = this._markerContainer;
                            } else {
                                _local3 = new Sprite();
                            };
                        };
                    };
                };
            };
            var _local4 = -1;
            var _local5:int;
            while (_local5 < this._layers.length) {
                _local6 = this._layers[_local5];
                if ((((_local6.container.parent == _local3)) && ((_local6.zIndex > _arg1.zIndex)))){
                    _local4 = _local6.container.parent.getChildIndex(_local6.container);
                };
                _local5++;
            };
            if (_local4 == -1){
                _local3.addChild(_arg1.container);
            } else {
                _local3.addChildAt(_arg1.container, _local4);
            };
            this._layers.push(_arg1);
            this._layers.sortOn("zIndex", Array.NUMERIC);
            _arg1.place(this._map);
        }
        public function raiseLayer(_arg1:MapLayer):void{
            _arg1.container.parent.addChild(_arg1.container);
        }
        public function lowerLayer(_arg1:MapLayer):void{
            _arg1.container.parent.addChildAt(_arg1.container, 0);
        }
        public function addLayerOverLayer(_arg1:MapLayer, _arg2:MapLayer):void{
            if (!_arg2.container.parent){
                this.addLayer(_arg1);
                return;
            };
            var _local3:Sprite = _arg2.container;
            this._layers.push(_arg1);
            _local3.parent.addChildAt(_arg1.container, (_local3.parent.getChildIndex(_local3) + 1));
            _arg1.place(this._map);
        }
        public function shiftLayers():void{
            var _local1:Object;
            var _local2:MapLayer;
            for (_local1 in this._layers) {
                _local2 = this._layers[_local1];
                if (((!(_local2.inrange)) && (_local2.visible))){
                };
                if (((((_local2.ready) && (_local2.viewable))) && (_local2.visible))){
                    _local2.reposition();
                };
            };
        }
        public function endShiftLayers():void{
            var _local1:Object;
            var _local2:MapLayer;
            for (_local1 in this._layers) {
                _local2 = this._layers[_local1];
                if (((((_local2.ready) && (_local2.viewable))) && (_local2.visible))){
                    _local2.repositionEnd();
                };
            };
        }
        public function refreshLayers(_arg1:String=null):void{
            var _local2:Object;
            var _local3:MapLayer;
            for (_local2 in this._layers) {
                _local3 = this._layers[_local2];
                if (((_arg1) && (!((_local3.type == _arg1))))){
                } else {
                    if (((((_local3.ready) && (_local3.viewable))) && (_local3.visible))){
                        _local3.refresh();
                    };
                };
            };
        }
        public function rescaleLayers():void{
            var _local1:Object;
            var _local2:MapLayer;
            this.setLayerVisibility();
            for (_local1 in this._layers) {
                _local2 = this._layers[_local1];
                if (((((_local2.ready) && (_local2.viewable))) && (_local2.visible))){
                    _local2.rescale();
                };
            };
        }
        public function setLayerVisibility():void{
            var _local1:Object;
            var _local2:MapLayer;
            for (_local1 in this._layers) {
                _local2 = this._layers[_local1];
                if (_local2.hidden){
                };
                if (((_local2.viewable) && (!(_local2.visible)))){
                    _local2.visible = true;
                } else {
                    if (((!(_local2.viewable)) && (_local2.visible))){
                        _local2.visible = false;
                    };
                };
            };
        }

    }
}//package mb.maps 
﻿package mb.maps {
    import mb.symbols.*;
    import mb.rendering.*;

    public class LabelLayer extends PointLayer {

        public function LabelLayer(_arg1:SymbolDataSource):void{
            var _local2:ISymbolLayerRenderer = new SymbolLayerRenderer(new LabelRenderer());
            super(_arg1, null, _local2);
        }
    }
}//package mb.maps 
﻿package mb.maps {

    public class RelativeScales extends ScaleSet {

        public function RelativeScales(_arg1:Array):void{
            relScaleArr = _arg1;
            _numLevels = _arg1.length;
        }
    }
}//package mb.maps 
﻿package mb.maps {
    import flash.events.*;
    import mb.*;

    public class ScaleManager extends EventDispatcher {

        private static var _handle:ScaleManager = new (ScaleManager)();
;
        private static var _mpp:Number = 0;
        private static var _contentWidth:Number = 0;
        private static var _contentHeight:Number = 0;
        public static var scaleMultiplier:Number = 1;

        public static function get handle():ScaleManager{
            return (_handle);
        }
        public static function updateScale(_arg1:Number, _arg2:Number, _arg3:Number):void{
            _arg1 = (_arg1 / scaleMultiplier);
            _arg2 = (_arg2 * scaleMultiplier);
            _arg3 = (_arg3 * scaleMultiplier);
            if (_arg1 != _mpp){
                _contentWidth = _arg2;
                _contentHeight = _arg3;
                _mpp = _arg1;
                handle.dispatchEvent(new Event(C.CHANGE));
            };
        }
        public static function get contentWidthInPixels():Number{
            return (_contentWidth);
        }
        public static function get metersPerPixel():Number{
            return (_mpp);
        }

    }
}//package mb.maps 
﻿package mb.maps {
    import flash.events.*;
    import mb.*;
    import flash.geom.*;
    import mb.shapes.*;
    import mb.gis.*;

    public class ShapeHit extends SymbolHitBase implements ISymbolHit {

        private static const POLYLINE_HIT_BUFFER:Number = 12;
        private static const POLYGON_HIT_BUFFER:Number = 3.5;
        private static const MIN_POLYGON_BUFFER:Number = 3.5;

        private var _shapes:IShapeDataSource;
        private var _hitShp:ShapeVector;
        private var _count:int = 0;
        private var _closedPaths:Boolean = true;
        private var _rollOutBuffer:Number = 3.5;
        private var _rollOverBuffer:Number = 3.5;
        private var _transitionBuffer:Number = 0;
        private var _polylineProximityBuffer:Number = 12;
        private var _multiHitBuffer:Number = 0;
        private var _hitIds:Array = null;
        private var _lyr:MapLayer;

        public function ShapeHit(_arg1:MapLayer, _arg2:IShapeDataSource, _arg3:Object=null){
            super(_arg3);
            this._lyr = _arg1;
            this._shapes = _arg2;
            this._closedPaths = _arg2.closedPaths;
            if (this._closedPaths){
                this._rollOverBuffer = POLYGON_HIT_BUFFER;
                this._transitionBuffer = 0.6;
            } else {
                this._transitionBuffer = 0;
                this._rollOverBuffer = POLYLINE_HIT_BUFFER;
            };
        }
        override public function getMouseHitIds():Array{
            if (!this._hitIds){
                return ([]);
            };
            return (this._hitIds);
        }
        override public function layerIsActive():Boolean{
            return (this._lyr.viewable);
        }
        override public function getHitIdAtXY(_arg1:Number, _arg2:Number, _arg3:Number=0, _arg4:int=-1):int{
            var _local11:int;
            var _local12:ShapeVector;
            var _local13:int;
            var _local14:Number;
            var _local15:Boolean;
            var _local16:Number;
            var _local17:Number;
            var _local5:Number = this._lyr.map.navigation.metersPerPixel;
            var _local6:Number = (_local5 * _arg3);
            var _local7:ShapeDataSet = this._shapes.fetchIdsByRadiusTest(_arg1, _arg2, _local6);
            if (_filter){
                _local7.applyFilter(_filter);
            };
            var _local8:Number = (MIN_POLYGON_BUFFER * _local5);
            var _local9:Number = Infinity;
            var _local10:Number = Infinity;
            while (_local7.hasNext) {
                _local12 = _local7.nextShape;
                _local13 = _local12.id;
                if (_local13 == _arg4){
                } else {
                    if (this._closedPaths){
                        if (_opts.hit_smallest_area){
                            _local15 = Proximity.testPointInPolygon(_arg1, _arg2, _local12);
                            if (_local15){
                                _local16 = _local12.area;
                                if (_local10 > _local16){
                                    _local10 = _local16;
                                    _local11 = _local12.id;
                                };
                            };
                        } else {
                            if (_local6 == 0){
                                _local15 = Proximity.testPointInPolygon(_arg1, _arg2, _local12);
                                if (_local15){
                                    return (_local12.id);
                                };
                            } else {
                                _local14 = Proximity.findPointToPolygonDistance(_arg1, _arg2, _local12, false);
                                _local17 = Math.min(_local12.width, _local12.height);
                                if (_local17 < _local8){
                                    _local14 = (_local14 - (_local8 - _local17));
                                };
                                if (_local14 < _local9){
                                    _local9 = _local14;
                                    _local11 = _local12.id;
                                };
                            };
                        };
                    } else {
                        _local14 = Proximity.findPointToPolylineDistance(_arg1, _arg2, _local12);
                        if (_local14 < _local9){
                            _local9 = _local14;
                            _local11 = _local12.id;
                        };
                    };
                };
            };
            if (_opts.hit_smallest_area){
                if (_local10 < Infinity){
                    return (_local11);
                };
            } else {
                if (_local9 <= _local6){
                    return (_local11);
                };
            };
            return (-1);
        }
        public function findPolylineHitIds(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Boolean=false):Array{
            var _local7:ShapeVector;
            var _local8:Number;
            var _local5:ShapeDataSet = this._shapes.fetchIdsByRadiusTest(_arg1, _arg2, _arg3, _arg4);
            if (_filter){
                _local5.applyFilter(_filter);
            };
            var _local6:Array;
            while (_local5.hasNext) {
                _local7 = _local5.nextShape;
                _local8 = Proximity.findPointToPolylineDistance(_arg1, _arg2, _local7);
                if ((((_local8 <= _arg3)) || (((((this._hitIds) && (!((this._hitIds.indexOf(_local7.id) == -1))))) && ((_local8 <= (_arg3 * 1.5))))))){
                    if (!_local6){
                        _local6 = [];
                    };
                    _local6.push(_local7.id);
                };
            };
            return (_local6);
        }
        private function updatePolylineMouseHitIds():void{
            var _local9:int;
            var _local1:PixelPoint = _mouse.getCursorPosition();
            var _local2:Point = this._lyr.map.navigation.convScreenPointToProjectedPoint(_local1);
            var _local3:Number = (this._lyr.map.alignment.metersPerPixel * 1.5);
            var _local4:Array = this.findPolylineHitIds(_local2.x, _local2.y, _local3);
            var _local5:Array = this._hitIds;
            var _local6:Boolean;
            var _local7:Boolean;
            var _local8:Boolean;
            if (((!(_local5)) && (!(_local4)))){
                _local6 = false;
            } else {
                if (!_local5){
                    _local6 = true;
                    _local8 = true;
                } else {
                    if (!_local4){
                        _local6 = true;
                        _local7 = true;
                    } else {
                        if (_local4.length != _local5.length){
                            _local6 = true;
                            _local8 = true;
                        } else {
                            _local9 = 0;
                            while (_local9 < _local4.length) {
                                if (_local5[_local9] != _local4[_local9]){
                                    _local6 = true;
                                    _local8 = true;
                                    break;
                                };
                                _local9++;
                            };
                        };
                    };
                };
            };
            if (!_local6){
                return;
            };
            if (_local7){
                dispatchEvent(new Event(C.SHAPE_OUT));
                if (!_local8){
                    dispatchEvent(new Event(C.ROLL_OUT));
                    dispatchEvent(new Event(C.LAYER_OUT));
                };
            };
            if (_local8){
                this._hitIds = _local4;
                if (!_local7){
                    dispatchEvent(new Event(C.LAYER_OVER));
                };
                dispatchEvent(new Event(C.ROLL_OVER));
                dispatchEvent(new Event(C.SHAPE_OVER));
            };
            this._hitIds = _local4;
        }
        override public function findMouseHitId():int{
            var _local4:Number;
            var _local5:int;
            var _local6:ShapeVector;
            var _local7:Boolean;
            var _local1:PixelPoint = _mouse.getCursorPosition();
            var _local2:Point = this._lyr.map.navigation.convScreenPointToProjectedPoint(_local1);
            if (!_mouse.overMap){
                return (-1);
            };
            if (!this._closedPaths){
                _local5 = this.getHitIdAtXY(_local2.x, _local2.y, this._polylineProximityBuffer);
                return (_local5);
            };
            var _local3:Boolean;
            if ((((_hitId > -1)) && (_opts.lazy_evalutation))){
                _local6 = this._hitShp;
                if (_local6.id != _hitId){
                };
                _local7 = (Proximity.findPointToPolygonDistance(_local2.x, _local2.y, this._hitShp) < 0.5);
                if (_local7){
                    return (_hitId);
                };
            };
            _local5 = this.getHitIdAtXY(_local2.x, _local2.y, this._rollOverBuffer);
            if (_local5 > -1){
                return (_local5);
            };
            return (-1);
        }
        override protected function handleMouseMove(_arg1:Event):void{
            var _local4:Boolean;
            var _local5:Boolean;
            if (!_enabled){
                return;
            };
            if (!this.layerIsActive()){
                return;
            };
            if (((this._lyr.map.panning) || (_mouse.mouseDown))){
                return;
            };
            if (((_usePolylineMultiHit) && (!(this._closedPaths)))){
                this.updatePolylineMouseHitIds();
                return;
            };
            var _local2:int = _hitId;
            var _local3:int = this.findMouseHitId();
            if (this._lyr.hidden){
                _local3 = -1;
            };
            if (_local3 != _local2){
                _hitId = _local3;
                _local4 = (_local2 > -1);
                _local5 = (_local3 > -1);
                if (_local4){
                    dispatchEvent(new Event(C.SHAPE_OUT));
                    if (!_local5){
                        dispatchEvent(new Event(C.ROLL_OUT));
                        dispatchEvent(new Event(C.LAYER_OUT));
                    };
                };
                if (_local5){
                    this._hitShp = this._shapes.fetchShapeById(_hitId);
                    if (!_local4){
                        dispatchEvent(new Event(C.LAYER_OVER));
                    };
                    dispatchEvent(new Event(C.ROLL_OVER));
                    dispatchEvent(new Event(C.SHAPE_OVER));
                };
            };
        }

    }
}//package mb.maps 
﻿package mb.maps {
    import mb.data.*;

    public class VectorLayer extends MapLayer {

        protected var _data:DataTable;
        protected var _rendered:Boolean = false;
        protected var _filter:IFilter;
        protected var _hitTest:ISymbolHit;

        public function VectorLayer(_arg1:DataTable, _arg2:ISymbolHit):void{
            this._hitTest = _arg2;
            if (_arg1 !== null){
                this._data = _arg1;
                waitFor(_arg1);
            };
        }
        override public function set visible(_arg1:Boolean):void{
            super.visible = _arg1;
            if (this._hitTest){
            };
        }
        public function setHitTest(_arg1:ISymbolHit):void{
            this._hitTest = _arg1;
        }
        public function get hit():ISymbolHit{
            return (this._hitTest);
        }
        public function set filter(_arg1:IFilter):void{
            this._filter = _arg1;
        }
        public function get data():DataTable{
            return (this._data);
        }

    }
}//package mb.maps 
﻿package mb.maps {
    import mb.symbols.*;
    import mb.rendering.*;

    public class BubbleLayer extends PointLayer {

        public function BubbleLayer(_arg1:SymbolDataSource, _arg2:Object=null):void{
            super(_arg1, new BubbleHit(this, _arg1, _arg2), new BitmapSymbolLayerRenderer(new BubbleRenderer(_arg2)));
        }
        override protected function handleReadyState():void{
            super.handleReadyState();
        }

    }
}//package mb.maps 
﻿package mb.maps {
    import flash.display.*;
    import flash.events.*;
    import mb.*;
    import flash.geom.*;

    public class MouseService extends EventDispatcher {

        private var _dragging:Boolean = false;
        private var _lastFrameTime:Number = 0;
        private var xDown:Number = 0;
        private var yDown:Number = 0;
        private var _xLastDown:Number;
        private var _yLastDown:Number;
        private var _lastDownTime:Number = 0;
        private var _safeClickTime:Number = 0;
        private var _dblClickTime:Number = 0;
        private var _xLastMove:Number = 0;
        private var _yLastMove:Number = 0;
        private var CLICK_RADIUS:Number = 7;
        private var CLICK_TIMEOUT:Number = 400;
        private var SAFE_CLICK_TIMEOUT:Number = 180;
        private var DOUBLE_CLICK_TIMEOUT:Number = 550;
        private var _clickPos:PixelPoint;
        private var _pixPerSecond:Number = 0;
        private var _lastFrameWeight:Number = 0.45;
        private var _mouse:IMouseDriver;
        private var _enabled:Boolean = false;

        public function MouseService(_arg1:Sprite, _arg2:Object=null){
            this._mouse = new StandardMouseDriver(_arg1);
            this.enabled = true;
        }
        public function get driver():IMouseDriver{
            return (this._mouse);
        }
        public function get overMap():Boolean{
            return (this._mouse.overScreen);
        }
        public function get buttonDown():Boolean{
            return (this._mouse.buttonDown);
        }
        public function get mouseDown():Boolean{
            return (this._mouse.mouseDown);
        }
        public function getCursorPosition():PixelPoint{
            var _local1:PixelPoint = new PixelPoint(this._mouse.mouseX, this._mouse.mouseY, this._mouse.stage);
            return (_local1);
        }
        public function get pixelsPerSecond():Number{
            return (this._pixPerSecond);
        }
        public function set enabled(_arg1:Boolean):void{
            if (_arg1 == this._enabled){
                return;
            };
            if (_arg1){
                this._mouse.screen.addEventListener(Event.ENTER_FRAME, this.handleEnterFrame);
                this._mouse.addEventListener(MouseEvent.MOUSE_MOVE, this.handleMouseMove);
                this._mouse.addEventListener(MouseEvent.MOUSE_OVER, this.handleMouseOver);
                this._mouse.addEventListener(MouseEvent.MOUSE_OUT, this.handleMouseOut);
                this._mouse.addEventListener(MouseEvent.MOUSE_DOWN, this.handleMouseDown);
                this._mouse.addEventListener(MouseEvent.MOUSE_UP, this.handleMouseUp);
                this._mouse.addEventListener(C.SCROLL_STEP, this.handleScrollStep);
            } else {
                this._mouse.screen.removeEventListener(Event.ENTER_FRAME, this.handleEnterFrame);
                this._mouse.removeEventListener(MouseEvent.MOUSE_MOVE, this.handleMouseMove);
                this._mouse.removeEventListener(MouseEvent.MOUSE_OVER, this.handleMouseOver);
                this._mouse.removeEventListener(MouseEvent.MOUSE_OUT, this.handleMouseOut);
                this._mouse.removeEventListener(MouseEvent.MOUSE_DOWN, this.handleMouseDown);
                this._mouse.removeEventListener(MouseEvent.MOUSE_UP, this.handleMouseUp);
                this._mouse.removeEventListener(C.SCROLL_STEP, this.handleScrollStep);
            };
            this._enabled = _arg1;
        }
        public function set useHandCursor(_arg1:Boolean):void{
            this._mouse.useHandCursor = _arg1;
        }
        public function get isDragging():Boolean{
            return (this._dragging);
        }
        public function get scrollStep():int{
            return (this._mouse.scrollStep);
        }
        public function handleScrollStep(_arg1):void{
            dispatchEvent(_arg1);
        }
        private function handleMouseOver(_arg1:Object):void{
            dispatchEvent(new Event(C.ROLL_OVER));
        }
        private function handleMouseOut(_arg1:Object):void{
            dispatchEvent(new Event(C.ROLL_OUT));
        }
        private function handleEnterFrame(_arg1:Object):void{
            var _local2:Number = new Date().time;
            if (((!((this._safeClickTime == 0))) && (((_local2 - this._safeClickTime) >= this.SAFE_CLICK_TIMEOUT)))){
                dispatchEvent(new Event(C.SAFE_CLICK));
                this._safeClickTime = 0;
                this._dblClickTime = 0;
            };
        }
        private function handleMouseMove(_arg1:Object):void{
            var _local8:Point;
            var _local2:Number = new Date().time;
            var _local3:PixelPoint = this.getCursorPosition();
            var _local4:Number = (_local3.x - this._xLastMove);
            var _local5:Number = (_local3.y - this._yLastMove);
            var _local6:Number = Math.sqrt(((_local4 * _local4) + (_local5 * _local5)));
            var _local7:int = (_local2 - this._lastFrameTime);
            if (_local7 > 0){
                this._pixPerSecond = ((this._pixPerSecond * (1 - this._lastFrameWeight)) + (((this._lastFrameWeight * _local6) / _local7) * 1000));
            };
            this._xLastMove = _local3.x;
            this._yLastMove = _local3.y;
            this._lastFrameTime = _local2;
            if (_local6 < 1){
                return;
            };
            dispatchEvent(new DynamicEvent(C.MOUSE_MOVE, {data:_local3}));
            if (this._mouse.buttonDown){
                if (!this._dragging){
                    this._dragging = true;
                };
                _local8 = new Point(_local4, _local5);
                dispatchEvent(new DynamicEvent(C.MOUSE_DRAG, {data:_local8}));
            };
        }
        private function handleMouseDown(_arg1:Object):void{
            this._xLastDown = this.xDown;
            this._yLastDown = this.yDown;
            this._safeClickTime = 0;
            var _local2:Number = new Date().time;
            this._xLastMove = (this.xDown = this._mouse.mouseX);
            this._yLastMove = (this.yDown = this._mouse.mouseY);
            var _local3:Object = {data:new PixelPoint(this.xDown, this.yDown, this._mouse.stage)};
            dispatchEvent(new DynamicEvent(C.MOUSE_DOWN, _local3));
            this._lastDownTime = _local2;
        }
        private function handleMouseUp(_arg1:Object):void{
            var _local6:Boolean;
            var _local7:Number;
            var _local8:Number;
            var _local2:Number = this._mouse.mouseX;
            var _local3:Number = this._mouse.mouseY;
            var _local4:Number = new Date().time;
            var _local5:PixelPoint = this.getCursorPosition();
            if (this._dragging){
                this._dragging = false;
                dispatchEvent(new Event(C.DRAG_END));
            };
            dispatchEvent(new DynamicEvent(C.MOUSE_UP, {data:_local5}));
            if (this._mouse.overScreen){
                _local6 = ((_local4 - this._dblClickTime) <= this.DOUBLE_CLICK_TIMEOUT);
                if (_local6){
                    dispatchEvent(new DynamicEvent(C.DOUBLE_CLICK, {data:_local5}));
                    this._safeClickTime = 0;
                    this._dblClickTime = 0;
                };
                if ((_local4 - this._lastDownTime) <= this.CLICK_TIMEOUT){
                    _local7 = Math.abs((_local2 - this.xDown));
                    _local8 = Math.abs((_local3 - this.yDown));
                    if ((((_local7 <= this.CLICK_RADIUS)) && ((_local8 <= this.CLICK_RADIUS)))){
                        this._clickPos = this.getCursorPosition();
                        dispatchEvent(new DynamicEvent(C.CLICK, {data:_local5}));
                        this._dblClickTime = _local4;
                        this._safeClickTime = ((_local6) ? 0 : _local4);
                    };
                };
            };
        }

    }
}//package mb.maps 
﻿package mb.maps {
    import mb.placement.*;

    public class ScaleSet {

        protected var _numLevels:int = 0;
        protected var relScaleArr:Array;

        public function ScaleSet():void{
        }
        public function refresh():void{
        }
        public function get numLevels():int{
            return (this._numLevels);
        }
        public function convLevelToScale(_arg1:int):Number{
            if (_arg1 < 1){
                _arg1 = 1;
            };
            if (_arg1 > this._numLevels){
                _arg1 = this._numLevels;
            };
            return (this.relScaleArr[(_arg1 - 1)]);
        }
        public function convScaleToLevel(_arg1:Number, _arg2:Boolean=true):Number{
            if (_arg2){
                return (this.getIntegerLevel(_arg1));
            };
            return (this.getFractionalLevel(_arg1));
        }
        private function getIntegerLevel(_arg1:Number):Number{
            var _local2:Number;
            var _local3 = 1;
            while (_local3 < this._numLevels) {
                _local2 = this.relScaleArr[_local3];
                if (_arg1 < (_local2 - 1E-5)){
                    return (_local3);
                };
                _local3++;
            };
            return (this._numLevels);
        }
        private function getFractionalLevel(_arg1:Number):Number{
            var _local5:Number;
            var _local6:Number;
            var _local9:Number;
            var _local10:Number;
            var _local2:Number = this.relScaleArr[0];
            var _local3:Number = this.relScaleArr[(this._numLevels - 1)];
            if (_arg1 > _local3){
                _arg1 = _local3;
            } else {
                if (_arg1 < _local2){
                    _arg1 = _local2;
                };
            };
            var _local4:Number = 1;
            var _local7:Number = 0;
            var _local8:int;
            while (_local8 < this._numLevels) {
                _local7 = 0;
                _local4 = (_local8 + 1);
                if (_local4 == this._numLevels){
                    break;
                };
                _local5 = this.relScaleArr[_local8];
                _local6 = this.relScaleArr[(_local8 + 1)];
                if (_arg1 < _local6){
                    _local9 = (_local6 - _local5);
                    _local10 = (_arg1 - _local5);
                    _local7 = (_local10 / _local9);
                    break;
                };
                _local8++;
            };
            return ((_local4 + _local7));
        }

    }
}//package mb.maps 
﻿package mb.maps {
    import flash.geom.*;

    public class XY {

        private static var _p:Point = new Point();

        public var mxProjToLayer:Number = 1;
        public var myProjToLayer:Number = 1;
        public var bxProjToLayer:Number = 0;
        public var byProjToLayer:Number = 0;
        public var xPanShift:Number = 0;
        public var yPanShift:Number = 0;
        public var metersPerPixel:Number;
        public var relativeScale:Number;
        public var startScale:Number;
        public var endScale:Number;
        public var contentWidthInPixels:int = 0;
        public var contentHeightInPixels:int = 0;

        public function XY(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Number, _arg6:Number, _arg7:Number, _arg8:int, _arg9:int):void{
            this.mxProjToLayer = _arg1;
            this.myProjToLayer = _arg2;
            this.bxProjToLayer = _arg3;
            this.byProjToLayer = _arg4;
            this.xPanShift = _arg5;
            this.yPanShift = _arg6;
            this.metersPerPixel = (1 / this.mxProjToLayer);
            this.relativeScale = _arg7;
            this.startScale = _arg7;
            this.endScale = _arg7;
            this.contentWidthInPixels = (_arg8 * _arg7);
            this.contentHeightInPixels = (_arg9 * _arg7);
        }
        public function toString():String{
            return ((((((((("XY.{ mx:" + this.mxProjToLayer) + ", bx: ") + this.bxProjToLayer) + ", by: ") + this.byProjToLayer) + ", scale:") + this.relativeScale) + " }"));
        }
        public function projToScreen(_arg1:Number, _arg2:Number, _arg3:Boolean=false):Point{
            _p = this.projToLayer(_arg1, _arg2);
            _p.x = (_p.x + this.xPanShift);
            _p.y = (_p.y + this.yPanShift);
            if (_arg3){
                _p.x = Math.round(_p.x);
                _p.y = Math.round(_p.y);
            };
            return (_p);
        }
        public function projToLayer(_arg1:Number, _arg2:Number):Point{
            _p.x = ((_arg1 * this.mxProjToLayer) + this.bxProjToLayer);
            _p.y = ((_arg2 * this.myProjToLayer) + this.byProjToLayer);
            return (_p);
        }
        public function screenToProj(_arg1:Number, _arg2:Number):Point{
            _p.x = ((_arg1 - this.bxProjToLayer) / this.mxProjToLayer);
            _p.y = ((_arg2 - this.byProjToLayer) / this.myProjToLayer);
            return (_p);
        }

    }
}//package mb.maps 
﻿package mb.maps {
    import flash.display.*;
    import mb.projections.*;
    import mb.*;
    import flash.geom.*;
    import mb.placement.*;

    public class MapExtent extends BoundingBox {

        private var _align:Alignment;
        private var _limitBounds:Boolean = true;
        private var _panPixelMargins:BoundingBox;
        private var _panMeterMargins:BoundingBox;

        public function MapExtent(_arg1:Alignment):void{
            if (!_arg1.ready){
            };
            this._align = _arg1;
            mergeBounds(this._align.bounds);
        }
        public function cloneExtent():MapExtent{
            var _local1:MapExtent = new MapExtent(this._align);
            _local1.setBounds(left, top, right, bottom);
            _local1.limitBounds = this._limitBounds;
            _local1.panPixelMargins = ((((this._panPixelMargins) && (this._panPixelMargins.clone()))) || (null));
            _local1.panMeterMargins = ((((this._panMeterMargins) && (this._panMeterMargins.clone()))) || (null));
            return (_local1);
        }
        override public function clone():BoundingBox{
            return (this.cloneExtent());
        }
        public function set panPixelMargins(_arg1:BoundingBox):void{
            this._panPixelMargins = _arg1;
        }
        public function set panMeterMargins(_arg1:BoundingBox):void{
            this._panMeterMargins = _arg1;
        }
        public function set limitBounds(_arg1:Boolean):void{
            this._limitBounds = _arg1;
        }
        public function get box():Rectangle{
            return (new Rectangle(left, bottom, width, height));
        }
        public function getScreenFocus():Point{
            var _local1:Point = getCenterPoint();
            var _local2:Number = ((_local1.x - this._align.bounds.left) / this._align.bounds.width);
            var _local3:Number = ((this._align.bounds.top - _local1.y) / this._align.bounds.height);
            return (new Point(_local2, _local3));
        }
        public function setScreenFocus(_arg1:Number, _arg2:Number):void{
            var _local3:Point = getCenterPoint();
            var _local4:Point = this.convScreenFocusToProjectedPoint(_arg1, _arg2);
            var _local5:Number = (_local4.x - _local3.x);
            var _local6:Number = (_local4.y - _local3.y);
            left = (left + _local5);
            right = (right + _local5);
            top = (top + _local6);
            bottom = (bottom + _local6);
        }
        public function recenterAndRescale(_arg1:Number, _arg2:Number, _arg3:Number):void{
            this.recenter(_arg1, _arg2);
            this.rescale(_arg3);
            this.adjustPosition();
        }
        public function recenterByPixelShift(_arg1:Number, _arg2:Number):void{
            var _local3:Point = getCenterPoint();
            var _local4:Number = this.metersPerPixel;
            var _local5:Number = (_local3.x = (_local3.x - (_arg1 * _local4)));
            var _local6:Number = (_local3.y = (_local3.y + (_arg2 * _local4)));
            this.recenter(_local5, _local6);
            this.adjustPosition();
        }
        public function recenter(_arg1:Number, _arg2:Number):void{
            var _local4:Number;
            var _local3:Number = width;
            _local4 = height;
            left = (_arg1 - (_local3 * 0.5));
            bottom = (_arg2 - (_local4 * 0.5));
            top = (bottom + _local4);
            right = (left + _local3);
        }
        public function rescale(_arg1:Number):void{
            var _local3:Number;
            var _local4:Number;
            if (_arg1 == this.relativeScale){
                return;
            };
            var _local2:Point = getCenterPoint();
            _local3 = (this._align.bounds.width / _arg1);
            _local4 = (this._align.bounds.height / _arg1);
            left = (_local2.x - (_local3 * 0.5));
            bottom = (_local2.y - (_local4 * 0.5));
            right = (left + _local3);
            top = (bottom + _local4);
        }
        public function convScreenPointToScreenFocus(_arg1:PixelPoint):Point{
            var _local2:Stage = this._align.clip.stage;
            var _local3:PixelBox = this._align.pixelBounds;
            _arg1.setContext(_local2);
            _local3.setContext(_local2);
            var _local4:Number = ((_arg1.x - _local3.x) / _local3.width);
            var _local5:Number = ((_arg1.y - _local3.y) / _local3.height);
            return (new Point(_local4, _local5));
        }
        public function convScreenFocusToProjectedPoint(_arg1:Number, _arg2:Number):Point{
            _arg2 = (top - (_arg2 * height));
            _arg1 = (left + (_arg1 * width));
            return (new Point(_arg1, _arg2));
        }
        public function convProjectedPointToScreenFocus(_arg1:Number, _arg2:Number):Point{
            _arg1 = ((_arg1 - left) / width);
            _arg2 = ((top - _arg2) / height);
            return (new Point(_arg1, _arg2));
        }
        public function convScreenFocusToScreenPoint(_arg1:Point):PixelPoint{
            var _local2:Sprite = this._align.clip;
            var _local3:Number = ((_arg1.x * _local2.width) + _local2.x);
            var _local4:Number = ((_arg1.y * _local2.height) + _local2.y);
            return (new PixelPoint(_local3, _local4, _local2.parent));
        }
        public function get projection():IGeoProjection{
            return (this._align.projection);
        }
        public function adjustPosition():void{
            var _local1:Number;
            var _local2:Number;
            var _local3:Number;
            var _local4:Number;
            var _local5:BoundingBox;
            var _local6:Number;
            var _local7:Number;
            var _local8:Number;
            if (this._limitBounds){
                _local1 = this._align.bounds.left;
                _local2 = this._align.bounds.right;
                _local3 = this._align.bounds.top;
                _local4 = this._align.bounds.bottom;
                if (this._panPixelMargins){
                    _local8 = this.metersPerPixel;
                    _local1 = (_local1 - (this._panPixelMargins.left * _local8));
                    _local2 = (_local2 + (this._panPixelMargins.right * _local8));
                    _local3 = (_local3 + (this._panPixelMargins.top * _local8));
                    _local4 = (_local4 - (this._panPixelMargins.bottom * _local8));
                };
                if (this._panMeterMargins){
                    _local1 = (_local1 - this._panMeterMargins.left);
                    _local2 = (_local2 + this._panMeterMargins.right);
                    _local3 = (_local3 + this._panMeterMargins.top);
                    _local4 = (_local4 - this._panMeterMargins.bottom);
                };
                _local5 = this._align.bounds;
                _local6 = 0;
                _local7 = 0;
                if (_local1 > left){
                    _local6 = (_local1 - left);
                } else {
                    if (_local2 < right){
                        _local6 = (_local2 - right);
                    };
                };
                left = (left + _local6);
                right = (right + _local6);
                if (_local3 < top){
                    _local7 = (_local3 - top);
                } else {
                    if (_local4 > bottom){
                        _local7 = (_local4 - bottom);
                    };
                };
                top = (top + _local7);
                bottom = (bottom + _local7);
            };
        }
        public function getXY():XY{
            var _local1:Point = this.getTopLeftPixelOffset();
            var _local2:Number = Math.round(_local1.x);
            var _local3:Number = Math.round(_local1.y);
            var _local4:Number = (_local1.x - _local2);
            var _local5:Number = (_local1.y - _local3);
            var _local6:Number = this.pixelsPerMeter;
            var _local7:Number = -(this.pixelsPerMeter);
            var _local8:Number = ((-(_local6) * this._align.bounds.left) + _local4);
            var _local9:Number = ((-(_local7) * this._align.bounds.top) + _local5);
            var _local10:XY = new XY(_local6, _local7, _local8, _local9, _local2, _local3, this.relativeScale, this._align.pixelBounds.width, this._align.pixelBounds.height);
            return (_local10);
        }
        public function get relativeScale():Number{
            var _local1:Number = (this._align.bounds.width / width);
            var _local2:Number = (this._align.bounds.height / height);
            var _local3:Number = ((_local1 + _local2) * 0.5);
            var _local4:Number = Math.round(_local3);
            if (Math.abs((_local4 - _local3)) < 1E-9){
                _local3 = _local4;
            };
            return (_local3);
        }
        public function get metersPerPixel():Number{
            return ((this._align.metersPerPixel / this.relativeScale));
        }
        public function get pixelsPerMeter():Number{
            var _local1:Number = this._align.pixelsPerMeter;
            _local1 = (_local1 * this.relativeScale);
            return (_local1);
        }
        public function getTopLeftPixelOffset():Point{
            var _local1:Number = (this._align.bounds.left - left);
            var _local2:Number = (top - this._align.bounds.top);
            var _local3:Number = (_local1 * this.pixelsPerMeter);
            var _local4:Number = (_local2 * this.pixelsPerMeter);
            return (new Point(_local3, _local4));
        }

    }
}//package mb.maps 
﻿package mb.maps {
    import flash.display.*;
    import mb.data.*;
    import mb.*;
    import mb.styles.*;
    import mb.shapes.*;
    import mb.rendering.*;

    public class ShapeVectorLayer extends VectorLayer {

        private static var _defaults:Object = {
            multi_hit:false,
            hover_renderer:null
        };

        protected var _shapes:IShapeDataSource;
        protected var _hoverLayer:ShapeOverlayLayer;
        protected var _selectionLayer:ShapeOverlayLayer;
        private var _waitingForMouse:Boolean = false;
        protected var _renderer:IShapeLayerRenderer;
        protected var _opts:Object;

        public function ShapeVectorLayer(_arg1:IShapeDataSource, _arg2:DataTable=null, _arg3:Object=null):void{
            this._opts = Opts.init(_defaults, _arg3);
            this._shapes = _arg1;
            super(_arg2, new ShapeHit(this, this._shapes, this._opts));
            type = SHAPE;
            this._renderer = new ShapeLayerRenderer(this._opts);
            waitFor(_arg1);
        }
        public function set useMultiHit(_arg1:Boolean):void{
            this._opts.multi_hit = _arg1;
            if (_hitTest){
                _hitTest.useMultiHit = _arg1;
            };
        }
        public function setRenderer(_arg1:IShapeLayerRenderer):void{
            if (this._renderer){
            };
            this._renderer = _arg1;
        }
        public function get hoverLayer():ShapeOverlayLayer{
            return (this._hoverLayer);
        }
        override public function set mouseEnabled(_arg1:Boolean):void{
            super.mouseEnabled = _arg1;
            if (_hitTest){
                _hitTest.enabled = _arg1;
            };
            if (((!(_arg1)) && (this._hoverLayer))){
                this._hoverLayer.clearActiveShape();
            };
        }
        override public function addEventListener(_arg1:String, _arg2:Function, _arg3:Boolean=false, _arg4:int=0, _arg5:Boolean=true):void{
            super.addEventListener(_arg1, _arg2, _arg3, _arg4, _arg5);
            if ((((((_arg1 == C.ROLL_OVER)) || ((_arg1 == C.ROLL_OUT)))) || ((_arg1 == C.CLICK)))){
                this.useMouseInteractions();
            };
        }
        public function get bounds():BoundingBox{
            return (this._shapes.bounds);
        }
        public function get shapes():IShapeDataSource{
            return (this._shapes);
        }
        public function setStyle(_arg1:IShapeStyle):void{
            this._renderer.setStyle(_arg1);
            var _local2:ShapeStyle = ShapeStyle(_arg1);
            if (_local2.hoverStyle){
                this.useMouseInteractions();
            };
        }
        private function createOverlayLayer(_arg1:String, _arg2:ShapeOverlayStyle, _arg3:ShapeStyle, _arg4:Object=null):ShapeOverlayLayer{
            _arg2.setBaseStyle(_arg3);
            var _local5:ShapeOverlayLayer = new ShapeOverlayLayer(this._shapes, null, this, _arg4);
            _local5.name = _arg1;
            _local5.setStyle(_arg2);
            if (_arg2.floatLayer){
                _map.layers.addLayer(_local5);
            } else {
                _local5.type = SHAPE;
                _map.layers.addLayerOverLayer(_local5, this);
            };
            return (_local5);
        }
        private function useMouseInteractions():void{
            if (this._waitingForMouse){
                return;
            };
            this._waitingForMouse = true;
            this.addEventListener(C.READY, this.handleMouseInit);
        }
        private function handleMouseInit(_arg1):void{
            var _local3:Object;
            this._waitingForMouse = false;
            if (!_map){
                return;
            };
            var _local2:ShapeStyle = (this._renderer.getStyle() as ShapeStyle);
            if (((_local2.hoverStyle) && (!(this._hoverLayer)))){
                _local3 = {};
                _local3.renderer = ((this._opts.hover_renderer) || (null));
                this._hoverLayer = this.createOverlayLayer((name + "_hover"), _local2.hoverStyle, _local2, _local3);
            };
            if (this._opts.multi_hit){
                _hitTest.useMultiHit = true;
            };
            _hitTest.startMouseInteraction(_map.mouse);
            _hitTest.addEventListener(C.ROLL_OVER, this.handleMouseOver);
            _hitTest.addEventListener(C.ROLL_OUT, this.handleMouseOut);
            _hitTest.addEventListener(C.CLICK, this.handleMouseClick);
        }
        public function highlightShapeById(_arg1):void{
            var _local2:Array;
            if ((_arg1 is Array)){
                _local2 = _arg1;
            } else {
                if (((!(isNaN(_arg1))) && ((_arg1 > -1)))){
                    _local2 = [_arg1];
                } else {
                    _local2 = [];
                };
            };
            if (this._selectionLayer){
                this._selectionLayer.setActiveIds(_local2);
            } else {
                if (this._hoverLayer){
                    this._hoverLayer.setActiveIds(_local2);
                };
            };
        }
        public function clearSelectedShape():void{
            if (this._selectionLayer){
                this._selectionLayer.clearActiveShape();
            } else {
                if (this._hoverLayer){
                    this._hoverLayer.clearActiveShape();
                };
            };
        }
        public function get style():ShapeStyle{
            return (this._renderer.getStyle());
        }
        override public function show():void{
            super.show();
            this.refresh();
        }
        override protected function handleReadyState():void{
            var _local1:ShapeStyle = (this._renderer.getStyle() as ShapeStyle);
            if (((_local1.selectionStyle) && (!(this._selectionLayer)))){
                this._selectionLayer = this.createOverlayLayer((name + "_selection"), _local1.selectionStyle, _local1);
            };
            this.refresh();
        }
        protected function fetchVisibleShapes(_arg1:IFilter=null):ShapeDataSet{
            if (((!(this.viewable)) || (this._renderer.getStyle().stealthy))){
                return (null);
            };
            var _local2:BoundingBox = getVisibleExtent();
            var _local3:Number = 1.4;
            var _local4:ShapeDataSet = this._shapes.fetchIdsByBoundsTest(_local2, (_local3 * _map.navigation.metersPerPixel));
            ((_arg1) && (_local4.applyFilter(_arg1)));
            return (_local4);
        }
        public function fetchVisibleShapeRecords():RecordSet{
            if (!_data){
                return (null);
            };
            var _local1:ShapeDataSet = this.fetchVisibleShapes();
            var _local2:RecordSet = new RecordSet(_data, _local1.getIds());
            return (_local2);
        }
        override public function reposition():void{
            this._renderer.update((C.SYMBOLS | C.POSITION), this.fetchVisibleShapes());
        }
        override public function rescale():void{
            this.drawVisibleShapes();
        }
        override public function renderFilteredSymbols(_arg1:IFilter, _arg2:Boolean):void{
            var _local3:int = ((_arg2) ? (C.SYMBOLS | C.APPEND) : C.SYMBOLS);
            this._renderer.update(_local3, this.fetchVisibleShapes(_arg1));
        }
        override public function refresh():Boolean{
            if (!this.viewable){
                return (false);
            };
            this.drawVisibleShapes();
            if (this._hoverLayer){
                this._hoverLayer.refresh();
            };
            if (this._selectionLayer){
                this._selectionLayer.refresh();
            };
            return (true);
        }
        public function clear():void{
            this._renderer.clear();
        }
        private function drawVisibleShapes():void{
            if (!_container.visible){
            };
            if (this._renderer.getStyle().stealthy){
                return;
            };
            if (!_rendered){
                if (((!(ready)) || (!(_map.navigation.ready)))){
                    return;
                };
                this._renderer.embed(_container, _map);
                _rendered = true;
            };
            var _local1:ShapeDataSet = this.fetchVisibleShapes();
            this._renderer.update(C.SYMBOLS, _local1);
        }
        private function filterTest(_arg1:int):Boolean{
            if (((_filter) && (!(_filter.testId(_arg1))))){
                return (false);
            };
            return (true);
        }
        private function getRecordById(_arg1:int):Record{
            var _local2:Record;
            if (_data){
                _local2 = new Record(_data, _arg1);
            } else {
                _local2 = new NullRecord();
                _local2.id = _arg1;
            };
            return (_local2);
        }
        private function getRecordsById(_arg1:Array):RecordSet{
            var _local2:RecordSet = new RecordSet(_data, _arg1);
            return (_local2);
        }
        protected function handleMouseOver(_arg1):void{
            var _local4:int;
            var _local2:Array = ((this._opts.multi_hit) ? _hitTest.getMouseHitIds() : [_hitTest.getMouseHitId()]);
            if (this._hoverLayer){
                this._hoverLayer.setActiveIds(_local2);
            };
            var _local3:Object = {};
            if (this._opts.multi_hit){
                _local3.records = this.getRecordsById(_local2);
            } else {
                _local4 = _hitTest.getMouseHitId();
                _local3.rec = this.getRecordById(_local4);
            };
            dispatchEvent(new DynamicEvent(C.ROLL_OVER, _local3));
        }
        protected function handleMouseOut(_arg1):void{
            var _local3:Array;
            var _local4:int;
            var _local2:Object = {};
            if (this._opts.multi_hit){
                _local3 = _hitTest.getMouseHitIds();
                _local2.records = this.getRecordsById(_local3);
            } else {
                _local4 = _hitTest.getMouseHitId();
                _local2.rec = this.getRecordById(_local4);
            };
            if (this._hoverLayer){
                this._hoverLayer.clearActiveShape();
            };
            dispatchEvent(new DynamicEvent(C.ROLL_OUT, _local2));
        }
        protected function handleMouseClick(_arg1:Object):void{
            var _local2:int = _hitTest.getMouseHitId();
            var _local3:Record = this.getRecordById(_local2);
            dispatchEvent(new DynamicEvent(C.CLICK, {rec:_local3}));
        }

    }
}//package mb.maps 
﻿package mb.maps {
    import flash.events.*;
    import mb.*;
    import mb.symbols.*;

    public class BubbleHit extends PointSymbolHit {

        public static const CLOSEST_BUBBLE:String = "distance";
        public static const SMALLEST_BUBBLE:String = "smallest";
        private static const _defaults:Object = {hit_rule:SMALLEST_BUBBLE};

        private var _simpleProximity;

        public function BubbleHit(_arg1:MapLayer, _arg2:SymbolDataSource, _arg3:Object=null){
            _arg3 = Opts.init(_defaults, _arg3);
            if (!_arg2){
            };
            super(_arg1, _arg2, _arg3);
        }
        override protected function searchHitCandidates(_arg1:SymbolDataSet, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Number=0):SymbolData{
            var _local6:SymbolData;
            var _local7:Number;
            var _local8:SymbolData;
            var _local10:SymbolData;
            var _local11:Number;
            var _local14:SymbolData;
            var _local15:Number;
            var _local16:Number;
            var _local17:Number;
            var _local18:Number;
            var _local19:Number;
            var _local20:Number;
            var _local9:Boolean;
            var _local12:Number = 0.5;
            var _local13:Number = 6;
            while (_arg1.hasNext) {
                _local14 = _arg1.nextSymbol;
                if (_local14.hidden){
                } else {
                    if (_local14.visible == false){
                    } else {
                        _local15 = (((_arg2 - _local14.x) * (_arg2 - _local14.x)) + ((_arg3 - _local14.y) * (_arg3 - _local14.y)));
                        _local16 = _local14.size;
                        if (_local16 == 0){
                        } else {
                            if (_local16 < _local13){
                                _local16 = _local13;
                            };
                            _local17 = ((_local16 + 2) * _arg4);
                            _local18 = ((((_local16 + 2) * _arg4) * _local17) * 0.25);
                            _local19 = (((_arg4 * _arg5) * _arg4) * _arg5);
                            _local20 = _local18;
                            if (_local19 > _local20){
                                _local20 = _local19;
                            };
                            if (_local15 > _local20){
                            } else {
                                if (_local6 == null){
                                    _local7 = _local15;
                                    _local6 = _local14;
                                } else {
                                    if (_local15 < _local7){
                                        _local6 = _local14;
                                        _local7 = _local15;
                                    };
                                };
                                if (_opts.hit_rule == SMALLEST_BUBBLE){
                                    if (_local18 > _local15){
                                        if ((((_local8 == null)) || ((_local17 < _local12)))){
                                            _local8 = _local14;
                                            _local12 = _local17;
                                            _local9 = false;
                                            _local11 = _local15;
                                        } else {
                                            if (_local17 == _local12){
                                                _local9 = true;
                                                if (_local15 < _local11){
                                                    _local8 = _local14;
                                                    _local11 = _local15;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
            if (_local8 == null){
                _local8 = _local6;
            };
            return (_local8);
        }

    }
}//package mb.maps 
﻿package mb.maps {
    import mb.data.*;
    import mb.*;
    import mb.styles.*;
    import mb.symbols.*;
    import mb.rendering.*;

    public class PointLayer extends VectorLayer {

        protected var _style:ISymbolStyle;
        protected var _hoverStyle:ISymbolStyle;
        protected var _symbols:SymbolDataSource;
        protected var _renderer:ISymbolLayerRenderer;
        protected var _selectedId:int = -1;
        protected var _externalHitTest:Function = null;
        protected var _hitId:int = -1;
        protected var _minHitRadius:int = 8;

        public function PointLayer(_arg1:SymbolDataSource, _arg2:ISymbolHit, _arg3:ISymbolLayerRenderer):void{
            var _local4:PointDataTable = ((_arg1) ? _arg1.data : null);
            super(_local4, _arg2);
            this._symbols = _arg1;
            this._renderer = _arg3;
            type = SYMBOL;
        }
        public function get symbols():SymbolDataSource{
            return (this._symbols);
        }
        override public function set mouseEnabled(_arg1:Boolean):void{
            if (_hitTest){
                _hitTest.enabled = _arg1;
            };
        }
        public function updateSymbolData(_arg1:PointDataTable):void{
            _data = _arg1;
            this._symbols.replaceDataTable(_arg1);
        }
        public function setExternalHitTest(_arg1:Function):void{
            this._externalHitTest = _arg1;
        }
        public function set renderer(_arg1:ISymbolLayerRenderer):void{
            if (this._renderer){
                this._renderer.clear();
            };
            this._renderer = _arg1;
        }
        public function fetchVisible():SymbolDataSet{
            if (!this._symbols){
                return (null);
            };
            var _local1:MapExtent = _map.navigation.extent;
            var _local2:BoundingBox = getVisibleExtent();
            var _local3:SymbolDataSet = this._symbols.fetchBubblesInBox(_local2, _local1.metersPerPixel);
            if (_filter){
                _local3.applyFilter(_filter);
            };
            return (_local3);
        }
        public function selectById(_arg1:int):void{
            this.selectByIds([_arg1]);
        }
        public function selectByIds(_arg1:Array):void{
            this.clearSelection();
            this._renderer.updateSelection(this._symbols.fetchSymbolsById(_arg1));
        }
        public function clearSelection():void{
            this._renderer.clearSelection();
        }
        override public function hide():void{
            this.clearSelection();
            super.hide();
        }
        public function setStyle(_arg1:ISymbolStyle):void{
            this._style = _arg1;
            this._renderer.setStyle(this._style);
        }
        override protected function handleReadyState():void{
            if (this._renderer){
                this._renderer.embed(_container, _map);
            };
            if (visible){
                this.refresh();
            };
            if (_hitTest){
                if (((willTrigger(C.ROLL_OVER)) || (willTrigger(C.CLICK)))){
                    _hitTest.startMouseInteraction(_map.mouse);
                    _hitTest.addEventListener(C.ROLL_OVER, this.handleOver);
                    _hitTest.addEventListener(C.ROLL_OUT, this.handleOut);
                    _hitTest.addEventListener(C.CLICK, this.handleClick);
                };
            };
        }
        private function handleOver(_arg1):void{
            if (_hidden){
                return;
            };
            var _local2:int = _hitTest.getMouseHitId();
            this._renderer.updateSelection(this._symbols.fetchSymbolsById([_local2]));
            var _local3:Record = new Record(_data, _local2);
            dispatchEvent(new DynamicEvent(C.ROLL_OVER, {rec:_local3}));
        }
        private function handleOut(_arg1):void{
            if (_hidden){
                return;
            };
            this._renderer.clearSelection();
            var _local2:Record = new Record(_data, _hitTest.getMouseHitId());
            dispatchEvent(new DynamicEvent(C.ROLL_OUT, {rec:_local2}));
        }
        private function handleClick(_arg1):void{
            if (_hidden){
                return;
            };
            var _local2:int = _hitTest.getMouseHitId();
            var _local3:Record = new Record(_data, _local2);
            dispatchEvent(new DynamicEvent(C.CLICK, {rec:_local3}));
        }
        override public function rescale():void{
            if (!viewable){
                return;
            };
            this._renderer.update((C.SYMBOLS | C.SCALE), this.fetchVisible());
        }
        override public function reposition():void{
            if (!viewable){
                return;
            };
            this._renderer.update((C.SYMBOLS | C.POSITION), this.fetchVisible());
        }
        override public function refresh():Boolean{
            var _local1:int;
            if (!viewable){
                return (false);
            };
            if (_rendered){
                _local1 = (C.STYLE | C.EASING);
                this._renderer.update((C.SYMBOLS | C.EASING), this.fetchVisible());
            } else {
                this._renderer.update((C.SYMBOLS | C.EASING), this.fetchVisible());
                _rendered = true;
            };
            return (true);
        }

    }
}//package mb.maps 
﻿package mb.maps {
    import mb.data.*;
    import flash.events.*;
    import mb.*;

    public class SymbolHitBase extends EventDispatcher {

        private static const _defaults:Object = {
            slave_hit_monitor:null,
            min_symbol_radius_meters:0,
            min_symbol_radius_pixels:10,
            safe_click:false,
            hit_smallest_area:false,
            lazy_evaluation:true
        };

        protected var _hitId:int = -1;
        protected var _lastHitId:int = -1;
        protected var _enabled:Boolean = true;
        protected var _mouseStarted:Boolean = false;
        protected var _filter:IFilter;
        protected var _mouse:MouseService;
        protected var _usePolylineMultiHit:Boolean = false;
        private var _useSafeClick:Boolean = false;
        private var _priority:int = 0;
        protected var _opts:Object;

        public function SymbolHitBase(_arg1:Object=null){
            this._opts = Opts.init(_defaults, _arg1);
            this._useSafeClick = this._opts.safe_click;
        }
        public function set useSafeClick(_arg1:Boolean):void{
            this._useSafeClick = _arg1;
        }
        public function set useMultiHit(_arg1:Boolean):void{
            this._usePolylineMultiHit = _arg1;
        }
        public function setFilter(_arg1:IFilter):void{
            this._filter = _arg1;
        }
        protected function isActive():Boolean{
            return (((((this._enabled) && (this._mouse))) && (!(this._mouse.buttonDown))));
        }
        public function layerIsActive():Boolean{
            return (true);
        }
        public function block():void{
            if (this._hitId != -1){
                this._hitId = -1;
                dispatchEvent(new Event(C.ROLL_OUT));
            };
        }
        public function set enabled(_arg1:Boolean):void{
            this._enabled = _arg1;
            if (!_arg1){
                this.setHitId(-1);
            };
        }
        public function get active():Boolean{
            return (((this.enabled) && (this.layerIsActive())));
        }
        public function set priority(_arg1:int):void{
            this._priority = _arg1;
        }
        public function get priority():int{
            return (this._priority);
        }
        public function get enabled():Boolean{
            return (this._enabled);
        }
        public function getMouseHitId():int{
            return (this._hitId);
        }
        public function getHitIdAtXY(_arg1:Number, _arg2:Number, _arg3:Number=0, _arg4:int=-1):int{
            return (-1);
        }
        public function getMouseHitIds():Array{
            if (this._hitId == -1){
                return ([]);
            };
            return ([this._hitId]);
        }
        public function testMouseHit():Boolean{
            return (!((this._hitId == -1)));
        }
        public function findMouseHitId():int{
            return (-1);
        }
        public function setHitId(_arg1:int):void{
            if (_arg1 == this._hitId){
                return;
            };
            if (_arg1 == -1){
                dispatchEvent(new Event(C.ROLL_OUT));
            };
            this._hitId = _arg1;
            if (_arg1 != -1){
                dispatchEvent(new Event(C.ROLL_OVER));
            };
        }
        public function startMouseInteraction(_arg1:MouseService):void{
            if (!this._mouseStarted){
                this._mouse = _arg1;
                HitManager.addHit(_arg1, this, this._opts.slave_hit_monitor);
                _arg1.addEventListener(C.ROLL_OUT, this.handleMapOut, false, this.priority);
                _arg1.addEventListener(C.CLICK, this.handleMouseClick, false, this.priority);
                _arg1.addEventListener(C.SAFE_CLICK, this.handleMouseSafeClick, false, this.priority);
                this._mouseStarted = true;
            };
        }
        protected function handleMapOut(_arg1:Event):void{
            if (this._hitId != -1){
                dispatchEvent(new Event(C.ROLL_OUT));
            };
            this._hitId = -1;
            dispatchEvent(new Event(C.LAYER_OUT));
        }
        public function triggerMouseMove(_arg1:Event):void{
            this.handleMouseMove(_arg1);
        }
        protected function handleMouseMove(_arg1:Event):void{
        }
        protected function handleMouseSafeClick(_arg1:Event):void{
            if (this._useSafeClick){
                this.sendClick();
            };
        }
        protected function handleMouseClick(_arg1:Event):void{
            if (!this._useSafeClick){
                if (((((!((this._hitId == -1))) && (this._enabled))) && (this.layerIsActive()))){
                    _arg1.stopImmediatePropagation();
                    this.sendClick();
                };
            };
        }
        private function sendClick():void{
            if (((!((this._hitId == -1))) && (this._enabled))){
                dispatchEvent(new Event(C.CLICK));
            };
        }

    }
}//package mb.maps 
﻿package mb.maps {
    import flash.display.*;
    import mb.projections.*;
    import flash.events.*;
    import mb.*;
    import mb.easing.*;
    import flash.geom.*;
    import mb.placement.*;
    import mb.google.*;

    public class NavigationManager extends Waiter {

        public static const ZOOM_COMPLETE:String = "zoomComplete";

        private static var _defaults:Object = {
            limit_panning:true,
            limit_top_level:false,
            easing_scale:1,
            init_zoom_level:1
        };

        public var scale:Number = 1;
        public var level:int = 1;
        public var metersPerPixel:Number = 0;
        public var levelFraction:Number = 1;
        private var _container:Sprite;
        private var _extent:MapExtent;
        private var _align:Alignment;
        private var _scales:ScaleSet;
        private var _limitPanning:Boolean = true;
        private var _maxScale:Number = 1000000;
        private var _minScale:Number = 0.1;
        private var _easeTime:Number = 900;
        private var _easer:MapExtentTween;
        private var _startScale:Number;
        private var _endScale;
        public var enablePanning:Boolean = true;
        public var enableZooming:Boolean = true;
        private var _opts:Object;

        public function NavigationManager(_arg1:Sprite, _arg2:Alignment, _arg3:Object):void{
            this._opts = Opts.init(_defaults, _arg3);
            this._limitPanning = this._opts.limit_panning;
            this._container = _arg1;
            this._align = _arg2;
            this._easer = new MapExtentTween(this._opts.easing_scale);
            this._scales = new RelativeScales([1]);
            _arg2.addEventListener(C.CHANGE, this.handleAlignmentChange);
            waitFor(_arg2);
            startWaiting();
        }
        override public function toString():String{
            var _local1:GeoPoint = this.getCenterAsLatLong();
            return ((((("{lat:" + _local1.lat) + ", lon:") + _local1.long) + "}"));
        }
        private function handleAlignmentChange(_arg1):void{
            this.initMapExtent();
            this.metersPerPixel = this._extent.metersPerPixel;
        }
        override protected function handleReadyState():void{
            this.initMapExtent();
            this._extent.limitBounds = this._limitPanning;
            if (this._opts.scale_set){
                this._scales = this._opts.scale_set;
            } else {
                if (this._opts.zoom_scales){
                    this._scales = new RelativeScales(this._opts.zoom_scales);
                };
            };
            if (this._opts.init_zoom_level > 1){
                this.zoomToLevel(this._opts.init_zoom_level, false);
            };
        }
        public function initMapExtent():void{
            if (this._align.ready){
                this._extent = new MapExtent(this._align);
                this._extent.limitBounds = this._limitPanning;
                this.updateScale();
            };
        }
        public function handleMapResize():void{
            var _local1:GeoPoint;
            var _local2:Number;
            var _local3:int;
            if (this._align.ready){
                _local1 = this.getCenterAsLatLong();
                _local2 = this.metersPerPixel;
                this._align.updateClipSize();
                this._scales.refresh();
                _local3 = this.level;
                this.initMapExtent();
                this.metersPerPixel = 0;
                this.zoomToLatLongLevel(_local1.lat, _local1.long, _local3, false);
            };
        }
        private function updateScale():void{
            this.scale = this._extent.relativeScale;
            this.level = this._scales.convScaleToLevel(this.scale, true);
            this.levelFraction = this._scales.convScaleToLevel(this.scale, false);
            this.metersPerPixel = this._extent.metersPerPixel;
        }
        public function setPanBufferPixels(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):void{
            var _local5:BoundingBox = new BoundingBox();
            _local5.setBounds(_arg1, _arg2, _arg3, _arg4);
            this._extent.panPixelMargins = _local5;
        }
        public function setPanBufferMeters(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):void{
            var _local5:BoundingBox = new BoundingBox();
            _local5.setBounds(_arg1, _arg2, _arg3, _arg4);
            this._extent.panMeterMargins = _local5;
        }
        private function handleZoomEasing(_arg1:Object):void{
        }
        public function get numLevels():int{
            return (this._scales.numLevels);
        }
        public function get scales():ScaleSet{
            return (this._scales);
        }
        public function set maxScale(_arg1:Number):void{
            this._maxScale = _arg1;
        }
        public function set limitPanning(_arg1:Boolean):void{
            this._limitPanning = _arg1;
            if (this._extent){
                this._extent.limitBounds = _arg1;
                this.updateScale();
            };
        }
        public function get extent():MapExtent{
            return (MapExtent(this._extent.clone()));
        }
        public function getExtent():MapExtent{
            return (this.extent);
        }
        public function getGoogleMapLevel(_arg1:Boolean=false):Number{
            return (GoogleMaps.pixelScaleToLevel(this._extent.metersPerPixel, _arg1));
        }
        public function getVisibleBounds():BoundingBox{
            return (this._extent.clone());
        }
        public function get busyZooming():Boolean{
            return (this._easer.busy);
        }
        public function getMapXY():XY{
            var _local1:XY = this._extent.getXY();
            if (this._easer.busy){
                _local1.startScale = this._startScale;
                _local1.endScale = this._endScale;
            };
            return (_local1);
        }
        public function zoomToFullExtent(_arg1:Boolean):void{
            var _local2:MapExtent = new MapExtent(this._align);
            var _local3:Number = this._scales.convLevelToScale(1);
            if (_local3 != 1){
                _local2.rescale(_local3);
            };
            this.zoomToExtent(_local2, _arg1);
        }
        public function reframeExtent(_arg1:BoundingBox, _arg2:BoundingBox):void{
        }
        public function zoomToBoundingBoxLevel(_arg1:BoundingBox, _arg2:BoundingBox=null, _arg3:Number=0, _arg4:Boolean=false):void{
            var _local9:Number;
            var _local10:MapExtent;
            var _local11:BoundingBox;
            var _local12:Number;
            var _local5:Number = 1;
            var _local6:BoundingBox = this._extent;
            var _local7 = 1;
            while (_local7 <= this._scales.numLevels) {
                _local9 = this._scales.convLevelToScale(_local7);
                if ((((_arg3 > 0)) && ((_local9 > _arg3)))){
                    break;
                };
                _local10 = this._extent.cloneExtent();
                _local10.rescale(_local9);
                _local11 = _arg1;
                if (((_arg2) && (_arg2.hasBounds))){
                    _local11 = _arg1.clone();
                    _local12 = _local10.metersPerPixel;
                    _local11.left = (_local11.left - (_arg2.left * _local12));
                    _local11.top = (_local11.top + (_arg2.top * _local12));
                    _local11.right = (_local11.right + (_arg2.right * _local12));
                    _local11.bottom = (_local11.bottom - (_arg2.bottom * _local12));
                };
                if ((((_local10.width < _local11.width)) || ((_local10.height < _local11.height)))){
                    break;
                };
                _local5 = _local7;
                _local6 = _local11;
                _local7++;
            };
            var _local8:Point = _local6.getCenterPoint();
            this.zoomToEastingNorthingLevel(_local8.x, _local8.y, _local5, _arg4);
        }
        public function zoomToBoundingBox2(_arg1:BoundingBox, _arg2:BoundingBox=null, _arg3:Boolean=false):void{
            var _local13:Number;
            var _local14:Number;
            var _local4:Number = this._align.pixelBounds.width;
            var _local5:Number = this._align.pixelBounds.height;
            var _local6:Number = _local4;
            var _local7:Number = _local5;
            if (((_arg2) && (_arg2.hasBounds))){
                _local6 = ((_local6 - _arg2.left) - _arg2.right);
                _local7 = ((_local7 - _arg2.top) - _arg2.bottom);
            };
            var _local8:Number = (_arg1.height / _local7);
            var _local9:Number = (_arg1.width / _local6);
            var _local10:Number = Math.max(_local8, _local9);
            var _local11:BoundingBox = _arg1.clone();
            if (((_arg2) && (_arg2.hasBounds))){
                if (_arg2.left != 0){
                    _local13 = (_arg2.left * _local10);
                    _local11.left = (_local11.left - _local13);
                };
                if (_arg2.top != 0){
                    _local14 = (_arg2.top * _local10);
                    _local11.top = (_local11.top - _local14);
                };
            };
            _local11.right = (_local11.left + (_local4 * _local10));
            _local11.bottom = (_local11.top - (_local5 * _local10));
            var _local12:MapExtent = this.extent.cloneExtent();
            _local12.setBounds(_local11.left, _local11.top, _local11.right, _local11.bottom);
            this.zoomToExtent(_local12, _arg3);
        }
        public function zoomToBoundingBox(_arg1:BoundingBox, _arg2:BoundingBox, _arg3:Number, _arg4:Boolean):void{
            var _local5:Number = 0;
            var _local6:Number = 0;
            if (((_arg2) && (_arg2.hasBounds))){
                _local5 = (_arg2.top + _arg2.bottom);
                _local6 = (_arg2.left + _arg2.right);
            };
            var _local7:Number = this._align.pixelBounds.height;
            var _local8:Number = this._align.pixelBounds.width;
            var _local9:Number = (_arg1.height / (_local7 - _local5));
            var _local10:Number = (_arg1.width / (_local8 - _local6));
            var _local11:Number = Math.max(_local9, _local10);
            if (((!(isNaN(_arg3))) || ((_arg3 > 0)))){
                _local11 = Math.max(_local11, (this._align.metersPerPixel / _arg3));
            };
            var _local12:Number = (this._align.metersPerPixel / _local11);
            var _local13:Point = _arg1.getCenterPoint();
            if (((_arg2) && (_arg2.hasBounds))){
                _local13.x = (_local13.x + (((_arg2.right - _arg2.left) * 0.5) * _local11));
                _local13.y = (_local13.y + (((_arg2.top - _arg2.bottom) * 0.5) * _local11));
            };
            this.zoomToEastingNorthing(_local13.x, _local13.y, _local12, _arg4);
        }
        private function applyExtent(_arg1:MapExtent):void{
            var _local2:Point = _arg1.getCenterPoint();
            var _local3:Number = this.metersPerPixel;
            var _local4:Number = _arg1.relativeScale;
            this._extent.recenterAndRescale(_local2.x, _local2.y, _local4);
            this.updateScale();
            var _local5:Number = this.metersPerPixel;
            var _local6:Number = (_local3 / _local5);
            if (Math.abs((1 - _local6)) < 1E-7){
                _local6 = 1;
            };
            var _local7:XY = this.getMapXY();
            this._container.x = _local7.xPanShift;
            this._container.y = _local7.yPanShift;
            if (_local6 == 1){
                dispatchEvent(new Event(C.PAN));
            } else {
                dispatchEvent(new Event(C.RESCALE));
            };
            dispatchEvent(new Event(C.NAVIGATE));
        }
        public function zoomToExtent(_arg1:MapExtent, _arg2:Boolean):void{
            if (!this.enableZooming){
                return;
            };
            var _local3:Number = this.extent.relativeScale;
            var _local4:Number = _arg1.relativeScale;
            if (((!((_local3 == _local4))) && (!(this._opts.smooth_zoom)))){
                _arg2 = false;
            };
            if (_arg2){
                _arg1.adjustPosition();
                this._startScale = _local3;
                this._endScale = _local4;
                this._easer.start(this._easeTime, this.handleZoomTween, this.extent, _arg1);
            } else {
                this.applyExtent(_arg1);
            };
        }
        private function handleZoomTween(_arg1:MapExtent, _arg2:Boolean):void{
            this.applyExtent(_arg1);
            if (_arg2){
                dispatchEvent(new Event(ZOOM_COMPLETE));
            };
        }
        public function panToLayerFocus(_arg1:Number, _arg2:Number, _arg3:Boolean):void{
            this.zoomToLayerFocus(_arg1, _arg2, this._extent.relativeScale, _arg3);
        }
        public function zoomToLayerFocus(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Boolean):void{
            var _local5:Point = this._extent.convScreenFocusToProjectedPoint(_arg1, _arg2);
            var _local6:MapExtent = this._extent.cloneExtent();
            var _local7:Number = this._extent.relativeScale;
            var _local8:Number = ((this._extent.width * _local7) / _arg3);
            var _local9:Number = ((this._extent.height * _local7) / _arg3);
            _local6.setBounds((_local5.x - (_arg1 * _local8)), (_local5.y + (_arg2 * _local9)), (_local5.x + ((1 - _arg1) * _local8)), (_local5.y - ((1 - _arg2) * _local9)));
            this.zoomToExtent(_local6, false);
        }
        public function zoomToLatLongLevel(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Boolean):void{
            var _local5:Number = this._scales.convLevelToScale(_arg3);
            this.zoomToLatLong(_arg1, _arg2, _local5, _arg4);
        }
        public function panToLatLong(_arg1:Number, _arg2:Number, _arg3:Boolean=false):void{
            this.zoomToLatLong(_arg1, _arg2, this.scale, _arg3);
        }
        public function panByPixels(_arg1:int, _arg2:int, _arg3:Boolean=false):void{
            var _local4:Point = this._extent.getCenterPoint();
            var _local5:Number = this._extent.metersPerPixel;
            var _local6:Number = (_local4.x + (_arg1 * _local5));
            var _local7:Number = (_local4.y + (_arg2 * _local5));
            this.zoomToEastingNorthing(_local6, _local7, this.scale, _arg3);
        }
        public function zoomToLatLong(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Boolean):void{
            var _local5:Point = this._align.projection.projectLatLong(_arg1, _arg2);
            this.zoomToEastingNorthing(_local5.x, _local5.y, _arg3, _arg4);
        }
        public function zoomToEastingNorthingLevel(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Boolean):void{
            var _local5:Number = this._scales.convLevelToScale(_arg3);
            this.zoomToEastingNorthing(_arg1, _arg2, _local5, _arg4);
        }
        public function zoomToEastingNorthing(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Boolean):void{
            if (isNaN(_arg3)){
                _arg3 = this._extent.relativeScale;
            };
            if (_arg3 > this._maxScale){
                _arg3 = this._maxScale;
            };
            if (_arg3 < this._minScale){
                _arg3 = this._minScale;
            };
            var _local5:MapExtent = this.extent;
            _local5.recenterAndRescale(_arg1, _arg2, _arg3);
            this.zoomToExtent(_local5, _arg4);
        }
        public function zoomIn(_arg1:Boolean=false):void{
            var _local2:int;
            if (this._easer.busy){
                _local2 = this._scales.convScaleToLevel(this._easer.finalExtent.relativeScale);
            } else {
                _local2 = this.level;
            };
            this.zoomToLevel((_local2 + 1), _arg1);
        }
        public function zoomOut(_arg1:Boolean=false):void{
            var _local2:int;
            if (this._easer.busy){
                _local2 = this._scales.convScaleToLevel(this._easer.finalExtent.relativeScale);
            } else {
                _local2 = this.level;
            };
            this.zoomToLevel((_local2 - 1), _arg1);
        }
        public function zoomToLevelFocus(_arg1:int, _arg2:Number, _arg3:Number, _arg4:Boolean):void{
            var _local5:Number = this._scales.convLevelToScale(_arg1);
            this.zoomToLayerFocus(_arg2, _arg3, _local5, _arg4);
        }
        public function zoomToLevel(_arg1:int, _arg2:Boolean):void{
            this.zoomToLevelFocus(_arg1, 0.5, 0.5, _arg2);
        }
        public function setPanShift(_arg1:Number, _arg2:Number):Boolean{
            if (!this.enablePanning){
                return (false);
            };
            if (this._easer.busy){
                this._easer.stop();
            };
            this._extent.recenterByPixelShift(_arg1, _arg2);
            var _local3:XY = this.getMapXY();
            var _local4:Number = _local3.xPanShift;
            var _local5:Number = _local3.yPanShift;
            var _local6:Number = this._container.x;
            var _local7:Number = this._container.y;
            var _local8:Number = Math.abs((_local4 - _local6));
            var _local9:Number = Math.abs((_local5 - _local7));
            var _local10:Number = 0.2;
            if ((((_local8 < _local10)) && ((_local9 < _local10)))){
                return (false);
            };
            _local4 = Math.round(_local4);
            _local5 = Math.round(_local5);
            this._container.x = _local4;
            this._container.y = _local5;
            var _local11:Object = {
                x:(_local4 - _local6),
                y:(_local5 - _local7)
            };
            dispatchEvent(new DynamicEvent(C.PAN, _local11));
            dispatchEvent(new Event(C.NAVIGATE));
            return (true);
        }
        public function testProjectedPoint(_arg1:Number, _arg2:Number):Boolean{
            var _local3:Boolean = this._extent.containsPoint(_arg1, _arg2);
            return (_local3);
        }
        public function convScreenPointToProjectedPoint(_arg1:PixelPoint):Point{
            var _local2:Point = this._extent.convScreenPointToScreenFocus(_arg1);
            var _local3:Point = this._extent.convScreenFocusToProjectedPoint(_local2.x, _local2.y);
            return (_local3);
        }
        public function convProjectedPointToScreenPoint(_arg1:Number, _arg2:Number):PixelPoint{
            var _local3:Point = this._extent.convProjectedPointToScreenFocus(_arg1, _arg2);
            return (this._extent.convScreenFocusToScreenPoint(_local3));
        }
        public function convScreenPointToLatLong(_arg1:PixelPoint):GeoPoint{
            var _local2:Point = this.convScreenPointToProjectedPoint(_arg1);
            var _local3:GeoPoint = this._align.projection.unprojectXY(_local2.x, _local2.y);
            return (_local3);
        }
        public function getCenterAsLatLong():GeoPoint{
            var _local1:GeoPoint = this._align.projection.unprojectXY(((this._extent.left + this._extent.right) * 0.5), ((this._extent.top + this._extent.bottom) * 0.5));
            return (_local1);
        }
        public function getObjectBoundingBox(_arg1:DisplayObject):BoundingBox{
            var _local2:BoundingBox = new BoundingBox();
            if (((!(_arg1)) || (!(_arg1.stage)))){
                return (_local2);
            };
            var _local3:Rectangle = _arg1.getBounds(_arg1.stage);
            var _local4:PixelPoint = new PixelPoint(_local3.left, _local3.top, _arg1.stage);
            var _local5:Point = this.convScreenPointToProjectedPoint(_local4);
            _local4.x = _local3.right;
            _local4.y = _local3.bottom;
            var _local6:Point = this.convScreenPointToProjectedPoint(_local4);
            _local2.setBounds(_local5.x, _local5.y, _local6.x, _local6.y);
            return (_local2);
        }

    }
}//package mb.maps 
﻿package mb.maps {
    import flash.display.*;
    import flash.events.*;
    import mb.*;
    import flash.geom.*;
    import mb.symbols.*;

    public class PointSymbolHit extends SymbolHitBase implements ISymbolHit {

        private var _symbols:SymbolDataSource;
        private var _lyr:MapLayer;

        public function PointSymbolHit(_arg1:MapLayer, _arg2:SymbolDataSource, _arg3:Object=null){
            super(_arg3);
            this._symbols = _arg2;
            this._lyr = _arg1;
            priority = 5;
        }
        override public function layerIsActive():Boolean{
            return (this._lyr.viewable);
        }
        override public function getHitIdAtXY(_arg1:Number, _arg2:Number, _arg3:Number=0, _arg4:int=-1):int{
            var _local5:Number = this._lyr.map.navigation.metersPerPixel;
            var _local6:BoundingBox = new BoundingBox();
            _local6.setBounds(_arg1, _arg2, _arg1, _arg2);
            var _local7:SymbolDataSet = this._symbols.fetchSymbolsInBox(_local6, _local5);
            var _local8:SymbolData;
            if (_local7.size() > 0){
                _local8 = this.searchHitCandidates(_local7, _arg1, _arg2, _local5, _arg3);
            };
            if (_local8 == null){
                return (-1);
            };
            return (_local8.id);
        }
        override public function findMouseHitId():int{
            var _local8:Number;
            if (!_mouse.overMap){
                return (-1);
            };
            var _local1:Sprite = this._lyr.map.container;
            var _local2:PixelPoint = _mouse.getCursorPosition();
            var _local3:Point = this._lyr.map.navigation.convScreenPointToProjectedPoint(_local2);
            var _local4:Number = _local3.x;
            var _local5:Number = _local3.y;
            var _local6:Number = _opts.min_symbol_radius_pixels;
            if (_opts.min_symbol_radius_meters){
                _local8 = (_opts.min_symbol_radisu_meters / this._lyr.map.navigation.metersPerPixel);
                if (_local8 > _local6){
                    _local6 = _local8;
                };
            };
            var _local7:int = this.getHitIdAtXY(_local4, _local5, _local6);
            return (_local7);
        }
        protected function searchHitCandidates(_arg1:SymbolDataSet, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Number=0):SymbolData{
            return (null);
        }
        override protected function handleMouseMove(_arg1:Event):void{
            if (((this._lyr.map.panning) || (!(_enabled)))){
                return;
            };
            if (!this.layerIsActive()){
                return;
            };
            var _local2:int = this.findMouseHitId();
            if (_hitId != _local2){
                if (_hitId > -1){
                    dispatchEvent(new Event(C.ROLL_OUT));
                };
                _hitId = _local2;
                if (_local2 > -1){
                    dispatchEvent(new Event(C.ROLL_OVER));
                };
            };
        }

    }
}//package mb.maps 
﻿package mb.maps {
    import flash.display.*;
    import mb.data.*;
    import mb.*;
    import mb.easing.*;

    public class MapLayer extends Waiter {

        public static const UNDEFINED:String = "undef";
        public static const BASE:String = "base";
        public static const SHAPE:String = "shape";
        public static const SHAPE_OVERLAY:String = "shpoverlay";
        public static const SYMBOL:String = "symbol";
        public static const MARKER:String = "marker";

        public var type:String = "undef";
        private var _fadeTween:NumberTween;
        public var zIndex:int = 0;
        public var minScale:Number = 0;
        public var maxScale:Number = 0;
        public var minLevel:Number = 0;
        public var maxLevel:Number = 0;
        protected var _map:MapStack;
        protected var _container:Sprite;
        protected var _hidden:Boolean = false;
        protected var _useFading:Boolean = false;
        protected var _mouseEnabled:Boolean = true;

        public function MapLayer():void{
            this._container = new Sprite();
            this._fadeTween = new NumberTween();
        }
        public function getVisibleExtent():BoundingBox{
            if (((!(this._map.navigation.ready)) || (!(this._container.stage)))){
                return (null);
            };
            if (!this._container.mask){
                return (this._map.navigation.extent.clone());
            };
            this._container.mask = this._container.mask;
            var _local1:BoundingBox = this._map.navigation.getObjectBoundingBox(this._container.mask);
            var _local2:BoundingBox = this._map.navigation.extent.getIntersection(_local1);
            if (!_local2.hasBounds){
            };
            return (_local2);
        }
        public function raise():void{
            if (this._container.parent){
                this._container.parent.addChild(this._container);
            };
        }
        public function set mouseEnabled(_arg1:Boolean):void{
            this._mouseEnabled = _arg1;
        }
        public function get mouseEnabled():Boolean{
            return (this._mouseEnabled);
        }
        public function set useFading(_arg1:Boolean):void{
            this._useFading = true;
        }
        public function get map():MapStack{
            return (this._map);
        }
        public function get container():Sprite{
            return (this._container);
        }
        public function set mask(_arg1:MapLayer):void{
            this._container.mask = _arg1.container;
        }
        public function place(_arg1:MapStack):void{
            this._map = _arg1;
            if (!_arg1.navigation.ready){
                waitFor(_arg1.navigation);
            };
            startWaiting();
        }
        public function get hidden():Boolean{
            return (this._hidden);
        }
        public function set hidden(_arg1:Boolean):void{
            if (this._hidden != _arg1){
                this.visible = _arg1;
                this._hidden = _arg1;
            };
        }
        public function hide():void{
            this.hidden = true;
            this.visible = false;
        }
        public function show():void{
            this.hidden = false;
            this.visible = true;
        }
        public function fadeIn(_arg1:int=450, _arg2:int=0):void{
            if (((this.visible) && (!(this._fadeTween.busy)))){
                return;
            };
            this._container.alpha = 0;
            this.show();
            this.refresh();
            this._fadeTween.delay = _arg2;
            this._fadeTween.start(_arg1, TweenMethods.easeOutQuadratic, this.handleFadeIn, 0, 1);
        }
        public function fadeOut(_arg1:int=350, _arg2:int=0):void{
            if (((!(this.visible)) && (!(this._fadeTween.busy)))){
                return;
            };
            this._hidden = true;
            this._fadeTween.delay = _arg2;
            this._fadeTween.start(_arg1, TweenMethods.easeOutQuadratic, this.handleFadeOut, this._container.alpha, 0);
        }
        private function handleFadeOut(_arg1:Number, _arg2:Boolean):void{
            if (_arg2){
                this._container.alpha = 1;
                this.hide();
            } else {
                this._container.alpha = _arg1;
            };
        }
        private function handleFadeIn(_arg1:Number, _arg2:Boolean):void{
            this._container.alpha = _arg1;
        }
        public function set visible(_arg1:Boolean):void{
            if (this._container.visible != _arg1){
                this._container.visible = _arg1;
                if (this._fadeTween.busy){
                    this._fadeTween.stop();
                };
            };
        }
        public function get visible():Boolean{
            return (this.container.visible);
        }
        public function get viewable():Boolean{
            return (((this.inrange) && (!(this.hidden))));
        }
        public function get inrange():Boolean{
            if (!this._map){
                return (false);
            };
            var _local1:Number = this._map.navigation.scale;
            var _local2:Number = this._map.navigation.levelFraction;
            var _local3:Boolean;
            if (((!((this.maxLevel == 0))) && ((_local2 > this.maxLevel)))){
                _local3 = false;
            };
            if (((!((this.minLevel == 0))) && ((_local2 < this.minLevel)))){
                _local3 = false;
            };
            if (((!((this.maxScale == 0))) && ((_local1 > this.maxScale)))){
                _local3 = false;
            };
            if (((!((this.minScale == 0))) && ((_local1 < this.minScale)))){
                _local3 = false;
            };
            return (_local3);
        }
        public function rescale():void{
        }
        public function reposition():void{
        }
        public function refresh():Boolean{
            return (true);
        }
        public function renderFilteredSymbols(_arg1:IFilter, _arg2:Boolean):void{
        }
        public function repositionEnd():void{
        }

    }
}//package mb.maps 
﻿package mb.maps {
    import flash.events.*;
    import mb.*;
    import flash.utils.*;

    public class HitManager {

        private static var _mouseIndex:Dictionary = new Dictionary();

        private var _hits:Array;
        private var _mouse:MouseService;
        private var _masterHit:SymbolHitBase;
        private var _slaveHit:SymbolHitBase;

        public function HitManager(_arg1:MouseService):void{
            this._hits = [];
            this._mouse = _arg1;
            _arg1.addEventListener(C.MOUSE_MOVE, this.handleMouseMove);
            _arg1.addEventListener(C.ROLL_OVER, this.handleMouseMove);
        }
        public static function addHit(_arg1:MouseService, _arg2:SymbolHitBase, _arg3:SymbolHitBase=null):void{
            if (!_mouseIndex[_arg1]){
                _mouseIndex[_arg1] = new HitManager(_arg1);
            };
            var _local4:HitManager = _mouseIndex[_arg1];
            _local4.addHit(_arg2, _arg3);
        }

        private function handleMouseMove(_arg1):void{
            var _local3:SymbolHitBase;
            var _local4:int;
            var _local5:int;
            var _local6:int;
            var _local2:int;
            while (_local2 < this._hits.length) {
                _local3 = this._hits[_local2];
                if (_local3.active == false){
                } else {
                    if (_local3 == this._masterHit){
                        _local4 = this._masterHit.getMouseHitId();
                        _local5 = this._masterHit.findMouseHitId();
                        _local6 = (((_local5 == -1)) ? this._slaveHit.findMouseHitId() : _local5);
                        ((!((_local6 == _local4))) && (this._masterHit.setHitId(_local6)));
                        ((true) && (this._slaveHit.setHitId(_local6)));
                    } else {
                        if (_local3 == this._slaveHit){
                            if (this._masterHit.active == false){
                                _local3.triggerMouseMove(_arg1);
                            };
                        } else {
                            _local3.triggerMouseMove(_arg1);
                        };
                    };
                    if (_local3.getMouseHitId() != -1){
                        break;
                    };
                };
                _local2++;
            };
        }
        public function addHit(_arg1:SymbolHitBase, _arg2:SymbolHitBase=null):void{
            if (this._hits.indexOf(_arg1) == -1){
                this._hits.push(_arg1);
                _arg1.addEventListener(C.ROLL_OVER, this.handleRollOver, false, 9999);
            };
            this._hits.sortOn("priority", Array.DESCENDING);
            if (((_arg2) && (!(this._slaveHit)))){
                this._slaveHit = _arg2;
                this._masterHit = _arg1;
            };
        }
        private function handleRollOver(_arg1:Event):void{
            var _local4:int;
            var _local5:SymbolHitBase;
            var _local2:SymbolHitBase = (_arg1.target as SymbolHitBase);
            var _local3:int = this._hits.indexOf(_local2);
            if (_local3 > -1){
                _local4 = (_local3 + 1);
                while (_local4 < this._hits.length) {
                    _local5 = this._hits[_local4];
                    ((!((_local5.getMouseHitId() == -1))) && (_local5.setHitId(-1)));
                    _local4++;
                };
            };
        }

    }
}//package mb.maps 
﻿package mb.maps {
    import flash.display.*;
    import mb.projections.*;
    import mb.*;
    import mb.browser.*;

    public class MapMain extends Waiter {

        protected var _root:DisplayObjectContainer;
        protected var _align:Sprite;
        protected var _map:MapStack;
        protected var _proj:IGeoProjection;

        public function MapMain(_arg1:Sprite):void{
            this._root = DisplayObjectContainer(_arg1.root);
            this._align = _arg1;
            this._align.alpha = 0;
            if (_arg1.stage){
                _arg1.stage.scaleMode = StageScaleMode.NO_SCALE;
                if (Browser.swfIsEmbedded()){
                    _arg1.stage.showDefaultContextMenu = false;
                };
            };
        }
        public function get map():MapStack{
            return (this._map);
        }

    }
}//package mb.maps 
﻿package mb.maps {
    import mb.data.*;
    import mb.shapes.*;

    public class ShapeLayer extends ShapeVectorLayer {

        public function ShapeLayer(_arg1:IShapeDataSource, _arg2:DataTable=null, _arg3:Object=null):void{
            super(_arg1, _arg2, _arg3);
        }
    }
}//package mb.maps 
﻿package mb.maps {
    import flash.display.*;
    import mb.projections.*;
    import flash.events.*;
    import mb.*;
    import mb.easing.*;
    import mb.symbols.*;

    public class MarkerLayer extends MapLayer {

        private var _markers:Array;
        private var _visibleMarkerIndex:Array;
        private var _fadedMarkerIndex:Array;

        public function MarkerLayer(_arg1:Array=null):void{
            type = MapLayer.MARKER;
            if (_arg1 == null){
                _arg1 = [];
            };
            this._markers = _arg1;
            this._visibleMarkerIndex = [];
            this._fadedMarkerIndex = [];
        }
        public function showMarkersById(_arg1:Array, _arg2:Array):void{
            var _local10:int;
            var _local11:Marker;
            var _local12:int;
            var _local13:Marker;
            var _local3:Array = [];
            var _local4:int;
            while (_local4 < _arg1.length) {
                _local10 = _arg1[_local4];
                if (this._visibleMarkerIndex[_local10] == undefined){
                    _local11 = this._markers[_local10];
                    ((_local11) && (_local11.fadeIn(250)));
                };
                _local3[_local10] = true;
                _local4++;
            };
            var _local5:Array = [];
            var _local6:int = _arg2.length;
            var _local7:int;
            while (_local7 < _local6) {
                _local12 = _arg2[_local7];
                if (_local3[_local12] !== undefined){
                } else {
                    _local5[_local12] = true;
                    _local13 = this._markers[_local12];
                    if (!this._fadedMarkerIndex[_local12]){
                        _local13.fadeToAlpha(200);
                    };
                };
                _local7++;
            };
            _local6 = this._visibleMarkerIndex.length;
            var _local8:int;
            while (_local8 < _local6) {
                if ((((((this._visibleMarkerIndex[_local8] === true)) && ((_local3[_local8] === undefined)))) && ((_local5[_local8] === undefined)))){
                    this._markers[_local8].fadeOut(200);
                };
                _local8++;
            };
            _local6 = this._fadedMarkerIndex.length;
            var _local9:int;
            while (_local9 < _local6) {
                if (this._fadedMarkerIndex[_local9]){
                    if (((!(_local5[_local9])) && (!(_local3[_local9])))){
                        this._markers[_local9].hide();
                    };
                };
                _local9++;
            };
            this._fadedMarkerIndex = _local5;
            this._visibleMarkerIndex = _local3;
        }
        private function addMarker(_arg1:Marker):void{
            this._markers.push(_arg1);
            if (ready){
                this.initMarker(_arg1);
            };
        }
        private function initMarker(_arg1:Marker):void{
            _container.addChild(_arg1.container);
            _arg1.initPlacement(_map.alignment.getContainerXY(_container), map.projection);
            _arg1.addEventListener(Marker.PLACEMENT, this.handleMarkerPlacement, false, 1000);
        }
        override protected function handleReadyState():void{
            var _local1:Marker;
            for each (_local1 in this._markers) {
                this.initMarker(_local1);
            };
            this.refresh();
        }
        private function handleMarkerPlacement(_arg1:Event):void{
            var _local2:Marker = (_arg1.target as Marker);
            var _local3:Sprite = _local2.container;
            var _local4:PixelPoint = new PixelPoint(_local3.x, _local3.y, _local3.parent);
            var _local5:GeoPoint = _map.navigation.convScreenPointToLatLong(_local4);
            _local2.lat = _local5.lat;
            _local2.long = _local5.long;
        }
        override public function reposition():void{
        }
        override public function refresh():Boolean{
            this.updateMarkers();
            return (true);
        }
        private function handleMarkerDisplay(_arg1:Object):void{
        }
        override public function rescale():void{
            this.updateMarkers();
        }
        private function updateMarkers():void{
            var _local2:Marker;
            var _local1:XY = _map.navigation.getMapXY();
            for each (_local2 in this._markers) {
                _local2.updatePlacement(_local1, _map.projection);
            };
        }

    }
}//package mb.maps 
﻿package mb.maps {
    import flash.display.*;
    import mb.projections.*;
    import flash.events.*;
    import mb.*;
    import flash.geom.*;
    import flash.net.*;
    import flash.system.*;
    import mb.styles.*;
    import mb.placement.*;
    import mb.popups.*;
    import mb.browser.*;
    import mb.utils.*;

    public class MapStack extends Waiter implements ILiquidChart {

        public static const DRAG_COMPLETE:String = "dragcomplete";

        private static var _defaults:Object = {
            dbl_click_action:C.ZOOM_IN,
            click_action:"",
            zoom_focus:"mouse",
            smooth_zoom:true,
            use_drag_pan:true,
            use_mask:true,
            use_click_zoom:true,
            zoom_scales:null,
            scale_set:null,
            pan_render_quality:"high",
            show_neatline:false,
            neatline_weight:1,
            neatline_color:0xCCCCCC,
            background_color:null,
            use_mouse_wheel:true,
            gc_after_pan:true,
            trace_location:true,
            refresh_after_pan:false
        };

        private var _alignment:Alignment;
        private var _navigation:NavigationManager;
        private var _layers:LayerManager;
        private var _mouse:MouseService;
        private var _mask:Sprite;
        private var _stackContainer:Sprite;
        private var _mapContainer:Sprite;
        private var _overlayContainer:Sprite;
        private var _panning:Boolean = false;
        private var _panCount:int = 0;
        private var _useClickZoom:Boolean = false;
        private var _neatlineCanvas:Sprite;
        private var _opts:Object;

        public function MapStack(_arg1:Alignment, _arg2:Object=null):void{
            this._opts = Opts.init(_defaults, _arg2);
            this._alignment = _arg1;
            var _local3:Sprite = _arg1.clip;
            var _local4:int = _local3.parent.getChildIndex(_local3);
            _local3.parent.addChildAt((this._stackContainer = new Sprite()), (_local4 + 1));
            this.setMapWindow();
            if (this._opts.background_color !== null){
                this.drawBackground();
            } else {
                _local3.alpha = 0;
            };
            this._stackContainer.addChild((this._mapContainer = new Sprite()));
            if (this._opts.show_neatline){
                this._stackContainer.parent.addChild((this._neatlineCanvas = new Sprite()));
                this._neatlineCanvas.x = this._stackContainer.x;
                this._neatlineCanvas.y = this._stackContainer.y;
                this._neatlineCanvas.mouseEnabled = false;
                this.drawNeatline();
            };
            this._mouse = new MouseService(_arg1.clip);
            this._layers = new LayerManager(this._mapContainer, this);
            this._navigation = new NavigationManager(this._mapContainer, this._alignment, _arg2);
            this._navigation.addEventListener(C.RESCALE, this.handleRescale);
            this._navigation.addEventListener(C.PAN, this.handlePan);
            waitFor(this._navigation);
            this._stackContainer.parent.mouseEnabled = false;
            this._stackContainer.mouseEnabled = false;
            this._mapContainer.mouseEnabled = false;
        }
        public function get map():MapStack{
            return (this);
        }
        public function addOverlay(_arg1:DisplayObject):void{
            if (!this._overlayContainer){
                this._overlayContainer = new Sprite();
                this._stackContainer.addChild(this._overlayContainer);
            };
            this._overlayContainer.addChild(_arg1);
        }
        public function addLayer(_arg1:MapLayer):void{
            waitFor(_arg1);
            this._layers.addLayer(_arg1);
        }
        private function setMapWindow():void{
            var _local1:Sprite = this._alignment.clip;
            this._stackContainer.x = Math.round(_local1.x);
            this._stackContainer.y = _local1.y;
            if (this._opts.use_mask){
                this._stackContainer.scrollRect = new Rectangle(0, 0, _local1.width, _local1.height);
            };
        }
        public function getAlignmentClip():DisplayObject{
            return (this.alignment.clip);
        }
        public function updateSize():void{
            this.setMapWindow();
            this.drawBackground();
            this.drawNeatline();
            var _local1:Boolean;
            if (_local1){
                this.navigation.handleMapResize();
            };
            dispatchEvent(new Event(C.RESIZE));
        }
        public function set backgroundColor(_arg1:Number):void{
            this._opts.background_color = _arg1;
            this.drawBackground();
        }
        private function drawBackground():void{
            var _local1:Sprite;
            if (this._opts.background_color !== null){
                _local1 = this._alignment.clip;
                Utils.setSpriteColor(_local1, this._opts.background_color, 1);
            };
        }
        public function clearBackground():void{
            this._opts.background_color = null;
            this._alignment.clip.alpha = 0;
        }
        private function drawNeatline():void{
            if (this._opts.show_neatline){
                this._neatlineCanvas.graphics.clear();
                this._neatlineCanvas.graphics.lineStyle(1, this._opts.neatline_color);
                this._neatlineCanvas.graphics.drawRect(-1, -1, this._alignment.clip.width, this._alignment.clip.height);
            };
        }
        public function get layers():LayerManager{
            return (this._layers);
        }
        public function get width():int{
            return (this._alignment.pixelBounds.width);
        }
        public function get height():int{
            return (this._alignment.pixelBounds.height);
        }
        public function get navigation():NavigationManager{
            return (this._navigation);
        }
        public function show():void{
            this._stackContainer.visible = true;
            this._mouse.enabled = true;
        }
        public function hide():void{
            this._stackContainer.visible = false;
            this._mouse.enabled = false;
        }
        public function get hidden():Boolean{
            return (!(this._stackContainer.visible));
        }
        public function get panning():Boolean{
            return (this._panning);
        }
        public function handleRescale(_arg1:Object):void{
            this._layers.rescaleLayers();
        }
        public function handlePan(_arg1:Object):void{
            this._layers.shiftLayers();
        }
        public function display():void{
            startWaiting();
        }
        public function get container():Sprite{
            return (this._stackContainer);
        }
        public function get mouse():MouseService{
            return (this._mouse);
        }
        public function get alignment():Alignment{
            return (this._alignment);
        }
        public function get projection():IGeoProjection{
            return (this._alignment.projection);
        }
        private function handleMouseUp(_arg1:Object):void{
            var obj:* = _arg1;
            var p:* = PixelPoint(obj.data);
            if (!this.mouse.overMap){
            };
            if (this._panning){
                this._panning = false;
                if (this._opts.refresh_after_pan){
                    this._layers.refreshLayers();
                };
                this._layers.endShiftLayers();
                dispatchEvent(new Event(DRAG_COMPLETE));
                if (this._opts.gc_after_pan){
                    this._panCount++;
                    if ((this._panCount % 4) == 0){
                        System.gc();
                        System.gc();
                        try {
                            new LocalConnection().connect("gc");
                            new LocalConnection().connect("gc");
                        } catch(e) {
                        };
                    };
                };
            };
        }
        private function doClickZoom(_arg1:PixelPoint=null):void{
            var _local2:Boolean = this._opts.smooth_zoom;
            if (!_arg1){
                _arg1 = this.mouse.getCursorPosition();
            };
            var _local3:Point = this.navigation.extent.convScreenPointToScreenFocus(_arg1);
            var _local4:Point = this.navigation.extent.convScreenFocusToProjectedPoint(_local3.x, _local3.y);
            var _local5:int = this.navigation.level;
            if (_local5 < this.navigation.numLevels){
                _local5++;
            };
            this.navigation.zoomToLevelFocus(_local5, _local3.x, _local3.y, _local2);
        }
        private function handleDblClick(_arg1:Object):void{
            var _local2:PixelPoint = _arg1.data;
            if (((this._opts.use_click_zoom) && ((this._opts.dbl_click_action == C.ZOOM_IN)))){
                this.doClickZoom(_local2);
            };
        }
        private function handleClick(_arg1:Object):void{
            var _local3:GeoPoint;
            var _local4:GeoPoint;
            var _local2:PixelPoint = _arg1.data;
            if (((this._opts.use_click_zoom) && ((this._opts.click_action == C.ZOOM_IN)))){
                this.doClickZoom(_local2);
            };
            if (((this._opts.trace_location) && (this.navigation.ready))){
                _local3 = this.navigation.convScreenPointToLatLong(_local2);
                _local4 = this.navigation.getCenterAsLatLong();
            };
        }
        private function handleDrag(_arg1:Object):void{
            var _local2:Point;
            var _local3:Boolean;
            if (this._opts.use_drag_pan){
                _local2 = Point(_arg1.data);
                _local3 = this._navigation.setPanShift(_local2.x, _local2.y);
                if (_local3){
                    this._panning = true;
                };
            };
        }
        private function handleScrollStep(_arg1):void{
            if (!this._opts.use_mouse_wheel){
                return;
            };
            MouseWheel.capture();
            var _local2:Point = this.navigation.extent.convScreenPointToScreenFocus(this.mouse.getCursorPosition());
            var _local3:int = this._mouse.scrollStep;
            this.navigation.zoomToLevelFocus((this.navigation.level + _local3), _local2.x, _local2.y, false);
        }
        private function handleMapOut(_arg1):void{
            ((this._opts.use_mouse_wheel) && (MouseWheel.release()));
        }
        override protected function handleReadyState():void{
            this._mouse.addEventListener(C.CLICK, this.handleClick, false, 500);
            this._mouse.addEventListener(C.DOUBLE_CLICK, this.handleDblClick);
            this._mouse.addEventListener(C.MOUSE_DRAG, this.handleDrag, false, 500);
            this._mouse.addEventListener(C.MOUSE_UP, this.handleMouseUp);
            this._mouse.addEventListener(C.SCROLL_STEP, this.handleScrollStep);
            this._mouse.addEventListener(C.ROLL_OUT, this.handleMapOut);
        }

    }
}//package mb.maps 
﻿package mb.maps {
    import flash.display.*;

    public interface ILayerRenderer {

        function embed(_arg1:Sprite, _arg2:MapStack):void;
        function clear():void;

    }
}//package mb.maps 
﻿package mb.rendering {
    import flash.display.*;
    import mb.*;
    import flash.geom.*;
    import mb.styles.*;
    import mb.shapes.*;
    import mb.maps.*;

    public class ShapeRenderer {

        private static var _mpp:Number = 0;
        private static var _contentWidth:Number;

        protected var _style:ShapeStyle;
        protected var _shapeCanvas:Shape;
        protected var _clipRect:Rectangle;
        private var _ctrans:ColorTransform;
        private var _matrix:Matrix;

        public function ShapeRenderer(){
            this._ctrans = new ColorTransform();
            this._matrix = new Matrix();
            super();
            this._shapeCanvas = new Shape();
        }
        public function setStyle(_arg1:IShapeStyle):void{
            this._style = ShapeStyle(_arg1);
            this._clipRect = new Rectangle();
        }
        public function drawShapeVertices(_arg1:VertexSet, _arg2:XY, _arg3:Graphics):void{
            var _local8:Number;
            var _local9:Number;
            var _local4:Number = _arg2.mxProjToLayer;
            var _local5:Number = _arg2.myProjToLayer;
            var _local6:Number = _arg2.bxProjToLayer;
            var _local7:Number = _arg2.byProjToLayer;
            if (_arg1.hasNext){
                _local8 = ((_arg1.nextX * _local4) + _local6);
                _local9 = ((_arg1.nextY * _local5) + _local7);
                _arg3.moveTo(_local8, _local9);
                while (_arg1.hasNext) {
                    _local8 = ((_arg1.nextX * _local4) + _local6);
                    _local9 = ((_arg1.nextY * _local5) + _local7);
                    _arg3.lineTo(_local8, _local9);
                };
            };
        }
        public function drawShapeVector(_arg1:ShapeVector, _arg2:XY, _arg3:Graphics, _arg4:BoundingBox):void{
            var _local5:VertexSet;
            if (_arg4 == null){
                while (_arg1.hasNextPart()) {
                    this.drawShapeVertices(_arg1.nextPart, _arg2, _arg3);
                };
            } else {
                while (_arg1.hasNextPart()) {
                    _local5 = _arg1.nextPart;
                    if (_arg4.contains(_local5)){
                        this.drawShapeVertices(_local5, _arg2, _arg3);
                    } else {
                        if (!_local5.intersects(_arg4)){
                        } else {
                            this.drawShapeVertices(_local5, _arg2, _arg3);
                        };
                    };
                };
            };
        }
        public function renderShape(_arg1:ShapeVector, _arg2:XY, _arg3:Graphics, _arg4:BoundingBox):void{
            if (!this._style){
                return;
            };
            var _local5:Number = _arg2.contentWidthInPixels;
            if (_contentWidth != _local5){
                _contentWidth = _local5;
                ScaleManager.updateScale(_arg2.metersPerPixel, _local5, _arg2.contentHeightInPixels);
            };
            this._style.setId(_arg1.id);
            if (!this._style.visible){
                return;
            };
            this._style.beginDrawing(_arg3);
            if (this._style.specialPath != null){
                this._style.specialPath.drawPath(_arg1, _arg2, _arg3);
            } else {
                this.drawShapeVector(_arg1, _arg2, _arg3, _arg4);
            };
        }
        public function renderShapeToBitmap(_arg1:BitmapData, _arg2:ShapeVector, _arg3:XY, _arg4:BoundingBox):void{
            this.renderShape(_arg2, _arg3, this._shapeCanvas.graphics, _arg4);
        }
        public function get clipRect():Rectangle{
            return (this._clipRect);
        }
        public function init():void{
            this._shapeCanvas = new Shape();
        }
        public function bake(_arg1:BitmapData):void{
            _arg1.draw(this._shapeCanvas);
            this._shapeCanvas.graphics.clear();
        }

    }
}//package mb.rendering 
﻿package mb.rendering {
    import flash.geom.*;
    import mb.styles.*;
    import mb.symbols.*;

    public class LabelRenderer implements IVectorSymbolRenderer {

        private var _style:LabelStyle;
        private var _dotRenderer:BubbleRenderer;

        public function LabelRenderer(_arg1:Object=null){
        }
        public function setStyle(_arg1:ISymbolStyle):void{
            this._style = LabelStyle(_arg1);
            if (this._style.pointStyle){
                if (!this._dotRenderer){
                    this._dotRenderer = new BubbleRenderer();
                };
                this._dotRenderer.setStyle(this._style.pointStyle);
            } else {
                this._dotRenderer = null;
            };
        }
        public function getVectorSymbol(_arg1:SymbolData):IVectorSymbol{
            var _local2:MapLabel = new MapLabel();
            return (_local2);
        }
        public function updateSymbol(_arg1:IVectorSymbol, _arg2:SymbolData):void{
            var _local3:PointSymbolData;
            var _local4:MapLabel;
            var _local5:Rectangle;
            var _local6:PointStyle;
            _local3 = PointSymbolData(_arg2);
            _local4 = MapLabel(_arg1);
            this._style.setId(_local3.id);
            _local3.visible = this._style.visible;
            if (_local4.visible != _local3.visible){
                _local4.visible = _local3.visible;
            };
            if (!_local3.visible){
                _local3.width = 0;
                _local3.height = 0;
            } else {
                _local4.update(this._style);
                if (this._dotRenderer){
                    _local5 = _local4.getRect(_local4);
                    _local3.useBox = true;
                    _local3.width = _local5.width;
                    _local3.height = _local5.height;
                    _local3.xoff = _local5.x;
                    _local3.yoff = _local5.y;
                    if (this._style.pointStyle){
                        _local6 = this._style.pointStyle;
                        _local6.setId(_local3.id);
                        _local3.size = _local6.size;
                        _local3.shapeStyle.fillAlpha = _local6.fillAlpha;
                        _local3.shapeStyle.fillColor = _local6.fillColor;
                        _local3.refreshCount = -1;
                        _local4.updateDot(this._dotRenderer.getBitmapSymbol(0, 0, _local3));
                    };
                };
            };
        }

    }
}//package mb.rendering 
﻿package mb.rendering {
    import mb.styles.*;
    import mb.shapes.*;
    import mb.maps.*;

    public interface IShapeLayerRenderer extends ILayerRenderer {

        function update(_arg1:int, _arg2:ShapeDataSet=null):void;
        function setStyle(_arg1:IShapeStyle):void;
        function getStyle():ShapeStyle;

    }
}//package mb.rendering 
﻿package mb.rendering {
    import flash.display.*;
    import mb.styles.*;
    import mb.symbols.*;

    public interface IBitmapSymbolRenderer {

        function setStyle(_arg1:ISymbolStyle):void;
        function initSymbols(_arg1:SymbolDataSet, _arg2:Boolean, _arg3:Boolean=true):void;
        function getBitmapSymbol(_arg1:Number, _arg2:Number, _arg3:SymbolData):BitmapSymbol;
        function displaySymbol(_arg1:BitmapData, _arg2:Number, _arg3:Number, _arg4:SymbolData, _arg5:Number=1):void;

    }
}//package mb.rendering 
﻿package mb.rendering {
    import flash.display.*;
    import mb.data.*;
    import mb.*;
    import mb.easing.*;
    import mb.styles.*;
    import mb.shapes.*;
    import mb.maps.*;

    public class ShapeLayerRenderer implements IShapeLayerRenderer {

        private static var _defaults:Object = {
            renderer:null,
            use_pan_optimization:false
        };

        protected var _renderer:ShapeRenderer;
        protected var _map:MapStack;
        protected var _style:ShapeStyle;
        protected var _container:Sprite;
        private var _panContainer:Sprite;
        protected var _activeShapes:ShapeDataSet;
        protected var _rendered:Boolean = false;
        private var _panning:Boolean = false;
        private var _opts:Object;

        public function ShapeLayerRenderer(_arg1:Object=null){
            this._opts = Opts.init(_defaults, _arg1);
            this._style = new ShapeStyle();
            this._style.strokeWeight = 0;
            this._renderer = ((this._opts.renderer) ? this._opts.renderer : new ShapeRenderer());
        }
        public function getStyle():ShapeStyle{
            return (this._style);
        }
        public function setStyle(_arg1:IShapeStyle):void{
            if (!_arg1){
                this._style = new ShapeStyle();
                this._style.strokeWeight = 0;
            } else {
                this._style = ShapeStyle(_arg1);
            };
            this._renderer.setStyle(this._style);
        }
        public function embed(_arg1:Sprite, _arg2:MapStack):void{
            this._container = _arg1;
            var _local3:int = _arg1.parent.getChildIndex(_arg1);
            _arg1.parent.addChildAt((this._panContainer = new Sprite()), _local3);
            this._map = _arg2;
        }
        public function update(_arg1:int, _arg2:ShapeDataSet=null):void{
            var _local7:Boolean;
            var _local8:Array;
            if (!this._container){
                return;
            };
            var _local3:Sprite = this._container;
            var _local4 = !(((_arg1 & C.APPEND) == 0));
            if (((!(_arg2)) || ((_arg2.size() == 0)))){
                if (!_local4){
                    this._activeShapes = null;
                    _local3.graphics.clear();
                };
                return;
            };
            var _local5:int = ((this._activeShapes) ? this._activeShapes.size() : 0);
            var _local6:int = ((_arg2) ? _arg2.size() : 0);
            if ((((_arg1 & C.POSITION)) && (this._opts.use_pan_optimization))){
                _local7 = ((_local5 / _local6) > 1.4);
                if (((!(this._panning)) || (_local7))){
                    this._panning = true;
                    _local3.graphics.clear();
                    this._activeShapes = _arg2;
                } else {
                    if (this._activeShapes){
                        _arg2 = this._activeShapes.mergeSet(_arg2);
                    } else {
                        this._activeShapes = _arg2;
                    };
                };
            } else {
                if (this._panning){
                    this._panning = false;
                };
                if (_local4){
                } else {
                    this._container.graphics.clear();
                    this._activeShapes = _arg2;
                };
            };
            if (_arg2){
                if ((((_arg1 & C.SYMBOLS)) && ((this._style.useZ == true)))){
                    _local8 = [];
                    while (_arg2.hasNext) {
                        this._style.setId(_arg2.nextId);
                        _local8.push(this._style.z);
                    };
                    RecordSort.sortOnIntegerValues(_arg2, _local8, RecordSort.ASCENDING);
                };
                this.renderShapes(_arg2, _local3);
            };
        }
        private function renderShapes(_arg1:ShapeDataSet, _arg2:Sprite):void{
            var _local5:ShapeVector;
            var _local3:MapExtent = this._map.navigation.getExtent();
            var _local4:XY = this._map.navigation.getMapXY();
            while (_arg1.hasNext) {
                _local5 = _arg1.nextShape;
                this._renderer.renderShape(_local5, _local4, _arg2.graphics, _local3);
            };
            if (!this._rendered){
                if (this._style.filter){
                    _arg2.filters = [this._style.filter];
                };
                this._rendered = true;
            };
        }
        public function clear():void{
            if (this._container){
                this._container.graphics.clear();
            };
        }

    }
}//package mb.rendering 
﻿package mb.rendering {
    import flash.display.*;
    import mb.styles.*;
    import mb.maps.*;
    import mb.symbols.*;

    public interface ISymbolLayerRenderer {

        function update(_arg1:int, _arg2:SymbolDataSet=null):void;
        function clear():void;
        function setStyle(_arg1:ISymbolStyle):void;
        function embed(_arg1:Sprite, _arg2:MapStack):void;
        function updateSelection(_arg1:SymbolDataSet):void;
        function clearSelection():void;
        function fetchSymbolById(_arg1:int):IVectorSymbol;

    }
}//package mb.rendering 
﻿package mb.rendering {
    import flash.display.*;
    import mb.*;
    import mb.easing.*;
    import flash.geom.*;
    import mb.styles.*;
    import mb.maps.*;
    import mb.symbols.*;

    public class BitmapSymbolLayerRenderer extends BitmapLayerRenderer implements ISymbolLayerRenderer {

        private var _renderedSet:SymbolDataSet;
        private var _style:PointStyle;
        private var _hoverStyle:ShapeStyle;
        private var _hoverRenderer:BitmapSymbolLayerRenderer;
        private var _useTweening:Boolean = false;
        private var _sizeTween:NumberTween;
        private var _tweenTime:int = 350;
        private var _cachingEnabled:Boolean = true;
        private var _symbolCount:int = 0;
        private var _symbolRenderer:IBitmapSymbolRenderer;
        private var _rect:Rectangle;
        private var _point:Point;
        private var _alphaLayer:BitmapData;

        public function BitmapSymbolLayerRenderer(_arg1:IBitmapSymbolRenderer){
            this._point = new Point(0, 0);
            this._rect = new Rectangle(0, 0, 10, 10);
            this._symbolRenderer = _arg1;
            this._sizeTween = new NumberTween();
            this._alphaLayer = new BitmapData(20, 20, true, 2164260863);
        }
        public function get symbolCount():int{
            return (this._symbolCount);
        }
        public function set cachingEnabled(_arg1:Boolean):void{
            this._cachingEnabled = _arg1;
        }
        public function updateSelection(_arg1:SymbolDataSet):void{
            if (this._hoverRenderer){
                if (this._sizeTween.busy){
                } else {
                    this._hoverRenderer.setStyle(this.getHoverStyle(PointStyle(this._style)));
                    this._hoverRenderer.update(C.SYMBOLS, _arg1);
                };
            };
        }
        public function clearSelection():void{
            if (this._hoverRenderer){
                this._hoverRenderer.clear();
            };
        }
        private function getHoverStyle(_arg1:PointStyle):HoverPointStyle{
            return (new HoverPointStyle(_arg1, _arg1.hoverStyle));
        }
        public function setStyle(_arg1:ISymbolStyle):void{
            this._style = PointStyle(_arg1);
            if (((this._style.hoverStyle) && (this._hoverRenderer))){
                this._hoverRenderer.setStyle(this.getHoverStyle(PointStyle(this._style)));
            };
        }
        override public function embed(_arg1:Sprite, _arg2:MapStack):void{
            var _local3:HoverPointStyle;
            var _local4:Object;
            super.embed(_arg1, _arg2);
            if (this._style.hoverStyle){
                _local3 = new HoverPointStyle(PointStyle(this._style), this._style.hoverStyle);
                _local4 = {
                    use_caching:true,
                    hover_mode:true
                };
                this._hoverRenderer = new BitmapSymbolLayerRenderer(new BubbleRenderer(_local4));
                this._hoverRenderer.setStyle(this.getHoverStyle(PointStyle(this._style)));
                this._hoverRenderer.embed(_arg1, _arg2);
                this._hoverRenderer.cachingEnabled = false;
            };
        }
        public function update(_arg1:int, _arg2:SymbolDataSet=null):void{
            if (this._sizeTween.busy){
                this._sizeTween.stop();
            };
            var _local3 = !(((_arg1 & C.APPEND) == 0));
            if (!_arg2){
                if (((!(this._renderedSet)) || (_local3))){
                    return;
                };
                _arg2 = this._renderedSet;
            };
            if (!_container){
                return;
            };
            if (_canvas.visible == false){
                _canvas.visible = true;
            };
            var _local4:XY = _map.navigation.getMapXY();
            _canvas.x = -(_local4.xPanShift);
            _canvas.y = -(_local4.yPanShift);
            var _local5:PointStyle = PointStyle(this._style);
            var _local6:Boolean = ((((_arg1 & C.POSITION) == 0)) && ((_local3 == false)));
            var _local7:Number = _map.navigation.scale;
            _local5.updateScale(_local7);
            this._symbolRenderer.setStyle(this._style);
            this._symbolRenderer.initSymbols(_arg2, _local6, true);
            if (_local3){
                this._renderedSet = _arg2.mergeSet(this._renderedSet);
            } else {
                this._renderedSet = _arg2;
            };
            this.renderSymbols(_arg2, _local4, !(_local3));
            if (((this._hoverRenderer) && ((((_arg1 & C.SCALE)) || ((_arg1 & C.POSITION)))))){
                this._hoverRenderer.update(_arg1);
            };
        }
        private function renderSymbols(_arg1:SymbolDataSet, _arg2:XY, _arg3:Boolean=true):void{
            var _local4:Rectangle;
            var _local7:SymbolData;
            var _local8:Point;
            var _local9:Number;
            var _local10:Number;
            var _local11:PaletteMap;
            checkCanvasSize();
            _canvasData.lock();
            if ((((this.symbolCount > 0)) && ((_arg3 == true)))){
                clearCanvas();
            };
            var _local5:ShapeStyle = this._style.clone();
            while (_arg1.hasNext) {
                _local7 = _arg1.nextSymbol;
                if (!_local7.visible){
                } else {
                    if (_local7.size == 0){
                    } else {
                        if (isNaN(_local7.size)){
                        } else {
                            _local8 = _arg2.projToScreen(_local7.x, _local7.y, false);
                            _local9 = _local8.x;
                            _local10 = _local8.y;
                            this._symbolRenderer.displaySymbol(_canvasData, _local9, _local10, _local7);
                        };
                    };
                };
            };
            this._symbolCount = _arg1.size();
            _canvasData.unlock();
            var _local6:Point = new Point(0, 0);
            _local4 = new Rectangle(0, 0, _canvasData.width, _canvasData.height);
            if (this._style.filter){
                _canvasData.applyFilter(_canvasData, _local4, _local6, this._style.filter);
            };
            if (this._style.paletteMap){
                _local11 = this._style.paletteMap;
                _canvasData.paletteMap(_canvasData, _local4, _local6, _local11.r, _local11.g, _local11.b, _local11.a);
            };
        }
        private function startSizeTween(_arg1:SymbolDataSet):void{
            var _local2:SymbolData;
            while (_arg1.hasNext) {
                _local2 = _arg1.nextSymbol;
                _local2.nextSize = _local2.size;
            };
            this._sizeTween.start(this._tweenTime, TweenMethods.easeOutQuadratic, this.onSizeTween, 0, 1);
        }
        private function onSizeTween(_arg1:Number, _arg2:Boolean):void{
            var _local4:SymbolData;
            var _local5:Number;
            var _local6:Number;
            var _local7:Number;
            while (this._renderedSet.hasNext) {
                _local4 = this._renderedSet.nextSymbol;
                _local5 = _local4.nextSize;
                _local6 = _local4.prevSize;
                _local7 = 1;
                _local4.size = _local5;
                if ((((_local5 > 0)) && ((_local6 == 0)))){
                    _local4.fade = _arg1;
                } else {
                    if ((((_local6 > 0)) && ((_local5 == 0)))){
                        _local4.fade = (1 - _arg1);
                    } else {
                        _local4.size = this.getTweenSize(_arg1, _local4);
                    };
                };
                if (_arg2){
                    _local4.fade = 1;
                };
            };
            var _local3:XY = _map.navigation.getMapXY();
            this.renderSymbols(this._renderedSet, _local3);
        }
        private function getTweenSize(_arg1:Number, _arg2:SymbolData):Number{
            var _local3:Number = ((_arg2.prevSize * (1 - _arg1)) + (_arg2.nextSize * _arg1));
            return (_local3);
        }
        public function clear():void{
            if (this._symbolCount > 0){
                clearCanvas();
                _canvas.visible = false;
                this._renderedSet = null;
                this._symbolCount = 0;
            };
        }
        public function fetchSymbolById(_arg1:int):IVectorSymbol{
            return (null);
        }

    }
}//package mb.rendering 
﻿package mb.rendering {
    import flash.display.*;
    import mb.*;
    import mb.easing.*;
    import flash.geom.*;
    import mb.styles.*;
    import flash.utils.*;
    import mb.maps.*;
    import mb.symbols.*;

    public class SymbolLayerRenderer implements ISymbolLayerRenderer {

        private static const _defaults:Object = {vertical_sort:false};

        private var _style:ISymbolStyle;
        private var _container:Sprite;
        private var _map:MapStack;
        protected var _renderedIndex:Dictionary;
        private var _recycleIndex:Dictionary;
        protected var _renderedSet:SymbolDataSet;
        protected var _symbolRenderer:IVectorSymbolRenderer;
        protected var _opts:Object;

        public function SymbolLayerRenderer(_arg1:IVectorSymbolRenderer, _arg2:Object=null){
            this._opts = Opts.init(_defaults, _arg2);
            this._symbolRenderer = _arg1;
            this._renderedIndex = new Dictionary();
            this._recycleIndex = new Dictionary();
        }
        private function recycleSymbols(_arg1:SymbolDataSet, _arg2:Object=null):void{
            var _local3:int;
            var _local4:IVectorSymbol;
            while (_arg1.hasNext) {
                _local3 = _arg1.nextId;
                if (this._renderedIndex[_local3]){
                    _local4 = this._renderedIndex[_local3];
                    delete this._renderedIndex[_local3];
                    this._container.removeChild(_local4.container);
                    this._recycleIndex[_local3] = _local4;
                };
            };
        }
        public function update(_arg1:int, _arg2:SymbolDataSet=null):void{
            var _local3:SymbolDataSet;
            var _local4:SymbolDataSet;
            if (!this._container){
                return;
            };
            if (_arg2 != null){
                if (this._renderedSet){
                    _local3 = _arg2.subtractSet(this._renderedSet);
                    _local4 = this._renderedSet.subtractSet(_arg2);
                    this.recycleSymbols(_local4);
                    this._renderedSet = this._renderedSet.subtractSet(_local4);
                } else {
                    _local3 = _arg2;
                };
            };
            if (this._renderedSet){
                if ((_arg1 & C.SCALE)){
                    this.placeSymbols(this._renderedSet);
                    this.refreshSymbols(this._renderedSet);
                } else {
                    if ((_arg1 & C.STYLE)){
                        this.refreshSymbols(this._renderedSet);
                    };
                };
            };
            if (_arg2 != null){
                this.createSymbols(_local3);
                this.placeSymbols(_local3);
                this._renderedSet = _arg2;
            };
        }
        private function placeSymbols(_arg1:SymbolDataSet):void{
            var _local3:SymbolData;
            var _local4:int;
            var _local5:DisplayObject;
            var _local6:Point;
            var _local2:XY = this._map.navigation.getMapXY();
            while (_arg1.hasNext) {
                _local3 = _arg1.nextSymbol;
                _local4 = _local3.id;
                _local5 = this._renderedIndex[_local4].container;
                if (!_local5){
                };
                _local6 = _local2.projToLayer(_local3.x, _local3.y);
                _local5.x = _local6.x;
                _local5.y = _local6.y;
            };
        }
        private function createSymbols(_arg1:SymbolDataSet):void{
            var _local2:IVectorSymbol;
            var _local3:Array;
            var _local4:Array;
            var _local5:Array;
            var _local6:Array;
            var _local7:int;
            var _local8:SymbolData;
            var _local9:int;
            if (this._opts.vertical_sort){
                _local3 = [];
                while (_arg1.hasNext) {
                    _local8 = _arg1.nextSymbol;
                    _local3.push(_local8.y);
                };
                _local4 = _local3.sort(((Array.RETURNINDEXEDARRAY | Array.NUMERIC) | Array.DESCENDING));
                _local5 = _arg1.getIds();
                _local6 = [];
                _local7 = 0;
                while (_local7 < _local4.length) {
                    _local6[_local7] = _local5[_local4[_local7]];
                    _local7++;
                };
                _arg1.replaceIds(_local6);
            };
            while (_arg1.hasNext) {
                _local8 = _arg1.nextSymbol;
                _local9 = _local8.id;
                if (this._renderedIndex[_local9]){
                } else {
                    if (this._recycleIndex[_local9]){
                        _local2 = this._recycleIndex[_local9];
                        this._renderedIndex[_local9] = _local2;
                        delete this._recycleIndex[_local9];
                    } else {
                        _local2 = this._symbolRenderer.getVectorSymbol(_local8);
                        this._renderedIndex[_local9] = _local2;
                    };
                    this._container.addChild(_local2.container);
                };
            };
            this.refreshSymbols(_arg1);
        }
        private function refreshSymbols(_arg1:SymbolDataSet):void{
            var _local2:SymbolData;
            var _local3:int;
            var _local4:IVectorSymbol;
            while (_arg1.hasNext) {
                _local2 = _arg1.nextSymbol;
                _local3 = _local2.id;
                if (!this._renderedIndex[_local3]){
                } else {
                    _local4 = this._renderedIndex[_local3];
                    this._symbolRenderer.updateSymbol(_local4, _local2);
                };
            };
        }
        public function clear():void{
        }
        public function setStyle(_arg1:ISymbolStyle):void{
            this._symbolRenderer.setStyle(_arg1);
            this._style = _arg1;
        }
        public function embed(_arg1:Sprite, _arg2:MapStack):void{
            this._container = _arg1;
            this._map = _arg2;
        }
        public function updateSelection(_arg1:SymbolDataSet):void{
        }
        public function clearSelection():void{
        }
        public function fetchSymbolById(_arg1:int):IVectorSymbol{
            if (this._renderedIndex[_arg1]){
                return (this._renderedIndex[_arg1]);
            };
            return (null);
        }

    }
}//package mb.rendering 
﻿package mb.rendering {
    import flash.display.*;
    import flash.events.*;
    import mb.*;
    import mb.easing.*;
    import mb.shapes.*;
    import mb.maps.*;

    public class ShapeOverlayLayerRenderer extends ShapeLayerRenderer {

        private var _visibleSet:ShapeDataSet;
        private var _canvasPool:Array;
        private var _fadingCanvasIndex:Array;
        private var _activeCanvasIndex:Array;
        private var _fadeOnTime:int = 180;
        private var _fadeOutTime:int = 200;

        public function ShapeOverlayLayerRenderer(_arg1:Object=null){
            super(_arg1);
            this._canvasPool = [];
            this._fadingCanvasIndex = [];
            this._activeCanvasIndex = [];
        }
        private function fetchCanvas():Shape{
            var _local1:Shape;
            if (this._canvasPool.length > 1){
                _local1 = this._canvasPool.pop();
            } else {
                _local1 = new Shape();
                _local1.addEventListener(Fader.FADE_OUT, this.handleFadeOut);
            };
            _local1.visible = false;
            _container.addChild(_local1);
            return (_local1);
        }
        private function recycleOldCanvas(_arg1:Shape):void{
            var _local2:Object;
            var _local3:int;
            _arg1.graphics.clear();
            _arg1.parent.removeChild(_arg1);
            this._canvasPool.push(_arg1);
            for (_local2 in this._fadingCanvasIndex) {
                _local3 = int(_local2);
                if (_local3 == 0){
                };
                if (this._fadingCanvasIndex[_local3] == _arg1){
                    delete this._fadingCanvasIndex[_local3];
                    if (this._visibleSet){
                        this._visibleSet.removeId(_local3);
                    };
                    return;
                };
            };
        }
        private function handleFadeOut(_arg1:Event):void{
            var _local2:Shape = Shape(_arg1.target);
            this.recycleOldCanvas(_local2);
        }
        override public function update(_arg1:int, _arg2:ShapeDataSet=null):void{
            var _local4:int;
            var _local5:Shape;
            var _local6:int;
            if (!_container){
                return;
            };
            var _local3:ShapeDataSet;
            if (this._visibleSet){
                _local3 = this._visibleSet.subtractSet(_arg2);
            };
            if (_local3){
                while (_local3.hasNext) {
                    _local4 = _local3.nextId;
                    if (this._activeCanvasIndex[_local4] !== undefined){
                        _local5 = this._activeCanvasIndex[_local4];
                        this._fadingCanvasIndex[_local4] = _local5;
                        delete this._activeCanvasIndex[_local4];
                        Fader.hideObject(_local5, this._fadeOutTime);
                    };
                };
            };
            if ((((_arg1 & C.SYMBOLS)) && (_arg2))){
                while (_arg2.hasNext) {
                    _local6 = _arg2.nextId;
                    if (this._fadingCanvasIndex[_local6] !== undefined){
                        _local5 = this._fadingCanvasIndex[_local6];
                        Fader.showObject(_local5, this._fadeOnTime);
                        this._activeCanvasIndex[_local6] = _local5;
                        delete this._fadingCanvasIndex[_local6];
                    };
                };
            };
            if (this._visibleSet){
                this._visibleSet.mergeSet(_arg2);
            } else {
                this._visibleSet = _arg2;
            };
            if (this._visibleSet){
                this.renderVisibleShapes();
            };
        }
        protected function renderVisibleShapes():void{
            var _local3:ShapeVector;
            var _local4:int;
            var _local5:Shape;
            if (!this._visibleSet){
                return;
            };
            var _local1:XY = _map.navigation.getMapXY();
            var _local2:MapExtent = _map.navigation.getExtent();
            while (this._visibleSet.hasNext) {
                _local3 = this._visibleSet.nextShape;
                if (!_local3){
                } else {
                    _local4 = _local3.id;
                    if (this._activeCanvasIndex[_local4] !== undefined){
                        _local5 = this._activeCanvasIndex[_local4];
                        if (this._fadingCanvasIndex[_local4] !== undefined){
                        };
                    } else {
                        if (this._fadingCanvasIndex[_local4] !== undefined){
                            _local5 = this._fadingCanvasIndex[_local4];
                        } else {
                            _local5 = this.fetchCanvas();
                            this._activeCanvasIndex[_local4] = _local5;
                            Fader.showObject(_local5, this._fadeOnTime);
                        };
                    };
                    _local5.graphics.clear();
                    _renderer.renderShape(_local3, _local1, _local5.graphics, _local2);
                };
            };
            if (!_rendered){
                if (_style.filter){
                    _container.filters = [_style.filter];
                };
                _rendered = true;
            };
        }
        override public function clear():void{
            var _local3:Object;
            var _local4:Shape;
            var _local5:int;
            if (((!(this._visibleSet)) || ((this._visibleSet.size() == 0)))){
                return;
            };
            var _local1:Boolean;
            if (!_local1){
                for each (_local4 in this._fadingCanvasIndex) {
                    this.recycleOldCanvas(_local4);
                };
            };
            var _local2:Array = [];
            for (_local3 in this._activeCanvasIndex) {
                _local5 = int(_local3);
                _local4 = this._activeCanvasIndex[_local5];
                if (_local1){
                    if (this._fadingCanvasIndex[_local5] !== undefined){
                    };
                    _local2.push(_local5);
                    this._fadingCanvasIndex[_local5] = _local4;
                    delete this._activeCanvasIndex[_local5];
                    Fader.hideObject(_local4, this._fadeOutTime);
                } else {
                    this._fadingCanvasIndex[_local5] = _local4;
                    this.recycleOldCanvas(_local4);
                };
            };
            if (!_local1){
                this._fadingCanvasIndex = [];
                this._visibleSet = null;
            };
            this._activeCanvasIndex = [];
        }

    }
}//package mb.rendering 
﻿package mb.rendering {
    import mb.styles.*;
    import mb.symbols.*;

    public interface IVectorSymbolRenderer {

        function setStyle(_arg1:ISymbolStyle):void;
        function getVectorSymbol(_arg1:SymbolData):IVectorSymbol;
        function updateSymbol(_arg1:IVectorSymbol, _arg2:SymbolData):void;

    }
}//package mb.rendering 
﻿package mb.rendering {
    import flash.display.*;
    import mb.data.*;
    import mb.*;
    import flash.geom.*;
    import mb.styles.*;
    import mb.symbols.*;
    import mb.utils.*;

    public class BubbleRenderer implements IBitmapSymbolRenderer {

        protected static const _defaults:Object = {
            max_cached_size:300,
            sort_symbols:true,
            reverse_sort:false,
            use_stacking_order:false,
            enhance_precision:true,
            identical_symbols:false,
            max_enhanced_size:100,
            use_caching:true,
            apply_style:true,
            hover_mode:false
        };

        private static var _alphaTable:Array = [];

        protected var _style:PointStyle;
        private var _firstSymbol:BitmapSymbol;
        protected var _bitmapIndex:Array;
        protected var _opts:Object;
        private var _point:Point;
        private var _rect:Rectangle;
        private var _symbolCanvas:Shape;
        private var _symbolContainer:Sprite;
        private var _allSame:Boolean;
        private var _useCaching:Boolean;
        private var _enhancePrecision:Boolean;
        private var _maxEnhancedSize:int;
        private var _maxCachedSize:int;
        private var _styleKeyIndex:Array;
        private var _styleCount:int = 0;
        private var _colorKeyIndex:Array;
        private var _colorCount:int = 0;
        private var _refreshCount:int = 0;
        private var _hoverMode:Boolean = false;

        public function BubbleRenderer(_arg1:Object=null){
            this._point = new Point();
            this._rect = new Rectangle();
            this._styleKeyIndex = [];
            this._colorKeyIndex = [];
            this._bitmapIndex = [];
            this._opts = Opts.init(_defaults, _arg1);
            this._hoverMode = this._opts.hover_mode;
            this._symbolCanvas = new Shape();
            this._symbolContainer = new Sprite();
            this._symbolContainer.addChild(this._symbolCanvas);
            this._allSame = this._opts.identical_symbols;
            this._maxCachedSize = this._opts.max_cached_size;
            this._enhancePrecision = this._opts.enhance_precision;
            this._useCaching = this._opts.use_caching;
            this._maxEnhancedSize = this._opts.max_enhanced_size;
        }
        protected static function getAlphaLayer(_arg1:Number, _arg2:int):BitmapData{
            var _local3:int = (int(((_arg1 * 0xFF) / 16)) * 16);
            var _local4:int = _local3;
            var _local5:BitmapData = _alphaTable[_local4];
            if (((!(_local5)) || ((_local5.width < _arg2)))){
                _local5 = new BitmapData(_arg2, _arg2, true, (_local3 << 24));
                _alphaTable[_local4] = _local5;
            };
            return (_local5);
        }

        public function setStyle(_arg1:ISymbolStyle):void{
            this._style = PointStyle(_arg1);
        }
        public function renderSymbols(_arg1:SymbolDataSet, _arg2:BitmapData):void{
        }
        public function initSymbols(_arg1:SymbolDataSet, _arg2:Boolean, _arg3:Boolean=true):void{
            var _local7:Array;
            var _local8:PointSymbolData;
            var _local9:Number;
            var _local10:int;
            if (_arg2){
                this._refreshCount++;
            };
            if (!this._opts.apply_style){
                return;
            };
            var _local4:Array = [];
            var _local5:Boolean = ((((this._opts.use_stacking_order) || (this._style.useZ))) && (_arg3));
            var _local6:Boolean = ((((((this._opts.sort_symbols) && (!(this._allSame)))) && (!(_local5)))) && (_arg3));
            if (this._allSame){
                this._firstSymbol = null;
                this._style.setId(0);
            };
            if (_local5){
                _local7 = [];
            };
            while (_arg1.hasNext) {
                _local8 = (_arg1.nextSymbol as PointSymbolData);
                if (!this._allSame){
                    this._style.setId(_local8.id);
                };
                _local9 = this._style.size;
                _local9 = (_local9 * this._style.symbolScale);
                if ((((((_local9 == 0)) && ((_local8.prevSize == 0)))) || ((this._style.visible == false)))){
                    _local8.visible = false;
                } else {
                    _local8.fade = 1;
                    _local8.visible = true;
                    _local8.prevSize = _local8.size;
                    _local8.size = _local9;
                    if (_local9 > 0){
                        this._style.decorateShapeStyle(_local8.shapeStyle);
                    };
                    if (_local5){
                        _local7.push(this._style.z);
                    } else {
                        if (_local6){
                            _local4.push(_local9);
                        };
                    };
                };
            };
            if (_local5){
                RecordSort.sortOnIntegerValues(_arg1, _local7, RecordSort.ASCENDING);
            } else {
                if (_local6){
                    _local10 = ((this._opts.reverse_sort) ? RecordSort.ASCENDING : RecordSort.DESCENDING);
                    RecordSort.sortOnArray(_arg1, _local4, _local10);
                };
            };
        }
        public function getKey(_arg1:PointSymbolData, _arg2:Number, _arg3:Number):uint{
            var _local4:ShapeStyle = _arg1.shapeStyle;
            var _local5:int = _local4.fillColor;
            var _local6:int = _local4.strokeColor;
            var _local7:int = (_local4.fillAlpha * 15);
            var _local8:int = (_local4.strokeAlpha * 15);
            var _local9:int = _local4.strokeWeight;
            var _local10:int = this._colorKeyIndex[_local5];
            if (_local10 == 0){
                _local10 = ++this._colorCount;
                this._colorKeyIndex[_local5] = _local10;
            };
            var _local11:int = this._colorKeyIndex[_local6];
            if (_local11 == 0){
                _local11 = ++this._colorCount;
                this._colorKeyIndex[_local6] = _local11;
            };
            var _local12:int = ((((((((_local10 << 4) + _local8) << 4) + _local7) << 6) + _local11) << 6) + _local9);
            var _local13:int = this._styleKeyIndex[_local12];
            if (_local13 == 0){
                _local13 = ++this._styleCount;
                this._styleKeyIndex[_local12] = _local13;
            };
            var _local14:int = (_arg2 * 4);
            var _local15:int = (_arg3 * 4);
            var _local16:int = (_arg1.size * 2);
            var _local17:uint = ((((((_local13 << 2) + _local14) << 2) + _local15) << 8) + _local16);
            return (_local17);
        }
        public function displaySymbol(_arg1:BitmapData, _arg2:Number, _arg3:Number, _arg4:SymbolData, _arg5:Number=1):void{
            var _local6:BitmapSymbol = this.getBitmapSymbol(_arg2, _arg3, _arg4);
            this._point.x = _local6.xIns;
            this._point.y = _local6.yIns;
            this._rect.width = _local6.width;
            this._rect.height = _local6.height;
            _arg5 = _arg4.fade;
            var _local7:PointSymbolData = PointSymbolData(_arg4);
            var _local8:BitmapData;
            if (_arg5 < 1){
                _local8 = getAlphaLayer(_arg5, Math.max(_local6.width, _local6.height));
            };
            _arg1.copyPixels(_local6.bitmap, this._rect, this._point, _local8, null, true);
        }
        public function getBitmapSymbol(_arg1:Number, _arg2:Number, _arg3:SymbolData):BitmapSymbol{
            var _local7:BitmapSymbol;
            var _local9:ShapeStyle;
            var _local10:Number;
            var _local11:Number;
            var _local12:Boolean;
            var _local13:Boolean;
            var _local14:uint;
            var _local4:int = _arg1;
            var _local5:int = _arg2;
            var _local6:PointSymbolData = PointSymbolData(_arg3);
            var _local8:Number = _local6.size;
            if (((((_local6.bmp) && ((_local6.refreshCount == this._refreshCount)))) && ((this._hoverMode == false)))){
                _local7 = _local6.bmp;
            } else {
                if (_local8 > 12){
                    _local8 = int((_local8 + 0.5));
                } else {
                    _local8 = (int(((_local8 * 2) + 0.5)) * 0.5);
                };
                _local9 = _local6.shapeStyle;
                _local10 = (_arg1 - _local4);
                _local11 = (_arg2 - _local5);
                if (this._allSame){
                    if (!this._firstSymbol){
                        _local11 = 0.5;
                        _local10 = _local11;
                        this._firstSymbol = this.renderBitmapSymbol(_local8, _local9, _local10, _local11);
                    };
                    _local7 = this._firstSymbol;
                } else {
                    _local12 = ((this._useCaching) && ((_local8 <= this._maxCachedSize)));
                    if (((this._enhancePrecision) && ((_local8 <= this._maxEnhancedSize)))){
                        _local10 = (((_local10 > 0.5)) ? 0.75 : 0.25);
                        _local11 = (((_local11 < 0.5)) ? 0.25 : 0.75);
                    } else {
                        if (this._enhancePrecision){
                            _local10 = 0.5;
                            _local11 = 0.5;
                        };
                    };
                    _local13 = false;
                    _local14 = 0;
                    if (_local12){
                        _local14 = this.getKey(_local6, _local10, _local11);
                        if (this._bitmapIndex[_local14]){
                            _local7 = this._bitmapIndex[_local14];
                            _local13 = true;
                        };
                    };
                    _local6.cacheKey = _local14;
                    if (!_local13){
                        _local7 = this.renderBitmapSymbol(_local8, _local9, _local10, _local11);
                        if (_local12){
                            this._bitmapIndex[_local14] = _local7;
                        };
                    };
                    if (this._hoverMode == false){
                        _local6.bmp = _local7;
                        _local6.refreshCount = this._refreshCount;
                    };
                };
            };
            _local7.xIns = (_local4 - _local7.xOff);
            _local7.yIns = (_local5 - _local7.yOff);
            return (_local7);
        }
        protected function renderBitmapSymbol(_arg1:Number, _arg2:ShapeStyle, _arg3:Number=0, _arg4:Number=0):BitmapSymbol{
            this.drawVectorSymbol(this._symbolCanvas.graphics, _arg1, _arg2, _arg3, _arg4);
            var _local5:Rectangle = this._symbolCanvas.getBounds(this._symbolCanvas);
            var _local6:int = Math.floor(_local5.left);
            var _local7:int = Math.floor(_local5.top);
            var _local8:int = Math.ceil(_local5.right);
            var _local9:int = Math.ceil(_local5.bottom);
            var _local10:int = -(_local6);
            var _local11:int = -(_local7);
            this._symbolCanvas.x = _local10;
            this._symbolCanvas.y = _local11;
            var _local12:int = (_local8 - _local6);
            var _local13:int = (_local9 - _local7);
            var _local14:BitmapData = new BitmapData(_local12, _local13, true, 0xFFFFFF);
            _local14.draw(this._symbolContainer);
            var _local15:BitmapSymbol = new BitmapSymbol();
            _local15.bitmap = _local14;
            _local15.width = _local12;
            _local15.height = _local13;
            _local15.xOff = _local10;
            _local15.yOff = _local11;
            return (_local15);
        }
        public function drawVectorSymbol(_arg1:Graphics, _arg2:Number, _arg3:ShapeStyle, _arg4:Number, _arg5:Number):void{
            _arg1.clear();
            var _local6:Number = (_arg2 * 0.5);
            if (_arg3.strokeAlpha > 0.2){
                _local6 = (_local6 + (_arg3.strokeWeight * 0.5));
            };
            _arg3.beginDrawing(_arg1);
            _arg1.drawCircle(_arg4, _arg5, _local6);
        }
        public function getVectorSymbol(_arg1:Number, _arg2:ShapeStyle, _arg3:Number=0, _arg4:Number=0):IVectorSymbol{
            return (null);
        }

    }
}//package mb.rendering 
﻿package mb.rendering {
    import flash.display.*;
    import flash.geom.*;
    import mb.maps.*;

    public class BitmapLayerRenderer {

        protected var _canvasData:BitmapData;
        protected var _canvasRect:Rectangle;
        protected var _canvas:Bitmap;
        protected var _map:MapStack;
        protected var _container:Sprite;

        public function embed(_arg1:Sprite, _arg2:MapStack):void{
            this._container = _arg1;
            this._map = _arg2;
            this._canvas = new Bitmap();
            this._canvas.visible = false;
            this._canvas.pixelSnapping = PixelSnapping.ALWAYS;
            this._container.addChild(this._canvas);
            this.initCanvas(this._map.width, this._map.height);
        }
        public function initCanvas(_arg1:int, _arg2:int):void{
            if (_arg1 < 1){
                _arg1 = 1;
            };
            if (_arg2 < 1){
                _arg2 = 1;
            };
            this._canvasData = new BitmapData(_arg1, _arg2, true, 0xFFFFFF);
            this._canvasRect = new Rectangle(0, 0, _arg1, _arg2);
            this._canvas.bitmapData = this._canvasData;
        }
        public function checkCanvasSize():void{
            if (((((this._map) && (!((this._map.width == this._canvasData.width))))) || (!((this._map.height == this._canvasData.height))))){
                this.initCanvas(this._map.width, this._map.height);
            };
        }
        public function clearCanvas():void{
            this._canvasData.fillRect(this._canvasRect, 0xFFFF00);
        }

    }
}//package mb.rendering 
﻿package mb {
    import flash.display.*;

    public interface ILiquidChart {

        function getAlignmentClip():DisplayObject;
        function updateSize():void;

    }
}//package mb 
﻿package mb.popups {
    import flash.display.*;
    import mb.*;
    import flash.geom.*;
    import mb.styles.*;

    public class PopupFrameWithTail extends ShapeStyle implements IPopupFrame {

        public var tailLength:int = 10;
        public var tailWidth:int = 13;
        public var minTailDistance:int = 0;
        public var minSize:int = 4;
        public var cornerRadius:int = 0;
        public var hitMargin:int = 0;

        public function PopupFrameWithTail(){
            setFill(0xFFFFFF, 1);
            setStroke(1, 0xBBBBBB, 1);
        }
        public function updateFrame(_arg1:Graphics, _arg2:Rectangle, _arg3:Number=0, _arg4:Number=0):void{
            _arg1.clear();
            if ((((_arg2.width < this.minSize)) || ((_arg2.height < this.minSize)))){
                return;
            };
            beginDrawing(_arg1, true);
            var _local5:String = C.S;
            if (_arg2.bottom <= _arg4){
                _local5 = C.N;
            } else {
                if (_arg2.right < _arg3){
                    _local5 = C.W;
                } else {
                    if (_arg2.left > _arg3){
                        _local5 = C.E;
                    };
                };
            };
            _arg2 = this.adjustRect(_arg2);
            var _local6:Array = this.initTail(_local5, _arg2, _arg3, _arg4);
            var _local7 = (_local6.length == 3);
            var _local8 = (this.cornerRadius > 0);
            var _local9:Number = this.cornerRadius;
            var _local10:Array = [new Point(_arg2.left, _arg2.top), new Point(_arg2.right, _arg2.top), new Point(_arg2.right, _arg2.bottom), new Point(_arg2.left, _arg2.bottom)];
            var _local11:Number = _arg2.left;
            var _local12:Number = _arg2.top;
            _arg1.moveTo(_local11, (_local12 + _local9));
            if (_local8){
                _arg1.curveTo(_local11, _local12, (_local11 + _local9), _local12);
            };
            if ((((_local5 == C.S)) && (_local7))){
                this.drawPolylineSection(_arg1, [_local6[0], _local6[1], _local6[2]]);
            };
            _local11 = _arg2.right;
            _arg1.lineTo((_local11 - _local9), _local12);
            if (_local8){
                _arg1.curveTo(_local11, _local12, _local11, (_local12 + _local9));
            };
            if ((((_local5 == C.W)) && (_local7))){
                this.drawPolylineSection(_arg1, [_local6[0], _local6[1], _local6[2]]);
            };
            _local12 = _arg2.bottom;
            _arg1.lineTo(_local11, (_local12 - _local9));
            if (_local8){
                _arg1.curveTo(_local11, _local12, (_local11 - _local9), _local12);
            };
            if ((((_local5 == C.N)) && (_local7))){
                this.drawPolylineSection(_arg1, [_local6[0], _local6[1], _local6[2]]);
            };
            _local11 = _arg2.left;
            _arg1.lineTo((_local11 + _local9), _local12);
            if (_local8){
                _arg1.curveTo(_local11, _local12, _local11, (_local12 - _local9));
            };
            if ((((_local5 == C.E)) && (_local7))){
                this.drawPolylineSection(_arg1, [_local6[0], _local6[1], _local6[2]]);
            };
            _local12 = _arg2.top;
            _arg1.lineTo(_local11, (_local12 + _local9));
            _arg1.endFill();
        }
        private function drawPolygon(_arg1:Graphics, _arg2:Array):void{
            var _local3:Point = _arg2[(_arg2.length - 1)];
            _arg1.moveTo(_local3.x, _local3.y);
            this.drawPolylineSection(_arg1, _arg2);
        }
        private function drawPolylineSection(_arg1:Graphics, _arg2:Array):void{
            var _local4:Point;
            var _local3:int;
            while (_local3 < _arg2.length) {
                _local4 = _arg2[_local3];
                _arg1.lineTo(_local4.x, _local4.y);
                _local3++;
            };
        }
        private function adjustRect(_arg1:Rectangle):Rectangle{
            var _local2:int;
            _arg1.x = (_arg1.x - 1);
            _arg1.y = (_arg1.y - 1);
            _arg1.width = (_arg1.width + 1);
            _arg1.height = (_arg1.height + 1);
            if (this.cornerRadius > 0){
                if (_arg1.width < (this.cornerRadius * 2)){
                    _local2 = Math.ceil((this.cornerRadius - (_arg1.width * 0.5)));
                    _arg1.x = (_arg1.x - _local2);
                    _arg1.width = (_arg1.width + (_local2 * 2));
                };
                if (_arg1.height < (this.cornerRadius * 2)){
                    _local2 = Math.ceil((this.cornerRadius - (_arg1.height * 0.5)));
                    _arg1.y = (_arg1.y - _local2);
                    _arg1.height = (_arg1.height + (_local2 * 2));
                };
            };
            return (_arg1);
        }
        private function initTail(_arg1:String, _arg2:Rectangle, _arg3:Number, _arg4:Number):Array{
            var _local5:Number = 0;
            var _local6:Number = 0;
            var _local7:Number = 0;
            var _local8:Number = 0;
            var _local9:Number = 0;
            var _local10:Number = 0;
            var _local11:int;
            if ((((_arg1 == C.N)) || ((_arg1 == C.S)))){
                _local7 = (_arg3 - (this.tailWidth / 2));
                _local9 = (_local7 + this.tailWidth);
                _local5 = _arg3;
                if (((((_arg2.x + this.cornerRadius) > _local7)) || ((((_arg2.x + _arg2.width) - this.cornerRadius) < _local9)))){
                    return ([]);
                };
                if (_arg1 == C.N){
                    _local10 = _arg2.bottom;
                    _local8 = _local10;
                    _local6 = (_local8 + this.tailLength);
                    _local11 = -(_local6);
                } else {
                    _local10 = _arg2.top;
                    _local8 = _local10;
                    _local6 = (_local8 - this.tailLength);
                    _local11 = _local6;
                };
            } else {
                _local8 = (_arg4 - (this.tailWidth / 2));
                _local10 = (_local8 + this.tailWidth);
                _local6 = _arg4;
                if (((((_arg2.y + this.cornerRadius) > _local8)) || ((((_arg2.y + _arg2.height) - this.cornerRadius) < _local10)))){
                    return ([]);
                };
                if (_arg1 == C.W){
                    _local9 = _arg2.right;
                    _local7 = _local9;
                    _local5 = (_local7 + this.tailLength);
                    _local11 = -(_local5);
                } else {
                    _local9 = _arg2.left;
                    _local7 = _local9;
                    _local5 = (_local7 - this.tailLength);
                    _local11 = _local5;
                };
            };
            if (_local11 < this.minTailDistance){
                return ([]);
            };
            var _local12:Array = [new Point(_local7, _local8), new Point(_local5, _local6), new Point(_local9, _local10)];
            if ((((_arg1 == C.N)) || ((_arg1 == C.E)))){
                _local12.reverse();
            };
            return (_local12);
        }

    }
}//package mb.popups 
﻿package mb.popups {
    import flash.display.*;
    import flash.text.*;
    import flash.events.*;
    import mb.*;
    import mb.easing.*;
    import flash.geom.*;
    import mb.maps.*;

    public class PopupDisplay extends Popup {

        private static var _PopupDisplayDefaults:Object = {
            min_width:100,
            max_width:240,
            hug_the_wall:true,
            full_nudge:false,
            stay_flipped:false,
            flip_back_buffer:50,
            flip_buffer:4,
            break_pct:0.6,
            follow_mouse:true,
            h_pct:0.45,
            v_pct:0.45
        };

        private var _slideTween:PropertyTween;
        protected var _embedded:Boolean = false;
        private var _display:Display;
        private var _currPos:String;
        private var _newlyVisible:Boolean = false;
        private var _hShift:int;
        private var _vShift:int;
        private var _placements:Array;
        private var _mouse:MouseService;

        public function PopupDisplay(_arg1:Object=null){
            _arg1 = Opts.init(_PopupDisplayDefaults, _arg1);
            super(_arg1);
            if (_opts.hug_the_wall){
                _opts.stay_flipped = false;
                _opts.flip_back_buffer = 0;
                _opts.full_nudge = true;
            };
            if (_opts.flip_back_buffer < _opts.flip_buffer){
                _opts.flip_back_buffer = _opts.flip_buffer;
            };
            this._display = new Display(_arg1);
            addContent(this._display);
            this._slideTween = new PropertyTween();
            this._placements = _opts.placement.split("");
            this._currPos = "s";
            visible = false;
        }
        public function setMouseService(_arg1:MouseService):void{
            this._mouse = _arg1;
        }
        override public function display(_arg1:Object):void{
            if (!visible){
                this._newlyVisible = true;
            };
            if (_arg1){
                if (!this._embedded){
                    if (!parent){
                        return;
                    };
                    if (_opts.follow_mouse){
                        if (this._mouse){
                            this._mouse.addEventListener(C.MOUSE_MOVE, this.handleMouseMove, false, 90);
                        } else {
                            stage.addEventListener(Event.ENTER_FRAME, this.handleMouseMove, false, 90);
                        };
                    };
                    this._embedded = true;
                };
                this._display.display(_arg1);
            };
            super.display(_arg1);
            updateBackground();
            var _local2:int = (-(_opts.v_pct) * height);
            var _local3:int = (-(_opts.h_pct) * width);
            if (((this._newlyVisible) || (true))){
                this._hShift = _local3;
                this._vShift = _local2;
            } else {
                if (_local2 > this._vShift){
                    this._vShift = _local2;
                };
                if (_local3 > this._hShift){
                    this._hShift = _local3;
                };
            };
            this.followMouse();
            this._newlyVisible = false;
        }
        private function handleMouseMove(_arg1:Object):void{
            if (visible){
                this.followMouse();
            };
        }
        protected function followMouse():void{
            var _local1:PixelPoint;
            var _local2:Number;
            var _local3:Number;
            if (this._mouse){
                _local1 = this._mouse.getCursorPosition();
                _local1.setContext(parent.stage);
                _local2 = _local1.x;
                _local3 = _local1.y;
            } else {
                _local2 = stage.mouseX;
                _local3 = stage.mouseY;
            };
            this.setStageXY(_local2, _local3);
        }
        private function testPopupXY(_arg1:Number, _arg2:Number, _arg3:String, _arg4:int=0):Boolean{
            var _local5:Boolean;
            if ((((_arg3 == C.N)) && ((_arg2 < _arg4)))){
                _local5 = false;
            } else {
                if ((((_arg3 == C.S)) && (((_arg2 + this.height) > (stage.stageHeight - _arg4))))){
                    _local5 = false;
                } else {
                    if ((((_arg3 == C.W)) && ((_arg1 < _arg4)))){
                        _local5 = false;
                    } else {
                        if ((((_arg3 == C.E)) && (((_arg1 + this.width) > (stage.stageWidth - _arg4))))){
                            _local5 = false;
                        };
                    };
                };
            };
            return (_local5);
        }
        private function calcFlippedPosition(_arg1:Number, _arg2:Number, _arg3:String):String{
            var _local4:String = C.S;
            if (_opts.full_nudge){
                if ((((_arg3 == C.S)) || ((_arg3 == C.N)))){
                    _local4 = (((_arg1 < (stage.stageWidth * _opts.break_pct))) ? C.E : C.W);
                } else {
                    _local4 = (((_arg2 < (stage.stageHeight * _opts.break_pct))) ? C.S : C.N);
                };
            } else {
                if (_arg3 == C.S){
                    _local4 = C.N;
                } else {
                    if (_local4 == C.N){
                        _local4 = C.S;
                    } else {
                        if (_local4 == C.E){
                            _local4 = C.W;
                        } else {
                            if (_local4 == C.W){
                                _local4 = C.E;
                            };
                        };
                    };
                };
            };
            return (_local4);
        }
        public function setStageXY(_arg1:Number, _arg2:Number):void{
            var _local16:Point;
            var _local17:int;
            var _local18:Number;
            var _local19:Number;
            var _local20:Number;
            var _local21:Number;
            var _local22:int;
            var _local23:Number;
            var _local3:Number = this.x;
            var _local4:Number = this.y;
            var _local5:Boolean = (((this._currPos == C.S)) || ((this._currPos == C.N)));
            var _local6:String = _opts.placement;
            var _local7:String = this._currPos;
            var _local8:Point = calcPopupXY(_arg1, _arg2, _local7, this._hShift, this._vShift);
            var _local9:Number = _local8.x;
            var _local10:Number = _local8.y;
            var _local11:Boolean;
            if (((!((_local7 == _local6))) && (!(_opts.stay_flipped)))){
                _local16 = calcPopupXY(_arg1, _arg2, _local6, this._hShift, this._vShift);
                _local17 = _opts.flip_back_buffer;
                _local11 = this.testPopupXY(_local16.x, _local16.y, _local6, _local17);
            };
            var _local12:* = this.testPopupXY(_local9, _local10, _local7, _opts.flip_buffer);
            if (((!(_local12)) || (_local11))){
                if (_local11){
                    _local7 = _local6;
                } else {
                    _local7 = this.calcFlippedPosition(_arg1, _arg2, _local7);
                };
                _local8 = calcPopupXY(_arg1, _arg2, _local7, this._hShift, this._vShift);
                _local9 = _local8.x;
                _local10 = _local8.y;
            };
            var _local13 = 4;
            if ((((_local7 == C.N)) || ((_local7 == C.S)))){
                _local18 = (stage.stageWidth - (_local9 + this.width));
                if (_local18 < _local13){
                    _local9 = (_local9 - (_local13 - _local18));
                };
                _local19 = _local9;
                if (_local19 < _local13){
                    _local9 = _local13;
                };
            } else {
                _local20 = _local10;
                if (_local20 < _local13){
                    _local10 = _local13;
                };
                _local21 = (stage.stageHeight - (_local10 + this.height));
                if (_local21 < _local13){
                    _local10 = (_local10 - (_local13 - _local21));
                };
            };
            var _local14:Boolean = this._slideTween.busy;
            var _local15:Boolean = ((!((_local7 == this._currPos))) && (!(this._newlyVisible)));
            if (((_local14) || (_local15))){
                if (_local15){
                    _local22 = 350;
                    if (this._mouse){
                        _local23 = this._mouse.pixelsPerSecond;
                        if (_local23 < 500){
                            _local22 = (500 - (_local23 * 0.5));
                        } else {
                            _local22 = 250;
                        };
                    };
                    _local22 = (_local22 * 0.7);
                    this._slideTween.start(this, {
                        x:_local9,
                        y:_local10
                    }, _local22);
                } else {
                    this._slideTween.updateTarget({
                        x:_local9,
                        y:_local10
                    });
                };
            } else {
                if ((((Math.abs((_local3 - _local9)) >= 0.8)) || ((Math.abs((_local4 - _local10)) >= 0.8)))){
                    this.y = _local10;
                    this.x = _local9;
                };
            };
            this._currPos = _local7;
        }

    }
}//package mb.popups 
﻿package mb.popups {
    import flash.display.*;
    import mb.*;
    import flash.geom.*;
    import mb.maps.*;

    public class PopupDisplayWithTail extends Popup {

        public static const E:String = "e";
        public static const N:String = "n";
        public static const S:String = "s";
        public static const W:String = "w";

        private static var _PDWTDefaults:Object = {
            follow_mouse:false,
            tail_offset:6,
            tail_height:12,
            tail_width:18,
            tail_focus:0,
            v_margin:0,
            h_margin:0,
            peg:85,
            centered:false,
            placement:"n"
        };

        private var _direction:String = "n";
        private var _p1_tail:Point;
        private var _p2_tail:Point;
        private var _p3_tail:Point;
        private var _xProj:Number;
        private var _yProj:Number;
        private var _xOffset:Number = 0;
        private var _yOffset:Number = 0;
        private var _map:MapStack;
        private var _display:Display;

        public function PopupDisplayWithTail(_arg1:MapStack, _arg2:Object=null){
            this._map = _arg1;
            if (!_arg2){
                _arg2 = {};
            };
            Opts.mergeProperties(_PDWTDefaults, _arg2, true);
            super(_arg2);
            this._display = new Display(_arg2);
            if (_opts.use_dropshadow){
                _background.filters = [_filter];
            };
            addContent(this._display);
            if (!_opts.follow_mouse){
                this._map.navigation.addEventListener(C.NAVIGATE, this.handleNavigate);
            };
        }
        private function handleNavigate(_arg1:Object):void{
            if (!_open){
                return;
            };
            if (isNaN(this._xProj)){
                return;
            };
        }
        private function updatePlacement(_arg1:PixelPoint):void{
            if (!this._p1_tail){
                return;
            };
            _arg1.setContext(parent);
            var _local2:Number = _arg1.x;
            var _local3:Number = _arg1.y;
            var _local4:Boolean = this._map.navigation.testProjectedPoint(this._xProj, this._yProj);
            if (((_viewable) && (!(_local4)))){
                _hide(_opts.use_fading);
                _viewable = false;
            } else {
                if (((!(_viewable)) && (_local4))){
                    _viewable = true;
                    _show(_opts.use_fading);
                };
            };
            _local2 = (_local2 - this._p2_tail.x);
            _local3 = (_local3 - this._p2_tail.y);
            _local2 = (_local2 + this._xOffset);
            _local3 = (_local3 + this._yOffset);
            _local2 = Math.round(_local2);
            _local3 = Math.round(_local3);
            this.x = _local2;
            this.y = _local3;
        }
        override public function display(_arg1:Object):void{
            var _local9:PopupFrameWithTail;
            var _local10:Rectangle;
            var _local2:Number = _arg1.x;
            var _local3:Number = _arg1.y;
            if (((!(parent)) || (!(parent.stage)))){
                return;
            };
            if (((isNaN(_local2)) || (isNaN(_local3)))){
                return;
            };
            this._xProj = _local2;
            this._yProj = _local3;
            this._display.display(_arg1);
            super.display(_arg1);
            var _local4:int = this.popupWidth;
            var _local5:int = this.popupHeight;
            var _local6:PixelPoint = this._map.navigation.convProjectedPointToScreenPoint(this._xProj, this._yProj);
            this.renderBackgroundShape(new Point(0, 0), new Point(_local4, _local5));
            var _local7:PopupBounds = new PopupBounds(this.stage);
            var _local8:Boolean = _local7.fitPopup(_local6, this, _local4, _local5);
            if (_local8){
                _local9 = new PopupFrameWithTail();
                _local6.setContext(this);
                _local10 = new Rectangle(0, 0, _local4, _local5);
                _local9.updateFrame(_background.graphics, _local10, _local6.x, _local6.y);
            };
        }
        override public function show(_arg1:Boolean=true):void{
            super.show(_arg1);
        }
        public function get popupWidth():int{
            var _local1:int = ((this._display.width + _opts.margins[0]) + _opts.margins[2]);
            if (_local1 < _opts.min_width){
                _local1 = _opts.min_width;
            };
            return (_local1);
        }
        public function get popupHeight():int{
            var _local1:int = ((this._display.height + _opts.margins[1]) + _opts.margins[3]);
            return (_local1);
        }
        override protected function updateBackground():void{
        }
        private function renderBackgroundShape(_arg1:Point, _arg2:Point):void{
            this._direction = _opts.placement;
            var _local3:PixelBox;
            if (((_opts.stay_in_view) && (this.parent))){
                _local3 = new PixelBox(parent.stage, 0, 0, parent.stage.stageWidth, parent.stage.stageHeight);
                _local3.setContext(this);
            };
            this.initTail(_local3);
            var _local4:Array = this.getIndentedBox(_arg1, _arg2, 0);
            var _local5:int;
            switch (this._direction){
                case N:
                    _local5 = 3;
                    break;
                case S:
                    _local5 = 1;
                    break;
                case E:
                    _local5 = 0;
                    break;
                case W:
                    _local5 = 2;
                    break;
            };
            _local4.splice(_local5, 0, this._p1_tail, this._p2_tail, this._p3_tail);
            this.renderPolygon(_background, _local4);
        }
        private function getIndentedBox(_arg1:Point, _arg2:Point, _arg3:Number=0):Array{
            var _local4:Point = new Point((_arg1.x + _arg3), (_arg1.y + _arg3));
            var _local5:Point = new Point((_arg2.x - _arg3), (_arg1.y + _arg3));
            var _local6:Point = new Point((_arg2.x - _arg3), (_arg2.y - _arg3));
            var _local7:Point = new Point((_arg1.x + _arg3), (_arg2.y - _arg3));
            return ([_local4, _local5, _local6, _local7]);
        }
        private function renderPolygon(_arg1:Sprite, _arg2:Array):void{
            _arg1.graphics.clear();
            _arg1.graphics.lineStyle(_opts.bg_stroke_width, _opts.bg_stroke_color);
            _arg1.graphics.beginFill(_opts.bg_fill_color, _opts.bg_fill_alpha);
            var _local3:Point = _arg2[(_arg2.length - 1)];
            _arg1.graphics.moveTo(_local3.x, _local3.y);
            var _local4:int;
            while (_local4 < _arg2.length) {
                _local3 = _arg2[_local4];
                _arg1.graphics.lineTo(_local3.x, _local3.y);
                _local4++;
            };
            _arg1.graphics.endFill();
        }
        private function initTail(_arg1:Rectangle=null):void{
            var _local14:Number;
            var _local2:int = this.popupHeight;
            var _local3:int = this.popupWidth;
            var _local4:Number = _opts.v_offset;
            var _local5:Number = _opts.tail_width;
            var _local6:Number = _opts.tail_height;
            var _local7:Number = 0;
            var _local8:Number = 0;
            var _local9:Number = 0;
            var _local10:Number = 0;
            var _local11:Number = 0;
            var _local12:Number = 0;
            var _local13:Number = _opts.tail_offset;
            this._xOffset = (this._yOffset = 0);
            if ((((this._direction == N)) || ((this._direction == S)))){
                _local9 = (_opts.peg - (_local5 / 2));
                _local11 = (_local9 + _local5);
                _local7 = ((_local9 + _local11) * 0.5);
                if (this._direction == N){
                    this._yOffset = -(_local13);
                    _local8 = (_local2 + _local6);
                    _local12 = _local2;
                    _local10 = _local12;
                    _local14 = _local11;
                    _local11 = _local9;
                    _local9 = _local14;
                } else {
                    this._yOffset = _local13;
                    _local8 = -(_local6);
                };
            } else {
                _local10 = (_opts.peg - (_local5 / 2));
                _local12 = (_local10 + _local5);
                _local8 = ((_local10 + _local12) * 0.5);
                if (this._direction == W){
                    this._xOffset = -(_local13);
                    _local7 = (_local3 + _local6);
                    _local11 = _local3;
                    _local9 = _local11;
                } else {
                    this._yOffset = _local13;
                    _local7 = -(_local6);
                    _local14 = _local12;
                    _local12 = _local10;
                    _local10 = _local14;
                };
            };
            this._p1_tail = new Point(_local9, _local10);
            this._p2_tail = new Point(_local7, _local8);
            this._p3_tail = new Point(_local11, _local12);
        }

    }
}//package mb.popups 
﻿package mb.popups {
    import flash.text.*;
    import mb.*;
    import mb.styles.*;
    import mb.text.*;

    public class TableFormat extends TextFormat {

        private var _cellFormats:Array;
        private var _rowFormats:Array;
        private var _colFormats:Array;

        public function TableFormat(){
            this.clearFormat();
        }
        public function clearFormat():void{
            this._cellFormats = [];
            this._rowFormats = [];
            this._colFormats = [];
        }
        public function setFormat(_arg1:TextFormat, _arg2:Object=null):void{
            if (!_arg2){
                this.updateFormat(_arg1, this);
                return;
            };
            var _local3:Object = _arg2.c;
            var _local4:Object = _arg2.r;
            if (((!((_local3 === null))) && (!((_local4 === null))))){
                if (!this._cellFormats[_local3]){
                    this._cellFormats[_local3] = [];
                };
                this._cellFormats[_local3][_local4] = _arg1;
            } else {
                if (_local3 !== null){
                    this._colFormats[_local3] = _arg1;
                } else {
                    if (_local4 !== null){
                        this._rowFormats[_local4] = _arg1;
                    };
                };
            };
        }
        public function formatCellField(_arg1:FormattedTextField, _arg2:int, _arg3:int):void{
            var _local4:TextFormat = this;
            if (((this._cellFormats[_arg2]) && (this._cellFormats[_arg2][_arg3]))){
                _local4 = this._cellFormats[_arg2][_arg3];
            } else {
                if (this._colFormats[_arg2]){
                    _local4 = this._colFormats[_arg2];
                } else {
                    if (this._rowFormats[_arg3]){
                        _local4 = this._rowFormats[_arg3];
                    };
                };
            };
            this.updateFormat(_local4, _arg1.format);
        }
        private function updateFormat(_arg1:TextFormat, _arg2:TextFormat):void{
            _arg2.size = (((_arg1.size === null)) ? _arg2.size : _arg1.size);
            _arg2.color = (((_arg1.color === null)) ? _arg2.color : _arg1.color);
            _arg2.bold = (((_arg1.bold === null)) ? _arg2.bold : _arg1.bold);
            _arg2.italic = (((_arg1.italic === null)) ? _arg2.italic : _arg1.italic);
        }

    }
}//package mb.popups 
﻿package mb.popups {
    import flash.display.*;
    import flash.text.*;
    import flash.events.*;
    import mb.*;
    import mb.easing.*;
    import flash.geom.*;
    import mb.text.*;
    import mb.utils.*;

    public class Display extends Sprite {

        private static var _defaults:Object = {
            flex_table:true,
            flex_rows:false,
            selectable_text:false,
            text_size:11,
            text_color:0,
            table_title_size:11,
            table_title_color:0,
            table_title_bold:true,
            table_title_margin_top:0,
            table_head_size:null,
            table_head_color:null,
            table_head_bold:null,
            table_head_tabs:null,
            table_head_tab_align:null,
            table_head_margin_bottom:0,
            table_cols:3,
            table_tabs:[0, 118, 150, 210],
            table_margin_top:0,
            table_use_html:true,
            tab_align:["left", "right", "right", "right", "right"],
            column_top_margins:null,
            title_size:12,
            title_bold:true,
            title_spacing:0,
            subtitle_italic:true,
            subtitle_color:0,
            subtitle_bold:false,
            tail_italic:true,
            tail_color:0x888888,
            tail_spacing:0,
            embedded_font:"",
            font:"Arial",
            line_spacing:2,
            section_spacing:0,
            column_spacing:5,
            min_width:100,
            max_width:240
        };

        protected var _opts:Object;
        protected var _enabled:Boolean = true;
        protected var _maxTextWidth:Number;
        protected var _tableFmt:TableFormat;
        protected var _tabsChanged:Boolean = false;
        protected var _fields:Object;
        protected var _bodyFields:Object;
        protected var _chart:DisplayObject;
        protected var _button:MovieClip;

        public function Display(_arg1:Object=null){
            this._opts = Opts.init(_defaults, _arg1);
            this._tableFmt = new TableFormat();
            this._tableFmt.size = this._opts.text_size;
            this._tableFmt.color = this._opts.text_color;
            this._maxTextWidth = this._opts.max_width;
            this._fields = {};
        }
        public function get table():TableFormat{
            return (this._tableFmt);
        }
        protected function newTableField(_arg1:int, _arg2:int, _arg3:String):FormattedTextField{
            var _local4:FormattedTextField = this.newField("cell", _arg3);
            this._tableFmt.formatCellField(_local4, _arg1, _arg2);
            return (_local4);
        }
        protected function newField(_arg1:String, _arg2:String="left"):FormattedTextField{
            var _local3:FormattedTextField = new FormattedTextField();
            _local3.format.size = this._opts.text_size;
            if (this._opts.embedded_font){
                _local3.format.font = this._opts.embedded_font;
            } else {
                _local3.format.font = this._opts.font;
            };
            _local3.format.bold = false;
            _local3.format.color = this._opts.text_color;
            _local3.multiline = true;
            _local3.format.leading = 1;
            _local3.format.align = _arg2;
            switch (_arg1){
                case "title":
                    _local3.format.size = this._opts.title_size;
                    _local3.format.bold = this._opts.title_bold;
                    _local3.wordWrap = true;
                    break;
                case "subtitle":
                    _local3.format.italic = this._opts.subtitle_italic;
                    _local3.format.color = this._opts.subtitle_color;
                    _local3.format.bold = this._opts.subtitle_bold;
                    break;
                case "table_title":
                    _local3.format.color = this._opts.table_title_color;
                    _local3.format.bold = this._opts.table_title_bold;
                    _local3.format.size = this._opts.table_title_size;
                    break;
                case "tail":
                    _local3.format.italic = this._opts.tail_italic;
                    _local3.format.color = this._opts.tail_color;
                    _local3.autoSize = "left";
                    break;
                case "cell":
                    break;
            };
            if (this._opts.selectable_text){
                _local3.selectable = true;
                _local3.mouseEnabled = true;
            };
            addChild(_local3);
            return (_local3);
        }
        public function clear():void{
        }
        public function set enabled(_arg1:Boolean):void{
            this._enabled = _arg1;
        }
        public function display(_arg1:Object):void{
            var _local5:Rectangle;
            var _local6:Object;
            var _local7:Object;
            var _local8:Array;
            var _local9:int;
            var _local10:Object;
            var _local11:String;
            var _local12:Object;
            var _local13:TextField;
            var _local14:Number;
            var _local15:DisplayObject;
            var _local2:Object = {};
            var _local3:int;
            var _local4:Number = 0;
            if (_arg1.title){
                _local2.title = ((this._fields.title) ? this._fields.title : this.newField("title"));
                _local2.title.text = _arg1.title;
                this.fixWidth(_local2.title);
                _local4 = Math.max(_local4, _local2.title.width);
                _local3 = (_local3 + ((_local2.title.textHeight + this._opts.line_spacing) + this._opts.title_spacing));
            };
            if (_arg1.subtitle){
                _local2.subtitle = ((this._fields.subtitle) ? this._fields.subtitle : this.newField("subtitle"));
                _local2.subtitle.y = _local3;
                _local2.subtitle.text = _arg1.subtitle;
                this.fixWidth(_local2.subtitle);
                _local4 = Math.max(_local4, _local2.subtitle.width);
                _local3 = (_local3 + (_local2.subtitle.textHeight + this._opts.line_spacing));
            };
            if (_arg1.float){
                _local2.float = ((this._fields.float) ? this._fields.float : this.newField("float", _arg1.float[2]));
                _local3 = (_local3 + _arg1.float[3]);
                _local2.float.y = _local3;
                _local2.float.text = _arg1.float[0];
                _local2.float.x = _arg1.float[1];
                _local3 = (_local3 + _local2.float.textHeight);
            };
            if (((_arg1.tab_align) || (this._tabsChanged))){
                this._tabsChanged = ((_arg1.tab_align) ? true : false);
            };
            if (this._chart){
                this._chart.parent.removeChild(this._chart);
                this._chart = null;
            };
            if (_arg1.chart){
                this._chart = _arg1.chart;
                addChild(this._chart);
                this._chart.x = 1;
                _local3 = (_local3 + 1);
                _local5 = this._chart.getRect(this._chart);
                this._chart.y = (_local3 - Math.round(_local5.y));
                _local3 = (_local3 + (this._chart.height + this._opts.line_spacing));
            };
            if (((_arg1.table) && ((_arg1.table.length > 0)))){
                _local6 = {};
                _local6.rows = _arg1.table;
                _local6.title = _arg1.table_title;
                _local6.head = _arg1.table_head;
                _local3 = this.displayTable(_local6, this._opts, _local3, _local2, this._fields);
            };
            if (this._bodyFields){
                this.dumpUnusedFields({}, this._bodyFields);
            };
            this._bodyFields = {};
            if (((_arg1.body) && ((_arg1.body is Array)))){
                _local7 = {};
                _local8 = _arg1.body;
                _local9 = 0;
                while (_local9 < _local8.length) {
                    _local10 = _local8[_local9];
                    if (((_local10) && (_local10.content))){
                        _local11 = _local10.type;
                        _local12 = ((_local10.format) ? _local10.format : this._opts);
                        if (_local11 == "table"){
                            _local3 = this.displayTable(_local10.content, _local12, _local3, _local7, this._bodyFields);
                        };
                    };
                    _local9++;
                };
                this._bodyFields = _local7;
            };
            if (((_arg1.button) && (!(this._button)))){
                this._button = _arg1.button;
            };
            if (this._button){
                if (_arg1.button){
                    if (!this._button.parent){
                        addChild(this._button);
                    };
                    this._button.x = 1;
                    _local3 = (_local3 + 1);
                    this._button.y = _local3;
                    _local3 = (_local3 + (this._button.height + this._opts.line_spacing));
                } else {
                    if (this._button.parent){
                        this._button.parent.removeChild(this._button);
                    };
                };
            };
            if (_arg1.tail){
                _local2.tail = ((this._fields.tail) ? this._fields.tail : this.newField("tail"));
                _local3 = (_local3 + this._opts.tail_spacing);
                _local2.tail.y = _local3;
                _local2.tail.width = this.width;
                _local13 = _local2.tail;
                _local13.text = _arg1.tail;
                _local14 = Math.max(this._opts.min_width, _local4);
                _local13.width = _local14;
                this.fixWidth(_local2.tail);
            };
            if (((_arg1.top_right) && ((_arg1.top_right is DisplayObject)))){
                if (this._fields.top_right){
                    this._fields.top_right.parent.removeChild(this._fields.top_right);
                };
                _local15 = _arg1.top_right;
                _local15.x = (this.width - _local15.width);
                _local15.y = 0;
                addChild(_local15);
                _local2.top_right = _local15;
            };
            this._fields = this.dumpUnusedFields(_local2, this._fields);
        }
        private function getOpt(_arg1:String, _arg2:Object){
            if (_arg2[_arg1]){
                return (_arg2[_arg1]);
            };
            return (_defaults[_arg1]);
        }
        private function displayTable(_arg1, _arg2:Object, _arg3:Number, _arg4:Object, _arg5:Object):Number{
            var _local9:Array;
            var _local10:Array;
            var _local11:Array;
            var _local12:FormattedTextField;
            var _local13:Number;
            var _local14:int;
            var _local15:int;
            var _local16:Array;
            var _local17:Array;
            var _local18:TextFormat;
            var _local19:String;
            var _local20:*;
            var _local21:DisplayObject;
            var _local22:Number;
            var _local23:Number;
            var _local24:int;
            var _local25:Array;
            var _local26:DisplayObject;
            var _local27:int;
            var _local28:int;
            var _local29:int;
            var _local30:Number;
            var _local31:int;
            var _local32:DisplayObject;
            var _local6:Number = 0;
            _arg3 = (_arg3 + this.getOpt("table_title_margin_top", _arg2));
            if (_arg1.title){
                _arg4.table_title = ((_arg5.table_title) ? _arg5.table_title : this.newField("table_title"));
                _arg4.table_title.y = _arg3;
                _arg4.table_title.format.size = this.getOpt("table_title_size", _arg2);
                _arg4.table_title.text = _arg1.title;
                this.fixWidth(_arg4.table_title);
                _local6 = Math.max(_local6, _arg4.table_title.width);
                _arg3 = (_arg3 + (_arg4.table_title.textHeight + this.getOpt("line_spacing", _arg2)));
            };
            if (_arg1.head){
                _arg1.rows.unshift(_arg1.head);
            };
            _arg3 = (_arg3 + this.getOpt("table_margin_top", _arg2));
            _arg3 = Math.round(_arg3);
            var _local7:Array = [0, 0, 0, 0, 0, 0];
            var _local8:int;
            while (_local8 < _arg1.rows.length) {
                _local9 = this.getOpt("table_tabs", _arg2);
                _local10 = this.getOpt("tab_align", _arg2);
                if ((((_local8 == 0)) && (_arg1.head))){
                    _local16 = this.getOpt("table_head_tabs", _arg2);
                    if (_local16){
                        _local9 = _local16;
                    };
                    _local17 = this.getOpt("table_head_tab_align", _arg2);
                    if (_local17){
                        _local10 = _local17;
                    };
                    _local18 = new TextFormat();
                    _local18.color = this.getOpt("table_head_color", _arg2);
                    _local18.size = this.getOpt("table_head_size", _arg2);
                    _local18.bold = this.getOpt("table_head_bold", _arg2);
                    _local18.leading = this.getOpt("table_head_margin_bottom", _arg2);
                };
                _local11 = _arg1.rows[_local8];
                if (!_local11){
                } else {
                    _local13 = 0;
                    _local14 = 0;
                    _local15 = 0;
                    while (_local15 < _local11.length) {
                        _local19 = ((_local15 + "-") + _local8);
                        _local20 = _local11[_local15];
                        if ((_local20 is DisplayObject)){
                            _local21 = _arg5[_local19];
                            if (((_local21) && (_local21.parent))){
                                _local21.parent.removeChild(_local21);
                            };
                            _arg4[_local19] = _local20;
                            addChild(_local20);
                            _local22 = _local9[_local15];
                            _local20.x = _local22;
                            _local20.y = _arg3;
                            if (_local13 == 0){
                                _local13 = _local20.height;
                            };
                        } else {
                            if (((!((_local20 === undefined))) && (!((_local20 === null))))){
                                _local12 = (_arg4[_local19] = ((_arg5[_local19]) ? _arg5[_local19] : this.newTableField(_local15, _local8, _local10[_local15])));
                                _local12.wordWrap = false;
                                _local12.y = _arg3;
                                if (this.getOpt("table_use_html", _arg2)){
                                    _local12.htmlText = _local11[_local15];
                                } else {
                                    _local12.text = _local11[_local15];
                                };
                                if (((_arg1.head) && ((_local8 == 0)))){
                                    _local12.setTextFormat(_local18);
                                };
                                _local23 = 0;
                                _local22 = _local9[_local15];
                                _local12.tab = _local22;
                                if (this.getOpt("flex_table", _arg2)){
                                    if (_local15 > 0){
                                        _local26 = _arg4[(((_local15 - 1) + "-") + _local8)];
                                        if (_local26){
                                            _local27 = ((_local26.x + _local26.width) + this.getOpt("column_spacing", _arg2));
                                            if ((_local26 is FormattedTextField)){
                                                _local27 = (_local27 - 4);
                                            };
                                            _local28 = _local12.x;
                                            if ((_local27 - _local28) > _local7[_local15]){
                                                _local7[_local15] = (_local27 - _local28);
                                            };
                                        };
                                    };
                                } else {
                                    if (this.getOpt("flex_rows", _arg2)){
                                        if (_local12.x < _local14){
                                            _local12.x = _local14;
                                        };
                                        _local14 = ((_local12.x + _local12.width) + this.getOpt("column_spacing", _arg2));
                                    };
                                };
                                _local24 = _local12.textHeight;
                                _local25 = this.getOpt("column_top_margins", _arg2);
                                if (((_local25) && (_local25[_local15]))){
                                    _local29 = _local25[_local15];
                                    _local24 = (_local24 + _local29);
                                    _local12.y = (_local12.y + _local29);
                                };
                                if (_local24 > _local13){
                                    _local13 = _local24;
                                };
                                _local6 = Math.max(_local6, (_local12.x + _local12.width));
                            };
                        };
                        _local15++;
                    };
                    _local13 = Math.round(_local13);
                    _local15 = 0;
                    while (_local15 < _local11.length) {
                        _local19 = ((_local15 + "-") + _local8);
                        _local20 = _arg4[_local19];
                        if ((_local20 is FormattedTextField)){
                            _local12 = FormattedTextField(_local20);
                            if (_local12.numLines > 1){
                                if (_local12.textHeight < _local13){
                                    _local30 = Math.round((_local13 - _local12.textHeight));
                                    _local12.y = (_local12.y + _local30);
                                };
                            };
                        };
                        _local15++;
                    };
                    _arg3 = (_arg3 + (_local13 + this.getOpt("line_spacing", _arg2)));
                };
                _local8++;
            };
            if (this.getOpt("flex_table", _arg2)){
                _local31 = 0;
                _local15 = 0;
                while (_local15 < _local11.length) {
                    _local31 = (_local31 + _local7[_local15]);
                    if (_local31 > 0){
                        _local8 = 0;
                        while (_local8 < _arg1.rows.length) {
                            _local19 = ((_local15 + "-") + _local8);
                            _local32 = _arg4[_local19];
                            if (!_local32){
                            } else {
                                _local32.x = (_local32.x + _local31);
                            };
                            _local8++;
                        };
                    };
                    _local15++;
                };
            };
            return (_arg3);
        }
        protected function fixWidth(_arg1:TextField):void{
            var _local2:Number;
            _arg1.wordWrap = false;
            if (_arg1.width > this._maxTextWidth){
                _arg1.wordWrap = true;
                _arg1.width = this._maxTextWidth;
                _local2 = _arg1.textWidth;
                if (_local2 < this._maxTextWidth){
                    _arg1.width = (_local2 + 6);
                };
            };
        }
        protected function dumpUnusedFields(_arg1:Object, _arg2:Object):Object{
            var _local4:Object;
            var _local5:*;
            var _local3:Object = Utils.objectSubtract(_arg2, _arg1);
            for (_local4 in _local3) {
                _local5 = _local3[_local4];
                if (((_local5) && (_local5.parent))){
                    _local5.parent.removeChild(_local5);
                };
            };
            return (_arg1);
        }

    }
}//package mb.popups 
﻿package mb.popups {
    import flash.display.*;
    import flash.geom.*;

    public interface IPopupFrame {

        function updateFrame(_arg1:Graphics, _arg2:Rectangle, _arg3:Number=0, _arg4:Number=0):void;

    }
}//package mb.popups 
﻿package mb.popups {
    import flash.display.*;
    import mb.*;
    import flash.geom.*;

    public class PopupBounds {

        private static const _defaults:Object = {
            box_offset:20,
            placements:[C.N, C.S, C.E, C.W],
            stage_margins:[5, 5, 5, 5],
            v_pct:0.5,
            h_pct:0.5,
            show_tail:true,
            h_buffer:12,
            v_buffer:12,
            tail_height:5
        };

        private var _box:PixelBox;
        private var _dir:String;
        private var _opts:Object;
        private var _stage:Stage;

        public function PopupBounds(_arg1:Object=null){
            this._opts = Opts.init(_defaults, _arg1);
        }
        private function getPlacement(_arg1:String, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Number):PixelBox{
            var _local6:Number;
            var _local7:Number;
            var _local19:Number;
            var _local20:Number;
            var _local23:Number;
            var _local24:Number;
            var _local25:Number;
            var _local26:Number;
            var _local27:Number;
            var _local28:Number;
            var _local29:Number;
            var _local30:Number;
            var _local8:Number = 0;
            var _local9:Number = 0;
            var _local10:Number = 0;
            var _local11:Number = 0;
            var _local12:Number = this._opts.stage_margins[0];
            var _local13:Number = this._opts.stage_margins[1];
            var _local14:Number = this._opts.stage_margins[2];
            var _local15:Number = this._opts.stage_margins[3];
            var _local16:Number = this._opts.v_pct;
            var _local17:Number = this._opts.h_pct;
            if ((((_arg1 == C.N)) || ((_arg1 == C.S)))){
                _local6 = (_arg5 + this._opts.box_offset);
                if (_arg1 == C.N){
                    _local7 = (_arg3 - _local13);
                } else {
                    _local7 = ((this._stage.stageHeight - _arg3) - _local15);
                };
                _local23 = ((_arg4 * _local17) - this._opts.h_buffer);
                _local24 = ((_arg4 * (1 - _local17)) - this._opts.h_buffer);
                _local25 = ((_arg2 - (_arg4 * _local17)) - _local12);
                _local26 = ((this._stage.stageWidth - _local14) - (_arg2 + (_arg4 * (1 - _local17))));
                if (_local25 < 0){
                    if (-(_local25) > _local23){
                        return (null);
                    };
                    _local10 = -(_local25);
                };
                if (_local26 < 0){
                    if (-(_local26) > _local24){
                        return (null);
                    };
                    _local10 = _local26;
                };
            } else {
                if ((((_arg1 == C.W)) || ((_arg1 == C.E)))){
                    _local6 = (_arg4 + this._opts.box_offset);
                    if (_arg1 == C.W){
                        _local7 = (_arg2 - _local12);
                    } else {
                        _local7 = ((this._stage.stageWidth - _arg2) - _local14);
                    };
                    _local27 = ((_arg5 * _local16) - this._opts.v_buffer);
                    _local28 = ((_arg5 * (1 - _local16)) - this._opts.v_buffer);
                    _local29 = ((_arg3 - (_arg5 * _local16)) - _local13);
                    _local30 = ((this._stage.stageHeight - _local15) - (_arg3 + (_arg5 * (1 - _local16))));
                    if (_local29 < 0){
                        if (-(_local29) > _local27){
                            return (null);
                        };
                        _local11 = -(_local29);
                    } else {
                        if (_local30 < 0){
                            if (-(_local30) > _local28){
                                return (null);
                            };
                            _local11 = _local30;
                        };
                    };
                } else {
                    return (null);
                };
            };
            var _local18 = ((_local7 - _local6) >= 0);
            if (!_local18){
                return (null);
            };
            _local10 = Math.round(_local10);
            _local11 = Math.round(_local11);
            var _local21:Number = this._opts.box_offset;
            if ((((_arg1 == C.N)) || ((_arg1 == C.S)))){
                _local19 = (_arg2 - (_arg4 * _local16));
                _local20 = (((_arg1 == C.N)) ? ((_arg3 - _local21) - _arg5) : (_arg3 + _local21));
            } else {
                _local20 = (_arg3 - (_arg5 * _local17));
                _local19 = (((_arg1 == C.W)) ? ((_arg2 - _local21) - _arg4) : (_arg2 + _local21));
            };
            _local19 = (_local19 + _local10);
            _local20 = (_local20 + _local11);
            var _local22:PixelBox = new PixelBox(this._stage, _local19, _local20, _arg4, _arg5);
            return (_local22);
        }
        public function fitPopup(_arg1:PixelPoint, _arg2:Sprite, _arg3:Number, _arg4:Number):Boolean{
            if (!_arg2.stage){
            };
            this._stage = _arg2.stage;
            _arg1.setContext(this._stage);
            var _local5:PixelBox;
            var _local6:int;
            var _local7:String;
            do  {
                if (((!(this._opts.placements)) || ((_local6 >= this._opts.placements.length)))){
                    break;
                };
                _local7 = this._opts.placements[_local6];
                _local5 = this.getPlacement(_local7, _arg1.x, _arg1.y, _arg3, _arg4);
                _local6 = (_local6 + 1);
            } while (_local5 == null);
            this._dir = _local7;
            this._box = _local5;
            if (_local5 == null){
                return (false);
            };
            _local5.setContext(_arg2.parent);
            _arg2.x = _local5.left;
            _arg2.y = _local5.top;
            return (true);
        }
        public function get placement():String{
            return (this._dir);
        }
        public function get box():PixelBox{
            return (this._box);
        }

    }
}//package mb.popups 
﻿package mb.popups {
    import flash.display.*;
    import flash.events.*;
    import mb.*;
    import mb.easing.*;
    import flash.geom.*;
    import flash.filters.*;

    public class Popup extends Sprite {

        private static var _p:Point = new Point();
        private static var _defaults:Object = {
            use_fading:true,
            fade_time:150,
            fade_delay:50,
            min_width:0,
            mouse_enabled:false,
            margins:[6, 6, 6, 6],
            bg_fill_color:0xFFFFFF,
            bg_fill_alpha:1,
            bg_stroke_color:0xCCCCCC,
            bg_stroke_weight:1,
            use_dropshadow:true,
            unflip_buffer:20,
            auto_raise:true,
            boundary_margins:null,
            boundary_clip:null,
            placement:"s",
            spacing_s:28,
            spacing_n:15,
            spacing_e:27,
            spacing_w:18,
            stay_in_view:true
        };

        protected var _content:DisplayObject;
        protected var _background:Sprite;
        protected var _open:Boolean = false;
        protected var _viewable:Boolean = true;
        protected var _filter:DropShadowFilter;
        protected var _opts:Object;
        protected var _boundaryRect:Rectangle;

        public function Popup(_arg1:Object){
            this._opts = Opts.init(_defaults, _arg1);
            if (!this._opts.mouse_enabled){
                mouseEnabled = false;
                mouseChildren = false;
            };
            if (this._opts.use_dropshadow){
                this._filter = new DropShadowFilter(3, 45, 0, 0.3, 10, 10, 1, 1);
            };
            addChild((this._background = new Sprite()));
            this.addEventListener(Event.ADDED_TO_STAGE, this.handleAdded);
        }
        public function isOpen():Boolean{
            return (this._open);
        }
        public function addContent(_arg1:DisplayObject):void{
            if (_arg1 != this._content){
                if (this._content){
                    this._content.parent.removeChild(this._content);
                };
                this._content = _arg1;
                addChild(this._content);
                if (this._opts.margins){
                    this._content.x = this._opts.margins[0];
                    this._content.y = this._opts.margins[1];
                };
            };
            if (this._open){
                this.updateBackground();
            };
        }
        private function handleAdded(_arg1:Event):void{
            var _local2:Array;
            var _local3:int;
            var _local4:int;
            var _local5:int;
            var _local6:int;
            this.removeEventListener(Event.ADDED_TO_STAGE, this.handleAdded);
            if (this._opts.boundary_clip){
                this._boundaryRect = this._opts.boundary_clip.getBounds(this.stage);
                _local2 = this._opts.boundary_margins;
                if (_local2){
                    _local3 = _local2[0];
                    _local4 = _local2[1];
                    _local5 = _local2[2];
                    _local6 = _local2[3];
                    this._boundaryRect.left = (this._boundaryRect.left + _local3);
                    this._boundaryRect.top = (this._boundaryRect.top + _local4);
                    this._boundaryRect.right = (this._boundaryRect.right - _local5);
                    this._boundaryRect.bottom = (this._boundaryRect.bottom - _local6);
                };
            };
        }
        public function display(_arg1:Object):void{
            this.show();
        }
        public function handleHide(_arg1:Object=null):void{
            this.hide();
        }
        public function hide(_arg1:Boolean=true):void{
            this._hide(((this._opts.use_fading) && (_arg1)));
            this._open = false;
        }
        public function show(_arg1:Boolean=true):void{
            if (this._content){
                this._show(((this._opts.use_fading) && (_arg1)));
            };
            this._open = true;
        }
        protected function _show(_arg1:Boolean):void{
            if (!this._viewable){
                return;
            };
            this.updateBackground();
            if (_arg1){
                Fader.showObject(this, this._opts.fade_time);
            } else {
                visible = true;
            };
            if (this._opts.auto_raise){
                parent.addChild(this);
            };
        }
        protected function updateBackground():void{
            var _local1:int = ((this._content.width + this._opts.margins[0]) + this._opts.margins[2]);
            if (_local1 < this._opts.min_width){
                _local1 = this._opts.min_width;
            };
            var _local2:int = ((this._content.height + this._opts.margins[1]) + this._opts.margins[3]);
            this._background.graphics.clear();
            if (this._opts.bg_stroke_weight > 0){
                this._background.graphics.lineStyle(this._opts.bg_stroke_weight, this._opts.bg_stroke_color);
            };
            this._background.graphics.beginFill(this._opts.bg_fill_color, this._opts.bg_fill_alpha);
            this._background.graphics.drawRect(0, 0, _local1, _local2);
            this._background.graphics.endFill();
            if (this._opts.use_dropshadow){
                this._background.filters = [this._filter];
            };
        }
        protected function _hide(_arg1:Boolean):void{
            if (!this._viewable){
                return;
            };
            if (_arg1){
                Fader.hideObject(this, this._opts.fade_time, this._opts.fade_delay);
            } else {
                this.visible = false;
            };
        }
        protected function calcPopupXY(_arg1:Number, _arg2:Number, _arg3:String, _arg4:int=0, _arg5:int=0):Point{
            var _local7:Number;
            var _local8:Number;
            var _local9:String;
            var _local10:Number;
            var _local11:Number;
            var _local12:Point;
            var _local6:Boolean = (((_arg3 == C.S)) || ((_arg3 == C.N)));
            if (_local6){
                if (_arg3 == C.N){
                    _local8 = this._opts.spacing_n;
                    _p.y = ((_arg2 - _local8) - this.height);
                } else {
                    _local8 = this._opts.spacing_s;
                    _p.y = (_arg2 + _local8);
                };
                _local7 = _arg4;
                _p.x = (_arg1 + _local7);
            } else {
                if (_arg3 == C.W){
                    _local7 = this._opts.spacing_w;
                    _p.x = ((_arg1 - _local7) - this.width);
                } else {
                    _local7 = this._opts.spacing_e;
                    _p.x = (_arg1 + _local7);
                };
                _local8 = _arg5;
                _p.y = (_arg2 + _local8);
            };
            if (((this._opts.hug_the_wall) && (!((_arg3 == this._opts.placement))))){
                _local9 = this._opts.placement;
                _local10 = _p.x;
                _local11 = _p.y;
                _local12 = this.calcPopupXY(_arg1, _arg2, _local9, _arg4, _arg5);
                if ((((((_local9 == C.S)) || ((_local9 == C.N)))) && ((((_arg3 == C.E)) || ((_arg3 == C.W)))))){
                    _p.x = _local10;
                    _p.y = _local12.y;
                } else {
                    if ((((((_local9 == C.E)) || ((_local9 == C.W)))) && ((((_arg3 == C.N)) || ((_arg3 == C.S)))))){
                        _p.x = _local12.x;
                        _p.y = _local11;
                    } else {
                        _p.x = _local10;
                        _p.y = _local11;
                    };
                };
            };
            return (_p);
        }

    }
}//package mb.popups 
﻿package mb {
    import flash.events.*;

    public class Waiter extends EventDispatcher implements IWaiter {

        private static var _instanceCount:int = 0;

        private var _waitCount:int = 0;
        private var _startedWaiting:Boolean = false;
        private var _isReady:Boolean = false;
        private var _readyListeners:Array;
        private var _readyEvent:Event;
        public var name:String;

        public function Waiter(){
            this._readyListeners = [];
            this.name = ("waiter" + _instanceCount++);
            super.addEventListener(C.READY, this.handleReady, false, 9999, true);
        }
        public static function waitFor(_arg1:IEventDispatcher):Waiter{
            return (new (Waiter)().waitFor(_arg1));
        }

        private function handleReady(_arg1:Event):void{
            if (this._isReady){
                return;
            };
            this._isReady = true;
            this.handleReadyState();
            this._readyEvent = _arg1;
        }
        public function get ready():Boolean{
            return (this._isReady);
        }
        public function isReady():Boolean{
            return (this._isReady);
        }
        public function waitFor(_arg1:IEventDispatcher, _arg2:String="ready"):Waiter{
            if (this._startedWaiting){
            } else {
                if (!this.ready){
                    this._waitCount++;
                    _arg1.addEventListener(_arg2, this.handleDependentReady);
                };
            };
            return (this);
        }
        public function startWaiting(_arg1:Function=null):Waiter{
            if (_arg1 != null){
                this.addEventListener(C.READY, _arg1);
            };
            if (!this.ready){
                this._startedWaiting = true;
                if (this._waitCount == 0){
                    this.dispatchEvent(new Event(C.READY));
                };
            };
            return (this);
        }
        override public function addEventListener(_arg1:String, _arg2:Function, _arg3:Boolean=false, _arg4:int=0, _arg5:Boolean=false):void{
            if (_arg1 == C.READY){
                if (this._readyEvent){
                    _arg2(this._readyEvent);
                    return;
                };
                this._readyListeners.push(_arg2);
                _arg3 = false;
            };
            super.addEventListener(_arg1, _arg2, _arg3, _arg4, _arg5);
        }
        private function clearReadyListeners():void{
            var _local1:Function;
            for each (_local1 in this._readyListeners) {
                removeEventListener(C.READY, _local1, false);
            };
            this._readyListeners = [];
        }
        override public function dispatchEvent(_arg1:Event):Boolean{
            if (_arg1.type != C.READY){
                return (super.dispatchEvent(_arg1));
            };
            var _local2:Boolean = super.dispatchEvent(_arg1);
            this.clearReadyListeners();
            return (_local2);
        }
        protected function handleReadyState():void{
        }
        private function handleDependentReady(_arg1:Event):void{
            if (this._waitCount <= 0){
                return;
            };
            this._waitCount = (this._waitCount - 1);
            if ((((this._waitCount == 0)) && (this._startedWaiting))){
                this.dispatchEvent(new Event(C.READY));
            };
        }

    }
}//package mb 
﻿package mb.shapes {
    import flash.display.*;
    import mb.maps.*;

    public interface IPath {

        function drawPath(_arg1:ShapeVector, _arg2:XY, _arg3:Graphics):void;
        function get capsStyle():String;

    }
}//package mb.shapes 
﻿package mb.shapes {
    import mb.data.*;
    import mb.projections.*;
    import mb.*;
    import mb.importing.*;

    public class LegacyShapeSource extends Waiter implements IShapeDataSource {

        protected var _vectors:ShapeLoaderOne;
        protected var _cache:ShapeDataCache;
        protected var _proj:IGeoProjection;
        private var _ids:Array;

        public function LegacyShapeSource(_arg1:ShapeLoaderOne, _arg2:IGeoProjection){
            this._vectors = _arg1;
            this._proj = _arg2;
            this._cache = new ShapeDataCache();
            waitFor(this._vectors);
            startWaiting();
        }
        public function get type():String{
            return (C.POLYGONS);
        }
        public function get size():int{
            return (this._cache.size());
        }
        public function get closedPaths():Boolean{
            return (true);
        }
        public function get bounds():BoundingBox{
            return (this._cache);
        }
        override protected function handleReadyState():void{
            if (this._proj){
                this.importShapes();
            };
        }
        public function load(_arg1:IShapeLoader):void{
        }
        public function fetchIdsByRadiusTest(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Boolean=false):ShapeDataSet{
            if (!this._cache){
                return (null);
            };
            var _local5:Array = this._cache.getIdsByPoint(_arg1, _arg2, _arg3);
            return (new ShapeDataSet(_local5, this._cache.index));
        }
        public function fetchIdsByBoundsTest(_arg1:BoundingBox, _arg2:Number=0):ShapeDataSet{
            var _local3:Array;
            if (!this._cache){
                return (new ShapeDataSet([], null));
            };
            if (!_arg1.intersects(this._cache)){
                return (new ShapeDataSet([], this._cache.index));
            };
            var _local4:Number = 0;
            _local3 = this._cache.getIdsByBox(_arg1, _local4);
            return (new ShapeDataSet(_local3, this._cache.index));
        }
        public function fetchShapes(_arg1:IFilter=null):ShapeDataSet{
            var _local2:int = this._cache.size();
            var _local3:Array = [];
            var _local4:int;
            while (_local4 < _local2) {
                _local3[_local4] = _local4;
                _local4++;
            };
            var _local5:ShapeDataSet = new ShapeDataSet(_local3, this._cache.index);
            if (_arg1){
                _local5.applyFilter(_arg1);
            };
            return (_local5);
        }
        public function fetchShapeById(_arg1:int):ShapeVector{
            var _local2:ShapeVector = this._cache.getShapeData(_arg1);
            return (_local2);
        }
        public function fetchShapesByIds(_arg1:Array):ShapeDataSet{
            return (new ShapeDataSet(_arg1, this._cache.index));
        }
        public function fetchAllShapes():ShapeDataSet{
            var _local1:int = this._cache.size();
            var _local2:Array = [];
            var _local3:int;
            while (_local3 < _local1) {
                _local2[_local3] = _local3;
                _local3++;
            };
            return (new ShapeDataSet(_local2, this._cache.index));
        }
        public function set projection(_arg1:IGeoProjection):void{
            this._proj = _arg1;
            if (!ready){
                return;
            };
            this.importShapes();
        }
        protected function importShapes():void{
            if (!this._proj){
                return;
            };
            var _local1:Object = this._vectors.extractProjectedShapes(this._proj);
            var _local2:Array = _local1.shapes;
            var _local3:int = _local2.length;
            this._cache = new ShapeDataCache();
            this._cache.addShapes(_local1.shapes, _local1.bounds);
        }

    }
}//package mb.shapes 
﻿package mb.shapes {
    import mb.*;

    public class VertexSet extends BoundingBox {

        protected var _idx:int = 0;
        protected var _size:int = 0;
        protected var _reverse:Boolean = false;
        public var nextX:Number;
        public var nextY:Number;

        public function reverseOnce():void{
            this._reverse = true;
        }
        public function initBounds():void{
        }
        public function size():int{
            return (this._size);
        }
        public function get hasNext():Boolean{
            return (false);
        }
        public function reset():void{
            this._idx = 0;
            this._reverse = false;
        }

    }
}//package mb.shapes 
﻿package mb.shapes {
    import mb.projections.*;
    import mb.*;
    import mb.expressions.*;

    public class ShapeSet extends IdSet implements IShapeSet {

        protected var _index:Array;
        public var nextShape:ShapeVector;

        public function ShapeSet(_arg1:Array, _arg2:Array){
            super(_arg1);
            this._index = _arg2;
        }
        override public function get hasNext():Boolean{
            if (_i < _size){
                nextId = _ids[_i++];
                this.nextShape = this._index[nextId];
                return (true);
            };
            reset();
            return (false);
        }
        public function subtractSet(_arg1:ShapeSet):ShapeSet{
            return (new ShapeSet(subtractIds(_arg1), this._index));
        }
        public function addSet(_arg1:ShapeSet):ShapeSet{
            return (new ShapeSet(addIds(_arg1), this._index));
        }
        public function mergeSet(_arg1:ShapeSet):ShapeSet{
            var _local2:Array = spliceIds(_arg1);
            return (new ShapeSet(_local2, this._index));
        }

    }
}//package mb.shapes 
﻿package mb.shapes {
    import flash.display.*;
    import mb.*;
    import mb.maps.*;

    public class ShapeVector extends BoundingBox {

        private var _numParts:int = 0;
        private var _firstPart:VertexSet;
        private var _parts:Array;
        public var nextPart:VertexSet = null;
        private var _nextPartIdx:int = 0;
        public var hidden:Boolean = false;
        public var id:int;

        public function ShapeVector(_arg1:int, _arg2:VertexSet){
            this.id = _arg1;
            if (_arg2){
                this.addPartData(_arg2);
            };
        }
        public function get partCount():int{
            return (this._numParts);
        }
        public function hasNextPart():Boolean{
            var _local1 = (this._nextPartIdx < this._numParts);
            if (_local1){
                this.nextPart = (((this._nextPartIdx == 0)) ? this._firstPart : this._parts[this._nextPartIdx]);
                this._nextPartIdx++;
            } else {
                this._nextPartIdx = 0;
            };
            return (_local1);
        }
        public function empty():void{
            this._numParts = 0;
            this._parts = null;
        }
        public function addPartData(_arg1:VertexSet):void{
            mergeBounds(_arg1);
            if (this._numParts == 0){
                this._firstPart = _arg1;
            } else {
                if (this._numParts == 1){
                    this._parts = [this._firstPart, _arg1];
                } else {
                    this._parts.push(_arg1);
                };
            };
            this._numParts++;
        }
        public function get parts():Array{
            if (this._parts != null){
                return (this._parts);
            };
            if (this._firstPart){
                return ([this._firstPart]);
            };
            return ([]);
        }
        public function mergeShapeVector(_arg1:ShapeVector):void{
            while (_arg1.hasNextPart()) {
                this.addPartData(_arg1.nextPart);
            };
        }
        public function drawShapeVectors(_arg1:XY, _arg2:Graphics):void{
            var _local7:Number;
            var _local8:Number;
            var _local9:VertexSet;
            var _local11:Number;
            var _local12:Number;
            var _local3:Number = _arg1.mxProjToLayer;
            var _local4:Number = _arg1.myProjToLayer;
            var _local5:Number = _arg1.bxProjToLayer;
            var _local6:Number = _arg1.byProjToLayer;
            var _local10:int;
            while (_local10 < this._numParts) {
                if (_local10 === 0){
                    _local9 = this._firstPart;
                } else {
                    _local9 = this._parts[_local10];
                };
                if (_local9.hasNext){
                    _local11 = ((_local9.nextX * _local3) + _local5);
                    _local12 = ((_local9.nextY * _local4) + _local6);
                    _arg2.moveTo(_local11, _local12);
                    while (_local9.hasNext) {
                        _local7 = ((_local9.nextX * _local3) + _local5);
                        _local8 = ((_local9.nextY * _local4) + _local6);
                        _arg2.lineTo(_local7, _local8);
                    };
                };
                _local10++;
            };
        }

    }
}//package mb.shapes 
﻿package mb.shapes {

    public class TinyPartVertexSet extends VertexSet {

        private var _x1:Number;
        private var _x2:Number;
        private var _y1:Number;
        private var _y2:Number;

        public function TinyPartVertexSet(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number){
            this._x1 = _arg1;
            this._x2 = _arg3;
            this._y1 = _arg2;
            this._y2 = _arg4;
            _size = 2;
            if (_arg1 > _arg3){
                left = _arg3;
                right = _arg1;
            } else {
                left = _arg1;
                right = _arg3;
            };
            if (_arg2 > _arg4){
                top = _arg2;
                bottom = _arg4;
            } else {
                top = _arg4;
                bottom = _arg2;
            };
            hasBounds = true;
        }
        override public function get hasNext():Boolean{
            if (_idx >= 2){
                _idx = 0;
                _reverse = false;
                return (false);
            };
            if ((((((_idx == 0)) && (!(_reverse)))) || ((((_idx == 1)) && (_reverse))))){
                nextX = this._x1;
                nextY = this._y1;
            } else {
                nextX = this._x2;
                nextY = this._y2;
            };
            _idx++;
            return (true);
        }

    }
}//package mb.shapes 
﻿package mb.shapes {
    import mb.projections.*;
    import mb.*;
    import mb.expressions.*;

    public class ShapeDataSet extends IdSet {

        protected var _index:Array;
        public var nextShape:ShapeVector;

        public function ShapeDataSet(_arg1:Array, _arg2:Array){
            super(_arg1);
            this._index = _arg2;
        }
        public function get bounds():BoundingBox{
            var _local1:BoundingBox = new BoundingBox();
            while (this.hasNext) {
                _local1.mergeBounds(this.nextShape);
            };
            return (_local1);
        }
        override public function get hasNext():Boolean{
            if (_i < _size){
                nextId = _ids[_i++];
                this.nextShape = this._index[nextId];
                return (true);
            };
            reset();
            return (false);
        }
        public function subtractSet(_arg1:ShapeDataSet):ShapeDataSet{
            return (new ShapeDataSet(subtractIds(_arg1), this._index));
        }
        public function addSet(_arg1:ShapeSet):ShapeDataSet{
            return (new ShapeDataSet(addIds(_arg1), this._index));
        }
        public function mergeSet(_arg1:ShapeDataSet):ShapeDataSet{
            return (new ShapeDataSet(spliceIds(ShapeDataSet(_arg1)), this._index));
        }

    }
}//package mb.shapes 
﻿package mb.shapes {
    import mb.*;
    import mb.utils.*;

    public class ShapeDataCache extends BoundingBox {

        private var indexArr:Array;

        public function ShapeDataCache(){
            this.indexArr = [];
        }
        public function size():int{
            return (this.indexArr.length);
        }
        public function get index():Array{
            return (this.indexArr);
        }
        public function hasShape(_arg1:int):Boolean{
            return (!((this.indexArr[_arg1] === undefined)));
        }
        public function getShapes():Array{
            return (this.indexArr);
        }
        public function addShapes(_arg1:Array, _arg2:BoundingBox):void{
            if (_arg1.length == 0){
                return;
            };
            var _local3:int = this.indexArr.length;
            this.indexArr.push.apply(null, _arg1);
            mergeBounds(_arg2);
            if ((((_local3 > 0)) || (!((_arg1[0].id == 0))))){
                this.renumberShapes(_local3);
            };
        }
        public function clear():void{
            if (this.size() > 0){
                this.deleteIdRange(0, this.size());
            };
        }
        public function deleteIdRange(_arg1:int, _arg2:int):void{
            if ((((_arg1 < 0)) || (((_arg1 + _arg2) > this.indexArr.length)))){
                return;
            };
            this.indexArr.splice(_arg1, _arg2);
            if (this.indexArr.length == 0){
                hasBounds = false;
            } else {
                this.renumberShapes(_arg1);
            };
        }
        private function renumberShapes(_arg1:int=0):void{
            var _local4:ShapeVector;
            var _local2:int = this.indexArr.length;
            var _local3:int = _arg1;
            while (_local3 < _local2) {
                _local4 = this.indexArr[_local3];
                _local4.id = _local3;
                _local3++;
            };
        }
        public function addShapeData(_arg1:ShapeVector):void{
            var _local2:int = _arg1.id;
            var _local3:int = this.indexArr.length;
            if (_local2 < _local3){
                this.indexArr[_local2].mergeShapeVector(_arg1);
            } else {
                if (_local2 > _local3){
                };
                this.indexArr[_local2] = _arg1;
            };
            mergeBounds(_arg1);
        }
        public function insertShapeData(_arg1:ShapeVector):void{
            if (!_arg1){
                return;
            };
            this.indexArr[_arg1.id] = _arg1;
            mergeBounds(_arg1);
        }
        public function getShapeData(_arg1:int):ShapeVector{
            return (this.indexArr[_arg1]);
        }
        public function getIdsByBox(_arg1:BoundingBox, _arg2:Number=0):Array{
            var _local6:ShapeVector;
            if (((!(_arg1)) || (!(this.indexArr)))){
            };
            var _local3:int = this.indexArr.length;
            var _local4:Array = [];
            var _local5:int;
            for (;_local5 < _local3;_local5++) {
                _local6 = this.indexArr[_local5];
                if (((!(_local6)) || (_local6.hidden))){
                } else {
                    if (_arg2 > 0){
                        if (((((_local6.top - _local6.bottom) < _arg2)) && (((_local6.right - _local6.left) < _arg2)))){
                            continue;
                        };
                    };
                    if (_arg1.intersects(_local6)){
                        _local4.push(_local5);
                    };
                };
            };
            return (_local4);
        }
        public function getIdsByPoint(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Boolean=false):Array{
            var _local8:ShapeVector;
            var _local5:int = this.indexArr.length;
            var _local6:Array = [];
            var _local7:int;
            while (_local7 < _local5) {
                _local8 = this.indexArr[_local7];
                if (_local8 == null){
                } else {
                    if (((_local8.hidden) && ((_arg4 == false)))){
                    } else {
                        if (_local8.containsBufferedPoint(_arg1, _arg2, _arg3)){
                            _local6.push(_local7);
                        };
                    };
                };
                _local7++;
            };
            return (_local6);
        }

    }
}//package mb.shapes 
﻿package mb.shapes {
    import mb.data.*;

    public interface IShapeSet {

        function get hasNext():Boolean;
        function applyFilter(_arg1:IFilter):void;

    }
}//package mb.shapes 
﻿package mb.shapes {
    import mb.data.*;
    import mb.*;
    import mb.importing.*;

    public interface IShapeDataSource extends IWaiter {

        function fetchShapeById(_arg1:int):ShapeVector;
        function fetchShapesByIds(_arg1:Array):ShapeDataSet;
        function fetchIdsByRadiusTest(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Boolean=false):ShapeDataSet;
        function fetchIdsByBoundsTest(_arg1:BoundingBox, _arg2:Number=0):ShapeDataSet;
        function fetchShapes(_arg1:IFilter=null):ShapeDataSet;
        function get bounds():BoundingBox;
        function get type():String;
        function get closedPaths():Boolean;
        function load(_arg1:IShapeLoader):void;

    }
}//package mb.shapes 
﻿package mb.shapes {
    import flash.geom.*;

    public class SimplePartVertexSet extends VertexSet {

        public static var nextPoint:Point = new Point();

        protected var _xx:Array;
        protected var _yy:Array;

        public function SimplePartVertexSet(_arg1:Array, _arg2:Array){
            this._xx = _arg1;
            this._yy = _arg2;
            _size = _arg1.length;
        }
        override public function initBounds():void{
            setBoundsFromArrays(this._xx, this._yy);
            _size = this._xx.length;
        }
        public function get xx():Array{
            return (this._xx);
        }
        public function get yy():Array{
            return (this._yy);
        }
        public function updateBounds():void{
            var _local6:Number;
            var _local7:Number;
            if (_size == 0){
                hasBounds = false;
                return;
            };
            var _local1:Number = this._xx[0];
            var _local2:Number = _local1;
            var _local3:Number = this._yy[0];
            var _local4:Number = _local3;
            var _local5 = 1;
            while (_local5 < _size) {
                _local6 = this._xx[_local5];
                _local7 = this._yy[_local5];
                if (_local6 < _local1){
                    _local1 = _local6;
                } else {
                    if (_local6 > _local2){
                        _local2 = _local6;
                    };
                };
                if (_local7 < _local3){
                    _local3 = _local7;
                } else {
                    if (_local7 > _local4){
                        _local4 = _local7;
                    };
                };
                _local5++;
            };
            setBounds(_local1, _local4, _local2, _local3);
        }
        override public function get hasNext():Boolean{
            if (_idx >= _size){
                _idx = 0;
                _reverse = false;
                return (false);
            };
            var _local1:int = _idx;
            if (_reverse){
                _local1 = ((_size - _local1) - 1);
            };
            nextX = this._xx[_local1];
            nextY = this._yy[_local1];
            _idx++;
            return (true);
        }

    }
}//package mb.shapes 
﻿package mb {
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;

    public class FrameCounter extends EventDispatcher {

        private static var _handle:FrameCounter = new (FrameCounter)();
;
        private static var _count:int = 0;

        private var _sp:Sprite;
        private var _listenerIndex:Dictionary;
        private var _prevFrameTime:Number = 0;
        private var _evt:DynamicEvent;
        private var _callbackIndex:Dictionary;

        public function FrameCounter():void{
            this._callbackIndex = new Dictionary();
            this._sp = new Sprite();
            this._listenerIndex = new Dictionary();
            this._evt = new DynamicEvent(C.CHANGE, {elapsed:0});
            this._sp.addEventListener(Event.ENTER_FRAME, this.handleFrame);
        }
        public static function skipFrames(_arg1:int, _arg2:Function):void{
            _handle.skipFrames(_arg1, _arg2);
        }
        public static function get count():int{
            return (_count);
        }
        public static function get handle():FrameCounter{
            if (!_handle){
                _handle = new (FrameCounter)();
            };
            return (_handle);
        }

        override public function addEventListener(_arg1:String, _arg2:Function, _arg3:Boolean=false, _arg4:int=0, _arg5:Boolean=true):void{
            if (((!((_arg1 == C.CHANGE))) || (this._listenerIndex[_arg2]))){
                return;
            };
            this._listenerIndex[_arg2] = _arg2;
            super.addEventListener(_arg1, _arg2, _arg3, _arg4, _arg5);
        }
        public function skipFrames(_arg1:int, _arg2:Function):void{
            if (_arg1 < 1){
                return;
            };
            var _local3:int = (_count + _arg1);
            this._callbackIndex[_arg2] = _local3;
        }
        override public function removeEventListener(_arg1:String, _arg2:Function, _arg3:Boolean=false):void{
            if (((!(this._listenerIndex[_arg2])) || (!((_arg1 == C.CHANGE))))){
                return;
            };
            delete this._listenerIndex[_arg2];
            super.removeEventListener(_arg1, _arg2, _arg3);
        }
        private function handleFrame(_arg1:Event):void{
            var _local3:int;
            var _local4:*;
            var _local5:Function;
            var _local6:int;
            var _local2:Number = new Date().time;
            if (_count > 0){
                _local3 = (_local2 - this._prevFrameTime);
                if (_local3 > 250){
                };
                for (_local4 in this._callbackIndex) {
                    _local5 = (_local4 as Function);
                    _local6 = this._callbackIndex[_local5];
                    if (_count >= _local6){
                        delete this._callbackIndex[_local5];
                        _local5();
                    };
                };
                this._evt.elapsed = _local3;
                dispatchEvent(this._evt);
            };
            this._prevFrameTime = _local2;
            _count++;
        }

    }
}//package mb 
﻿package mb.easing {

    public class IndexedNumberTween extends TweenTimer {

        private var _a:Number;
        private var _b:Number;
        private var _ref:Object;

        public function IndexedNumberTween(_arg1:Object){
            this._ref = _arg1;
        }
        override public function procTween(_arg1:Number):void{
            var _local2:Number = ((this._b * _arg1) + (this._a * (1 - _arg1)));
            _callback(_local2, this._ref, _done);
        }
        public function start(_arg1:int, _arg2:Function, _arg3:Function, _arg4:Number, _arg5:Number):void{
            this._a = _arg4;
            this._b = _arg5;
            startTween(_arg1, _arg2, _arg3);
        }

    }
}//package mb.easing 
﻿package mb.easing {

    public class NumberTween extends TweenTimer {

        private var _a:Number;
        private var _b:Number;

        public function start(_arg1:int, _arg2:Function, _arg3:Function, _arg4:Number, _arg5:Number):void{
            this._a = _arg4;
            this._b = _arg5;
            startTween(_arg1, _arg2, _arg3);
        }
        override public function procTween(_arg1:Number):void{
            var _local2:Number;
            if (_callback != null){
                _local2 = this.calcValue(_arg1);
                _callback(_local2, _done);
            };
        }
        public function updateTargetValue(_arg1:Number):void{
            this._b = _arg1;
        }
        public function get currentValue():Number{
            return (this.calcValue(currentPct));
        }
        public function calcValue(_arg1:Number):Number{
            return (((this._b * _arg1) + (this._a * (1 - _arg1))));
        }

    }
}//package mb.easing 
﻿package mb.easing {
    import flash.events.*;
    import mb.*;
    import flash.utils.*;

    public class PropertyTween extends TweenTimer {

        private static var _index:Dictionary;

        private var _orig:Object;
        private var _target:Object;
        private var _obj:Object;

        public static function start(_arg1:Object, _arg2:Object, _arg3:int=300, _arg4:Function=null):void{
            var _local5:PropertyTween;
            if (!_index){
                _index = new Dictionary();
            };
            if (_index[_arg1] === undefined){
                _local5 = new (PropertyTween)();
                _index[_arg1] = _local5;
            } else {
                _local5 = _index[_arg1];
                _local5.stop();
            };
            _local5.start(_arg1, _arg2, _arg3, _arg4);
        }

        public function start(_arg1:Object, _arg2:Object, _arg3:int=350, _arg4:Function=null):void{
            var _local5:Object;
            var _local6:Number;
            this._obj = _arg1;
            this._target = _arg2;
            this._orig = {};
            for (_local5 in _arg2) {
                _local6 = _arg1[_local5];
                if (isNaN(_local6)){
                    delete _arg2[_local5];
                } else {
                    this._orig[_local5] = _local6;
                };
            };
            if (_arg4 == null){
                _arg4 = TweenMethods.standard;
            };
            startTween(_arg3, _arg4, null);
        }
        override public function procTween(_arg1:Number):void{
            var _local2:Object;
            var _local3:Number;
            var _local4:Number;
            for (_local2 in this._orig) {
                _local3 = this._orig[_local2];
                _local4 = this._target[_local2];
                this._obj[_local2] = ((_local4 * _arg1) + (_local3 * (1 - _arg1)));
            };
            dispatchEvent(new Event(C.CHANGE));
        }
        public function updateTarget(_arg1:Object):void{
            this._target = _arg1;
        }

    }
}//package mb.easing 
﻿package mb.easing {

    public class TweenMethods {

        public static function linear(_arg1:Number):Number{
            return (_arg1);
        }
        public static function easeOutCubic(_arg1:Number):Number{
            _arg1 = (1 - Math.pow((1 - _arg1), 3));
            return (_arg1);
        }
        public static function easeOutQuadratic(_arg1:Number):Number{
            _arg1 = (1 - Math.pow((1 - _arg1), 2));
            return (_arg1);
        }
        public static function easeInOutSine(_arg1:Number):Number{
            _arg1 = (0.5 - (Math.cos((_arg1 * Math.PI)) / 2));
            return (_arg1);
        }
        public static function easeInWeakOutStrong(_arg1:Number):Number{
            _arg1 = easeOutCubic(easeInOutSine(_arg1));
            return (_arg1);
        }
        public static function strong(_arg1:Number):Number{
            _arg1 = easeOutCubic(easeInOutSine(_arg1));
            return (_arg1);
        }
        public static function standard(_arg1:Number):Number{
            _arg1 = easeOutQuadratic(easeInOutSine(_arg1));
            return (_arg1);
        }
        public static function easeInQuadratic(_arg1:Number):Number{
            _arg1 = (1 - easeOutQuadratic((1 - _arg1)));
            return (_arg1);
        }

    }
}//package mb.easing 
﻿package mb.easing {
    import mb.maps.*;

    public class MapExtentTween extends TweenTimer {

        private var _a:MapExtent;
        private var _b:MapExtent;
        private var _speed:Number = 1;
        private var _scale:Number;

        public function MapExtentTween(_arg1:Number=1):void{
            this._speed = _arg1;
        }
        public function get finalExtent():MapExtent{
            return (this._b);
        }
        public function start(_arg1:int, _arg2:Function, _arg3:MapExtent, _arg4:MapExtent):void{
            this._a = _arg3;
            this._b = _arg4;
            var _local5:Number = (this._a.relativeScale / this._b.relativeScale);
            var _local6:Function = TweenMethods.easeInWeakOutStrong;
            var _local7:Number = (((_local5 > 1)) ? (1 / _local5) : _local5);
            var _local8:Number = 0.6;
            _arg1 = ((_arg1 * _local8) + ((_arg1 * (1 - _local7)) * (1 - _local8)));
            _arg1 = (_arg1 * this._speed);
            startTween(_arg1, _local6, _arg2);
        }
        override public function procTween(_arg1:Number):void{
            var _local2:MapExtent = MapExtent(this._a.clone());
            var _local3:Number = _arg1;
            var _local4:Number = (1 - _arg1);
            var _local5:Number = ((this._a.width * _local4) + (this._b.width * _local3));
            var _local6:Number = ((this._a.height * _local4) + (this._b.height * _local3));
            var _local7:Number = ((this._a.left * _local4) + (this._b.left * _local3));
            var _local8:Number = ((this._a.top * _local4) + (this._b.top * _local3));
            _local2.setBounds(_local7, _local8, (_local7 + _local5), (_local8 - _local6));
            _callback(_local2, _done);
        }

    }
}//package mb.easing 
﻿package mb.easing {

    public interface ITween {

        function procTween(_arg1:Number):void;

    }
}//package mb.easing 
﻿package mb.easing {
    import flash.events.*;
    import mb.*;

    public class TweenEvent extends Event {

        public var progress:Number = 0;
        public var done:Boolean = false;
        public var data:Object;

        public function TweenEvent(_arg1:Number, _arg2:Boolean, _arg3:Object=null){
            super(C.TWEEN);
            this.progress = _arg1;
            this.done = _arg2;
            this.data = _arg3;
        }
        override public function clone():Event{
            var _local1:TweenEvent = new TweenEvent(this.progress, this.done, this.data);
            return (_local1);
        }
        override public function toString():String{
            var _local1 = (("[TweenEvent type=\"" + type) + "\" ");
            _local1 = (_local1 + (("progress=" + this.progress) + " done="));
            _local1 = (_local1 + ((this.done) ? "true" : "false"));
            _local1 = (_local1 + "]");
            return (_local1);
        }

    }
}//package mb.easing 
﻿package mb.easing {
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;

    public class Fader {

        public static const FADE_OUT:String = "fade-out";

        private static var _dict:Dictionary = new Dictionary();
        private static var _rollerIndex:Dictionary;
        private static var _tweenCount:int = 0;

        public static function fadeOut(_arg1:DisplayObject, _arg2:int=300, _arg3:int=0):void{
            hideObject(_arg1, _arg2, _arg3);
        }
        public static function fadeIn(_arg1:DisplayObject, _arg2:int=300, _arg3:int=0):void{
            showObject(_arg1, _arg2, _arg3);
        }
        public static function fadeOnRollOut(_arg1:DisplayObject, _arg2:int=1000):void{
            if (!_rollerIndex){
                _rollerIndex = new Dictionary();
            } else {
                if (_rollerIndex[_arg1]){
                    return;
                };
            };
            _rollerIndex[_arg1] = _arg2;
            _arg1.addEventListener(MouseEvent.ROLL_OUT, handleOut);
            _arg1.addEventListener(MouseEvent.ROLL_OVER, handleOver);
        }
        private static function handleOut(_arg1:Event):void{
            var _local2:DisplayObject = (_arg1.target as DisplayObject);
            var _local3:int = _rollerIndex[_local2];
            hideObject(_local2, 180, _local3);
        }
        private static function handleOver(_arg1:Event):void{
            var _local2:DisplayObject = (_arg1.target as DisplayObject);
            ((_dict[_local2]) && (_dict[_local2].stop()));
            _local2.alpha = 1;
        }
        public static function showObject(_arg1:DisplayObject, _arg2:int=300, _arg3:int=0, _arg4:Number=0):void{
            if (((_arg1.visible) && ((_arg1.alpha == 1)))){
            };
            if (!_arg1.visible){
                _arg1.visible = true;
                _arg4 = 0;
                _arg1.alpha = 0;
            } else {
                _arg4 = _arg1.alpha;
            };
            var _local5:IndexedNumberTween = fetchTween(_arg1);
            _local5.delay = _arg3;
            var _local6:int = (_arg2 * (1 - _arg4));
            _local5.start(_local6, TweenMethods.easeOutQuadratic, handleFadeIn, _arg4, 1);
        }
        public static function hideObject(_arg1:DisplayObject, _arg2:int=300, _arg3:int=0, _arg4:Number=0):void{
            var _local5:Number = _arg1.alpha;
            if (_local5 == 0){
                _arg1.visible = false;
            };
            if (!_arg1.visible){
                return;
            };
            var _local6:int = (_arg2 * _local5);
            var _local7:IndexedNumberTween = fetchTween(_arg1);
            _local7.delay = _arg3;
            _local7.start(_local6, TweenMethods.easeOutQuadratic, handleFadeOut, _local5, _arg4);
        }
        private static function fetchTween(_arg1:DisplayObject):IndexedNumberTween{
            if (!_dict[_arg1]){
                _dict[_arg1] = new IndexedNumberTween(_arg1);
                _tweenCount++;
            };
            var _local2:IndexedNumberTween = _dict[_arg1];
            if (_local2.busy){
                _local2.stop();
            };
            return (_local2);
        }
        public static function handleFadeIn(_arg1:Number, _arg2:DisplayObject, _arg3:Boolean):void{
            _arg2.alpha = _arg1;
            if (!_arg2.visible){
            };
        }
        public static function handleFadeOut(_arg1:Number, _arg2:DisplayObject, _arg3:Boolean):void{
            _arg2.alpha = _arg1;
            if (_arg3){
                if (_arg1 < 0.01){
                    _arg2.visible = false;
                    _arg2.alpha = 1;
                };
                _arg2.dispatchEvent(new Event(FADE_OUT));
            };
        }

    }
}//package mb.easing 
﻿package mb.easing {
    import flash.events.*;
    import mb.*;

    public class TweenTimer extends EventDispatcher {

        private var _tween:ITween;
        private var _start:Number;
        private var _duration:int;
        private var _delay:int = 0;
        public var _quickStart:Boolean = true;
        protected var _callback:Function = null;
        protected var _method:Function = null;
        protected var _done:Boolean = false;
        protected var _busy:Boolean = false;
        private var _snap:Number = 0.0001;

        public function get busy():Boolean{
            return (this._busy);
        }
        public function set delay(_arg1:int):void{
            this._delay = _arg1;
        }
        public function set snap(_arg1:Number):void{
            this._snap = _arg1;
        }
        public function startTween(_arg1:int, _arg2:Function, _arg3:Function):void{
            if (this.busy){
                this.resetTimer();
            };
            if (_arg1 <= 0){
                return;
            };
            this._method = _arg2;
            this._callback = _arg3;
            this._duration = _arg1;
            this.startTimer();
        }
        private function startTimer():void{
            this._start = new Date().time;
            this._busy = true;
            if (this._quickStart){
                this._start = (this._start - int((1000 / 30)));
                this.tickTock(null);
            };
            FrameCounter.handle.addEventListener(C.CHANGE, this.tickTock);
        }
        private function resetTimer():void{
            this._done = false;
            FrameCounter.handle.removeEventListener(C.CHANGE, this.tickTock);
            this._busy = false;
        }
        public function stop():void{
            this.resetTimer();
        }
        public function procTween(_arg1:Number):void{
            if (this._done){
                this._busy = false;
            };
            dispatchEvent(new TweenEvent(_arg1, this._done));
        }
        public function get currentPct():Number{
            if (this._busy == false){
                return (1);
            };
            var _local1:Number = new Date().time;
            var _local2:Number = ((_local1 - this._start) - this._delay);
            if (_local2 < 0){
                return (0);
            };
            var _local3:Number = (_local2 / this._duration);
            if (_local3 > 1){
                _local3 = 1;
            };
            if (this._method != null){
                _local3 = this._method(_local3);
            };
            return (_local3);
        }
        protected function tickTock(_arg1:Event):void{
            if (this._busy == false){
                this.resetTimer();
                return;
            };
            if (this._done){
                return;
            };
            var _local2:Number = this.currentPct;
            if (_local2 == 0){
                return;
            };
            var _local3:Boolean;
            if ((_local2 + this._snap) >= 1){
                _local2 = 1;
                _local3 = true;
                this._done = true;
            };
            this.procTween(_local2);
            if (!this._busy){
                this.resetTimer();
                return;
            };
            if (((_local3) && (this._done))){
                this.resetTimer();
                dispatchEvent(new Event(C.DONE));
            };
        }

    }
}//package mb.easing 
﻿package mb {
    import flash.display.*;
    import flash.geom.*;

    public class PixelBox extends Rectangle {

        private var _mc:DisplayObjectContainer = null;

        public function PixelBox(_arg1:DisplayObjectContainer, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Number){
            this._mc = _arg1;
            super(_arg2, _arg3, _arg4, _arg5);
        }
        public function setContext(_arg1:DisplayObjectContainer):void{
            var _local2:Point = new Point(left, top);
            _local2 = PixelPoint.localToLocal(_local2, this._mc, _arg1);
            var _local3:Point = new Point(right, bottom);
            _local3 = PixelPoint.localToLocal(_local3, this._mc, _arg1);
            x = _local2.x;
            y = _local2.y;
            width = (_local3.x - x);
            height = (_local3.y - y);
            this._mc = _arg1;
        }
        public function clonePixelBox():PixelBox{
            return (new PixelBox(this._mc, x, y, width, height));
        }

    }
}//package mb 
﻿package mb {
    import flash.display.*;

    public interface ILiquidTable {

        function getAlignmentClip():DisplayObject;
        function getWidth():Number;
        function setWidth(_arg1:Number):void;

    }
}//package mb 
﻿package mb.browser {
    import flash.display.*;
    import mb.*;
    import flash.net.*;
    import flash.system.*;
    import flash.external.*;

    public class Browser {

        static const numExp:RegExp = /^-?[0-9.]+$/;

        private static var _enableScroll:Boolean = true;

        public static function disableScrolling():void{
        }
        public static function enableScrolling():void{
        }
        public static function getBrowserVars(_arg1:Stage):Object{
            var _local2:Object = getEmbedVars(_arg1);
            Opts.mergeProperties(getQueryVars(), _local2, true);
            return (_local2);
        }
        public static function getEmbedVars(_arg1:Stage):Object{
            if (!_arg1.root){
                return ({});
            };
            return (LoaderInfo(_arg1.root.loaderInfo).parameters);
        }
        public static function navigateToURL(_arg1:String, _arg2:String="_self"):void{
            if (_arg1){
                navigateToURL(new URLRequest(_arg1), _arg2);
            };
        }
        public static function toggleFullScreen(_arg1:Stage):void{
            var stage:* = _arg1;
            try {
                if (stage.displayState != StageDisplayState.FULL_SCREEN){
                    stage.displayState = StageDisplayState.FULL_SCREEN;
                } else {
                    stage.displayState = StageDisplayState.NORMAL;
                };
            } catch(err) {
            };
        }
        public static function testingIsEnabled():Boolean{
            var _local1:Boolean = ((!(swfIsEmbedded())) || (getQueryVars().testing));
            return (_local1);
        }
        public static function swfIsEmbedded():Boolean{
            var _local1:String = Capabilities.playerType;
            if ((((_local1 == "StandAlone")) || ((_local1 == "External")))){
                return (false);
            };
            return (true);
        }
        public static function getPageUrl():String{
            var _local1:Object;
            if (ExternalInterface.available){
                _local1 = ExternalInterface.call("function(){return window.location.href.toString();}");
            };
            return (((_local1) ? String(_local1) : ""));
        }
        public static function call(_arg1:String, ... _args):void{
            if (ExternalInterface.available){
                ExternalInterface.call(_arg1, _args);
            };
        }
        public static function addCallback(_arg1:String, _arg2:Function):void{
            if (ExternalInterface.available){
                ExternalInterface.addCallback(_arg1, _arg2);
            };
        }
        public static function getQueryString(_arg1:String):String{
            var _local2 = "";
            if (((_arg1) && (!((_arg1.indexOf("?") == -1))))){
                _local2 = _arg1.split("?")[1];
            };
            return (_local2);
        }
        public static function log(_arg1:String):void{
            if (ExternalInterface.available){
                ExternalInterface.call((("function(){ console && console.log && console.log('" + _arg1) + "'); }"));
            };
        }
        public static function getQueryVars():Object{
            var _local4:String;
            var _local1:String = getPageUrl();
            var _local2:Object = getUrlVars(_local1);
            var _local3:int = _local1.indexOf("#");
            if ((((_local3 > -1)) && ((_local3 < (_local1.length - 1))))){
                _local4 = _local1.substr((_local3 + 1));
                _local2.hashTag = _local4;
            };
            return (_local2);
        }
        public static function getUrlVars(_arg1:String):Object{
            var _local4:Array;
            var _local5:int;
            var _local6:String;
            var _local7:String;
            var _local8:String;
            var _local2:Object = {};
            var _local3:String = getQueryString(_arg1);
            if (_local3){
                _local4 = _local3.split("&");
                for each (_local6 in _local4) {
                    _local5 = _local6.indexOf("=");
                    if (_local5 > 0){
                        _local7 = _local6.substring(0, _local5);
                        _local8 = unescape(_local6.substring((_local5 + 1)));
                        if (numExp.test(_local8)){
                            _local2[_local7] = parseFloat(_local8);
                        } else {
                            _local2[_local7] = _local8;
                        };
                    };
                };
            };
            return (_local2);
        }

    }
}//package mb.browser 
﻿package mb.browser {
    import flash.display.*;
    import flash.external.*;

    public class MouseWheel {

        private static var _mouseWheelTrapped:Boolean = false;
        private static var _allowed:Boolean = true;

        public static function capture():void{
            init();
            if (((_mouseWheelTrapped) && (_allowed))){
                _allowed = false;
                ExternalInterface.call("function(){__scrollBlock=true}");
            };
        }
        public static function release():void{
            init();
            if (((_mouseWheelTrapped) && (!(_allowed)))){
                _allowed = true;
                ExternalInterface.call("function(){__scrollBlock=false}");
            };
        }
        private static function init():void{
            if (((_mouseWheelTrapped) || (!(ExternalInterface.available)))){
                return;
            };
            _mouseWheelTrapped = true;
            var _local1:String =  <![CDATA[
				function wheel(event){
					if(__scrollBlock){
						event.preventDefault && event.preventDefault();
						event.returnValue=false;
					}
				}
				window.addEventListener && window.addEventListener('DOMMouseScroll',wheel,false);
				window.onmousewheel=document.onmousewheel=wheel;
			]]>
            .toString();
            _local1 = (("function(){" + _local1) + "}");
            ExternalInterface.call(_local1);
        }

    }
}//package mb.browser 
﻿package mb {
    import flash.geom.*;

    public class BoundingBox {

        public var left:Number;
        public var top:Number;
        public var right:Number;
        public var bottom:Number;
        public var hasBounds:Boolean = false;

        public function toString():String{
            return ((((((((("{" + this.left) + ", ") + this.top) + ", ") + this.right) + ", ") + this.bottom) + "}"));
        }
        public function getCenterPoint():Point{
            var _local1:Point = new Point(this.centerX, this.centerY);
            return (_local1);
        }
        public function get centerX():Number{
            return ((0.5 * (this.left + this.right)));
        }
        public function get centerY():Number{
            return ((0.5 * (this.top + this.bottom)));
        }
        public function setBounds(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):BoundingBox{
            this.left = _arg1;
            this.top = _arg2;
            this.right = _arg3;
            this.bottom = _arg4;
            this.hasBounds = true;
            return (this);
        }
        public function setBoundsFromArrays(_arg1:Array, _arg2:Array):void{
            var _local4:int;
            var _local5:Number;
            var _local6:Number;
            var _local3:int = _arg1.length;
            if (_local3 > 0){
                this.hasBounds = true;
                _local4 = 0;
                while (_local4 < _local3) {
                    _local5 = _arg1[_local4];
                    _local6 = _arg2[_local4];
                    if (_local4 == 0){
                        this.left = (this.right = _local5);
                        this.top = (this.bottom = _local6);
                    } else {
                        if (_local5 < this.left){
                            this.left = _local5;
                        } else {
                            if (_local5 > this.right){
                                this.right = _local5;
                            };
                        };
                        if (_local6 > this.top){
                            this.top = _local6;
                        } else {
                            if (_local6 < this.bottom){
                                this.bottom = _local6;
                            };
                        };
                    };
                    _local4++;
                };
            };
        }
        public function toArray():Array{
            var _local1:Array = [this.left, this.top, this.right, this.bottom];
            return (_local1);
        }
        public function clone():BoundingBox{
            var _local1:BoundingBox = new BoundingBox();
            if (this.hasBounds){
                _local1.setBounds(this.left, this.top, this.right, this.bottom);
            };
            return (_local1);
        }
        public function mergePoint(_arg1:Number, _arg2:Number):void{
            if (this.hasBounds){
                if (_arg1 < this.left){
                    this.left = _arg1;
                } else {
                    if (_arg1 > this.right){
                        this.right = _arg1;
                    };
                };
                if (_arg2 < this.bottom){
                    this.bottom = _arg2;
                } else {
                    if (_arg2 > this.top){
                        this.top = _arg2;
                    };
                };
            } else {
                this.setBounds(_arg1, _arg2, _arg1, _arg2);
            };
        }
        public function mergeBounds(_arg1:BoundingBox):void{
            if (!_arg1.hasBounds){
                return;
            };
            if (this.hasBounds){
                if (this.left > _arg1.left){
                    this.left = _arg1.left;
                };
                if (this.top < _arg1.top){
                    this.top = _arg1.top;
                };
                if (this.right < _arg1.right){
                    this.right = _arg1.right;
                };
                if (this.bottom > _arg1.bottom){
                    this.bottom = _arg1.bottom;
                };
            } else {
                this.setBounds(_arg1.left, _arg1.top, _arg1.right, _arg1.bottom);
            };
        }
        public function get width():Number{
            return (((this.hasBounds) ? (this.right - this.left) : 0));
        }
        public function get height():Number{
            return (((this.hasBounds) ? (this.top - this.bottom) : 0));
        }
        public function get area():Number{
            return (((this.hasBounds) ? ((this.top - this.bottom) * (this.right - this.left)) : 0));
        }
        public function contains(_arg1:BoundingBox):Boolean{
            if ((((((((_arg1.left >= this.left)) && ((_arg1.right <= this.right)))) && ((_arg1.top <= this.top)))) && ((_arg1.bottom >= this.bottom)))){
                return (true);
            };
            return (false);
        }
        public function shift(_arg1:Number, _arg2:Number):void{
            this.left = (this.left + _arg1);
            this.right = (this.right + _arg1);
            this.top = (this.top + _arg2);
            this.bottom = (this.bottom + _arg2);
        }
        public function inflate(_arg1:Number, _arg2:Number=NaN):void{
            if (isNaN(_arg2)){
                _arg2 = _arg1;
            };
            this.left = (this.left - _arg1);
            this.right = (this.right + _arg1);
            this.top = (this.top + _arg2);
            this.bottom = (this.bottom - _arg2);
            if (this.left > this.right){
                this.left = (this.right = ((this.right + this.left) * 0.5));
            };
            if (this.top < this.bottom){
                this.top = (this.bottom = ((this.top + this.bottom) * 0.5));
            };
        }
        public function intersects(_arg1:BoundingBox):Boolean{
            if (((((!(this.hasBounds)) || (!(_arg1)))) || (!(_arg1.hasBounds)))){
                return (false);
            };
            if ((((_arg1.left < this.right)) && ((_arg1.right > this.left)))){
                if ((((_arg1.top > this.bottom)) && ((_arg1.bottom < this.top)))){
                    return (true);
                };
            };
            return (false);
        }
        public function intersectsSegment(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):Boolean{
            if ((((((((((_arg1 < this.left)) && ((_arg3 < this.left)))) || ((((_arg1 > this.right)) && ((_arg3 > this.right)))))) || ((((_arg2 > this.top)) && ((_arg4 > this.top)))))) || ((((_arg2 < this.bottom)) && ((_arg4 < this.bottom)))))){
                return (false);
            };
            return (true);
        }
        public function getIntersection(_arg1:BoundingBox):BoundingBox{
            var _local2:BoundingBox = new BoundingBox();
            if (this.intersects(_arg1)){
                _local2.setBounds(Math.max(this.left, _arg1.left), Math.min(this.top, _arg1.top), Math.min(this.right, _arg1.right), Math.max(this.bottom, _arg1.bottom));
            };
            return (_local2);
        }
        public function containsBox(_arg1:BoundingBox):Boolean{
            if (((!(this.hasBounds)) || (!(_arg1.hasBounds)))){
                return (false);
            };
            return ((((((((this.left <= _arg1.left)) && ((this.top >= _arg1.top)))) && ((this.right >= _arg1.right)))) && ((this.bottom <= _arg1.bottom))));
        }
        public function containsPoint(_arg1:Number, _arg2:Number):Boolean{
            if ((((_arg1 >= this.left)) && ((_arg1 <= this.right)))){
                if ((((_arg2 <= this.top)) && ((_arg2 >= this.bottom)))){
                    return (true);
                };
            };
            return (false);
        }
        public function containsBufferedPoint(_arg1:Number, _arg2:Number, _arg3:Number):Boolean{
            if (((((_arg1 + _arg3) > this.left)) && (((_arg1 - _arg3) < this.right)))){
                if (((((_arg2 - _arg3) < this.top)) && (((_arg2 + _arg3) > this.bottom)))){
                    return (true);
                };
            };
            return (false);
        }

    }
}//package mb 
﻿package mb.expressions {

    public class ExpressionMacro {

        private var _argNames:Array;
        private var _exp:Expression;

        public function ExpressionMacro(_arg1:Expression, _arg2:Array):void{
            this._argNames = _arg2;
            this._exp = _arg1;
        }
        public function call(... _args):Object{
            if (_args.length != this._argNames.length){
                return (null);
            };
            var _local2:Object = {};
            var _local3:int;
            while (_local3 < _args.length) {
                _local2[this._argNames[_local3]] = _args[_local3];
                _local3++;
            };
            return (this._exp.eval(null, _local2));
        }

    }
}//package mb.expressions 
﻿package mb.expressions {
    import mb.data.*;
    import mb.text.*;
    import mb.utils.*;

    public class Expression {

        public static const OPERATOR:int = 30;
        public static const OPERAND:int = 31;
        public static const METHOD:int = 20;
        public static const PROPERTY:int = 21;
        public static const FUNCTION:int = 23;
        public static const STRING:int = 24;
        public static const NUMBER:int = 25;
        public static const OBJECT:int = 26;
        public static const INVALID:int = 27;
        public static const NAME:int = 28;
        public static const COND:int = 1;
        public static const MUL:int = 2;
        public static const ADD:int = 3;
        public static const SUB:int = 4;
        public static const DIV:int = 5;
        public static const AND:int = 6;
        public static const OR:int = 7;
        public static const EQ:int = 8;
        public static const NEQ:int = 9;
        public static const GT:int = 10;
        public static const GE:int = 11;
        public static const LT:int = 12;
        public static const LE:int = 13;
        public static const MOD:int = 14;
        public static const ASS:int = 15;
        public static const PART:int = 16;
        private static const rxId:String = "[_a-zA-Z][_a-zA-Z0-9]*";
        private static const rxMethod:String = (("(?P<className>RecordMath|Math|Text|DateString)?\\.(?P<method>" + rxId) + ")(?P<openp>\\((?P<closep> *\\))?)?");
        private static const rxFunction:String = (("(?P<func>" + rxId) + ")\\((?P<fclose> *\\))?");
        private static const rxReserved:String = "(?P<reserved>\\b(?:true|false|null|NaN)\\b)";
        private static const rxBinOp:String = "(?P<bin>[+/*\\-%]|[><]=?|[!=]?=|&&|\\|\\|)";
        private static const rxNum:String = "(?P<num>0[xX][a-fA-F0-9]{1,6}|-?\\d*\\.?\\d+\\b)";
        private static const rxName:String = (("(?P<name>" + rxId) + ")");
        private static const rxSyntax:String = "(?P<syntax>\\(|\\)|,|\\?|:)";
        private static const rxpString:RegExp = /(?P<quotes>'[^'\\]*(?:\\.[^'\\]*)*'|"[^"\\]*(?:\\.[^"\\]*)*")/;
        private static const rxTokenStr:String = [rxpString.source, rxReserved, rxMethod, rxFunction, rxNum, rxBinOp, rxName, rxSyntax].join("|");

        private var _stack:Array;
        private var _opStack:Array;
        private var _execStack:Array;
        private var _valid:Boolean = false;
        private var _environment:Object;
        private var _names:Object;
        private var _prevOperand:InfixToken;

        public function Expression(_arg1:String):void{
            this._execStack = [];
            this._names = {};
            this.compile(_arg1);
        }
        public function setEnvironmentVars(_arg1:Object):void{
            this._environment = _arg1;
        }
        public function isValid():Boolean{
            return (this._valid);
        }
        public function get nameIndex():Object{
            return (this._names);
        }
        private function compile(_arg1:String):void{
            var _local2:Array;
            var _local5:String;
            var _local6:InfixToken;
            var _local7:String;
            var _local8:String;
            var _local9:Boolean;
            var _local10:InfixToken;
            this._stack = [];
            this._opStack = [];
            var _local3:int;
            var _local4:RegExp = new RegExp(rxTokenStr, "g");
            while ((_local2 = _local4.exec(_arg1)) != null) {
                _local5 = _local2[0];
                _local6 = new InfixToken(_local5);
                _local6.type = INVALID;
                _local6.bracketLevel = _local3;
                if (_local2.reserved){
                    _local6.category = OPERAND;
                    _local6.type = OBJECT;
                    if (_local5 == "true"){
                        _local6.value = true;
                    } else {
                        if (_local5 == "false"){
                            _local6.value = false;
                        } else {
                            if (_local5 == "NaN"){
                                _local6.value = NaN;
                            } else {
                                _local6.value = null;
                            };
                        };
                    };
                    this.addOperand(_local6);
                } else {
                    if (_local2.func){
                        _local6.category = OPERATOR;
                        _local6.priority = 13;
                        _local7 = _local2.func;
                        _local6.value = _local7;
                        _local6.type = METHOD;
                        if (_local7 == "isNaN"){
                            _local6.closure = isNaN;
                        } else {
                            if (_local7 == "parseInt"){
                                _local6.closure = parseInt;
                            } else {
                                if (_local7 == "parseFloat"){
                                    _local6.closure = parseFloat;
                                } else {
                                    if (_local7 == "trace"){
                                        _local6.closure = trace;
                                    };
                                };
                            };
                        };
                        if (_local2.fclose){
                            _local6.operands = 0;
                        } else {
                            _local6.operands = 1;
                            _local3++;
                        };
                        this.addOperator(_local6, true);
                    } else {
                        if (_local2.method){
                            _local6.category = OPERATOR;
                            _local6.priority = 13;
                            _local6.value = _local2.method;
                            if (_local2.className){
                                _local8 = _local2.className;
                                if (_local8 == "Text"){
                                    _local6.classObj = Text;
                                } else {
                                    if (_local8 == "Math"){
                                        _local6.classObj = Math;
                                    } else {
                                        if (_local8 == "DateString"){
                                            _local6.classObj = DateString;
                                        } else {
                                            if (_local8 == "RecordMath"){
                                                _local6.classObj = RecordMath;
                                            };
                                        };
                                    };
                                };
                                if (((_local6.classObj) && ((_local6.classObj[_local6.value] is Function)))){
                                    _local6.closure = _local6.classObj[_local6.value];
                                };
                            };
                            if (_local2.openp){
                                _local6.type = METHOD;
                                if (_local2.closep){
                                    _local6.operands = 0;
                                } else {
                                    _local6.operands = 1;
                                    _local3++;
                                };
                            } else {
                                _local6.type = PROPERTY;
                            };
                            this.addOperator(_local6, true);
                        } else {
                            if (_local2.name){
                                _local6.category = OPERAND;
                                _local6.type = NAME;
                                _local6.value = _local5;
                                this._names[_local5] = true;
                                this.addOperand(_local6);
                            } else {
                                if (_local2.bin){
                                    _local6.category = OPERATOR;
                                    _local6.operands = 2;
                                    _local9 = true;
                                    switch (_local5){
                                        case "+":
                                            _local6.type = ADD;
                                            _local6.priority = 9;
                                            break;
                                        case "-":
                                            _local6.type = SUB;
                                            _local6.priority = 9;
                                            break;
                                        case "*":
                                            _local6.type = MUL;
                                            _local6.priority = 10;
                                            break;
                                        case "/":
                                            _local6.type = DIV;
                                            _local6.priority = 10;
                                            break;
                                        case "%":
                                            _local6.type = MOD;
                                            _local6.priority = 10;
                                            break;
                                        case "==":
                                            _local6.type = EQ;
                                            _local6.priority = 6;
                                            break;
                                        case "!=":
                                            _local6.type = NEQ;
                                            _local6.priority = 6;
                                            break;
                                        case "<":
                                            _local6.type = LT;
                                            _local6.priority = 7;
                                            break;
                                        case "<=":
                                            _local6.type = LE;
                                            _local6.priority = 7;
                                            break;
                                        case ">":
                                            _local6.type = GT;
                                            _local6.priority = 7;
                                            break;
                                        case ">=":
                                            _local6.type = GE;
                                            _local6.priority = 7;
                                            break;
                                        case "&&":
                                            _local6.type = AND;
                                            _local6.priority = 2;
                                            break;
                                        case "||":
                                            _local6.type = OR;
                                            _local6.priority = 1;
                                            break;
                                        case "=":
                                            _local6.type = ASS;
                                            _local9 = false;
                                            _local6.priority = -1;
                                            if (((this._prevOperand) && ((this._prevOperand.type == NAME)))){
                                                _local6.value = this._prevOperand.value;
                                            };
                                            break;
                                    };
                                    this.addOperator(_local6, _local9);
                                } else {
                                    if (_local2.num){
                                        _local6.category = OPERAND;
                                        _local6.type = NUMBER;
                                        _local6.value = Parsers.parseNumber(_local5);
                                        this.addOperand(_local6);
                                    } else {
                                        if (_local2.syntax){
                                            if (_local5 == "("){
                                                _local3++;
                                            } else {
                                                if (_local5 == ")"){
                                                    _local3--;
                                                    this.closeBracketLevel(_local3);
                                                } else {
                                                    if (_local5 == ","){
                                                        this.closeBracketLevel((_local3 - 1));
                                                        if (this._opStack.length > 0){
                                                            _local10 = this._opStack[(this._opStack.length - 1)];
                                                            if ((((_local10.type == METHOD)) || ((_local10.type == FUNCTION)))){
                                                                _local10.operands++;
                                                            };
                                                        };
                                                    } else {
                                                        if (_local5 == "?"){
                                                            _local6.category = OPERATOR;
                                                            _local6.type = COND;
                                                            _local6.operands = 3;
                                                            _local6.priority = 0;
                                                            _local6.bracketLevel = _local3;
                                                            this.closeBracketLevel(_local3);
                                                            this.addOperator(_local6, false);
                                                            _local3++;
                                                        } else {
                                                            if (_local5 == ":"){
                                                                _local3--;
                                                                this.closeBracketLevel(_local3);
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        } else {
                                            if (_local2.quotes){
                                                _local6.category = OPERAND;
                                                _local6.type = STRING;
                                                _local6.value = Parsers.parseString(_local2.quotes);
                                                this.addOperand(_local6);
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
            while (this._opStack.length > 0) {
                this._stack.push(this._opStack.pop());
            };
            this._valid = true;
        }
        private function closeBracketLevel(_arg1:Number):void{
            var _local2:InfixToken;
            while (this._opStack.length > 0) {
                _local2 = this._opStack[(this._opStack.length - 1)];
                if (_local2.bracketLevel > _arg1){
                    this._stack.push(this._opStack.pop());
                } else {
                    break;
                };
            };
        }
        private function addOperator(_arg1:InfixToken, _arg2:Boolean):void{
            var _local3:InfixToken;
            while (this._opStack.length > 0) {
                _local3 = this._opStack[(this._opStack.length - 1)];
                if ((((_local3.bracketLevel >= _arg1.bracketLevel)) && (((((_arg2) && ((_local3.priority >= _arg1.priority)))) || (((!(_arg2)) && ((_local3.priority > _arg1.priority)))))))){
                    this._stack.push(this._opStack.pop());
                } else {
                    break;
                };
            };
            this._opStack.push(_arg1);
        }
        private function addOperand(_arg1:InfixToken):void{
            this._prevOperand = _arg1;
            this._stack.push(_arg1);
        }
        public function traceStack():void{
            var _local2:InfixToken;
            var _local3:String;
            var _local1:int = (this._stack.length - 1);
            while (_local1 >= 0) {
                _local2 = this._stack[_local1];
                _local3 = ((((("   \t" + _local2.raw) + "   \ttype: ") + _local2.type) + "   cat: ") + _local2.category);
                if ((((_local2.type == METHOD)) || ((_local2.type == FUNCTION)))){
                    _local3 = (_local3 + ("\toperands: " + _local2.operands));
                };
                _local1--;
            };
        }
        public function eval(_arg1:Record=null, _arg2:Object=null):Object{
            var _local4:*;
            var _local5:*;
            var _local7:Object;
            var _local10:InfixToken;
            var _local11:int;
            var _local12:Array;
            var _local13:Function;
            var _local14:int;
            var _local15:int;
            var _local16:*;
            var _local17:String;
            if (!this._valid){
                return (null);
            };
            if (this._execStack.length != 0){
                this._execStack.splice(0);
            };
            var _local3:int = this._stack.length;
            if (_local3 == 0){
                return (null);
            };
            var _local6:Object;
            var _local8:Boolean;
            var _local9:int;
            while (_local9 < _local3) {
                _local10 = this._stack[_local9];
                if (_local10.category == OPERAND){
                    if (_local10.type == NAME){
                        if (((!((_arg2 == null))) && (!((_arg2[_local10.value] == undefined))))){
                            _local7 = _arg2[_local10.value];
                        } else {
                            if (((!((this._environment == null))) && (!((this._environment[_local10.value] == undefined))))){
                                _local7 = this._environment[_local10.value];
                            } else {
                                if (_arg1){
                                    _local7 = _arg1.getObject(_local10.value);
                                } else {
                                    _local7 = null;
                                };
                            };
                        };
                    } else {
                        _local7 = _local10.value;
                    };
                } else {
                    _local11 = _local10.operands;
                    if (_local10.type == METHOD){
                        if (_local11 > 0){
                            _local4 = _local6;
                            _local8 = false;
                            if (_local11 > 1){
                                _local5 = this._execStack.pop();
                                if (_local11 > 2){
                                    _local12 = [_local5, _local4];
                                    _local14 = 2;
                                    while (_local14 < _local11) {
                                        _local12.unshift(this._execStack.pop());
                                        _local14++;
                                    };
                                };
                            };
                        };
                        _local13 = _local10.closure;
                        if (_local13 == null){
                            if (((this._environment) && ((this._environment[_local10.value] is ExpressionMacro)))){
                                _local13 = this._environment[_local10.value].call;
                            } else {
                                _local13 = ((_local8) ? _local6[_local10.value] : this._execStack.pop()[_local10.value]);
                                _local8 = false;
                            };
                        };
                        if (_local11 == 0){
                            _local7 = _local13();
                        } else {
                            if (_local11 == 1){
                                _local7 = _local13(_local4);
                            } else {
                                if (_local11 == 2){
                                    _local7 = _local13(_local5, _local4);
                                } else {
                                    _local7 = _local13.apply(null, _local12);
                                };
                            };
                        };
                    } else {
                        if (_local10.type == PROPERTY){
                            if (_local8){
                                _local7 = _local6[_local10.value];
                                _local8 = false;
                            } else {
                                _local7 = _local10.classObj[_local10.value];
                            };
                        } else {
                            _local5 = _local6;
                            _local4 = this._execStack.pop();
                            _local8 = false;
                            _local15 = _local10.type;
                            if (_local10.operands == 3){
                                if (_local15 == COND){
                                    _local16 = this._execStack.pop();
                                    _local7 = ((_local16) ? _local4 : _local5);
                                };
                            } else {
                                if (_local10.operands == 2){
                                    if (_local15 == ASS){
                                        _local7 = _local5;
                                        _local17 = _local10.value;
                                        if (!_local17){
                                        } else {
                                            if (((this._environment) && (this._environment[_local17]))){
                                                this._environment[_local17] = _local7;
                                            } else {
                                                if (((_arg1) && (_arg1.schema[_local17]))){
                                                    _arg1.insertObject(_local17, _local7);
                                                } else {
                                                    if (!_arg2){
                                                        _arg2 = {};
                                                    };
                                                    _arg2[_local17] = _local7;
                                                };
                                            };
                                        };
                                    } else {
                                        if (_local15 == ADD){
                                            _local7 = (_local4 + _local5);
                                        } else {
                                            if (_local15 == SUB){
                                                _local7 = (_local4 - _local5);
                                            } else {
                                                if (_local15 == MUL){
                                                    _local7 = (_local4 * _local5);
                                                } else {
                                                    if (_local15 == DIV){
                                                        _local7 = (_local4 / _local5);
                                                    } else {
                                                        if (_local15 == OR){
                                                            _local7 = ((_local4) || (_local5));
                                                        } else {
                                                            if (_local15 == AND){
                                                                _local7 = ((_local4) && (_local5));
                                                            } else {
                                                                if (_local15 == EQ){
                                                                    _local7 = (_local4 == _local5);
                                                                } else {
                                                                    if (_local15 == NEQ){
                                                                        _local7 = !((_local4 == _local5));
                                                                    } else {
                                                                        if (_local15 == GT){
                                                                            _local7 = (_local4 > _local5);
                                                                        } else {
                                                                            if (_local15 == GE){
                                                                                _local7 = (_local4 >= _local5);
                                                                            } else {
                                                                                if (_local15 == LT){
                                                                                    _local7 = (_local4 < _local5);
                                                                                } else {
                                                                                    if (_local15 == LE){
                                                                                        _local7 = (_local4 <= _local5);
                                                                                    } else {
                                                                                        if (_local15 == MOD){
                                                                                            _local7 = (_local4 % _local5);
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                if (_local8){
                    this._execStack.push(_local6);
                };
                _local6 = _local7;
                _local8 = true;
                _local9++;
            };
            return (_local6);
        }

    }
}//package mb.expressions 
﻿package mb.expressions {

    public class InfixToken {

        public var raw:String;
        public var category:int;
        public var type:int;
        public var bracketLevel:Number = 0;
        public var value;
        public var classObj:Class = null;
        public var closure:Function = null;
        public var operands:int = 0;
        public var priority:int = 0;

        public function InfixToken(_arg1:String){
            this.raw = _arg1;
        }
    }
}//package mb.expressions 
﻿package mb.expressions {
    import mb.data.*;

    public class ExpressionFilter implements IFilter {

        private var _data:DataTable;
        private var _exp:Expression;
        private var _rec:Record;

        public function ExpressionFilter(_arg1, _arg2:DataTable){
            this._data = _arg2;
            if ((_arg1 is String)){
                this._exp = new Expression(_arg1);
            } else {
                if ((_arg1 is Expression)){
                    this._exp = _arg1;
                } else {
                    this._exp = new Expression("false");
                };
            };
        }
        public function testId(_arg1:int):Boolean{
            if (!this._rec){
                if (!this._data.ready){
                    return (false);
                };
                this._rec = new Record(this._data, 0);
            };
            this._rec.id = _arg1;
            return (this._exp.eval(this._rec));
        }

    }
}//package mb.expressions 
﻿package mb.dev {
    import flash.display.*;
    import mb.*;
    import mb.styles.*;
    import fl.motion.*;
    import mb.text.*;
    import mb.controls.*;
    import flash.filters.*;

    public class ColorTweaker extends Sprite {

        private var _brightnessButtons:PrevNextButtons;
        private var _contrastButtons:PrevNextButtons;
        private var _saturationButtons:PrevNextButtons;
        private var _brightness:int = 0;
        private var _contrast:int = 0;
        private var _saturation:int = 0;
        private var _tweaker:AdjustColor;
        private var _target:DisplayObject;
        private var MAX_VAL:int = 100;
        private var MIN_VAL:int = -100;

        public function ColorTweaker(_arg1:DisplayObject, _arg2:int=0, _arg3:int=0, _arg4:int=0):void{
            this._target = _arg1;
            var _local5:Sprite = new Sprite();
            addChild(_local5);
            this._brightnessButtons = this.makeButtonGroup(_local5);
            this._brightnessButtons.addEventListener(C.CHANGE, this.handleColorChange);
            _local5 = new Sprite();
            addChild(_local5);
            _local5.y = 20;
            this._contrastButtons = this.makeButtonGroup(_local5);
            this._contrastButtons.addEventListener(C.CHANGE, this.handleColorChange);
            _local5 = new Sprite();
            addChild(_local5);
            _local5.y = 40;
            this._saturationButtons = this.makeButtonGroup(_local5);
            this._saturationButtons.addEventListener(C.CHANGE, this.handleColorChange);
            _local5 = new Sprite();
            addChild(_local5);
            _local5.y = 60;
            var _local6:ButtonControl = this.makeLabelButton(_local5, "set");
            _local6.addEventListener(C.CLICK, this.handleSubmit);
            this._tweaker = new AdjustColor();
            this._tweaker.hue = 0;
            this._contrast = _arg3;
            this._brightness = _arg2;
            this._saturation = _arg4;
            if (((((!((_arg4 == 0))) || (!((_arg3 == 0))))) || (!((_arg2 == 0))))){
                this.applySettings();
            };
        }
        private function handleSubmit(_arg1):void{
        }
        public function get matrix():Array{
            return (this._tweaker.CalculateFinalFlatArray());
        }
        private function makeLabelButton(_arg1:Sprite, _arg2:String):ButtonControl{
            var _local3:FormattedTextField = new FormattedTextField();
            _local3.format.font = "Arial";
            _local3.format.color = 0xFFFFFF;
            _local3.format.size = 11;
            _local3.text = _arg2;
            var _local4:MovieClip = new MovieClip();
            _arg1.addChild(_local4);
            _local4.addChild(_local3);
            var _local5 = 4;
            var _local6:ShapeStyle = new ShapeStyle();
            _local6.setFill(17014, 1);
            ButtonIcon.paintBackground(_local4, _local6, (_local3.textWidth + (_local5 * 2)), 17, 2);
            _local3.y = Math.floor(((17 - _local3.height) / 2));
            _local3.x = (_local5 - 1);
            var _local7:ButtonControl = new ButtonControl(_local4);
            return (_local7);
        }
        private function handleColorChange(_arg1):void{
            this._brightness = this.indexToValue(this._brightnessButtons.position);
            this._contrast = this.indexToValue(this._contrastButtons.position);
            this._saturation = this.indexToValue(this._saturationButtons.position);
            this.applySettings();
        }
        private function applySettings():void{
            this._brightnessButtons.position = this.valueToIndex(this._brightness);
            this._contrastButtons.position = this.valueToIndex(this._contrast);
            this._saturationButtons.position = this.valueToIndex(this._saturation);
            this._tweaker.contrast = this._contrast;
            this._tweaker.saturation = this._saturation;
            this._tweaker.brightness = this._brightness;
            var _local1:Array = this._tweaker.CalculateFinalFlatArray();
            var _local2:ColorMatrixFilter = new ColorMatrixFilter(_local1);
            this._target.filters = [_local2];
        }
        private function adjustValue(_arg1:int):int{
            if (_arg1 < this.MIN_VAL){
                _arg1 = this.MIN_VAL;
            };
            if (_arg1 > this.MAX_VAL){
                _arg1 = this.MAX_VAL;
            };
            return (_arg1);
        }
        private function valueToIndex(_arg1:int):int{
            return ((_arg1 - this.MIN_VAL));
        }
        private function indexToValue(_arg1:int):int{
            return ((_arg1 + this.MIN_VAL));
        }
        public function set contrast(_arg1:int):void{
            this._contrast = this.adjustValue(_arg1);
            this.applySettings();
        }
        public function set saturation(_arg1:int):void{
            this._saturation = this.adjustValue(_arg1);
            this.applySettings();
        }
        public function set brightness(_arg1:int):void{
            this._brightness = this.adjustValue(_arg1);
            this.applySettings();
        }
        private function makeButtonGroup(_arg1:Sprite):PrevNextButtons{
            var _local2:MovieClip = ButtonIcon.makeArrowIcon(C.LEFT, 19, 17, 6, 13, -1);
            var _local3:MovieClip = ButtonIcon.makeArrowIcon(C.RIGHT, 19, 17, 6, 13, 1);
            _arg1.addChild(_local2);
            _arg1.addChild(_local3);
            var _local4:ButtonControl = new ButtonControl(_local2, null, {auto_repeat:true});
            var _local5:ButtonControl = new ButtonControl(_local3, null, {auto_repeat:true});
            var _local6:int;
            _local2.x = _local6;
            _local6 = (_local6 + (_local2.width + 4));
            _local3.x = _local6;
            _local6 = (_local6 + (_local3.width + 4));
            var _local7:FormattedTextField = new FormattedTextField();
            _arg1.addChild(_local7);
            _local7.format.font = "Arial";
            _local7.format.size = 11;
            _local7.x = _local6;
            var _local8:PrevNextButtons = new PrevNextButtons(_local4, _local5, _local7);
            _local8.setFormatter(this.formatButtonLabel);
            _local8.length = ((this.MAX_VAL - this.MIN_VAL) + 1);
            _local8.position = Math.round((((this.MAX_VAL + this.MIN_VAL) * 0.5) - this.MIN_VAL));
            return (_local8);
        }
        private function formatButtonLabel(_arg1:int, _arg2:int):String{
            var _local3:String = String((_arg1 - Math.floor((_arg2 / 2))));
            return (_local3);
        }

    }
}//package mb.dev 
﻿package mb {
    import mb.data.*;

    public class IdSet {

        protected var _ids:Array;
        protected var _size:int = 0;
        public var nextId:int = 0;
        protected var _i:int = 0;

        public function IdSet(_arg1:Array=null){
            if (_arg1 == null){
                _arg1 = [];
            };
            this._ids = _arg1;
            this._size = _arg1.length;
        }
        public function get position():int{
            return ((((this._i <= 0)) ? 0 : (this._i - 1)));
        }
        public function replaceIds(_arg1:Array):void{
            if (_arg1.length != this._size){
                this._size = _arg1.length;
            };
            this._ids = _arg1;
        }
        public function size():int{
            return (this._size);
        }
        public function get hasNext():Boolean{
            if (this._i < this._size){
                this.nextId = this._ids[this._i++];
                return (true);
            };
            this.reset();
            return (false);
        }
        public function reset():void{
            this._i = 0;
            this.nextId = -1;
        }
        public function truncate(_arg1:int):void{
            if (_arg1 >= 0){
                this.subset(0, _arg1);
            } else {
                this.subset(((this._size + _arg1) - 1), Math.abs(_arg1));
            };
        }
        public function subset(_arg1:int, _arg2:int):void{
            var _local3:int;
            if ((((_arg1 >= this._size)) || ((_arg1 < 0)))){
                this._ids = [];
            } else {
                _local3 = (_arg1 + _arg2);
                if (_local3 >= this._size){
                    _local3 = (this._size - 1);
                };
                this._ids = this._ids.slice(_arg1, _local3);
            };
            this._size = this._ids.length;
            this.reset();
        }
        public function removeId(_arg1:int):void{
            var _local2:int = this._ids.indexOf(_arg1);
            if (_local2 != -1){
                this._ids.splice(_local2, 1);
            };
            this._size = this._ids.length;
        }
        public function applyFilter(_arg1:IFilter):void{
            var _local5:int;
            var _local2:Array = [];
            var _local3:int;
            var _local4:int;
            while (_local4 < this._size) {
                _local5 = this._ids[_local4];
                if (_arg1.testId(_local5)){
                    var _temp1 = _local3;
                    _local3 = (_local3 + 1);
                    var _local6 = _temp1;
                    _local2[_local6] = _local5;
                };
                _local4++;
            };
            this._ids = _local2;
            this._size = _local2.length;
        }
        public function getIndex():Array{
            var _local1:Array = [];
            var _local2:int;
            while (_local2 < this._size) {
                _local1[this._ids[_local2]] = true;
                _local2++;
            };
            return (_local1);
        }
        public function getIds():Array{
            return (this._ids);
        }
        public function spliceIds(_arg1:IdSet):Array{
            var _local7:int;
            if (!_arg1){
                return ([]);
            };
            var _local2:Array = this.getIndex();
            var _local3:Array = [];
            var _local4:Array = _arg1.getIds();
            var _local5:int = _local4.length;
            var _local6:int;
            while (_local6 < _local5) {
                _local7 = _local4[_local6];
                if (_local2[_local7] === undefined){
                    this._ids.push(_local7);
                    _local3.push(_local7);
                };
                _local6++;
            };
            this._size = this._ids.length;
            return (_local3);
        }
        public function subtractIds(_arg1:IdSet):Array{
            var _local5:int;
            if (!_arg1){
                return (this._ids.concat());
            };
            var _local2:Array = [];
            var _local3:Array = _arg1.getIndex();
            var _local4:int;
            while (_local4 < this._size) {
                _local5 = this._ids[_local4];
                if (_local3[_local5] === undefined){
                    _local2.push(_local5);
                };
                _local4++;
            };
            return (_local2);
        }
        public function addIds(_arg1:IdSet):Array{
            if (!_arg1){
                return (this._ids.slice());
            };
            var _local2:Array = _arg1.subtractIds(this);
            var _local3:Array = this._ids.concat(_local2);
            return (_local3);
        }

    }
}//package mb 
﻿package mb.google {
    import mb.*;

    public class GoogleMaps {

        public static const NORMAL:String = "normal";
        public static const TERRAIN:String = "terrain";
        public static const SATELLITE:String = "satellite";
        public static const CUSTOM:String = "custom";
        public static const LABEL:String = "label";
        public static const STYLED:String = "styled";
        public static const DEFAULT_CHANNEL:String = "newsgraphics";
        public static const WORLD_CHANNEL:String = (DEFAULT_CHANNEL + "-world");
        public static const CENSUS_CHANNEL:String = (DEFAULT_CHANNEL + "-census");

        public static function getTileBounds(_arg1:int, _arg2:int, _arg3:int):BoundingBox{
            var _local4:* = 0x0100;
            var _local5:Number = levelToPixelScale(_arg3);
            var _local6:Number = (_local5 * _local4);
            var _local7:Number = (_arg1 * _local6);
            var _local8:Number = (_arg2 * _local6);
            var _local9:BoundingBox = new BoundingBox();
            var _local10:Number = (1 << _arg3);
            var _local11:Number = ((_local10 * 0.5) * _local6);
            _local7 = (_local7 - _local11);
            _local8 = (_local11 - _local8);
            _local9.setBounds(_local7, _local8, (_local7 + _local6), (_local8 - _local6));
            return (_local9);
        }
        public static function levelToPixelScale(_arg1:Number):Number{
            var _local2:Number = (40075017 / Math.pow(2, (_arg1 + 8)));
            return (_local2);
        }
        public static function pixelScaleToLevel(_arg1:Number, _arg2:Boolean=true):Number{
            var _local3:Number = (Math.log(((40075017 / 0x0100) / _arg1)) / Math.log(2));
            var _local4:Number = Math.round(_local3);
            var _local5:Number = Math.abs((_local3 - _local4));
            if (((_arg2) || ((_local5 < 1E-6)))){
                _local3 = _local4;
            };
            return (_local3);
        }

    }
}//package mb.google 
﻿package mb.google {
    import flash.display.*;
    import mb.projections.*;
    import com.google.maps.*;
    import com.google.maps.services.*;
    import flash.events.*;
    import mb.*;
    import com.google.maps.interfaces.*;
    import flash.geom.*;
    import mb.maps.*;
    import mb.browser.*;
    import flash.filters.*;
    import mb.dev.*;

    public class GoogleMap extends Waiter {

        public static const NORMAL:String = "normal";
        public static const TERRAIN:String = "terrain";
        public static const SATELLITE:String = "satellite";
        private static const _defaults:Object = {
            key:null,
            type:TERRAIN,
            init_level:11,
            blend_mode:BlendMode.MULTIPLY,
            start_hidden:false,
            min_level:1,
            bg_color:0xE7E7E7,
            color_matrix:null,
            brightness:59,
            saturation:-92,
            contrast:-17
        };
        public static const USA_LEVEL:int = 11;

        private static var _mercator:Mercator = new Mercator();

        private var _gmap:Map;
        private var _map:MapStack;
        private var _xyNudge:Point;
        private var _hidden:Boolean = false;
        private var _colorArr:Array;
        private var _tweaker:ColorTweaker;
        private var _mapsWaiter:Waiter;
        private var _opts:Object;

        public function GoogleMap(_arg1:Object=null){
            this._opts = Opts.init(_defaults, _arg1);
            this._gmap = new Map();
            if (this._opts.key){
                this._gmap.key = this._opts.key;
            } else {
                this._gmap.sensor = "false";
                this._gmap.client = "gme-nyt";
            };
            this._gmap.addEventListener(MapEvent.MAP_READY, this.handleGmapReady);
            this._gmap.addEventListener(MapEvent.MAP_PREINITIALIZE, this.handleInit);
            this._mapsWaiter = new Waiter();
            this._mapsWaiter.waitFor(this);
            this._mapsWaiter.addEventListener(C.READY, this.handleMapsReady);
        }
        public function show():void{
            if (this._hidden){
                this._gmap.visible = true;
                this._hidden = false;
                this.updateBlendMode();
            };
        }
        public function setOffsetInMeters(_arg1:Number, _arg2:Number):void{
            this._xyNudge = new Point(_arg1, _arg2);
        }
        public function updateBlendMode():void{
            if (!this._opts.blend_mode){
                return;
            };
            if (!this._hidden){
                this._map.layers.container.blendMode = this._opts.blend_mode;
            } else {
                this._map.layers.container.blendMode = BlendMode.NORMAL;
            };
        }
        public function hide():void{
            if (!this._hidden){
                this._gmap.visible = false;
                this._hidden = true;
                this.updateBlendMode();
            };
        }
        public function get map():Map{
            return (this._gmap);
        }
        public function init(_arg1:MapStack):void{
            this._map = _arg1;
            var _local2:Number = _arg1.width;
            var _local3:Number = _arg1.height;
            var _local4:Sprite = this._map.alignment.clip;
            var _local5:Point = new Point(_local2, _local3);
            this._gmap.setSize(_local5);
            var _local6:int = _local4.parent.getChildIndex(_local4);
            _local4.parent.addChildAt(this._gmap, _local6);
            this._gmap.mouseEnabled = false;
            this._gmap.mouseChildren = false;
            this._gmap.x = _local4.x;
            this._gmap.y = _local4.y;
            this.hide();
            this._mapsWaiter.waitFor(this._map);
            this._mapsWaiter.startWaiting();
        }
        private function handleMapsReady(_arg1:Event):void{
            this.show();
            this._tweaker = new ColorTweaker(this._gmap.getChildAt(1), this._opts.brightness, this._opts.contrast, this._opts.saturation);
            if (!Browser.swfIsEmbedded()){
                this._gmap.stage.addChild(this._tweaker);
                this._tweaker.x = (-(this._tweaker.width) - 4);
                this._tweaker.y = 5;
            };
            this.applyCustomColors();
            this.updateMapPosition();
            this._map.navigation.addEventListener(C.NAVIGATE, this.handleNavigate);
        }
        private function handleGmapReady(_arg1):void{
            dispatchEvent(new Event(C.READY));
        }
        private function getGMapType():IMapType{
            var _local1:IMapType;
            switch (this._opts.type){
                case NORMAL:
                    _local1 = MapType.NORMAL_MAP_TYPE;
                    break;
                case SATELLITE:
                    _local1 = MapType.SATELLITE_MAP_TYPE;
                    break;
                case TERRAIN:
                    _local1 = MapType.PHYSICAL_MAP_TYPE;
                    break;
                default:
                    _local1 = MapType.NORMAL_MAP_TYPE;
            };
            return (_local1);
        }
        private function handleNavigate(_arg1:Object):void{
            this.updateMapPosition();
        }
        public function updateMapPosition():void{
            if (((((!(this._map)) || (!(this._map.ready)))) || (!(this._gmap.isLoaded())))){
                return;
            };
            var _local1:Object = this.getNavigationState();
            if (this._map.navigation.level < this._opts.min_level){
                this.hide();
            } else {
                this.show();
            };
            if (this._hidden){
                return;
            };
            this._gmap.setCenter(new LatLng(_local1.lat, _local1.long), _local1.level);
        }
        private function adjustLatLongCenter(_arg1:GeoPoint):GeoPoint{
            if (!this._xyNudge){
                return (_arg1);
            };
            var _local2:Point = _mercator.projectLatLong(_arg1.lat, _arg1.long);
            _local2.x = (_local2.x - this._xyNudge.x);
            _local2.y = (_local2.y - this._xyNudge.y);
            return (_mercator.unprojectXY(_local2.x, _local2.y));
        }
        private function getNavigationState():Object{
            var _local1:GeoPoint = this._map.navigation.getCenterAsLatLong();
            _local1 = this.adjustLatLongCenter(_local1);
            var _local2:Number = this._map.navigation.metersPerPixel;
            var _local3:int = GoogleMapScales.pixelScaleToLevel(_local2, true);
            var _local4 = (this._map.navigation.level >= this._opts.min_level);
            var _local5:Object = {
                lat:_local1.lat,
                long:_local1.long,
                level:_local3,
                mpp:_local2,
                visible:_local4
            };
            return (_local5);
        }
        private function handleInit(_arg1):void{
            var _local5:Object;
            var _local6:int;
            var _local7:Number;
            var _local8:Number;
            if (((this._map) && (this._map.ready))){
                this.show();
                _local5 = this.getNavigationState();
                _local6 = _local5.level;
                _local7 = _local5.lat;
                _local8 = _local5.long;
            } else {
                _local6 = 1;
                _local7 = 0;
                _local8 = 0;
            };
            var _local2:Object = this.getGMapType();
            var _local3:int = _local6;
            var _local4:MapOptions = new MapOptions({
                backgroundFillStyle:{
                    alpha:Alpha.OPAQUE,
                    color:this._opts.bg_color
                },
                crosshairs:false,
                controlByKeyboard:false,
                continuousZoom:false,
                overlayRaising:false,
                doubleClickMode:null,
                dragging:false,
                continuousZoom:false,
                mapType:_local2,
                center:new LatLng(_local7, _local8),
                zoom:_local3
            });
            this._gmap.setInitOptions(_local4);
        }
        private function applyCustomColors():void{
            var _local2:Sprite;
            var _local3:ColorMatrixFilter;
            var _local1:Array;
            if (this._opts.color_matrix){
                _local1 = this._opts.color_matrix;
            } else {
                if (((((this._opts.contrast) || (this._opts.brightness))) || (this._opts.saturation))){
                    _local1 = this._tweaker.matrix;
                };
            };
            if (_local1){
                _local2 = (this._gmap.getChildAt(1) as Sprite);
                _local3 = new ColorMatrixFilter(_local1);
                _local2.filters = [_local3];
            };
        }

    }
}//package mb.google 
﻿package mb.google {
    import flash.display.*;
    import com.google.analytics.*;
    import mb.browser.*;
    import com.google.analytics.components.*;

    public class Analytics {

        private static var _key:String = "UA-9262032-1";
        private static var _singleIndex:Object = {};
        private static var _ga:AnalyticsTracker;
        private static var _slug:String;
        private static var _enabled:Boolean = false;

        public static function init(_arg1:String, _arg2:Stage, _arg3:Boolean=false):void{
            if (_ga){
                return;
            };
            _slug = _arg1;
            _ga = new GATracker(_arg2, _key, "AS3", _arg3);
            _enabled = true;
            if (_arg3){
            };
            _ga.setDomainName(".nytimes.com");
            _ga.trackPageview(("/" + _slug));
            _ga.trackEvent(_slug, "Load");
            if (Browser.getEmbedVars(_arg2).no_analytics){
                _enabled = false;
            };
        }
        public static function trackPageview(_arg1:String, _arg2:String=""):void{
            if (!_enabled){
                return;
            };
            var _local3:String = ((_slug + "/") + _arg1);
            if (_arg2){
                _local3 = (_local3 + ("/" + _arg2));
            };
            _ga.trackPageview(_local3);
        }
        public static function trackEventOnce(_arg1:String, _arg2:String="", _arg3:int=-1):void{
            var _local4:String = _arg1;
            if (_arg2){
                _local4 = (_local4 + ("--" + _arg2));
            };
            if (_singleIndex[_local4]){
                return;
            };
            _singleIndex[_local4] = true;
            trackEvent((_arg1 + "_once"), _arg2, _arg3);
        }
        public static function trackEvent(_arg1:String, _arg2:String="", _arg3:int=-1):void{
            if (!_enabled){
                return;
            };
            if (!_ga){
                return;
            };
            if (_arg3 > -1){
                _ga.trackEvent(_slug, _arg1, _arg2, _arg3);
            } else {
                _ga.trackEvent(_slug, _arg1, _arg2);
            };
        }

    }
}//package mb.google 
﻿package mb.google {

    public class GoogleMapScales {

        public static function levelToPixelScale(_arg1:Number):Number{
            var _local2:Number = (40075017 / Math.pow(2, (_arg1 + 8)));
            return (_local2);
        }
        public static function pixelScaleToLevel(_arg1:Number, _arg2:Boolean=true):Number{
            var _local3:Number = (Math.log(((40075017 / 0x0100) / _arg1)) / Math.log(2));
            var _local4:Number = Math.round(_local3);
            var _local5:Number = Math.abs((_local3 - _local4));
            if (((_arg2) || ((_local5 < 1E-6)))){
                _local3 = _local4;
            };
            return (_local3);
        }

    }
}//package mb.google 
﻿package mb {
    import flash.display.*;
    import flash.geom.*;

    public class PixelPoint {

        private static var _p:Point = new Point();

        public var x:Number;
        public var y:Number;
        private var _mc:DisplayObjectContainer = null;

        public function PixelPoint(_arg1:Number, _arg2:Number, _arg3:DisplayObjectContainer){
            this.x = _arg1;
            this.y = _arg2;
            this._mc = _arg3;
        }
        public static function localToLocal(_arg1:Point, _arg2:DisplayObjectContainer, _arg3:DisplayObjectContainer):Point{
            _arg1 = _arg2.localToGlobal(_arg1);
            _arg1 = _arg3.globalToLocal(_arg1);
            return (_arg1);
        }
        public static function translateXY(_arg1:Number, _arg2:Number, _arg3:DisplayObjectContainer, _arg4:DisplayObjectContainer):Point{
            _p.x = _arg1;
            _p.y = _arg2;
            return (localToLocal(_p, _arg3, _arg4));
        }

        public function setContext(_arg1:DisplayObjectContainer):PixelPoint{
            var _local2:Point = new Point(this.x, this.y);
            _local2 = localToLocal(_local2, this._mc, _arg1);
            this.x = _local2.x;
            this.y = _local2.y;
            this._mc = _arg1;
            return (this);
        }
        public function clone():PixelPoint{
            return (new PixelPoint(this.x, this.y, this._mc));
        }

    }
}//package mb 
﻿package mb.projections {
    import flash.geom.*;

    public interface IGeoProjection {

        function compare(_arg1:IGeoProjection):Boolean;
        function getScaleFactor(_arg1:Number, _arg2:Number):Number;
        function set useEllipsoid(_arg1:Boolean):void;
        function set useFeet(_arg1:Boolean):void;
        function setFalseEastingNorthing(_arg1:Number, _arg2:Number):void;
        function projectLatLong(_arg1:Number, _arg2:Number):Point;
        function projectLatLongFast(_arg1:Number, _arg2:Number):Point;
        function unprojectXY(_arg1:Number, _arg2:Number):GeoPoint;
        function unprojectXYFast(_arg1:Number, _arg2:Number):GeoPoint;
        function reprojectXY(_arg1:Number, _arg2:Number, _arg3:IGeoProjection):Point;
        function reprojectXYFast(_arg1:Number, _arg2:Number, _arg3:IGeoProjection):Point;
        function toString():String;

    }
}//package mb.projections 
﻿package mb.projections {

    public class GeoPoint {

        public var lat:Number;
        public var long:Number;

        public function GeoPoint(_arg1:Number=0, _arg2:Number=0):void{
            this.lat = _arg1;
            this.long = _arg2;
        }
        public function clone():GeoPoint{
            return (new GeoPoint(this.lat, this.long));
        }
        public function toString():String{
            return (((("lat: " + this.lat) + " long: ") + this.long));
        }

    }
}//package mb.projections 
﻿package mb.projections {

    public class NullProjection extends ProjectionBase {

        override public function toString():String{
            return ("null_projection");
        }

    }
}//package mb.projections 
﻿package mb.projections {
    import flash.geom.*;

    public class Mercator extends ProjectionBase {

        private var _id:String;

        public function Mercator(_arg1:Number=0, _arg2:Number=0):void{
            _lat0 = (_arg2 * _deg2rad);
            _long0 = (_arg1 * _deg2rad);
            useEllipsoid = true;
            this._id = "mercator";
            if (((_arg1) || (_arg2))){
                this._id = (this._id + ((("_lon" + _arg1) + "_lat") + _arg2));
            };
        }
        override public function toString():String{
            return (((this._id + "_") + super.toString()));
        }
        override public function getScaleFactor(_arg1:Number, _arg2:Number):Number{
            var _local3:Number = (_arg1 * _deg2rad);
            var _local4:Number = Math.sin(_local3);
            var _local5:Number = (Math.sqrt((1 - (((_e * _e) * _local4) * _local4))) / Math.cos(_local3));
            return (_local5);
        }
        override protected function projectSph(_arg1:Number, _arg2:Number):Point{
            _xy.x = (_R * (_arg2 - _long0));
            _xy.y = (_R * Math.log(Math.tan(((Math.PI * 0.25) + (_arg1 * 0.5)))));
            return (_xy);
        }
        override protected function projectEll(_arg1:Number, _arg2:Number):Point{
            _xy.x = (_a * (_arg2 - _long0));
            var _local3:Number = Math.sin(_arg1);
            _xy.y = (_a * Math.log((Math.tan(((Math.PI * 0.25) + (_arg1 * 0.5))) * Math.pow(((1 - (_e * _local3)) / (1 + (_e * _local3))), (_e * 0.5)))));
            return (_xy);
        }
        override protected function unprojectSph(_arg1:Number, _arg2:Number):GeoPoint{
            _ll.long = ((_arg1 / _R) + _long0);
            _ll.lat = ((Math.PI * 0.5) - (2 * Math.atan(Math.exp((-(_arg2) / _R)))));
            return (_ll);
        }
        override protected function unprojectEll(_arg1:Number, _arg2:Number):GeoPoint{
            var _local11:Number;
            var _local12:Number;
            var _local3:Number = ((_arg1 / _a) + _long0);
            var _local4:Number = 1.5707963267949;
            var _local5:Number = 1E-8;
            var _local6 = 10;
            var _local7:Number = (0.5 * _e);
            var _local8:Number = Math.exp((-((_arg2 / _a)) / _k0));
            var _local9:Number = (_local4 - (2 * Math.atan(_local8)));
            var _local10:int = _local6;
            do  {
                _local11 = (_e * Math.sin(_local9));
                _local12 = ((_local4 - (2 * Math.atan((_local8 * Math.pow(((1 - _local11) / (1 + _local11)), _local7))))) - _local9);
                _local9 = (_local9 + _local12);
            } while ((((Math.abs(_local12) > _local5)) && ((_temp1 > 0))));
            _ll.long = _local3;
            _ll.lat = _local9;
            return (_ll);
        }

    }
}//package mb.projections 
﻿package mb.projections {
    import flash.geom.*;

    public class ProjectionBase implements IGeoProjection {

        public static const _R:Number = 6378137;
        public static const _deg2rad:Number = 0.0174532925199433;
        public static const _rad2deg:Number = 57.2957795130823;

        protected static var _xy:Point = new Point();
        protected static var _ll:GeoPoint = new GeoPoint();

        protected var _useEllipsoid:Boolean = false;
        protected var _a:Number = 6378137;
        protected var _f:Number = 0.00335281066474748;
        protected var _e:Number = 0.0818191908426215;
        protected var _long0:Number;
        protected var _lat1:Number;
        protected var _lat2:Number;
        protected var _lat0:Number;
        protected var _k0:Number = 1;
        protected var _dist0:Number;
        protected var _x0:Number = 0;
        protected var _y0:Number = 0;
        protected var _useFeet:Boolean = false;

        public function ProjectionBase():void{
        }
        public function toString():String{
            var _local1:String = ((this._useEllipsoid) ? "ell" : "sph");
            if (this._x0){
                _local1 = (_local1 + ("_e" + this._x0));
            };
            if (this._y0){
                _local1 = (_local1 + ("_n" + this._y0));
            };
            if (this._k0 != 1){
                _local1 = (_local1 + ("_k" + this._k0));
            };
            return (_local1);
        }
        public function getScaleFactor(_arg1:Number, _arg2:Number):Number{
            return (1);
        }
        public function projectLatLongFast(_arg1:Number, _arg2:Number):Point{
            var _local3:Number = (_arg1 * _deg2rad);
            var _local4:Number = (_arg2 * _deg2rad);
            if (this._useEllipsoid){
                _xy = this.projectEll(_local3, _local4);
            } else {
                _xy = this.projectSph(_local3, _local4);
            };
            _xy.x = (_xy.x + this._x0);
            _xy.y = (_xy.y + this._y0);
            return (_xy);
        }
        public function projectLatLong(_arg1:Number, _arg2:Number):Point{
            return (this.projectLatLongFast(_arg1, _arg2).clone());
        }
        public function unprojectXY(_arg1:Number, _arg2:Number):GeoPoint{
            return (this.unprojectXYFast(_arg1, _arg2).clone());
        }
        public function unprojectXYFast(_arg1:Number, _arg2:Number):GeoPoint{
            if (this._useFeet){
                _arg1 = (_arg1 * 0.3048);
                _arg2 = (_arg2 * 0.3048);
            };
            _arg1 = (_arg1 - this._x0);
            _arg2 = (_arg2 - this._y0);
            if (this._useEllipsoid){
                _ll = this.unprojectEll(_arg1, _arg2);
            } else {
                _ll = this.unprojectSph(_arg1, _arg2);
            };
            _ll.lat = (_ll.lat * _rad2deg);
            _ll.long = (_ll.long * _rad2deg);
            return (_ll);
        }
        public function reprojectXY(_arg1:Number, _arg2:Number, _arg3:IGeoProjection):Point{
            var _local4:Point = this.reprojectXYFast(_arg1, _arg2, _arg3);
            return (_local4.clone());
        }
        public function reprojectXYFast(_arg1:Number, _arg2:Number, _arg3:IGeoProjection):Point{
            var _local4:GeoPoint = _arg3.unprojectXYFast(_arg1, _arg2);
            var _local5:Point = this.projectLatLongFast(_local4.lat, _local4.long);
            return (_local5);
        }
        public function set useFeet(_arg1:Boolean):void{
            this._useFeet = _arg1;
        }
        public function setScaleFactor(_arg1:Number):void{
            this._k0 = _arg1;
        }
        public function setFalseEastingNorthing(_arg1:Number, _arg2:Number):void{
            this._x0 = _arg1;
            this._y0 = _arg2;
        }
        public function setEllipsoidParameters(_arg1:Number, _arg2:Number):void{
            this._a = _arg1;
            this._f = _arg2;
            this._e = Math.sqrt(((2 * this._f) - (this._f * this._f)));
        }
        public function set useEllipsoid(_arg1:Boolean):void{
            this._useEllipsoid = _arg1;
            this.init();
        }
        protected function unprojectSph(_arg1:Number, _arg2:Number):GeoPoint{
            _ll.lat = _arg2;
            _ll.long = _arg1;
            return (_ll);
        }
        protected function projectEll(_arg1:Number, _arg2:Number):Point{
            _xy.x = _arg2;
            _xy.y = _arg1;
            return (_xy);
        }
        protected function projectSph(_arg1:Number, _arg2:Number):Point{
            _xy.x = _arg2;
            _xy.y = _arg1;
            return (_xy);
        }
        protected function unprojectEll(_arg1:Number, _arg2:Number):GeoPoint{
            var _local3:GeoPoint = this.unprojectSph(_arg1, _arg2);
            var _local4:Point = this.projectEll(_local3.lat, _local3.long);
            var _local5:Number = _local4.x;
            var _local6:Number = _local4.y;
            return (this.unprojectSph(((2 * _arg1) - _local5), ((2 * _arg2) - _local6)));
        }
        protected function init():void{
        }
        public function compare(_arg1:IGeoProjection):Boolean{
            if (this == _arg1){
                return (true);
            };
            var _local2:Number = 50;
            var _local3:Number = 50;
            var _local4:Point = this.projectLatLong(_local2, _local3);
            var _local5:Point = _arg1.projectLatLong(_local2, _local3);
            if ((((_local4.x == _local5.x)) && ((_local4.y == _local5.y)))){
                return (true);
            };
            return (false);
        }

    }
}//package mb.projections 
﻿package mb {

    public class Opts {

        public static function init(_arg1:Object, _arg2:Object):Object{
            var _local3:Object = {};
            mergeProperties(_arg1, _local3, true);
            ((_arg2) && (mergeProperties(_arg2, _local3, true)));
            return (_local3);
        }
        public static function mergeProperties(_arg1:Object, _arg2:Object, _arg3:Boolean):void{
            var _local4:Object;
            if (!_arg2){
                _arg2 = {};
            };
            for (_local4 in _arg1) {
                if (((_arg3) || ((_arg2[_local4] === undefined)))){
                    _arg2[_local4] = _arg1[_local4];
                };
            };
        }

    }
}//package mb 
﻿package mb.gis {
    import mb.shapes.*;

    public class Proximity {

        public static function testPointInPolygon(_arg1:Number, _arg2:Number, _arg3:ShapeVector):Boolean{
            var _local6:VertexSet;
            var _local7:Boolean;
            if (((isNaN(_arg1)) || (isNaN(_arg2)))){
                return (false);
            };
            var _local4:int;
            var _local5:int = _arg3.partCount;
            while (_arg3.hasNextPart()) {
                _local6 = _arg3.nextPart;
                if ((((_local5 > 1)) && (!(_local6.containsPoint(_arg1, _arg2))))){
                } else {
                    _local7 = testPointInRing(_arg1, _arg2, _local6);
                    if (_local7){
                        _local4++;
                    };
                };
            };
            return (((_local4 % 2) == 1));
        }
        public static function findPointToPolylineDistance(_arg1:Number, _arg2:Number, _arg3:ShapeVector):Number{
            return (calcShapeDistance(_arg1, _arg2, _arg3, 2));
        }
        public static function findPointToPolygonDistance(_arg1:Number, _arg2:Number, _arg3:ShapeVector, _arg4:Boolean=true):Number{
            var _local5:int = ((_arg4) ? 0 : 1);
            return (calcShapeDistance(_arg1, _arg2, _arg3, _local5));
        }
        private static function calcShapeDistance(_arg1:Number, _arg2:Number, _arg3:ShapeVector, _arg4:int):Number{
            var _local8:VertexSet;
            var _local9:Number;
            if (((isNaN(_arg1)) || (isNaN(_arg2)))){
                return (Infinity);
            };
            var _local5:Boolean;
            if (_arg4 != 2){
                _local5 = testPointInPolygon(_arg1, _arg2, _arg3);
                if (((_local5) && ((_arg4 == 0)))){
                    return (0);
                };
            };
            var _local6:Number = Infinity;
            while (_arg3.hasNextPart()) {
                _local8 = _arg3.nextPart;
                _local9 = findPointToRingDistanceSquared(_arg1, _arg2, _local8);
                if (_local9 < _local6){
                    _local6 = _local9;
                };
            };
            var _local7:Number = Math.sqrt(_local6);
            if ((((_arg4 == 1)) && (_local5))){
                _local7 = -(_local7);
            };
            return (_local7);
        }
        private static function getYIntercept(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Number):Number{
            var _local6:Number = (_arg3 + (((_arg1 - _arg2) * (_arg5 - _arg3)) / (_arg4 - _arg2)));
            return (_local6);
        }
        private static function getXIntercept(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Number):Number{
            var _local6:Number = (_arg2 + (((_arg1 - _arg3) * (_arg4 - _arg2)) / (_arg5 - _arg3)));
            return (_local6);
        }
        public static function testPointInRing(_arg1:Number, _arg2:Number, _arg3:VertexSet):Boolean{
            var _local8:Number;
            var _local9:Number;
            var _local11:Number;
            if (!_arg3.hasNext){
                return (false);
            };
            var _local4:Number = _arg3.nextX;
            var _local5:Number = _arg3.nextY;
            var _local6:Number = _local4;
            var _local7:Number = _local5;
            var _local10:int;
            while (_arg3.hasNext) {
                _local8 = _arg3.nextX;
                _local9 = _arg3.nextY;
                if ((((((((_arg1 < _local6)) && ((_arg1 < _local8)))) || ((((_arg1 > _local6)) && ((_arg1 > _local8)))))) || ((((_arg2 > _local7)) && ((_arg2 > _local9)))))){
                } else {
                    if ((((((_arg2 < _local7)) && ((_arg2 < _local9)))) || ((_local6 == _local8)))){
                        _local10++;
                    } else {
                        _local11 = getYIntercept(_arg1, _local6, _local7, _local8, _local9);
                        if (_local11 > _arg2){
                            _local10++;
                        };
                    };
                };
                _local6 = _local8;
                _local7 = _local9;
            };
            return (((_local10 % 2) == 1));
        }
        public static function findPointToRingDistanceSquared(_arg1:Number, _arg2:Number, _arg3:VertexSet):Number{
            var _local5:Number;
            var _local6:Number;
            var _local7:Number;
            var _local13:Number;
            var _local14:Number;
            var _local15:Number;
            var _local16:Number;
            var _local17:Number;
            var _local18:Number;
            if (!_arg3.hasNext){
                return (Infinity);
            };
            var _local4:Number = Infinity;
            var _local8:Number = _arg3.nextX;
            var _local9:Number = _arg3.nextY;
            var _local10:Number = _local8;
            var _local11:Number = _local9;
            var _local12:Number = (((_arg1 - _local10) * (_arg1 - _local10)) + ((_arg2 - _local11) * (_arg2 - _local11)));
            while (_arg3.hasNext) {
                _local13 = _arg3.nextX;
                _local14 = _arg3.nextY;
                _local15 = (((_arg1 - _local13) * (_arg1 - _local13)) + ((_arg2 - _local14) * (_arg2 - _local14)));
                _local16 = (((_local10 - _local13) * (_local10 - _local13)) + ((_local11 - _local14) * (_local11 - _local14)));
                _local17 = (((_local13 - _local10) * (_local11 - _arg2)) - ((_local10 - _arg1) * (_local14 - _local11)));
                _local18 = (((((_local13 - _local10) * (_local11 - _arg2)) - ((_local10 - _arg1) * (_local14 - _local11))) * _local17) / _local16);
                if (_local12 > _local15){
                    _local6 = _local12;
                    _local7 = _local15;
                } else {
                    _local6 = _local15;
                    _local7 = _local12;
                };
                if ((_local6 - _local18) < _local16){
                    _local5 = _local18;
                } else {
                    _local5 = _local7;
                };
                if (_local5 < _local4){
                    _local4 = _local5;
                };
                _local10 = _local13;
                _local11 = _local14;
                _local12 = _local15;
            };
            return (_local4);
        }

    }
}//package mb.gis 
﻿package mb {
    import flash.display.*;
    import flash.events.*;
    import mb.easing.*;
    import flash.geom.*;
    import mb.utils.*;

    public class Layout {

        public static const H_SCALE:String = "hstretch";
        public static const V_SCALE:String = "vstretch";
        private static const OBJECT:String = "obj";
        private static const MAP:String = "map";
        private static const TABLE:String = "table";
        private static const CHART:String = "chart";

        private static var _stage:Stage;
        private static var _width0:Number;
        private static var _height0:Number;
        private static var _items:Array = [];
        private static var _layout:Layout;
        private static var _ready:Boolean = false;
        private static var _updateFlag:Boolean = false;

        public function Layout(_arg1:Stage){
        }
        private static function initStage(_arg1:Stage, _arg2:int=0, _arg3:int=0):void{
            if (!_arg1){
            } else {
                if (!_stage){
                    _arg1.scaleMode = StageScaleMode.NO_SCALE;
                    _arg1.align = StageAlign.TOP_LEFT;
                    _stage = _arg1;
                    if ((((_arg2 == 0)) || ((_arg3 == 0)))){
                        _arg2 = _stage.stageWidth;
                        _arg3 = _stage.stageHeight;
                    };
                    initStageSize(_arg2, _arg3);
                    _stage.addEventListener(Event.RESIZE, handleResize);
                    _stage.addEventListener(Event.ENTER_FRAME, handleEnterFrame);
                };
            };
        }
        private static function initStageSize(_arg1:Number, _arg2:Number){
            _height0 = _arg2;
            _width0 = _arg1;
            _ready = true;
        }
        public static function init(_arg1:Stage, _arg2:Number=0, _arg3:Number=0){
            initStage(_arg1, _arg2, _arg3);
        }
        private static function handleEnterFrame(_arg1:Event):void{
            var root:* = null;
            var w:* = NaN;
            var h:* = NaN;
            var evt:* = _arg1;
            if (!_ready){
                try {
                    root = _stage.getChildAt(0);
                    w = root.loaderInfo.width;
                    h = root.loaderInfo.height;
                    initStageSize(w, h);
                } catch(e:Error) {
                };
            };
            if (((_updateFlag) && (_ready))){
                updateElements();
            };
        }
        private static function handleResize(_arg1:Event):void{
            updateElements();
        }
        private static function updateElements():void{
            var _local3:Object;
            _updateFlag = false;
            var _local1:int = _items.length;
            var _local2:int;
            while (_local2 < _local1) {
                _local3 = _items[_local2];
                positionElement(_local3);
                _local2++;
            };
        }
        public static function updateElement(_arg1:DisplayObject):void{
            var _local2:Object;
            if (!_ready){
                return;
            };
            for each (_local2 in _items) {
                (((_local2.clip == _arg1)) && (positionElement(_local2)));
            };
        }
        private static function positionElement(_arg1:Object){
            var _local6:Number;
            var _local7:ILiquidTable;
            var _local8:Number;
            var _local9:DisplayObject;
            var _local10:Rectangle;
            var _local11:Number;
            var _local12:Number;
            var _local13:Number;
            var _local14:Number;
            var _local15:Boolean;
            var _local16:ILiquidChart;
            if (!_ready){
                return;
            };
            var _local2:Number = _stage.stageWidth;
            var _local3:Number = _stage.stageHeight;
            var _local4:Number = (_local2 - _width0);
            var _local5:Number = (_local3 - _height0);
            if (_arg1.type == TABLE){
                _local6 = _arg1.width0;
                _local7 = _arg1.table;
                _local8 = (_local4 + _local6);
                _local7.setWidth(_local8);
            } else {
                if ((((_arg1.type == OBJECT)) || ((_arg1.type == MAP)))){
                    _local9 = _arg1.clip;
                    _local10 = _arg1.bounds;
                    _local11 = _local10.left;
                    _local12 = _local10.top;
                    _local13 = _local10.width;
                    _local14 = _local10.height;
                    if (_arg1.h == C.RIGHT){
                        _local9.x = (_local11 + _local4);
                    };
                    if (_arg1.v == C.BOTTOM){
                        _local9.y = ((_arg1.bottom - _local9.height) + _local5);
                    };
                    if (_arg1.h == H_SCALE){
                        _local9.width = (_local13 + _local4);
                    };
                    if (_arg1.v == V_SCALE){
                        _local9.height = (_local14 + _local5);
                    };
                    if (_arg1.h == C.CENTER){
                        _local9.x = Math.round((_local11 + (_local4 * 0.5)));
                    };
                    if (_arg1.v == C.CENTER){
                        _local9.y = Math.round(((_arg1.bottom - _local9.height) + (_local5 * 0.5)));
                    };
                    if (_arg1.has_limits){
                        _local15 = false;
                        if (((!((_arg1.minx === undefined))) && ((_local9.x < _arg1.minx)))){
                            _local15 = true;
                            _local9.x = _arg1.minx;
                        };
                        if (((!((_arg1.miny === undefined))) && ((_local9.y < _arg1.miny)))){
                            _local15 = true;
                            _local9.y = _arg1.miny;
                        };
                        if (_arg1.overflow == "hidden"){
                            if (((_local15) && (!(_arg1.layout_hidden)))){
                                _arg1.layout_hidden = true;
                                Fader.hideObject(_local9, 200);
                            };
                            if (((!(_local15)) && (_arg1.layout_hidden))){
                                _arg1.layout_hidden = false;
                                Fader.showObject(_local9, 250);
                            };
                        };
                    };
                };
            };
            if (_arg1.type == MAP){
                _local16 = _arg1.map;
                _local16.updateSize();
            };
            if (_arg1.callback){
                _arg1.callback();
            };
        }
        public static function addMap(_arg1:ILiquidChart):void{
            addChart(_arg1, H_SCALE, V_SCALE);
        }
        public static function addChart(_arg1:ILiquidChart, _arg2:String, _arg3:String):void{
            var _local4:DisplayObject = _arg1.getAlignmentClip();
            initStage(_local4.stage);
            var _local5:Object = getLayoutParams(_local4, _arg2, _arg3, MAP);
            _local5.map = _arg1;
            _updateFlag = true;
            _items.push(_local5);
        }
        public static function addTable(_arg1:ILiquidTable):void{
            var _local2:DisplayObject = _arg1.getAlignmentClip();
            var _local3:Number = _arg1.getWidth();
            if (((!(_local2)) || ((_local3 <= 0)))){
                return;
            };
            var _local4:Object = {};
            _local4.type = TABLE;
            _local4.width0 = _local3;
            _local4.table = _arg1;
            _updateFlag = true;
            addItem(_local4);
        }
        private static function addItem(_arg1:Object, _arg2:int=0):void{
            _arg1.priority = _arg2;
            _items.push(_arg1);
            _items.sortOn("priority", (Array.NUMERIC | Array.DESCENDING));
        }
        private static function getLayoutParams(_arg1:DisplayObject, _arg2:String, _arg3:String, _arg4:String):Object{
            var _local5:Object = {
                v:_arg3,
                h:_arg2,
                clip:_arg1,
                type:_arg4
            };
            var _local6:Rectangle = _arg1.getBounds(_arg1.parent);
            var _local7:Rectangle = _arg1.getBounds(_arg1);
            var _local8:Number = _local7.left;
            var _local9:Number = _local7.top;
            _local6.left = (_local6.left - _local8);
            _local6.top = (_local6.top - _local9);
            _local5.bounds = _local6;
            _local5.bottom = (_arg1.y + _arg1.height);
            return (_local5);
        }
        public static function addObject(_arg1:DisplayObject, _arg2:String, _arg3:String, _arg4:Object=null){
            initStage(_arg1.stage);
            var _local5:Object = getLayoutParams(_arg1, _arg2, _arg3, OBJECT);
            if (_arg4){
                _local5 = Opts.init(_arg4, _local5);
            };
            _local5.has_limits = ((!((_local5.minx === undefined))) || (!((_local5.miny === undefined))));
            addItem(_local5);
            _updateFlag = true;
        }

    }
}//package mb 
﻿package mb {
    import flash.events.*;

    public interface IWaiter extends IEventDispatcher {

        function get ready():Boolean;
        function isReady():Boolean;

    }
}//package mb 
﻿package mb.table {

    public class CellSize {

        public var width:Number;
        public var height:Number;
        public var leftPadding:Number = 0;
        public var topPadding:Number = 0;
        public var bottomPadding:Number = 0;
        public var rightPadding:Number = 0;

        public function CellSize(_arg1:Number, _arg2:Number, _arg3:Number=0, _arg4:Number=0){
            this.width = _arg1;
            this.height = _arg2;
            this.leftPadding = _arg3;
            this.rightPadding = _arg4;
        }
        public function clone():CellSize{
            var _local1:CellSize = new CellSize(this.width, this.height, this.leftPadding, this.rightPadding);
            return (_local1);
        }
        public function get contentWidth():Number{
            return (((this.width - this.leftPadding) - this.rightPadding));
        }
        public function get contentHeight():Number{
            return (((this.height - this.topPadding) - this.bottomPadding));
        }

    }
}//package mb.table 
﻿package mb.table {
    import mb.styles.*;

    public class TextCellStyle extends CellStyle {

        public var textStyle:TextStyle;
        public var initialSuffix:String = "";

        public function TextCellStyle(){
            type = Cell.TEXT;
            this.textStyle = new TextStyle();
        }
        public function clone():TextCellStyle{
            var _local1:TextCellStyle = new TextCellStyle();
            _local1.initialSuffix = this.initialSuffix;
            _local1.align = align;
            _local1.textStyle = this.textStyle.clone();
            return (_local1);
        }

    }
}//package mb.table 
﻿package mb.table {
    import mb.styles.*;

    public class CellStyle {

        public var align:String = "lt";
        public var type:String;
        public var bgStyle:ShapeStyle;

    }
}//package mb.table 
﻿package mb.table {
    import mb.styles.*;

    public class BarCellStyle extends CellStyle {

        public var shapeStyle:ShapeStyle;
        public var height:Number = 8;

        public function BarCellStyle(){
            type = Cell.BAR;
            this.shapeStyle = new ShapeStyle();
        }
    }
}//package mb.table 
﻿package mb.table {
    import mb.styles.*;

    public class DotCellStyle extends CellStyle {

        public var shapeStyle:ShapeStyle;
        public var size:Number = 8;

        public function DotCellStyle(){
            type = Cell.DOT;
            this.shapeStyle = new ShapeStyle();
        }
    }
}//package mb.table 
﻿package mb.table {
    import flash.display.*;
    import mb.*;
    import mb.easing.*;
    import mb.text.*;

    public class TableDisplay extends Sprite {

        private var _titleSize:CellSize;
        private var _titleStyle:TextCellStyle;
        private var _tailSize:CellSize;
        private var _tailStyle:TextCellStyle;
        private var _headerSizes:Array;
        private var _headerStyles:Array;
        private var _colSizes:Array;
        private var _colStyles:Array;
        private var _cellStyles:Array;
        private var _colSelectionStyles:Array;
        private var _colHoverStyles:Array;
        private var _rendered:Boolean = false;
        public var title:String;
        public var tail:String;
        public var headers:Array;
        private var _rows:Array;
        private var _currRows:Array;
        private var _tweenMatrix:Array;
        private var _yColTop:Number;
        private var _yColBottom:Number;
        private var _xRowLeft:Number;
        private var _xRowRight:Number;
        private var _tableCells:Object;
        private var _tween:NumberTween;
        private var _defaultCellStyle:CellStyle;

        public function TableDisplay(){
            this._tableCells = {};
            this._tween = new NumberTween();
        }
        public function get rows():Array{
            if (!this._rows){
                this._rows = [];
            };
            return (this._rows);
        }
        public function set rows(_arg1:Array):void{
            this._rows = _arg1;
        }
        public function setHeaderFormat(_arg1:Array, _arg2:Array=null):void{
            this._headerSizes = _arg2;
            this._headerStyles = _arg1;
        }
        public function setColFormat(_arg1:Array, _arg2:Array):void{
            this._colSizes = _arg2;
            this._colStyles = _arg1;
        }
        public function setCellStyle(_arg1:CellStyle, _arg2:int, _arg3:int):void{
            if (!this._cellStyles){
                this._cellStyles = [];
            };
            if (!this._cellStyles[_arg2]){
                this._cellStyles[_arg2] = [];
            };
            this._cellStyles[_arg2][_arg3] = _arg1;
        }
        public function setTitleFormat(_arg1:TextCellStyle, _arg2:CellSize):void{
            this._titleSize = _arg2;
            this._titleStyle = _arg1;
        }
        public function setTailFormat(_arg1:TextCellStyle, _arg2:CellSize):void{
            this._tailSize = _arg2;
            this._tailStyle = _arg1;
        }
        public function display(_arg1:Object):void{
            this._rows = _arg1.rows;
            this.headers = _arg1.headers;
            this.title = _arg1.title;
            this.tail = _arg1.tail;
            this.update();
        }
        private function handleTween(_arg1:Number, _arg2:Boolean):void{
            if (_arg2){
                this.endTween();
            };
        }
        private function endTween():void{
        }
        public function update():void{
            var _local3:Cell;
            var _local4:String;
            var _local5:Array;
            var _local6:Number;
            var _local7:int;
            var _local8:int;
            var _local9:CellSize;
            var _local11:FormattedTextField;
            var _local12:int;
            var _local13:CellStyle;
            var _local14:int;
            if (this._rendered){
                return;
            };
            this._rendered = true;
            if (this._currRows){
            };
            var _local1:int;
            var _local2:int;
            if (((this.title) && (this._titleStyle))){
                _local11 = this.fetchField(this.title, this._titleStyle, this._titleSize);
                _local11.x = this._titleSize.leftPadding;
                _local11.y = _local1;
                _local12 = Math.max(this._titleSize.height, ((_local11.height + this._titleSize.topPadding) + this._titleSize.bottomPadding));
                _local1 = (_local1 + _local12);
            };
            var _local10:Array = this._headerSizes;
            if (!_local10){
                _local10 = this._colSizes;
            };
            if (((((this.headers) && (this._headerStyles))) && (_local10))){
                if (this.headers.length > this._headerStyles.length){
                    return;
                };
                _local6 = 0;
                _local7 = 0;
                while (_local7 < this.headers.length) {
                    _local9 = _local10[_local7];
                    _local3 = this.fetchCell((_local7 + 1), 0, this.headers[_local7], this._headerStyles[_local7], _local9);
                    _local3.y = _local1;
                    _local3.x = _local2;
                    _local2 = (_local2 + _local9.width);
                    _local6 = Math.max(_local9.height, _local6);
                    _local7++;
                };
                _local2 = 0;
                _local1 = (_local1 + _local6);
            };
            this._yColTop = _local1;
            this._xRowLeft = _local2;
            this._xRowRight = 0;
            if (((((this._rows) && (this._colStyles))) && (this._colSizes))){
                _local8 = 0;
                while (_local8 < this._rows.length) {
                    _local5 = this._rows[_local8];
                    if (_local5.length > this._colStyles.length){
                        break;
                    };
                    _local6 = 0;
                    _local7 = 0;
                    while (_local7 < _local5.length) {
                        _local9 = this._colSizes[_local7];
                        _local13 = this.fetchCellStyle(_local7, _local8);
                        _local3 = this.fetchCell((_local7 + 1), (_local8 + 1), _local5[_local7], _local13, _local9);
                        _local3.y = _local1;
                        _local3.x = _local2;
                        _local2 = (_local2 + _local9.width);
                        _local6 = Math.max(_local9.height, _local6);
                        _local7++;
                    };
                    this._xRowRight = Math.max(this._xRowRight, _local2);
                    _local2 = 0;
                    _local1 = (_local1 + _local6);
                    _local8++;
                };
            };
            if (((this.tail) && (this._tailStyle))){
                _local11 = this.fetchField(this.tail, this._tailStyle, this._tailSize);
                _local11.multiline = true;
                _local11.wordWrap = true;
                _local11.width = this.tableWidth;
                _local11.x = this._tailSize.leftPadding;
                _local11.y = (_local1 + this._tailSize.topPadding);
                _local14 = Math.max(this._tailSize.height, _local11.height);
                _local1 = (_local1 + ((_local14 + this._tailSize.topPadding) + this._tailSize.bottomPadding));
            };
            this._yColBottom = _local1;
            this.updateBackground();
        }
        private function get tableWidth():Number{
            var _local2:CellSize;
            var _local1:Number = 0;
            for each (_local2 in this._colSizes) {
                _local1 = (_local1 + _local2.width);
            };
            return (_local1);
        }
        private function updateBackground():void{
            var _local1:Number = this.tableWidth;
            graphics.clear();
            graphics.lineStyle(1, 0, 0);
            graphics.lineTo(_local1, 0);
        }
        public function fetchField(_arg1:String, _arg2:TextCellStyle, _arg3:CellSize):FormattedTextField{
            var _local4:FormattedTextField = new FormattedTextField();
            if (_arg2.textStyle.useHTML){
                _local4.htmlText = _arg1;
            } else {
                _local4.text = _arg1;
            };
            _local4.applyTextStyle(_arg2.textStyle);
            addChild(_local4);
            return (_local4);
        }
        public function fetchCellStyle(_arg1:int, _arg2:int):CellStyle{
            if (((((this._cellStyles) && (this._cellStyles[_arg1]))) && (this._cellStyles[_arg1][_arg2]))){
                return (this._cellStyles[_arg1][_arg2]);
            };
            if (((this._colStyles) && (this._colStyles[_arg1]))){
                return (this._colStyles[_arg1]);
            };
            return (null);
        }
        public function fetchCell(_arg1:int, _arg2:int, _arg3:Object, _arg4:CellStyle, _arg5:CellSize):Cell{
            var _local6:Cell = new Cell(_arg1, _arg2);
            addChild(_local6);
            CellRenderer.updateCell(_local6, _arg3, _arg4, _arg5);
            return (_local6);
        }

    }
}//package mb.table 
﻿package mb.table {
    import flash.display.*;

    public class Cell extends Sprite {

        public static const BAR:String = "bar";
        public static const TEXT:String = "txt";
        public static const LINK:String = "link";
        public static const DOT:String = "dot";

        public var key:Object;
        public var rendered:Boolean = false;
        public var type:String;
        public var value:Object;
        public var col:int;
        public var row:int;

        public function Cell(_arg1:int, _arg2:int){
            this.col = _arg1;
            this.row = _arg2;
        }
    }
}//package mb.table 
﻿package mb.table {
    import mb.*;
    import mb.text.*;
    import mb.utils.*;

    public class CellRenderer {

        public static function updateCell(_arg1:Cell, _arg2:Object, _arg3:CellStyle, _arg4:CellSize):void{
            _arg1.value = _arg2;
            if ((_arg3 is BarCellStyle)){
                updateBarCell(_arg1, (_arg2 as Number), (_arg3 as BarCellStyle), _arg4);
            } else {
                if ((_arg3 is TextCellStyle)){
                    updateTextCell(_arg1, String(_arg2), (_arg3 as TextCellStyle), _arg4);
                } else {
                    if ((_arg3 is DotCellStyle)){
                        updateDotCell(_arg1, (_arg2 as Number), (_arg3 as DotCellStyle), _arg4);
                    };
                };
            };
        }
        public static function updateBarCell(_arg1:Cell, _arg2:Number, _arg3:BarCellStyle, _arg4:CellSize):void{
            var _local5:BarCellStyle = BarCellStyle(_arg3);
            _arg1.key = _arg2;
            if (!_arg1.rendered){
                _arg1.rendered = true;
            };
            _arg1.graphics.clear();
            var _local6:Number = (_arg4.contentWidth * _arg2);
            var _local7:Number = _local5.height;
            var _local8:Number = getXPos(_local6, _arg4, _local5.align);
            var _local9:Number = getYPos(_local5.height, _arg4);
            Util.drawRectangle(_arg1, _local5.shapeStyle, _local6, _local7, _local8, _local9);
        }
        public static function updateDotCell(_arg1:Cell, _arg2:Number, _arg3:DotCellStyle, _arg4:CellSize):void{
            _arg1.key = String(_arg2);
            if (!_arg1.rendered){
                _arg1.rendered = true;
            };
            _arg1.graphics.clear();
            var _local5:Number = (_arg4.leftPadding + 2);
            var _local6:Number = (_arg4.height / 2);
            var _local7:Number = (_arg3.size / 2);
            _arg1.graphics.beginFill(_arg2);
            _arg1.graphics.drawCircle((_local5 + _local7), _local6, _local7);
        }
        private static function getXPos(_arg1:Number, _arg2:CellSize, _arg3:String):Number{
            var _local4:Number = _arg2.leftPadding;
            var _local5:Number = _arg2.contentWidth;
            if (_arg3 == C.RIGHT){
                _local4 = (_local4 + (_local5 - _arg1));
            } else {
                if (_arg3 == C.CENTER){
                    _local4 = (_local4 + int(((_local5 - _arg1) / 2)));
                };
            };
            return (_local4);
        }
        private static function getYPos(_arg1:Number, _arg2:CellSize):Number{
            var _local3:Number = (int((((_arg2.contentHeight - _arg1) / 2) + 0.5)) + _arg2.topPadding);
            return (_local3);
        }
        public static function updateTextCell(_arg1:Cell, _arg2:String, _arg3:TextCellStyle, _arg4:CellSize):void{
            var _local5:FormattedTextField;
            if (_arg2 === null){
                _arg2 = "";
            };
            _arg1.key = _arg2;
            if (!_arg1.rendered){
                _arg1.rendered = true;
                _local5 = new FormattedTextField();
                _arg1.addChild(_local5);
            };
            if (!_local5){
                _local5 = (_arg1.getChildAt(0) as FormattedTextField);
                if (!_local5){
                    return;
                };
            };
            if (_arg3.textStyle.useHTML){
                _local5.htmlText = _arg2;
            } else {
                _local5.text = _arg2;
            };
            _local5.applyTextStyle(_arg3.textStyle);
            var _local6:Number = getXPos(_local5.width, _arg4, _arg3.align);
            var _local7:int = getYPos(_local5.height, _arg4);
            _local5.x = _local6;
            _local5.y = _local7;
            if ((((_arg1.row == 1)) && (_arg3.initialSuffix))){
                _local5.text = (_arg2 + _arg3.initialSuffix);
            };
        }

    }
}//package mb.table 
﻿package mb.data {
    import flash.utils.*;

    public class TableIndexer {

        public static function buildIndex(_arg1:DataTable, _arg2:IKey):Dictionary{
            var _local7:Object;
            var _local3:Dictionary = new Dictionary();
            var _local4:int = _arg1.length;
            var _local5:Record = _arg1.getRecordById(0);
            var _local6:int;
            while (_local6 < _local4) {
                _local5.id = _local6;
                _local7 = _arg2.procRecord(_local5);
                if (_local7 === null){
                } else {
                    if (_local3[_local7]){
                    } else {
                        _local3[_local7] = _local6;
                    };
                };
                _local6++;
            };
            return (_local3);
        }

    }
}//package mb.data 
﻿package mb.data {
    import mb.projections.*;
    import mb.*;
    import flash.geom.*;
    import mb.importing.*;

    public class PointDataTable extends DataTable {

        private static var _ll:GeoPoint = new GeoPoint();
        private static var _xy:Point = new Point();

        private var _latField:String;
        private var _longField:String;
        private var _latCol:IDataColumn;
        private var _longCol:IDataColumn;
        private var _xField:String;
        private var _yField:String;
        private var _proj0:IGeoProjection;

        public function PointDataTable(_arg1:String, _arg2:String, _arg3:String=null, _arg4:String=null, _arg5:IGeoProjection=null){
            this._latField = _arg1;
            this._longField = _arg2;
            this._xField = _arg3;
            this._yField = _arg4;
            this._proj0 = _arg5;
        }
        public function get latField():String{
            return (this._latField);
        }
        public function get longField():String{
            return (this._longField);
        }
        override protected function handleReadyState():void{
            var _local1:Array;
            var _local2:Array;
            var _local3:Array;
            var _local4:Array;
            var _local5:int;
            var _local6:int;
            var _local7:Number;
            var _local8:Number;
            var _local9:GeoPoint;
            super.handleReadyState();
            if (((((!(fieldExists(this.latField))) && (!(fieldExists(this.longField))))) && (this._proj0))){
                _local1 = [];
                _local2 = [];
                _local3 = getFieldData(this._xField);
                _local4 = getFieldData(this._yField);
                _local5 = length;
                _local6 = 0;
                while (_local6 < _local5) {
                    _local7 = _local3[_local6];
                    _local8 = _local4[_local6];
                    _local9 = this._proj0.unprojectXYFast(_local7, _local8);
                    _local1.push(_local9.lat);
                    _local2.push(_local9.long);
                    _local6++;
                };
                insertFieldValues(this.latField, C.DOUBLE, _local1);
                insertFieldValues(this.longField, C.DOUBLE, _local2);
            };
        }
        public function getBoundingBox():BoundingBox{
            var _local2:Array;
            var _local3:Array;
            var _local4:Number;
            var _local5:Number;
            var _local6:Number;
            var _local7:Number;
            var _local1:BoundingBox = new BoundingBox();
            if (ready){
                _local2 = getFieldData(this.latField);
                _local3 = getFieldData(this.longField);
                _local4 = Math.min.apply(null, _local2);
                _local5 = Math.max.apply(null, _local2);
                _local6 = Math.min.apply(null, _local3);
                _local7 = Math.max.apply(null, _local3);
                _local1.setBounds(_local6, _local5, _local7, _local4);
            };
            return (_local1);
        }
        public function getLatLong(_arg1:int):GeoPoint{
            if (!this._latCol){
                this._latCol = getDataColumn(this._latField);
                this._longCol = getDataColumn(this._longField);
            };
            var _local2:Object = this._longCol.num(_arg1);
            var _local3:Object = this._latCol.num(_arg1);
            if (((!((_local2 === null))) && (!((_local3 === null))))){
                _ll.long = Number(_local2);
                _ll.lat = Number(_local3);
            } else {
                _ll.long = Infinity;
                _ll.lat = Infinity;
            };
            return (_ll);
        }
        public function getXY(_arg1:int, _arg2:IGeoProjection):Point{
            var _local4:Point;
            var _local3:GeoPoint = this.getLatLong(_arg1);
            var _local5:Number = _local3.long;
            var _local6:Number = _local3.lat;
            if ((((_local5 === Infinity)) || ((_local6 === Infinity)))){
                _local4 = _xy;
                _local4.x = Infinity;
                _local4.y = Infinity;
            } else {
                _local4 = _arg2.projectLatLongFast(_local6, _local5);
            };
            return (_local4);
        }
        override public function load(_arg1:IDataLoader):DataTable{
            _arg1.setFieldType(this._latField, C.DOUBLE);
            _arg1.setFieldType(this._longField, C.DOUBLE);
            return (super.load(_arg1));
        }

    }
}//package mb.data 
﻿package mb.data {
    import mb.*;
    import flash.utils.*;
    import mb.importing.*;
    import mb.utils.*;

    public class DataTable extends Waiter implements IRecordLookup {

        protected var _columnsObj:Object;
        protected var _fieldList:Array = null;
        protected var _fieldIndex:Dictionary = null;
        protected var _multiIndex:Boolean = false;
        protected var _length:int = 0;
        protected var _loader:IDataLoader;
        protected var _ids:Array;
        protected var _rec:Record;
        protected var _autoInit:Boolean = true;

        public function DataTable(){
            this._fieldList = [];
            this._columnsObj = {};
            this._ids = [];
            this._rec = new Record(this, -1);
        }
        public function get loader():IDataLoader{
            return (this._loader);
        }
        public function getRecordSet(_arg1:IFilter=null):RecordSet{
            var _local2:RecordSet = new RecordSet(this, this.getRecordIds());
            if (_arg1 !== null){
                _local2.applyFilter(_arg1);
            };
            return (_local2);
        }
        public function getRecordById(_arg1:int):Record{
            this._rec.id = _arg1;
            return (this._rec);
        }
        public function getMatchingRecordSet(_arg1:String, _arg2:Object, _arg3:String=null, _arg4:Object=null, _arg5:String=null, _arg6:Object=null, _arg7:String=null, _arg8:Object=null):RecordSet{
            var _local17:Array;
            var _local18:Array;
            var _local19:Array;
            var _local20:Array;
            var _local23:Object;
            var _local9:Boolean = this.fieldExists(_arg1);
            var _local10:Boolean = ((!((_arg3 === null))) && (this.fieldExists(_arg3)));
            var _local11:Boolean = ((!((_arg5 === null))) && (this.fieldExists(_arg5)));
            var _local12:Boolean = ((!((_arg7 === null))) && (this.fieldExists(_arg7)));
            var _local13 = (_arg2 is Array);
            var _local14 = (_arg4 is Array);
            var _local15 = (_arg6 is Array);
            var _local16 = (_arg8 is Array);
            if (_local9){
                _local17 = this._columnsObj[_arg1].data;
            };
            if (_local10){
                _local18 = this._columnsObj[_arg3].data;
            };
            if (_local11){
                _local19 = this._columnsObj[_arg5].data;
            };
            if (_local12){
                _local20 = this._columnsObj[_arg7].data;
            };
            var _local21:Array = [];
            var _local22:int;
            for (;_local22 < this._length;_local22++) {
                if (_local9){
                    _local23 = _local17[_local22];
                    if (!((((_local13) && (!((_arg2.indexOf(_local23) === -1))))) || ((_local23 === _arg2)))){
                        continue;
                    };
                };
                if (_local10){
                    _local23 = _local18[_local22];
                    if (!((((_local14) && (!((_arg4.indexOf(_local23) === -1))))) || ((_local23 === _arg4)))){
                        continue;
                    };
                };
                if (_local11){
                    _local23 = _local19[_local22];
                    if (!((((_local15) && (!((_arg6.indexOf(_local23) === -1))))) || ((_local23 === _arg6)))){
                        continue;
                    };
                };
                if (_local12){
                    _local23 = _local20[_local22];
                    if (!((((_local16) && (!((_arg8.indexOf(_local23) === -1))))) || ((_local23 === _arg8)))){
                        continue;
                    };
                };
                _local21.push(_local22);
            };
            return (new RecordSet(this, _local21));
        }
        public function getMatchingRecord(_arg1:String, _arg2:Object, _arg3:String=null, _arg4:Object=null, _arg5:String=null, _arg6:Object=null, _arg7:String=null, _arg8:Object=null):Record{
            var _local9:RecordSet = this.getMatchingRecordSet(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8);
            if (_local9.hasNext){
                return (_local9.nextRecord.clone());
            };
            return (new NullRecord());
        }
        public function get schema():Object{
            var _local2:Object;
            var _local1:Object = {};
            for (_local2 in this._columnsObj) {
                _local1[_local2] = this._columnsObj[_local2].type;
            };
            return (_local1);
        }
        public function get fields():Array{
            return (this._fieldList);
        }
        public function getDataColumn(_arg1:String):IDataColumn{
            if (this._columnsObj[_arg1]){
                return (this._columnsObj[_arg1]);
            };
            return (new NullDataColumn());
        }
        public function fieldExists(_arg1:String):Boolean{
            if (this._columnsObj[_arg1]){
                return (true);
            };
            return (false);
        }
        public function get length():int{
            return (this._length);
        }
        public function insertFieldValues(_arg1:String, _arg2:String, _arg3:Array):void{
            this.insertFieldData(_arg1, _arg2, _arg3);
        }
        public function insertFieldData(_arg1:String, _arg2:String, _arg3:Array, _arg4:Boolean=false):void{
            var _local5:DataColumn;
            if (!_arg3){
                return;
            };
            if ((((this._length == 0)) || (_arg4))){
                this._length = _arg3.length;
            } else {
                if (_arg3.length != this._length){
                };
            };
            if (!this._columnsObj[_arg1]){
                this.addField(_arg1, _arg2);
            };
            _local5 = this._columnsObj[_arg1];
            _local5.insertData(_arg3);
        }
        public function initField(_arg1:String, _arg2:Object=null):void{
            var _local6:String;
            if (!this._columnsObj[_arg1]){
                return;
            };
            var _local3:DataColumn = this._columnsObj[_arg1];
            if (_arg2 === null){
                _local6 = _local3.type;
                if (_local6 == C.STRING){
                    _arg2 = "";
                } else {
                    if ((((_local6 == C.DOUBLE)) || ((_local6 == C.INTEGER)))){
                        _arg2 = 0;
                    };
                };
            };
            var _local4:Array = [];
            var _local5:int;
            while (_local5 < this._length) {
                _local4[_local5] = _arg2;
                _local5++;
            };
            _local3.insertData(_local4);
        }
        public function addField(_arg1:String, _arg2:String):void{
            if (!this._columnsObj[_arg1]){
                this._fieldList.push(_arg1);
            };
            this._columnsObj[_arg1] = new DataColumn(_arg1, _arg2);
            if (this._autoInit){
                this.initField(_arg1, null);
            };
        }
        public function insertValue(_arg1:Object, _arg2:Number, _arg3:String):void{
            var _local4:Array = this._columnsObj[_arg3].data;
            if (!_local4){
                return;
            };
            _local4[_arg2] = _arg1;
        }
        public function insertFilteredValues(_arg1:String, _arg2:Function, _arg3:String=null, _arg4:String=null):void{
            var _local7:Array;
            if (!this.fieldExists(_arg1)){
                return;
            };
            var _local5:String = this.schema[_arg1];
            if (!_arg4){
                _arg4 = _local5;
            };
            var _local6:Array = this.getFieldData(_arg1);
            if (_arg3){
                _local7 = [];
            } else {
                _arg3 = _arg1;
                _local7 = _local6;
            };
            var _local8:int;
            while (_local8 < this._length) {
                _local7[_local8] = _arg2(_local6[_local8]);
                _local8++;
            };
            if (_arg3 != _arg1){
                this.insertFieldValues(_arg3, _arg4, _local7);
            };
        }
        public function insertMethodValues(_arg1:String, _arg2:String, _arg3:Function):Boolean{
            var _local5:Object;
            if (!this.fieldExists(_arg1)){
                this.addField(_arg1, _arg2);
            };
            var _local4:int;
            while (_local4 < this._length) {
                this._rec.id = _local4;
                _local5 = _arg3(this._rec);
                this.insertValue(_local5, _local4, _arg1);
                _local4++;
            };
            return (true);
        }
        public function getFieldData(_arg1:String):Array{
            if (this._columnsObj[_arg1]){
                return (this._columnsObj[_arg1].data);
            };
            return ([]);
        }
        public function load(_arg1:IDataLoader):DataTable{
            if (!this._loader){
                this._loader = _arg1;
                waitFor(this._loader);
                startWaiting();
            };
            return (this);
        }
        public function reload(_arg1:IDataLoader):void{
            if (!_arg1.isReady()){
                return;
            };
            if (isReady()){
                this.importData(_arg1);
            } else {
                this._loader = _arg1;
                waitFor(_arg1);
            };
        }
        override protected function handleReadyState():void{
            if (this._loader){
                this.importData(this._loader);
            };
        }
        public function populate(_arg1:Object){
            this.importData(_arg1);
            if (!ready){
                startWaiting();
            };
        }
        public function getFilteredCopy(_arg1:IFilter=null):DataTable{
            var _local12:Array;
            var _local13:int;
            var _local2:Array = [];
            var _local3:Array = [];
            var _local4:int = this.fields.length;
            var _local5:Object = {};
            var _local6:int;
            while (_local6 < _local4) {
                _local2.push(this.getFieldData(this.fields[_local6]));
                _local12 = [];
                _local5[this.fields[_local6]] = _local12;
                _local3.push(_local12);
                _local6++;
            };
            var _local7:int;
            _local6 = 0;
            while (_local6 < this._length) {
                if (((!(_arg1)) || (_arg1.testId(_local6)))){
                    _local7++;
                    _local13 = 0;
                    while (_local13 < _local4) {
                        _local3[_local13].push(_local2[_local13][_local6]);
                        _local13++;
                    };
                };
                _local6++;
            };
            var _local8:Object = Utils.copyObject(this.schema);
            var _local9:Array = this.fields.concat();
            var _local10:Object = {
                length:_local7,
                fields:_local9,
                schema:_local8,
                data:_local5
            };
            var _local11:DataTable = new DataTable();
            _local11.populate(_local10);
            return (_local11);
        }
        private function importData(_arg1:Object):Boolean{
            var _local7:String;
            var _local8:String;
            var _local9:Array;
            var _local10:DataColumn;
            var _local2:Object = _arg1.data;
            var _local3:Object = _arg1.schema;
            var _local4:Array = _arg1.fields;
            var _local5:int = _arg1.length;
            if (((((!(_local2)) || (!(_local3)))) || (!(_local4)))){
                return (false);
            };
            var _local6:int;
            while (_local6 < _local4.length) {
                _local7 = _local4[_local6];
                _local8 = _local3[_local7];
                _local9 = _local2[_local7];
                _local10 = this._columnsObj[_local7];
                if (!_local10){
                    _local10 = new DataColumn(_local7, _local8);
                    this._columnsObj[_local7] = _local10;
                    this._fieldList.push(_local7);
                };
                _local10.insertData(_local9);
                _local6++;
            };
            this._length = _local5;
            return (true);
        }
        public function getDataObjectById(_arg1:int, _arg2:Object=null):Object{
            var _local3:Object;
            var _local4:DataColumn;
            if (_arg2 === null){
                _arg2 = {};
            };
            for (_local3 in this._columnsObj) {
                _local4 = this._columnsObj[_local3];
                _arg2[_local3] = _local4.obj(_arg1);
            };
            return (_arg2);
        }
        public function indexOnFields(_arg1:String, _arg2:String):void{
            var _local6:String;
            this._fieldIndex = new Dictionary();
            var _local3:Array = this.getFieldData(_arg1);
            var _local4:Array = this.getFieldData(_arg2);
            if ((((_local3.length == 0)) || ((_local4.length == 0)))){
                return;
            };
            var _local5:int;
            while (_local5 < this._length) {
                _local6 = this.getMultiKey(_local3[_local5], _local4[_local5]);
                if (this._fieldIndex[_local6] !== undefined){
                };
                this._fieldIndex[_local6] = _local5;
                _local5++;
            };
        }
        public function indexOnField(_arg1:String, _arg2:Boolean=false):void{
            var _local5:Object;
            this._multiIndex = _arg2;
            this._fieldIndex = new Dictionary();
            var _local3:Array = this.getFieldData(_arg1);
            if (_local3.length == 0){
                return;
            };
            var _local4:int;
            while (_local4 < this._length) {
                _local5 = _local3[_local4];
                if (this._fieldIndex[_local5] === undefined){
                    this._fieldIndex[_local5] = _local4;
                } else {
                    if ((this._fieldIndex[_local5] is Array)){
                        this._fieldIndex[_local5].push(_local4);
                    } else {
                        if (_arg2){
                            this._fieldIndex[_local5] = [this._fieldIndex[_local5], _local4];
                        } else {
                            this._fieldIndex[_local5] = _local4;
                        };
                    };
                };
                _local4++;
            };
        }
        private function getMultiKey(_arg1:Object, _arg2:Object):String{
            return (((_arg1 + "~") + _arg2));
        }
        public function getIndexedRecordSet(_arg1:Object):RecordSet{
            var _local2:Array;
            if ((((this._fieldIndex == null)) || ((this._fieldIndex[_arg1] === undefined)))){
                _local2 = [];
            } else {
                if (((this._multiIndex) && ((this._fieldIndex[_arg1] is Array)))){
                    _local2 = this._fieldIndex[_arg1];
                } else {
                    _local2 = [this._fieldIndex[_arg1]];
                };
            };
            return (new RecordSet(this, _local2));
        }
        public function getIndexedRecord(_arg1:Object, _arg2:Object=null):Record{
            var _local3:int;
            if (_arg2 !== null){
                _arg1 = this.getMultiKey(_arg1, _arg2);
            };
            if ((((this._fieldIndex == null)) || ((this._fieldIndex[_arg1] === undefined)))){
                return (new NullRecord());
            };
            if (((this._multiIndex) && ((this._fieldIndex[_arg1] is Array)))){
                _local3 = this._fieldIndex[_arg1][0];
            } else {
                _local3 = this._fieldIndex[_arg1];
            };
            this._rec.id = _local3;
            return (this._rec);
        }
        public function getValueById(_arg1:Number, _arg2:String):Object{
            return (this._columnsObj[_arg2].obj(_arg1));
        }
        public function getAttributeValue(_arg1:Number, _arg2:String):Object{
            if (!this._columnsObj[_arg2]){
                return (null);
            };
            return (this._columnsObj[_arg2].obj(_arg1));
        }
        public function getFieldType(_arg1:String):String{
            var _local2:IDataColumn = this.getDataColumn(_arg1);
            if (!_local2){
                return (C.UNDEFINED);
            };
            return (_local2.type);
        }
        public function getRecordIds():Array{
            var _local1:int;
            if (this._ids.length != this._length){
                this._ids = [];
                _local1 = 0;
                while (_local1 < this._length) {
                    this._ids[_local1] = _local1;
                    _local1++;
                };
            };
            return (this._ids);
        }
        public function createDuplicateRecord(_arg1:Record):Record{
            var _local2:Object = _arg1.getDataAsObject();
            var _local3:int = this.addRowData(_local2);
            return (this.getRecordById(_local3).clone());
        }
        public function addRowData(_arg1:Object):int{
            var _local2:String;
            var _local3:DataColumn;
            for (_local2 in this._columnsObj) {
                _local3 = this._columnsObj[_local2];
                if (_arg1[_local2]){
                    _local3.data.push(_arg1[_local2]);
                } else {
                    _local3.data.push(null);
                };
            };
            return (this._length++);
        }

    }
}//package mb.data 
﻿package mb.data {

    public interface IDataColumn {

        function str(_arg1:int):String;
        function num(_arg1:int):Number;
        function obj(_arg1:int):Object;
        function get type():String;

    }
}//package mb.data 
﻿package mb.data {

    public class MethodFilter implements IFilter {

        private var _func:Function;
        private var _data:DataTable;
        private var _rec:Record;
        private var procRecord:Function;

        public function MethodFilter(_arg1:Function, _arg2:DataTable){
            this.procRecord = function (_arg1:Record):Boolean{
                return (this._func(_arg1));
            };
            super();
            this._data = _arg2;
            this._func = _arg1;
            this._rec = new Record(_arg2, 0);
            this.procRecord = _arg1;
        }
        public function testId(_arg1:int):Boolean{
            this._rec.id = _arg1;
            return (this._func(this._rec));
        }

    }
}//package mb.data 
﻿package mb.data {

    public interface IRecordLookup {

        function getRecordById(_arg1:int):Record;

    }
}//package mb.data 
﻿package mb.data {
    import mb.*;

    public class Key implements IKey {

        private var _filter:IFilter;
        private var _f:String;
        private var _isDate:Boolean = false;
        private var _isObject:Boolean = false;
        private var _firstRun:Boolean = true;

        public function Key(_arg1:String, _arg2:IFilter=null){
            this._f = _arg1;
            this._filter = _arg2;
        }
        public function procRecord(_arg1:Record):Object{
            var _local2:Object;
            var _local3:String;
            var _local4:Date;
            if (this._firstRun){
                this._firstRun = false;
                _local3 = _arg1.getFieldType(this._f);
                if (_local3 == C.DATE){
                    this._isDate = true;
                    this._isObject = true;
                } else {
                    if (_local3 == C.OBJECT){
                        this._isObject = true;
                    };
                };
            };
            if (((this._filter) && (!(this._filter.testId(_arg1.id))))){
                return (null);
            };
            if (this._isObject){
                if (this._isDate){
                    _local4 = (_arg1.getObject(this._f) as Date);
                    _local2 = _local4.getTime();
                } else {
                    _local2 = String(_arg1.getObject(this._f));
                };
            } else {
                _local2 = _arg1.getObject(this._f);
            };
            return (_local2);
        }

    }
}//package mb.data 
﻿package mb.data {
    import flash.utils.*;
    import mb.expressions.*;

    public class TableJoin {

        private static const _overwriteFields:Boolean = true;

        public static function insertFields(_arg1:DataTable, _arg2:DataTable, _arg3:IKey, _arg4:IKey, _arg5:Array=null):Boolean{
            var _local14:Object;
            var _local15:Object;
            var _local16:String;
            var _local17:Array;
            var _local18:String;
            var _local19:String;
            var _local20:String;
            var _local21:Record;
            var _local22:Object;
            var _local23:Number;
            var _local24:int;
            var _local25:String;
            var _local26:String;
            if (((!(_arg1.ready)) || ((_arg2.length == 0)))){
                return (false);
            };
            if (_arg5 == null){
                _arg5 = [];
                _local14 = _arg2.schema;
                _local15 = _arg1.schema;
                for (_local16 in _local15) {
                    if (!_local14[_local16]){
                        _arg5.push(_local16);
                    };
                };
            };
            var _local6:Array = [];
            var _local7:Array = [];
            var _local8:int;
            while (_local8 < _arg5.length) {
                _local17 = _arg5[_local8].split(":");
                _local7.push(_local17[0]);
                if (_local17.length >= 2){
                    _local6.push(_local17[1]);
                } else {
                    _local6.push(_local17[0]);
                };
                _local8++;
            };
            var _local9:Dictionary = TableIndexer.buildIndex(_arg1, _arg3);
            if (!_local9){
                return (false);
            };
            var _local10:int;
            while (_local10 < _arg5.length) {
                _local18 = _local7[_local10];
                _local19 = _local6[_local10];
                _local20 = _arg1.getFieldType(_local18);
                if (!_arg1.fieldExists(_local18)){
                    _local7[_local10] = null;
                } else {
                    if (((_arg2.fieldExists(_local19)) && (!(_overwriteFields)))){
                        _local6[_local10] = null;
                    } else {
                        _arg2.addField(_local19, _local20);
                    };
                };
                _local10++;
            };
            var _local11:int = _arg2.length;
            var _local12:int = _arg5.length;
            var _local13:int;
            while (_local13 < _local11) {
                _local21 = _arg2.getRecordById(_local13);
                _local22 = _arg4.procRecord(_local21);
                _local23 = _local9[_local22];
                if (!isNaN(_local23)){
                    _local24 = 0;
                    while (_local24 < _local12) {
                        _local25 = _local6[_local24];
                        _local26 = _local7[_local24];
                        if (((_local25) && (_local26))){
                            _arg2.insertValue(_arg1.getAttributeValue(_local23, _local26), _local13, _local25);
                        };
                        _local24++;
                    };
                };
                _local13++;
            };
            return (true);
        }

    }
}//package mb.data 
﻿package mb.data {
    import mb.*;

    public class RecordSort {

        public static const ASCENDING:int = 1;
        public static const DESCENDING:int = 2;
        public static const ALPHABETICAL:int = 8;
        public static const ABS:int = 4;
        public static const SALT:Number = 1E-8;

        public static var _alphaRxp:RegExp = /^(?:a|an|the) +(.+)/;

        public static function getNullValue(_arg1:String, _arg2:int):Object{
            if (_arg1 == C.STRING){
                return ("");
            };
            if ((_arg2 & ASCENDING) != 0){
                return (Infinity);
            };
            return (-(Infinity));
        }
        public static function sortOnFields(_arg1:RecordSet, _arg2:String, _arg3:int, _arg4:String=null, _arg5:int=1):void{
            var _local14:Array;
            var _local15:Number;
            var _local16:String;
            var _local17:Record;
            var _local18:int;
            var _local19:Object;
            var _local20:String;
            var _local21:String;
            var _local22:Number;
            var _local6:String = _arg1.data.getFieldType(_arg2);
            if ((((((_local6 == C.DOUBLE)) || ((_local6 == C.INTEGER)))) && ((_arg4 == null)))){
                _local14 = [];
                _arg1.reset();
                while (_arg1.hasNext) {
                    _local17 = _arg1.nextRecord;
                    _local15 = _local17.getNumber(_arg2);
                    if (isNaN(_local15)){
                        _local15 = (getNullValue(_local6, _arg3) as Number);
                    };
                    _local14.push(_local15);
                };
                sortOnArray(_arg1, _local14, _arg3, true);
                return;
            };
            var _local7:uint = getSortOpts(_arg1.data, _arg2, _arg3);
            var _local8:Boolean;
            var _local9:uint;
            if (_arg4 !== null){
                _local8 = true;
                _local9 = getSortOpts(_arg1.data, _arg4, _arg5);
                _local16 = _arg1.data.getFieldType(_arg4);
            };
            var _local10:Array = [];
            while (_arg1.hasNext) {
                _local17 = _arg1.nextRecord;
                _local18 = _local17.id;
                _local19 = {id:_local18};
                if (_local6 == C.STRING){
                    _local20 = _local17.getString(_arg2);
                    _local19.val = ((((_arg3 & ALPHABETICAL) == 0)) ? _local20 : getAlphaKey(_local20));
                } else {
                    _local15 = _local17.getNumber(_arg2);
                    if ((((_arg3 & ABS)) && ((_local15 < 0)))){
                        _local15 = -(_local15);
                    };
                    _local19.val = _local15;
                };
                if (_local8){
                    if (_local16 == C.STRING){
                        _local21 = _local17.getString(_arg4);
                        _local19.val2 = ((((_arg5 & ALPHABETICAL) == 0)) ? _local21 : getAlphaKey(_local21));
                    } else {
                        _local22 = _local17.getNumber(_arg4);
                        if ((((_arg5 & ABS)) && ((_local22 < 0)))){
                            _local22 = -(_local22);
                        };
                        _local19.val2 = _local22;
                    };
                };
                _local10.push(_local19);
            };
            if (_local8){
                _local10.sortOn(["val", "val2"], [_local7, _local9]);
            } else {
                _local10.sortOn("val", _local7);
            };
            var _local11:int = _arg1.size();
            var _local12:Array = _arg1.getIds();
            var _local13:int;
            while (_local13 < _local11) {
                _local12[_local13] = _local10[_local13].id;
                _local13++;
            };
        }
        public static function sortOnArray(_arg1:IdSet, _arg2:Array, _arg3:int, _arg4:Boolean=true):void{
            var _local10:Number;
            var _local11:int;
            var _local12:Number;
            var _local13:Number;
            var _local14:int;
            var _local15:int;
            var _local5:Array = _arg1.getIds();
            var _local6:int = _local5.length;
            if (_arg4){
                _local10 = (((_arg3 & ASCENDING))!=0) ? 1 : -1;
                _local11 = 0;
                while (_local11 < _local6) {
                    _local12 = _arg2[_local11];
                    _local13 = (_local12 + ((_local11 * SALT) * _local10));
                    _arg2[_local11] = _local13;
                    _local11++;
                };
            };
            var _local7:uint = (Array.NUMERIC | Array.RETURNINDEXEDARRAY);
            if (_arg3 == DESCENDING){
                _local7 = (_local7 | Array.DESCENDING);
            };
            var _local8:Array = _arg2.sort(_local7);
            _local11 = 0;
            while (_local11 < _local6) {
                _local14 = _local8[_local11];
                _local15 = _local5[_local14];
                _local8[_local11] = _local15;
                _local11++;
            };
            var _local9:int;
            while (_local9 < _local6) {
                _local15 = _local8[_local9];
                _local5[_local9] = _local15;
                _local9++;
            };
        }
        public static function sortOnIntegerValues(_arg1:IdSet, _arg2:Array, _arg3:int):void{
            var _local14:int;
            var _local17:int;
            var _local18:int;
            var _local4:Array = _arg1.getIds();
            var _local5:int = _local4.length;
            var _local6:Array = [];
            var _local7:Array = [];
            var _local8:int;
            while (_local8 < _local5) {
                _local17 = _arg2[_local8];
                _local18 = _local6[_local17];
                if (_local18 == 0){
                    _local6[_local17] = 1;
                    _local7.push(_local17);
                } else {
                    _local6[_local17] = (_local18 + 1);
                };
                _local8++;
            };
            var _local9:uint = (Array.NUMERIC | Array.RETURNINDEXEDARRAY);
            if (_arg3 == DESCENDING){
                _local9 = (_local9 | Array.DESCENDING);
            };
            var _local10:Array = _local7.sort(_local9);
            var _local11:Array = [];
            var _local12:int = _local7.length;
            var _local13:int;
            _local8 = 0;
            while (_local8 < _local12) {
                _local17 = _local7[_local10[_local8]];
                _local11[_local17] = _local13;
                _local13 = (_local13 + _local6[_local17]);
                _local8++;
            };
            var _local15:Array = new Array(_local5);
            var _local16:int;
            while (_local16 < _local5) {
                _local17 = _arg2[_local16];
                var _local19 = _local11;
                var _local20 = _local17;
                var _local21 = (_local19[_local20] + 1);
                _local19[_local20] = _local21;
                _local14 = _local19[_local20];
                _local15[_local14] = _local4[_local16];
                _local16++;
            };
            _arg1.replaceIds(_local15);
        }
        public static function getAlphaKey(_arg1:String):String{
            var _local2:String;
            var _local3:Object;
            _arg1 = _arg1.toLowerCase();
            if (_arg1){
                _local2 = _arg1.charAt(0);
                if ((((_local2 == "t")) || ((_local2 == "a")))){
                    _local3 = _alphaRxp.exec(_arg1);
                    if (_local3 != null){
                        return (_local3[1]);
                    };
                };
            };
            return (_arg1);
        }
        private static function getSortOpts(_arg1:DataTable, _arg2:String, _arg3:int):uint{
            var _local4:uint;
            if ((_arg3 & DESCENDING)){
                _local4 = (_local4 | Array.DESCENDING);
            };
            var _local5:String = _arg1.getFieldType(_arg2);
            if (_local5 != C.STRING){
                _local4 = (_local4 | Array.NUMERIC);
            };
            return (_local4);
        }

    }
}//package mb.data 
﻿package mb.data {
    import mb.*;

    public class NullDataColumn implements IDataColumn {

        public function str(_arg1:int):String{
            return ("");
        }
        public function num(_arg1:int):Number{
            return (NaN);
        }
        public function obj(_arg1:int):Object{
            return (null);
        }
        public function get type():String{
            return (C.UNDEFINED);
        }

    }
}//package mb.data 
﻿package mb.data {

    public class RecordMath {

        public static function sum(_arg1:RecordSet, _arg2:String, _arg3:Number=NaN):Number{
            var _local4:Object = calc(_arg1, _arg2, _arg3);
            return (_local4.sum);
        }
        public static function max(_arg1:RecordSet, _arg2:String, _arg3:Number=NaN):Number{
            var _local4:Object = calc(_arg1, _arg2, _arg3);
            return (_local4.max);
        }
        public static function min(_arg1:RecordSet, _arg2:String, _arg3:Number=NaN):Number{
            var _local4:Object = calc(_arg1, _arg2, _arg3);
            return (_local4.min);
        }
        public static function count(_arg1:RecordSet, _arg2:String, _arg3:Number=NaN):Number{
            var _local4:Object = calc(_arg1, _arg2, _arg3);
            return (_local4.validCount);
        }
        public static function calc(_arg1:RecordSet, _arg2:String, _arg3:Number=NaN):Object{
            var _local11:Number;
            var _local14:Record;
            var _local15:Number;
            var _local4:Number = 0;
            var _local5:Number = Infinity;
            var _local6:Number = -(Infinity);
            var _local7 = -1;
            var _local8 = -1;
            var _local9:int;
            var _local10:int;
            var _local12:int;
            var _local13 = !(isNaN(_arg3));
            while (_arg1.hasNext) {
                _local14 = _arg1.nextRecord;
                _local15 = _local14.getNumber(_arg2);
                if (isNaN(_local15)){
                } else {
                    if (((_local13) && ((_local15 == _arg3)))){
                    } else {
                        _local12++;
                        _local4 = (_local4 + _local15);
                        if (_local15 <= _local5){
                            _local5 = _local15;
                            _local7 = _local14.id;
                            if (_local15 == _local5){
                                _local10++;
                            } else {
                                _local10 = 1;
                            };
                        };
                        if (_local15 >= _local6){
                            _local6 = _local15;
                            _local8 = _local14.id;
                            if (_local15 == _local6){
                                _local9++;
                            } else {
                                _local9 = 1;
                            };
                        };
                    };
                };
            };
            return ({
                sum:_local4,
                min:_local5,
                minId:_local7,
                max:_local6,
                maxId:_local8,
                validCount:_local12,
                minCount:_local10,
                maxCount:_local9
            });
        }

        public function fetchUniqueValues(_arg1:RecordSet, _arg2:String):Object{
            var _local4:Record;
            var _local5:Object;
            var _local3:Object = {};
            while (_arg1.hasNext) {
                _local4 = _arg1.nextRecord;
                _local5 = _local4.getObject(_arg2);
                if (!_local3[_local5]){
                    _local3[_local5] = 1;
                } else {
                    var _local6 = _local3;
                    var _local7 = _local5;
                    var _local8 = (_local6[_local7] + 1);
                    _local6[_local7] = _local8;
                };
            };
            return (_local3);
        }

    }
}//package mb.data 
﻿package mb.data {
    import mb.*;

    public class RecordSet extends IdSet {

        private var _data:DataTable;
        public var nextRecord:Record;

        public function RecordSet(_arg1:DataTable, _arg2:Array){
            super(_arg2);
            this._data = _arg1;
            this.nextRecord = new Record(this._data, -1);
        }
        public function get data():DataTable{
            return (this._data);
        }
        public function get firstRecord():Record{
            var _local1:Record = new Record(this._data, _ids[0]);
            return (_local1);
        }
        public function fetchRecordByPosition(_arg1:int):Record{
            if (_arg1 >= _ids.length){
                return (new NullRecord());
            };
            if (_arg1 < 0){
                _arg1 = 0;
            };
            var _local2:Record = new Record(this._data, _ids[_arg1]);
            return (_local2);
        }
        override public function get hasNext():Boolean{
            var _local1:Boolean = super.hasNext;
            this.nextRecord.id = nextId;
            return (_local1);
        }

    }
}//package mb.data 
﻿package mb.data {

    public class DataColumn implements IDataColumn {

        private var _arr:Array;
        private var _type:String;
        private var _name:String;

        public function DataColumn(_arg1:String, _arg2:String){
            this._name = _arg1;
            this._type = _arg2;
            this._arr = [];
        }
        public function insertData(_arg1:Array):void{
            this._arr = _arg1;
        }
        public function get data():Array{
            return (this._arr);
        }
        public function str(_arg1:int):String{
            if (!this._arr[_arg1]){
                return ("");
            };
            return (this._arr[_arg1]);
        }
        public function num(_arg1:int):Number{
            var _local2:Number = this._arr[_arg1];
            return (_local2);
        }
        public function obj(_arg1:int):Object{
            return (this._arr[_arg1]);
        }
        public function get type():String{
            return (this._type);
        }

    }
}//package mb.data 
﻿package mb.data {
    import mb.*;
    import mb.text.*;
    import mb.utils.*;

    public class Record {

        protected var _data:DataTable;
        public var id:int;
        protected var _cols:Object;

        public function Record(_arg1:DataTable, _arg2:int, _arg3:Object=null){
            if (_arg3 === null){
                _arg3 = {};
            };
            this._cols = _arg3;
            this._data = _arg1;
            this.id = _arg2;
        }
        public function get isNull():Boolean{
            return ((((this.id < 0)) || ((this.id >= this._data.length))));
        }
        public function get schema():Object{
            return (this._data.schema);
        }
        public function getDataAsObject(_arg1:Object=null):Object{
            return (this._data.getDataObjectById(this.id, _arg1));
        }
        public function toString():String{
            if (this.isNull){
                return ("[Null Record]");
            };
            return (strval(this.getDataAsObject()));
        }
        public function getObject(_arg1:String):Object{
            if (!this._cols[_arg1]){
                this.initColumn(_arg1);
            };
            var _local2:IDataColumn = this._cols[_arg1];
            return (_local2.obj(this.id));
        }
        public function getDate(_arg1:String):Date{
            var _local2:String = this._data.getFieldType(_arg1);
            var _local3:Date;
            if (_local2 == C.DATE){
                _local3 = (this._data.getValueById(this.id, _arg1) as Date);
            } else {
                if (_local2 == C.STRING){
                    _local3 = new Date(this.getString(_arg1));
                } else {
                    if (_local2 == C.INTEGER){
                        _local3 = new Date(int((this.getNumber(_arg1) * 1000)));
                    };
                };
            };
            return (_local3);
        }
        private function initColumn(_arg1:String):void{
            this._cols[_arg1] = this._data.getDataColumn(_arg1);
        }
        public function getString(_arg1:String):String{
            if (!this._cols[_arg1]){
                this.initColumn(_arg1);
            };
            var _local2:IDataColumn = this._cols[_arg1];
            var _local3:String = _local2.str(this.id);
            return (_local3);
        }
        public function getNumber(_arg1:String):Number{
            if (!this._cols[_arg1]){
                this.initColumn(_arg1);
            };
            var _local2:IDataColumn = this._cols[_arg1];
            var _local3:Number = _local2.num(this.id);
            return (_local3);
        }
        public function getFieldType(_arg1:String):String{
            if (!this._cols[_arg1]){
                this.initColumn(_arg1);
            };
            var _local2:IDataColumn = this._cols[_arg1];
            return (_local2.type);
        }
        public function getFormattedNumber(_arg1:String, _arg2:int=0, _arg3:String="", _arg4:Boolean=false):String{
            var _local5:Number = this.getNumber(_arg1);
            return (Text.formatNumber(_local5, _arg2, _arg3, _arg4));
        }
        public function insertNumber(_arg1:String, _arg2:Number):void{
            this._data.insertValue(_arg2, this.id, _arg1);
        }
        public function insertString(_arg1:String, _arg2:String):void{
            this._data.insertValue(_arg2, this.id, _arg1);
        }
        public function insertObject(_arg1:String, _arg2:Object):void{
            this._data.insertValue(_arg2, this.id, _arg1);
        }
        public function clone():Record{
            return (new Record(this._data, this.id, this._cols));
        }

    }
}//package mb.data 
﻿package mb.data {

    public class NullRecord extends Record {

        private static var _data:DataTable;

        public function NullRecord(){
            if (!_data){
                _data = new DataTable();
            };
            super(_data, -1);
        }
        override public function get isNull():Boolean{
            return (true);
        }

    }
}//package mb.data 
﻿package mb.data {

    public interface IKey {

        function procRecord(_arg1:Record):Object;

    }
}//package mb.data 
﻿package mb.data {

    public interface IFilter {

        function testId(_arg1:int):Boolean;

    }
}//package mb.data 
﻿package mb.text {
    import flash.events.*;

    public class InteractiveTextField extends FormattedTextField {

        private var _selected:Boolean = false;

        public function InteractiveTextField(){
            mouseEnabled = true;
            addEventListener(MouseEvent.ROLL_OVER, this.handleOver);
            addEventListener(MouseEvent.ROLL_OUT, this.handleOut);
        }
        private function handleOver(_arg1):void{
            if (!this._selected){
                format.bold = true;
                applyFormat();
            };
        }
        private function handleOut(_arg1):void{
            if (!this._selected){
                format.bold = false;
                applyFormat();
            };
        }
        public function get selected():Boolean{
            return (this._selected);
        }
        public function select():void{
            format.bold = true;
            applyFormat();
            this._selected = true;
        }
        public function unselect():void{
            format.bold = false;
            applyFormat();
            this._selected = false;
        }

    }
}//package mb.text 
﻿package mb.text {
    import flash.display.*;
    import flash.text.*;

    public class PlacedTextField {

        protected var _fmt:TextFormat;
        protected var _fmtChanged:Boolean = false;
        protected var _txt:TextField;
        protected var _container:Sprite;

        public function PlacedTextField(_arg1:TextField, _arg2:Boolean=false){
            this._txt = _arg1;
            Text.fixField(_arg1);
        }
        public function get container():Sprite{
            if (this._container){
                return (this._container);
            };
            return (Sprite(this._txt.parent));
        }
        public function get format():TextFormat{
            if (!this._fmt){
                this._fmt = new TextFormat();
            };
            this._fmtChanged = true;
            return (this._fmt);
        }
        public function get field():TextField{
            return (this._txt);
        }
        public function get text():String{
            return (this._txt.text);
        }
        public function set htmlText(_arg1:String):void{
            if (this._fmtChanged){
                this._txt.defaultTextFormat = this._fmt;
                this._fmtChanged = false;
            };
            this._txt.htmlText = _arg1;
        }
        public function set text(_arg1:String):void{
            if (this._fmtChanged){
                this._txt.defaultTextFormat = this._fmt;
                this._fmtChanged = false;
            };
            this._txt.text = _arg1;
        }
        public function applyFormat():void{
            if (this._fmt){
                this._txt.setTextFormat(this._fmt);
            };
        }

    }
}//package mb.text 
﻿package mb.text {
    import flash.text.*;
    import mb.styles.*;
    import mb.utils.*;

    public class FormattedTextField extends TextField {

        private var _fmt:TextFormat;
        private var _fmtChanged:Boolean = false;
        private var _tab:Number = 0;

        public function FormattedTextField(_arg1:TextFormat=null){
            this._fmt = ((_arg1) ? _arg1 : new TextFormat());
            autoSize = "left";
            selectable = false;
            mouseEnabled = false;
        }
        public function applyTextStyle(_arg1:TextStyle):void{
            this._fmt.size = _arg1.size;
            this._fmt.color = _arg1.color;
            this._fmt.bold = _arg1.bold;
            this._fmt.italic = _arg1.italic;
            this._fmt.font = _arg1.font;
            this._fmtChanged = true;
            this.applyFormat();
            if (_arg1.styleSheet){
                styleSheet = _arg1.styleSheet;
            };
            mouseEnabled = _arg1.mouseEnabled;
        }
        public function get format():TextFormat{
            this._fmtChanged = true;
            return (this._fmt);
        }
        public function set format(_arg1:TextFormat):void{
            this._fmt = _arg1;
            this._fmtChanged = true;
        }
        public function get tab():Number{
            return (this._tab);
        }
        public function set tab(_arg1:Number):void{
            this._tab = _arg1;
            var _local2:Number = _arg1;
            if (this._fmt.align == "right"){
                _local2 = (_arg1 - width);
            } else {
                if (this._fmt.align == "center"){
                    _local2 = (_arg1 - int((width / 2)));
                };
            };
            x = Math.round(_local2);
        }
        override public function set text(_arg1:String):void{
            this.applyFormat();
            super.text = _arg1;
        }
        override public function set htmlText(_arg1:String):void{
            this.applyFormat();
            super.htmlText = _arg1;
        }
        public function applyFormat():void{
            var _local2:String;
            var _local3:Object;
            if (!this._fmtChanged){
            };
            var _local1:Boolean = Text.fontIsEmbedded(this._fmt.font, this._fmt.bold, this._fmt.italic);
            if (((this._fmt.font) && (_local1))){
                embedFonts = true;
                antiAliasType = AntiAliasType.ADVANCED;
            } else {
                embedFonts = false;
            };
            if (!styleSheet){
                if (this._fmt.align == "center"){
                    this._fmt.rightMargin = 1;
                    this._fmt.leftMargin = 1;
                };
                defaultTextFormat = this._fmt;
                setTextFormat(this._fmt);
            } else {
                _local2 = "a";
                _local3 = styleSheet.getStyle(_local2);
                if (this._fmt.font){
                    _local3.fontFamily = this._fmt.font;
                };
                if (this._fmt.size){
                    _local3.fontSize = this._fmt.size;
                };
                if (this._fmt.bold){
                    _local3.fontWeight = "bold";
                };
                if (this._fmt.italic){
                    _local3.fontStyle = "italic";
                };
                if (this._fmt.color){
                    _local3.color = RGB.rgbToString(int(this._fmt.color));
                };
                styleSheet.setStyle(_local2, _local3);
            };
        }

    }
}//package mb.text 
﻿package mb.text {
    import flash.text.*;

    public class Text {

        public static const L_DQUOTE:String = "“";
        public static const R_DQUOTE:String = "”";
        public static const L_SQUOTE:String = "‘";
        public static const R_SQUOTE:String = "’";
        public static const EN_DASH:String = "–";
        public static const MINUS:String = "−";
        public static const EM_DASH:String = "—";
        public static const PARAGRAPH:String = "¶";
        public static const CHEVRON:String = "»";

        private static var _fontTable:Object;
        private static var _rxp:RegExp = /(['])?\b[a-z]/g;
        private static var _capitalizeRxp:RegExp = /('?\b[\w]+)/;

        public static function fontIsEmbedded(_arg1:String, _arg2:Boolean=false, _arg3:Boolean=false):Boolean{
            if (!_fontTable){
                _fontTable = buildFontTable();
            };
            var _local4:String = getFontKey(_arg1, _arg2, _arg3);
            return (!((_fontTable[_local4] == undefined)));
        }
        private static function getFontKey(_arg1:String, _arg2:Boolean, _arg3:Boolean):String{
            var _local4:String = ((((_arg1 + "_") + _arg2) + "_") + _arg3);
            return (_local4);
        }
        public static function styleFieldAsLink(_arg1:TextField):void{
            var _local2:StyleSheet = new StyleSheet();
            _local2.setStyle("a", {color:"#004276"});
            _local2.setStyle("a:link", {textDecoration:"none"});
            _local2.setStyle("a:hover", {textDecoration:"underline"});
            _arg1.styleSheet = _local2;
        }
        public static function cloneTextFormat(_arg1:TextFormat):TextFormat{
            var _local2:TextFormat = new TextFormat(_arg1.font, _arg1.size, _arg1.color, _arg1.bold, _arg1.italic, _arg1.underline, _arg1.url, _arg1.target, _arg1.align);
            return (_local2);
        }
        public static function strToLines(_arg1:String):Array{
            if (_arg1.indexOf("\n") == -1){
                _arg1 = _arg1.replace(/\r/g, "\n");
            } else {
                _arg1 = _arg1.replace(/\r/g, "");
            };
            var _local2:Array = _arg1.split("\n");
            return (_local2);
        }
        public static function trimField(_arg1:TextField, _arg2:int):void{
            var _local7:Number;
            var _local8:Number;
            var _local9:int;
            var _local3:String = _arg1.text;
            var _local4:int = _local3.length;
            if (_local4 <= 0){
                return;
            };
            var _local5:Number = _arg1.textWidth;
            var _local6:Number = (_local5 / _local4);
            while (_local5 > _arg2) {
                _local7 = (_local5 - _arg2);
                _local8 = (_local7 / _local6);
                _local9 = 1;
                if (_local8 > 1){
                    _local9 = (_local8 * 0.8);
                    if (_local9 < 1){
                        _local9 = 1;
                    };
                };
                _local3 = _local3.substr(0, (_local3.length - _local9));
                _arg1.text = (_local3 + "...");
                if (_local3.length == 0){
                    break;
                };
                _local5 = _arg1.textWidth;
            };
        }
        public static function fixField(_arg1:TextField):void{
            var _local2:TextFormat = _arg1.getTextFormat();
            if (_arg1.text){
                if (_local2.bold === null){
                    _local2.bold = true;
                };
                if (_local2.italic === null){
                    _local2.italic = true;
                };
            };
            var _local3:Boolean = fontIsEmbedded(_local2.font, _local2.bold, _local2.italic);
            if (_local3){
                _arg1.embedFonts = true;
                _arg1.antiAliasType = AntiAliasType.ADVANCED;
            };
            _arg1.selectable = false;
            _arg1.mouseEnabled = false;
            if (_local2.align == "right"){
                _arg1.autoSize = TextFieldAutoSize.RIGHT;
            } else {
                if (_local2.align == "center"){
                    _arg1.autoSize = TextFieldAutoSize.CENTER;
                } else {
                    _arg1.autoSize = TextFieldAutoSize.LEFT;
                };
            };
            if (!_arg1.styleSheet){
                _arg1.defaultTextFormat = _local2;
            };
        }
        private static function buildFontTable():Object{
            var _local3:Font;
            var _local4:String;
            var _local1:Object = {};
            var _local2:Array = Font.enumerateFonts(false);
            for each (_local3 in _local2) {
                _local4 = getFontKey(_local3.fontName, (((_local3.fontStyle == "bold")) || ((_local3.fontStyle == "boldItalic"))), (((_local3.fontStyle == "italic")) || ((_local3.fontStyle == "boldItalic"))));
                _local1[_local4] = true;
            };
            return (_local1);
        }
        public static function rightPad(_arg1:String, _arg2:int, _arg3:String):String{
            var _local4:int = (_arg2 - _arg1.length);
            while (_local4-- > 0) {
                _arg1 = (_arg1 + _arg3);
            };
            return (_arg1);
        }
        public static function leftPad(_arg1:String, _arg2:int, _arg3:String):String{
            var _local4:int = (_arg2 - _arg1.length);
            while (_local4-- > 0) {
                _arg1 = (_arg3 + _arg1);
            };
            return (_arg1);
        }
        public static function rightStrip(_arg1:String, _arg2:String):String{
            while ((((_arg1.length > 0)) && ((_arg1.charAt((_arg1.length - 1)) == _arg2)))) {
                _arg1 = _arg1.substr(0, (_arg1.length - 1));
            };
            return (_arg1);
        }
        public static function leftStrip(_arg1:String, _arg2:String):String{
            while ((((_arg1.length > 0)) && ((_arg1.charAt(0) == _arg2)))) {
                _arg1 = _arg1.substr(1);
            };
            return (_arg1);
        }
        public static function getOrdinalSuffix(_arg1:int):String{
            var _local2 = "";
            var _local3:int = (_arg1 % 10);
            var _local4:int = (_arg1 % 100);
            if (_arg1 < 0){
            };
            if ((((((_local4 == 11)) || ((_local4 == 12)))) || ((_local4 == 13)))){
                _local2 = "th";
            } else {
                if (_local3 == 1){
                    _local2 = "st";
                } else {
                    if (_local3 == 2){
                        _local2 = "nd";
                    } else {
                        if (_local3 == 3){
                            _local2 = "rd";
                        } else {
                            _local2 = "th";
                        };
                    };
                };
            };
            return (_local2);
        }
        public static function formatNumber(_arg1:Number, _arg2:Number=0, _arg3:String="", _arg4:Boolean=false):String{
            var _local11:Number;
            var _local12:Number;
            var _local13:Number;
            var _local14:String;
            if (((isNaN(_arg1)) || ((_arg1 == Infinity)))){
                return (_arg3);
            };
            var _local5 = "";
            var _local6 = "";
            var _local7:Number = 0;
            if (_arg2 > 0){
                _local11 = Math.pow(10, _arg2);
                _local12 = 1E-7;
                _local7 = Math.round(((Math.abs(_arg1) * _local11) + _local12));
                _local5 = String(Math.floor((_local7 / _local11)));
                _local6 = String((_local7 % _local11));
                while (_local6.length < _arg2) {
                    _local6 = ("0" + _local6);
                };
                _local6 = ("." + _local6);
            } else {
                _local7 = Math.round(Math.abs(_arg1));
                _local5 = String(_local7);
            };
            if ((((_local5 == "0")) && (!(_local6)))){
                return ("0");
            };
            var _local8:String = ((_arg4) ? "+" : "");
            var _local9:String = MINUS;
            var _local10:String = ((_arg1)<0) ? _local9 : _local8;
            if (_local5.length > 3){
                _local13 = _local5.length;
                _local14 = "";
                while (_local13 > 3) {
                    _local14 = (("," + _local5.substr((_local13 - 3), 3)) + _local14);
                    _local13 = (_local13 - 3);
                };
                _local5 = (_local5.substr(0, _local13) + _local14);
            };
            return (((_local10 + _local5) + _local6));
        }
        public static function capitalizeWord(_arg1:String):String{
            var _local2:String;
            var _local3:String;
            if (_arg1){
                _local2 = _arg1.charAt(0);
                _local3 = _arg1.substr(1);
                _local2 = _local2.toUpperCase();
                if (_local3.indexOf(".") == -1){
                    _local3 = _local3.toLowerCase();
                };
                _arg1 = (_local2 + _local3);
            };
            return (_arg1);
        }
        public static function uc():String{
            var _local2:String = arguments[0];
            var _local3:String = arguments[1];
            if (!_local3){
                _local2 = _local2.toUpperCase();
            };
            return (_local2);
        }
        public static function capitalizeString(_arg1:String):String{
            _arg1 = _arg1.toLowerCase();
            _arg1 = _arg1.replace(_rxp, uc);
            return (_arg1);
        }
        public static function capitalize(_arg1:String, _arg2:Object):String{
            var _local6:String;
            _arg1 = _arg1.toLowerCase();
            var _local3:Array = _arg1.split(_capitalizeRxp);
            var _local4:int;
            var _local5:int = _local3.length;
            while (_local4 < _local5) {
                _local6 = _local3[_local4];
                if ((((_local6 == "")) || ((_local6 == " ")))){
                } else {
                    if (_arg2[_local6] !== undefined){
                        _local3[_local4] = _arg2[_local6];
                    } else {
                        _local3[_local4] = _local6.replace(_rxp, uc);
                    };
                };
                _local4++;
            };
            _arg1 = _local3.join("");
            return (_arg1);
        }
        public static function trim(_arg1:String):String{
            while (_arg1.charAt(0) == " ") {
                _arg1 = _arg1.substr(1);
            };
            while (_arg1.charAt((_arg1.length - 1)) == " ") {
                _arg1 = _arg1.slice(0, -1);
            };
            return (_arg1);
        }
        public static function cleanString(_arg1:String):String{
            _arg1 = trim(_arg1);
            var _local2:String = _arg1.charAt(0);
            var _local3:String = _arg1.charAt((_arg1.length - 1));
            if ((((((_local2 == "\"")) && ((_local3 == "\"")))) || ((((_local2 == "'")) && ((_local3 == "'")))))){
                _arg1 = _arg1.slice(1, -1);
            };
            return (_arg1);
        }
        public static function stripTags(_arg1:String):String{
            if (_arg1 == null){
                return ("");
            };
            _arg1 = _arg1.replace(/(?:<br *\/?> *)+/igm, " ");
            return (_arg1.replace(/<\/?[^>]+>/igm, ""));
        }
        public static function getExcerptByCharCount(_arg1:String, _arg2:int, _arg3:Boolean=true):String{
            if ((((_arg1.length > _arg2)) && (((_arg2 - 3) > 0)))){
                _arg1 = (_arg1.substr(0, (_arg2 - 3)) + "...");
            };
            return (_arg1);
        }
        public static function getExcerptByWordCount(_arg1:String, _arg2:int, _arg3:Boolean=true):String{
            var _local4:Array = _arg1.split(" ");
            if (_local4.length > _arg2){
                _local4.splice(-((_local4.length - _arg2)));
                _arg1 = _local4.join(" ");
                _arg1 = (_arg1 + " ....");
            };
            return (_arg1);
        }

    }
}//package mb.text 
﻿package mb {
    import flash.events.*;

    public dynamic class DynamicEvent extends Event {

        public function DynamicEvent(_arg1:String, _arg2:Object=null){
            var _local3:Object;
            if (_arg2){
                for (_local3 in _arg2) {
                    this[_local3] = _arg2[_local3];
                };
            };
            super(_arg1);
        }
        override public function clone():Event{
            var _local1:DynamicEvent = new DynamicEvent(type);
            Opts.mergeProperties(this, _local1, true);
            return (_local1);
        }
        override public function toString():String{
            var _local2:Object;
            var _local1 = (("[DynamicEvent type=\"" + type) + "\"");
            for (_local2 in this) {
                _local1 = (_local1 + (((" " + _local2) + "=") + this[_local2]));
            };
            _local1 = (_local1 + "]");
            return (_local1);
        }

    }
}//package mb 
﻿package mb {
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;

    public class StandardMouseDriver extends EventDispatcher implements IMouseDriver {

        private var _mouseX:Number = 0;
        private var _mouseY:Number = 0;
        protected var _xShift:Number = 0;
        protected var _yShift:Number = 0;
        protected var _scrollStep:int = 0;
        protected var _useHandCursor:Boolean = false;
        protected var _buttonDown:Boolean = false;
        protected var _mouseDown:Boolean = false;
        protected var _stage:Stage;
        protected var _screen:Sprite;
        protected var _overScreen:Boolean = true;
        protected var _masterScreen:Sprite;
        protected var _masterStageBounds:Rectangle;
        protected var _masterXOff:int = 0;
        protected var _masterYOff:int = 0;
        protected var _downOverMaster:Boolean = false;
        protected var _downOverSelf:Boolean = false;
        protected var _lastWheelTime:Number = 0;
        protected var _stepDelta:Number = 0;
        protected var _scrollEventCount:int = 0;

        public function StandardMouseDriver(_arg1:Sprite){
            this._screen = _arg1;
            this._stage = _arg1.stage;
            this.updateMouseXY();
            this._overScreen = this.testPointOverScreen(this.mouseX, this.mouseY);
            this._stage.addEventListener(Event.ENTER_FRAME, this.handleMouseMove, false, 90);
            this._stage.addEventListener(MouseEvent.MOUSE_DOWN, this.handleStageDown);
            this._stage.addEventListener(MouseEvent.MOUSE_UP, this.handleStageUp);
            this._stage.addEventListener(MouseEvent.MOUSE_UP, this.handleMouseUp);
            this._stage.addEventListener(Event.MOUSE_LEAVE, this.handleMouseOut);
            this._stage.addEventListener(MouseEvent.MOUSE_WHEEL, this.handleMouseWheel);
            this._screen.addEventListener(MouseEvent.MOUSE_OUT, this.handleMouseOut);
            this._screen.addEventListener(MouseEvent.MOUSE_DOWN, this.handleMouseDown);
            this._screen.addEventListener(MouseEvent.MOUSE_OVER, this.handleMouseOver);
            this._screen.stage.addEventListener(Event.MOUSE_LEAVE, this.handleMouseUp);
        }
        private function testPointOverScreen(_arg1:Number, _arg2:Number):Boolean{
            var _local3:Rectangle = this._screen.getBounds(this._stage);
            return (_local3.contains(_arg1, _arg2));
        }
        public function setMasterScreen(_arg1:Sprite):void{
            if (this._masterScreen){
                return;
            };
            this._masterStageBounds = _arg1.getBounds(this._stage);
            var _local2:Rectangle = this._screen.getBounds(this._stage);
            this._masterXOff = (_local2.x - this._masterStageBounds.x);
            this._masterYOff = (_local2.y - this._masterStageBounds.y);
            this._masterScreen = _arg1;
            this._masterScreen.addEventListener(MouseEvent.MOUSE_OUT, this.handleMouseOut);
            this._masterScreen.addEventListener(MouseEvent.MOUSE_DOWN, this.handleMouseDown);
            this._masterScreen.addEventListener(MouseEvent.MOUSE_OVER, this.handleMouseOver);
        }
        public function get scrollStep():int{
            return (this._scrollStep);
        }
        public function get mouseX():Number{
            if (((this._masterStageBounds) && (((this._downOverMaster) || (((this._masterStageBounds.contains(this._mouseX, this._mouseY)) && (!(this._downOverSelf)))))))){
                return ((this._mouseX + this._masterXOff));
            };
            return (this._mouseX);
        }
        public function get mouseY():Number{
            if (((this._masterStageBounds) && (((this._downOverMaster) || (((this._masterStageBounds.contains(this._mouseX, this._mouseY)) && (!(this._downOverSelf)))))))){
                return ((this._mouseY + this._masterYOff));
            };
            return (this._mouseY);
        }
        public function get stage():Stage{
            return (this._stage);
        }
        public function get screen():Sprite{
            return (this._screen);
        }
        public function get buttonDown():Boolean{
            return (this._buttonDown);
        }
        public function get mouseDown():Boolean{
            return (this._mouseDown);
        }
        public function set useHandCursor(_arg1:Boolean):void{
            this._useHandCursor = _arg1;
            if (_arg1){
                this._screen.buttonMode = true;
                this._screen.useHandCursor = true;
            } else {
                this._screen.buttonMode = false;
                this._screen.useHandCursor = false;
            };
        }
        public function get overScreen():Boolean{
            return (this._overScreen);
        }
        private function handleStageDown(_arg1):void{
            this._mouseDown = true;
        }
        private function handleMouseDown(_arg1):void{
            this._buttonDown = true;
            dispatchEvent(new Event(MouseEvent.MOUSE_DOWN));
            if (this._masterStageBounds){
                if (this._masterStageBounds.contains(this._mouseX, this._mouseY)){
                    this._downOverMaster = true;
                } else {
                    if (this._screen.getBounds(this._stage).contains(this._mouseX, this._mouseY)){
                        this._downOverSelf = true;
                    };
                };
            };
        }
        private function handleStageUp(_arg1):void{
            this._mouseDown = false;
        }
        private function handleMouseUp(_arg1):void{
            if (this._buttonDown){
                this._downOverMaster = false;
                this._downOverSelf = false;
                this._buttonDown = false;
                dispatchEvent(new Event(MouseEvent.MOUSE_UP));
            };
        }
        private function handleMouseOver(_arg1):void{
            if (!this._overScreen){
                dispatchEvent(new Event(MouseEvent.MOUSE_OVER));
                this._overScreen = true;
            };
        }
        private function handleMouseOut(_arg1):void{
            if (this._overScreen){
                dispatchEvent(new Event(MouseEvent.MOUSE_OUT));
                this._overScreen = false;
            };
        }
        private function handleMouseWheel(_arg1):void{
            if (!this._overScreen){
                return;
            };
            var _local2 = 180;
            var _local3 = 500;
            var _local4:Number = new Date().time;
            var _local5:int = (_local4 - this._lastWheelTime);
            if (_local5 > _local3){
                this._stepDelta = 0;
                this._scrollEventCount = 0;
            };
            var _local6:Number = _arg1.delta;
            this._stepDelta = (this._stepDelta + _local6);
            this._scrollStep = (((this._stepDelta > 0)) ? 1 : -1);
            this._scrollEventCount++;
            if ((((((_local5 > _local2)) || ((this._scrollEventCount >= 2)))) && (!((this._stepDelta == 0))))){
                dispatchEvent(new Event(C.SCROLL_STEP));
                this._lastWheelTime = _local4;
                this._stepDelta = 0;
                this._scrollEventCount = 0;
            };
        }
        private function handleMouseMove(_arg1):void{
            if (this.updateMouseXY()){
                dispatchEvent(new Event(MouseEvent.MOUSE_MOVE));
            };
        }
        private function updateMouseXY():Boolean{
            var _local1:Number = (this._stage.mouseX + this._xShift);
            var _local2:Number = (this._stage.mouseY + this._yShift);
            if ((((Math.abs((_local1 - this._mouseX)) > 0.1)) || ((Math.abs((_local2 - this._mouseY)) > 0.1)))){
                this._mouseX = _local1;
                this._mouseY = _local2;
                return (true);
            };
            return (false);
        }

    }
}//package mb 
﻿package mb.placement {
    import flash.display.*;
    import mb.projections.*;
    import flash.geom.*;

    public class LatLongScaleAlignment extends Alignment {

        public function LatLongScaleAlignment(_arg1:Sprite, _arg2:IGeoProjection, _arg3:Number, _arg4:Number, _arg5:Number, _arg6:Object=null){
            super(_arg1, _arg2, _arg6);
            var _local7:Number = align_mc.width;
            var _local8:Number = align_mc.height;
            var _local9:Number = (_local7 * _arg5);
            var _local10:Number = (_local8 * _arg5);
            var _local11:Point = _proj.projectLatLong(_arg3, _arg4);
            var _local12:Number = (_local11.x - (_local9 / 2));
            var _local13:Number = (_local11.x + (_local9 / 2));
            var _local14:Number = (_local11.y + (_local10 / 2));
            var _local15:Number = (_local11.y - (_local10 / 2));
            initProjectedBounds(_local12, _local14, _local13, _local15);
        }
    }
}//package mb.placement 
﻿package mb.placement {
    import flash.display.*;
    import mb.projections.*;
    import flash.events.*;
    import mb.*;
    import flash.geom.*;
    import mb.maps.*;

    public class Alignment extends Waiter {

        private static const _defaults:Object = {
            margins:null,
            rescalable:false,
            align:C.N
        };

        protected var _proj:IGeoProjection;
        protected var align_mc:Sprite;
        protected var _pixelBounds:PixelBox;
        protected var _bounds:BoundingBox;
        protected var _originalBounds:BoundingBox;
        private var _opts:Object;

        public function Alignment(_arg1:Sprite, _arg2:IGeoProjection, _arg3:Object=null){
            this._opts = Opts.init(_defaults, _arg3);
            this._proj = _arg2;
            this.align_mc = _arg1;
            this._pixelBounds = this.getClipBounds(this.align_mc);
        }
        private function getClipBounds(_arg1:DisplayObject):PixelBox{
            var _local2:PixelBox = new PixelBox(_arg1.parent, _arg1.x, _arg1.y, _arg1.width, _arg1.height);
            return (_local2);
        }
        public function needUpdate():Boolean{
            if (!ready){
                return (false);
            };
            return (true);
        }
        public function updateClipSize():void{
            var _local1:Number;
            var _local2:Point;
            var _local3:Number;
            var _local4:Number;
            var _local5:BoundingBox;
            if (!ready){
                return;
            };
            if (this._opts.rescalable == false){
                _local1 = this.metersPerPixel;
                this._pixelBounds = this.getClipBounds(this.align_mc);
                _local2 = this._bounds.getCenterPoint();
                _local3 = ((0.5 * this._pixelBounds.width) * _local1);
                _local4 = ((0.5 * this._pixelBounds.height) * _local1);
                this._bounds = new BoundingBox();
                this._bounds.setBounds((_local2.x - _local3), (_local2.y + _local4), (_local2.x + _local3), (_local2.y - _local4));
            } else {
                _local5 = this._originalBounds;
                this.updateProjectedBounds(_local5.left, _local5.top, _local5.right, _local5.bottom);
            };
        }
        public function get pixelBounds():PixelBox{
            this._pixelBounds = this.getClipBounds(this.align_mc);
            return (this._pixelBounds);
        }
        public function get bounds():BoundingBox{
            return (this._bounds);
        }
        public function initProjectedBounds(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):void{
            this._originalBounds = new BoundingBox();
            this._originalBounds.setBounds(_arg1, _arg2, _arg3, _arg4);
            this.updateProjectedBounds(_arg1, _arg2, _arg3, _arg4);
            dispatchEvent(new Event(C.READY));
        }
        public function updateProjectedBounds(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):void{
            var _local21:Number;
            var _local24:Array;
            this._pixelBounds = this.getClipBounds(this.align_mc);
            var _local5:int;
            var _local6:int;
            var _local7:int;
            var _local8:int;
            if (this._opts.margins){
                _local24 = this._opts.margins;
                _local5 = _local24[0];
                _local6 = _local24[2];
                _local7 = _local24[1];
                _local8 = _local24[3];
            };
            var _local9:Number = (this._pixelBounds.left + _local5);
            var _local10:Number = (this._pixelBounds.top + _local7);
            var _local11:Number = (this._pixelBounds.right - _local6);
            var _local12:Number = (this._pixelBounds.bottom - _local8);
            var _local13:Number = Math.abs((_local10 - _local12));
            var _local14:Number = Math.abs((_local9 - _local11));
            var _local15:Number = Math.abs((_arg2 - _arg4));
            var _local16:Number = Math.abs((_arg1 - _arg3));
            var _local17:Number = (_local14 / _local13);
            var _local18:Number = (_local16 / _local15);
            var _local19:Number = 0;
            var _local20:Number = 0;
            if (_local17 < _local18){
                _local21 = (_local16 / _local14);
                _local20 = ((_local21 * _local13) - _local15);
            } else {
                _local21 = (_local15 / _local13);
                _local19 = ((_local21 * _local14) - _local16);
            };
            var _local22:String = this._opts.align;
            if (_local19 > 0){
                if ((((((_local22 == C.W)) || ((_local22 == C.NW)))) || ((_local22 == C.SW)))){
                    _arg3 = (_arg3 + _local19);
                } else {
                    if ((((((_local22 == C.E)) || ((_local22 == C.NE)))) || ((_local22 == C.SE)))){
                        _arg1 = (_arg1 - _local19);
                    } else {
                        _arg1 = (_arg1 - (_local19 / 2));
                        _arg3 = (_arg3 + (_local19 / 2));
                    };
                };
            };
            if (_local20 > 0){
                if ((((((_local22 == C.E)) || ((_local22 == C.W)))) || ((_local22 == C.CENTER)))){
                    _arg2 = (_arg2 + (_local20 / 2));
                    _arg4 = (_arg4 - (_local20 / 2));
                } else {
                    if ((((((_local22 == C.S)) || ((_local22 == C.SE)))) || ((_local22 == C.SW)))){
                        _arg2 = (_arg2 + _local20);
                    } else {
                        _arg4 = (_arg4 - _local20);
                    };
                };
            };
            var _local23:Number = Math.abs(((_arg3 - _arg1) / _local14));
            _arg1 = (_arg1 - (_local5 * _local23));
            _arg2 = (_arg2 + (_local7 * _local23));
            _arg3 = (_arg3 + (_local6 * _local23));
            _arg4 = (_arg4 - (_local8 * _local23));
            this._bounds = new BoundingBox();
            this._bounds.setBounds(_arg1, _arg2, _arg3, _arg4);
        }
        public function get metersPerPixel():Number{
            var _local1:Number = (this._bounds.width / this._pixelBounds.width);
            return (_local1);
        }
        public function get pixelsPerMeter():Number{
            return ((this._pixelBounds.width / this._bounds.width));
        }
        public function get clip():Sprite{
            return (this.align_mc);
        }
        public function get projection():IGeoProjection{
            return (this._proj);
        }
        public function mppToScale(_arg1:Number):Number{
            return ((this.metersPerPixel / _arg1));
        }
        public function getContainerXY(_arg1:DisplayObjectContainer):XY{
            var _local2:Number = this.pixelsPerMeter;
            var _local3:PixelBox = this.pixelBounds.clonePixelBox();
            _local3.setContext(_arg1);
            var _local4:XY = new XY(_local2, -(_local2), ((-(_local2) * this.bounds.left) + _local3.left), ((_local2 * this.bounds.top) + _local3.top), 0, 0, 1, this.pixelBounds.width, this.pixelBounds.height);
            return (_local4);
        }
        public function latLongToStage(_arg1:Number, _arg2:Number):Point{
            return (this.latLongToContainer(_arg1, _arg2, DisplayObjectContainer(this.align_mc.root)));
        }
        public function latLongToContainer(_arg1:Number, _arg2:Number, _arg3:DisplayObjectContainer):Point{
            var _local4:Point = new Point();
            if (((((!(_arg3)) || (!(_arg3.root)))) || (!(ready)))){
                return (_local4);
            };
            _local4 = this._proj.projectLatLong(_arg1, _arg2);
            var _local5:Number = this.pixelsPerMeter;
            var _local6:Number = (-(_local5) * this._bounds.left);
            var _local7:Number = (_local5 * this._bounds.top);
            var _local8:Number = (((_local4.x * _local5) + _local6) + this.align_mc.x);
            var _local9:Number = (((_local4.y * -(_local5)) + _local7) + this.align_mc.y);
            _local4.x = _local8;
            _local4.y = _local9;
            var _local10:DisplayObjectContainer = this.align_mc.parent;
            if (_local10 != _arg3){
                if (_local10 != this.align_mc.root){
                    _local4 = _local10.localToGlobal(_local4);
                };
                if (_arg3 != this.align_mc.root){
                    _local4 = _arg3.globalToLocal(_local4);
                };
            };
            return (_local4);
        }

    }
}//package mb.placement 
﻿package mb.utils {

    public function strval(_arg1):String{
        var _local3:String;
        var _local2 = "";
        if ((_arg1 is Number)){
            _local2 = String(_arg1);
        } else {
            if ((_arg1 is String)){
                _local2 = _arg1;
            } else {
                if ((_arg1 is Object)){
                    for (_local3 in _arg1) {
                        if (_local2){
                            _local2 = (_local2 + ",");
                        };
                        _local2 = (_local2 + (((" " + _local3) + ":") + _arg1[_local3]));
                    };
                    _local2 = (("{" + _local2) + " }");
                } else {
                    _local2 = String(_arg1);
                };
            };
        };
        return (_local2);
    }
}//package mb.utils 
﻿package mb.utils {
    import flash.display.*;
    import flash.text.*;
    import mb.*;
    import flash.geom.*;
    import mb.styles.*;
    import flash.utils.*;

    public class Utils {

        public static function copyObject(_arg1:Object){
            var _local2:ByteArray = new ByteArray();
            _local2.writeObject(_arg1);
            _local2.position = 0;
            return (_local2.readObject());
        }
        public static function getLibrarySprite(_arg1:String):Sprite{
            var sp:* = null;
            var cRef:* = null;
            var linkageId:* = _arg1;
            try {
                cRef = (getDefinitionByName(linkageId) as Class);
                sp = (new (cRef)() as Sprite);
            } catch(err:Error) {
                sp = new Sprite();
            };
            return (sp);
        }
        public static function attachLibrarySprite(_arg1:String, _arg2:DisplayObjectContainer=null):Sprite{
            var _local3:Sprite = getLibrarySprite(_arg1);
            ((_arg2) && (_arg2.addChild(_local3)));
            return (_local3);
        }
        public static function getColor32(_arg1:Number, _arg2:Number):uint{
            var _local3:uint = int((_arg2 * 0xFF));
            var _local4:uint = (int(_arg1) + (_local3 << 24));
            return (_local4);
        }
        public static function attachLibraryClip(_arg1:String, _arg2:DisplayObjectContainer):MovieClip{
            var _local3:MovieClip = MovieClip(attachLibrarySprite(_arg1, _arg2));
            return (_local3);
        }
        public static function setSpriteColor(_arg1:DisplayObject, _arg2:Number, _arg3:Number=NaN):void{
            var _local4:ColorTransform = new ColorTransform();
            if (!isNaN(_arg3)){
                _local4.alphaMultiplier = _arg3;
            };
            if (!isNaN(_arg2)){
                _local4.color = _arg2;
            };
            _arg1.transform.colorTransform = _local4;
        }
        public static function fadeSpriteColor(_arg1:DisplayObject, _arg2:Number):void{
            var _local4:int;
            var _local5:Number;
            var _local3:ColorTransform = new ColorTransform();
            if ((((_arg2 < 1)) && ((_arg2 >= 0)))){
                _local4 = (0xFF * _arg2);
                _local5 = (1 - _arg2);
                _local3.redMultiplier = (_local3.greenMultiplier = (_local3.blueMultiplier = _local5));
                _local3.redOffset = (_local3.greenOffset = (_local3.blueOffset = _local4));
            };
            _arg1.transform.colorTransform = _local3;
        }
        public static function objectSubtract(_arg1:Object, _arg2:Object):Object{
            var _local4:Object;
            var _local3:Object = {};
            for (_local4 in _arg1) {
                if (!_arg2[_local4]){
                    _local3[_local4] = _arg1[_local4];
                };
            };
            return (_local3);
        }
        public static function strip(_arg1:String, _arg2:String):String{
            if (_arg2.length != 1){
                return (_arg1);
            };
            while (_arg1.indexOf(_arg2) == 0) {
                _arg1 = _arg1.substring(1);
            };
            while (_arg1.charAt((_arg1.length - 1)) === _arg2) {
                _arg1 = _arg1.slice(0, -1);
            };
            return (_arg1);
        }
        public static function localToLocal(_arg1:Point, _arg2:DisplayObjectContainer, _arg3:DisplayObjectContainer):Point{
            _arg1 = _arg2.localToGlobal(_arg1);
            _arg1 = _arg3.globalToLocal(_arg1);
            return (_arg1);
        }
        public static function drawMatchingRectangle(_arg1:Sprite, _arg2:Sprite, _arg3:ShapeStyle=null):void{
            if (_arg3 == null){
                _arg3 = new ShapeStyle();
            };
            var _local4:Point = new Point(_arg2.x, _arg2.y);
            var _local5:Point = new Point((_arg2.x + _arg2.width), (_arg2.y + _arg2.height));
            _local4 = localToLocal(_local4, _arg2.parent, _arg1);
            _local5 = localToLocal(_local5, _arg2.parent, _arg1);
            var _local6:Number = _local4.x;
            var _local7:Number = _local4.y;
            var _local8:Number = _local5.x;
            var _local9:Number = _local5.y;
            drawRectangle(_arg1, _arg3, (_local8 - _local6), (_local9 - _local7), _local6, _local7);
        }
        public static function drawRectangle(_arg1:Sprite, _arg2:ShapeStyle, _arg3:Number, _arg4:Number, _arg5:Number=0, _arg6:Number=0):void{
            _arg1.graphics.clear();
            _arg2.beginDrawing(_arg1.graphics);
            _arg1.graphics.drawRect(_arg5, _arg6, _arg3, _arg4);
            _arg1.graphics.endFill();
        }

    }
}//package mb.utils 
﻿package mb.utils {
    import mb.*;
    import mb.text.*;

    public class DateString {

        public static const STANDARD_ABBREV:String = "standard";
        public static const SHORT_ABBREV:String = "short";
        public static const MINI_ABBREV:String = "mini";
        public static const UPPER_CASE:String = "uc";
        public static const LOWER_CASE:String = "lc";
        private static const _dayAbbrevs:Array = ["Sun.", "Mon.", "Tues.", "Wed.", "Thurs.", "Fri.", "Sat.", "Sun."];
        private static const _dayMiniAbbrevs:Array = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
        private static const _dayNames:Array = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
        private static const _monthNames:Array = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
        private static const _monthAbbrevs:Array = ["Jan.", "Feb.", "March", "April", "May", "June", "July", "Aug.", "Sept.", "Oct.", "Nov.", "Dec."];
        public static const _monthShortAbbrevs:Array = ["Jan.", "Feb.", "Mar.", "Apr.", "May", "June", "July", "Aug.", "Sep.", "Oct.", "Nov.", "Dec."];
        private static const _monthMiniAbbrevs:Array = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        private static const _rxpNoPad:RegExp = /%a|%b|\//i;
        private static const _rxp:RegExp = /(%(?:a|A|b|B|d|m|y|Y|H|I|M|p|S))/g;
        private static const _defaults:Object = {
            month_abbrev:STANDARD_ABBREV,
            day_abbrev:STANDARD_ABBREV,
            ampm_case:UPPER_CASE,
            ampm_abbrev:STANDARD_ABBREV
        };
        private static const _rxpTwoDigits:RegExp = /^[0-9]{1,2}/;
        private static const _rxpFourDigits:RegExp = /^[0-9]{4,4}/;
        private static const _rxpWord:RegExp = /^[A-Z][a-zA-Z]{2,}\.?/;
        private static const _rxpAMPM:RegExp = /^([ap]\.?m\.?/i;

        public static var AM:String = "AM";
        public static var PM:String = "PM";
        public static var DEFAULT_YEAR:int = 2011;
        public static var NULL_TIME:Number = Date.UTC(1900, 0, 1);
        private static var _singleton:DateString = new DateString("");
;

        private var _tokens:Array;
        private var _fmt:String;
        public var padNumbers:Boolean = false;
        private var _abbrev:String = "standard";
        private var _opts:Object;

        public function DateString(_arg1:String, _arg2:Object=null){
            this.setFormat(_arg1, _arg2);
        }
        public static function formatDate(_arg1:Date, _arg2:String, _arg3:Object=null):String{
            _singleton.setFormat(_arg2, _arg3);
            return (_singleton.formatDate(_arg1));
        }
        public static function parseDate(_arg1:String, _arg2:String):Date{
            _singleton.setFormat(_arg2);
            return (_singleton.parseDate(_arg1));
        }
        public static function reformatDate(_arg1:String, _arg2:String, _arg3:String):String{
            var _local4:Date = parseDate(_arg1, _arg2);
            return (formatDate(_local4, _arg3));
        }
        private static function scanInteger(_arg1:String, _arg2:int, _arg3:int):String{
            var _local4:RegExp = (((_arg3 < 100)) ? _rxpTwoDigits : _rxpFourDigits);
            var _local5:Array = _local4.exec(_arg1);
            if (_local5 == null){
                return (null);
            };
            var _local6:int = parseInt(_local5[0]);
            if ((((_local6 < _arg2)) || ((_local6 > _arg3)))){
                return (null);
            };
            return (_local5[0]);
        }
        private static function scanDateWord(_arg1:String):String{
            var _local2:Array = _rxpWord.exec(_arg1);
            if (_local2 == null){
                return (null);
            };
            return (_local2[0]);
        }
        private static function scanAMPM(_arg1:String):String{
            var _local2:Array = _rxpAMPM.exec(_arg1);
            if (_local2 == null){
                return (null);
            };
            return (_local2[0]);
        }
        private static function getMatchingIndex(_arg1, _arg2:Array):int{
            var _local3:int;
            while (_local3 < _arg2.length) {
                if (_arg1.indexOf(_arg2[_local3]) == 0){
                    return (_local3);
                };
                _local3++;
            };
            return (-1);
        }

        private function setOptions(_arg1:Object):void{
            if (_arg1){
                this._opts = Opts.init(_defaults, _arg1);
            } else {
                this._opts = _defaults;
            };
        }
        public function formatTime(_arg1:Number, _arg2:Object=null):String{
            var _local3:Date = new Date(_arg1);
            return (this.formatDate(_local3, _arg2));
        }
        public function formatDate(_arg1:Date, _arg2:Object=null):String{
            var _local5:String;
            if (_arg1 == null){
                return ("");
            };
            var _local3 = "";
            var _local4:int;
            while (_local4 < this._tokens.length) {
                _local5 = this._tokens[_local4];
                _local3 = (_local3 + this.formatToken(_arg1, _local5));
                _local4++;
            };
            return (_local3);
        }
        public function setFormat(_arg1:String, _arg2:Object=null):void{
            this.setOptions(_arg2);
            if (this._fmt != _arg1){
                this._fmt = _arg1;
                this._tokens = _arg1.split(_rxp);
                this.padNumbers = !(_rxpNoPad.test(_arg1));
            };
        }
        private function getNullDate():Date{
            return (new Date(NULL_TIME));
        }
        public function parseDate(_arg1:String):Date{
            return (new Date(this.parseDateToTime(_arg1)));
        }
        public function parseDateToTime(_arg1:String):Number{
            var _local10:String;
            var _local12:String;
            var _local13:String;
            var _local14:int;
            var _local15:int;
            var _local16:String;
            var _local2:String = _arg1;
            var _local3:int = DEFAULT_YEAR;
            var _local4:int;
            var _local5 = 1;
            var _local6 = 12;
            var _local7:int;
            var _local8:int;
            var _local9:Boolean;
            var _local11:int;
            while (_local11 < this._tokens.length) {
                _local12 = this._tokens[_local11];
                if (_local12.length == 0){
                } else {
                    if ((((_local12.charAt(0) == "%")) && ((_local12.length == 2)))){
                        _local13 = _local12.charAt(1);
                        _local10 = null;
                        switch (_local13){
                            case "A":
                            case "a":
                                _local10 = scanDateWord(_local2);
                                if (_local10 != null){
                                    _local14 = getMatchingIndex(_local2, _dayMiniAbbrevs);
                                    if (_local14 == -1){
                                        _local10 = null;
                                    };
                                };
                                break;
                            case "B":
                            case "b":
                                _local10 = scanDateWord(_local2);
                                if (_local10 != null){
                                    _local14 = getMatchingIndex(_local2, _monthMiniAbbrevs);
                                    if (_local14 == -1){
                                        _local10 = null;
                                    } else {
                                        _local4 = _local14;
                                    };
                                };
                                break;
                            case "Y":
                                _local10 = scanInteger(_local2, 1000, 3000);
                                if (_local10 != null){
                                    _local3 = parseInt(_local10);
                                };
                                break;
                            case "y":
                                _local10 = scanInteger(_local2, 0, 99);
                                if (_local10 != null){
                                    _local15 = parseInt(_local10);
                                    _local3 = (((_local15 < 25)) ? (_local15 + 2000) : (_local15 + 1900));
                                };
                                break;
                            case "m":
                                _local10 = scanInteger(_local2, 1, 12);
                                if (_local10 != null){
                                    _local4 = (parseInt(_local10) - 1);
                                };
                                break;
                            case "d":
                                _local10 = scanInteger(_local2, 1, 31);
                                if (_local10 != null){
                                    _local5 = parseInt(_local10);
                                };
                                break;
                            case "H":
                                _local10 = scanInteger(_local2, 0, 23);
                                if (_local10 != null){
                                    _local6 = parseInt(_local10);
                                };
                                break;
                            case "I":
                                _local10 = scanInteger(_local2, 1, 12);
                                if (_local10 != null){
                                    _local6 = parseInt(_local10);
                                };
                                break;
                            case "M":
                                _local10 = scanInteger(_local2, 0, 59);
                                if (_local10 != null){
                                    _local7 = parseInt(_local10);
                                };
                                break;
                            case "S":
                                _local10 = scanInteger(_local2, 0, 59);
                                if (_local10 != null){
                                    _local8 = parseInt(_local10);
                                };
                                break;
                            case "p":
                                _local10 = scanAMPM(_local2);
                                if (_local10 != null){
                                    _local16 = _local2.charAt(0);
                                    if ((((_local16 == "p")) || ((_local16 == "P")))){
                                        _local9 = true;
                                    };
                                };
                                break;
                        };
                        if (_local10 != null){
                            _local2 = _local2.substr(_local10.length);
                        } else {
                            return (NULL_TIME);
                        };
                    } else {
                        _local10 = _local2.substr(0, _local12.length);
                        if (_local10 != _local12){
                            return (NULL_TIME);
                        };
                        _local2 = _local2.substr(_local12.length);
                    };
                };
                _local11++;
            };
            if (_local9){
                if (_local6 == 12){
                    _local6 = (_local6 - 12);
                } else {
                    _local6 = (_local6 + 12);
                };
            };
            return (Date.UTC(_local3, _local4, _local5, _local6, _local7));
        }
        private function formatToken(_arg1:Date, _arg2:String):String{
            var _local5:int;
            var _local6:int;
            if (((!((_arg2.length == 2))) || (!((_arg2.charAt(0) == "%"))))){
                return (_arg2);
            };
            var _local3:String = _arg2.charAt(1);
            var _local4 = "";
            switch (_local3){
                case "A":
                    _local4 = _dayNames[_arg1.getUTCDay()];
                    break;
                case "a":
                    _local5 = _arg1.getUTCDay();
                    _local4 = (((this._opts.day_abbrev == STANDARD_ABBREV)) ? _dayAbbrevs[_local5] : _dayMiniAbbrevs[_local5]);
                    break;
                case "Y":
                    _local4 = (_local4 + _arg1.getUTCFullYear());
                    break;
                case "y":
                    _local5 = (_arg1.getUTCFullYear() % 100);
                    _local4 = Text.leftPad(String(_local5), 2, "0");
                    break;
                case "m":
                    _local4 = (_local4 + (_arg1.getUTCMonth() + 1));
                    if (this.padNumbers){
                        _local4 = Text.leftPad(_local4, 2, "0");
                    };
                    break;
                case "d":
                    _local4 = (_local4 + _arg1.getUTCDate());
                    if (this.padNumbers){
                        _local4 = Text.leftPad(_local4, 2, "0");
                    };
                    break;
                case "B":
                    _local4 = _monthNames[_arg1.getUTCMonth()];
                    break;
                case "b":
                    _local5 = _arg1.getUTCMonth();
                    if (this._opts.month_abbrev == STANDARD_ABBREV){
                        _local4 = _monthAbbrevs[_local5];
                    } else {
                        if (this._opts.month_abbrev == SHORT_ABBREV){
                            _local4 = _monthShortAbbrevs[_local5];
                        } else {
                            _local4 = _monthMiniAbbrevs[_local5];
                        };
                    };
                    break;
                case "H":
                    _local4 = (_local4 + _arg1.getUTCHours());
                    if (this.padNumbers){
                        _local4 = Text.leftPad(_local4, 2, "0");
                    };
                    break;
                case "I":
                    _local6 = _arg1.getUTCHours();
                    if (_local6 == 0){
                        _local6 = 12;
                    } else {
                        if (_local6 > 12){
                            _local6 = (_local6 - 12);
                        };
                    };
                    _local4 = (_local4 + _local6);
                    break;
                case "M":
                    _local5 = _arg1.getUTCMinutes();
                    _local4 = Text.leftPad(String(_local5), 2, "0");
                    break;
                case "p":
                    _local6 = _arg1.getUTCHours();
                    _local4 = (((((_local6 < 12)) || ((_local6 == 24)))) ? AM : PM);
                    break;
            };
            return (_local4);
        }

    }
}//package mb.utils 
﻿package mb.utils {
    import flash.display.*;
    import flash.text.*;
    import mb.*;
    import flash.geom.*;
    import mb.styles.*;
    import flash.utils.*;

    public class Util {

        public static function copyObject(_arg1:Object){
            var _local2:ByteArray = new ByteArray();
            _local2.writeObject(_arg1);
            _local2.position = 0;
            return (_local2.readObject());
        }
        public static function round(_arg1:Number, _arg2:Number=1):Number{
            _arg1 = (_arg1 / _arg2);
            _arg1 = Math.round(_arg1);
            _arg1 = (_arg1 * _arg2);
            return (_arg1);
        }
        public static function createArray(_arg1:int, _arg2):Array{
            var _local3:Array = [];
            var _local4:int;
            while (_local4 < _arg1) {
                _local3[_local4] = _arg2;
                _local4++;
            };
            return (_local3);
        }
        public static function createIndexArray(_arg1:int, _arg2:int=0, _arg3:int=1):Array{
            var _local4:Array = [];
            var _local5:int;
            while (_local5 < _arg1) {
                _local4[_local5] = (_arg2 + (_local5 * _arg3));
                _local5++;
            };
            return (_local4);
        }
        public static function createIndexFromArray(_arg1:Array):Dictionary{
            var _local3:*;
            var _local2:Dictionary = new Dictionary();
            if (_arg1){
                for each (_local3 in _arg1) {
                    _local2[_local3] = true;
                };
            };
            return (_local2);
        }
        public static function getLibrarySprite(_arg1:String):Sprite{
            var sp:* = null;
            var cRef:* = null;
            var linkageId:* = _arg1;
            try {
                cRef = (getDefinitionByName(linkageId) as Class);
                sp = (new (cRef)() as Sprite);
            } catch(err:Error) {
                sp = new Sprite();
            };
            return (sp);
        }
        public static function attachLibrarySprite(_arg1:String, _arg2:DisplayObjectContainer=null):Sprite{
            var _local3:Sprite = getLibrarySprite(_arg1);
            ((_arg2) && (_arg2.addChild(_local3)));
            return (_local3);
        }
        public static function getColor32(_arg1:Number, _arg2:Number):uint{
            var _local3:uint = int((_arg2 * 0xFF));
            var _local4:uint = (int(_arg1) + (_local3 << 24));
            return (_local4);
        }
        public static function attachLibraryClip(_arg1:String, _arg2:DisplayObjectContainer):MovieClip{
            var _local3:MovieClip = MovieClip(attachLibrarySprite(_arg1, _arg2));
            return (_local3);
        }
        public static function setSpriteColor(_arg1:DisplayObject, _arg2:Number, _arg3:Number=NaN):void{
            var _local4:ColorTransform = new ColorTransform();
            if (!isNaN(_arg3)){
                _local4.alphaMultiplier = _arg3;
            };
            if (!isNaN(_arg2)){
                _local4.color = _arg2;
            };
            _arg1.transform.colorTransform = _local4;
        }
        public static function fadeSpriteColor(_arg1:DisplayObject, _arg2:Number):void{
            var _local4:int;
            var _local5:Number;
            var _local3:ColorTransform = new ColorTransform();
            if ((((_arg2 < 1)) && ((_arg2 >= 0)))){
                _local4 = (0xFF * _arg2);
                _local5 = (1 - _arg2);
                _local3.redMultiplier = (_local3.greenMultiplier = (_local3.blueMultiplier = _local5));
                _local3.redOffset = (_local3.greenOffset = (_local3.blueOffset = _local4));
            };
            _arg1.transform.colorTransform = _local3;
        }
        public static function objectSubtract(_arg1:Object, _arg2:Object):Object{
            var _local4:Object;
            var _local3:Object = {};
            for (_local4 in _arg1) {
                if (!_arg2[_local4]){
                    _local3[_local4] = _arg1[_local4];
                };
            };
            return (_local3);
        }
        public static function strip(_arg1:String, _arg2:String):String{
            if (_arg2.length != 1){
                return (_arg1);
            };
            while (_arg1.indexOf(_arg2) == 0) {
                _arg1 = _arg1.substring(1);
            };
            while (_arg1.charAt((_arg1.length - 1)) === _arg2) {
                _arg1 = _arg1.slice(0, -1);
            };
            return (_arg1);
        }
        public static function localToLocal(_arg1:Point, _arg2:DisplayObjectContainer, _arg3:DisplayObjectContainer):Point{
            _arg1 = _arg2.localToGlobal(_arg1);
            _arg1 = _arg3.globalToLocal(_arg1);
            return (_arg1);
        }
        public static function drawMatchingRectangle(_arg1:Sprite, _arg2:Sprite, _arg3:ShapeStyle=null):void{
            if (_arg3 == null){
                _arg3 = new ShapeStyle();
            };
            var _local4:Point = new Point(_arg2.x, _arg2.y);
            var _local5:Point = new Point((_arg2.x + _arg2.width), (_arg2.y + _arg2.height));
            _local4 = localToLocal(_local4, _arg2.parent, _arg1);
            _local5 = localToLocal(_local5, _arg2.parent, _arg1);
            var _local6:Number = _local4.x;
            var _local7:Number = _local4.y;
            var _local8:Number = _local5.x;
            var _local9:Number = _local5.y;
            drawRectangle(_arg1, _arg3, (_local8 - _local6), (_local9 - _local7), _local6, _local7);
        }
        public static function drawRectangle(_arg1:Sprite, _arg2:ShapeStyle, _arg3:Number, _arg4:Number, _arg5:Number=0, _arg6:Number=0):void{
            _arg1.graphics.clear();
            _arg2.beginDrawing(_arg1.graphics);
            _arg1.graphics.drawRect(_arg5, _arg6, _arg3, _arg4);
            _arg1.graphics.endFill();
        }

    }
}//package mb.utils 
﻿package mb.utils {

    public class RGB {

        public var r:Number;
        public var g:Number;
        public var b:Number;

        public function RGB(_arg1:uint){
            this.r = getR(_arg1);
            this.g = getG(_arg1);
            this.b = getB(_arg1);
        }
        public static function rgbToString(_arg1:Number, _arg2:String="#"):String{
            var _local3:String = _arg1.toString(16);
            while (_local3.length < 6) {
                _local3 = ("0" + _local3);
            };
            return ((_arg2 + _local3));
        }
        public static function getR(_arg1:uint):int{
            return (((_arg1 >> 16) & 0xFF));
        }
        public static function getG(_arg1:uint):int{
            return (((_arg1 >> 8) & 0xFF));
        }
        public static function getB(_arg1:uint):int{
            return ((_arg1 & 0xFF));
        }
        public static function getRGB(_arg1:int, _arg2:int, _arg3:int):uint{
            return ((((_arg1 << 16) | (_arg2 << 8)) | _arg3));
        }
        public static function interpolateColor(_arg1:uint, _arg2:uint, _arg3:Number):uint{
            var _local4:Number = (1 - _arg3);
            var _local5:Number = ((getR(_arg1) * _local4) + (getR(_arg2) * _arg3));
            var _local6:Number = ((getG(_arg1) * _local4) + (getG(_arg2) * _arg3));
            var _local7:Number = ((getB(_arg1) * _local4) + (getB(_arg2) * _arg3));
            return (getRGB(_local5, _local6, _local7));
        }

    }
}//package mb.utils 
﻿package mb.utils {
    import mb.text.*;

    public class Parsers {

        public static const HEX_EXP:RegExp = /^(?:#|0x)([a-f0-9]+)\b/i;
        public static const NUM_EXP:RegExp = /^-?(?:(?:[0-9]+)?\.)?[0-9]+\b/;

        public static function parseNumber(_arg1:String):Number{
            var _local3:Array;
            var _local2:Number = NaN;
            if (_arg1){
                _local3 = _arg1.match(HEX_EXP);
                if (_local3){
                    _local2 = parseInt(("0x" + _local3[1]));
                } else {
                    _local2 = parseFloat(_arg1);
                };
            };
            if (isNaN(_local2)){
            };
            return (_local2);
        }
        public static function parseInteger(_arg1:String):int{
            var _local2:int = int(parseNumber(_arg1));
            return (_local2);
        }
        public static function isNumber(_arg1:String):Boolean{
            return (((NUM_EXP.test(_arg1)) || (HEX_EXP.test(_arg1))));
        }
        public static function parseString(_arg1:String):String{
            var _local6:String;
            _arg1 = Text.cleanString(_arg1);
            var _local2 = "";
            var _local3:Boolean;
            var _local4:int = _arg1.length;
            var _local5:int;
            while (_local5 < _local4) {
                _local6 = _arg1.charAt(_local5);
                if (_local3){
                    _local3 = false;
                    if (_local6 == "n"){
                        _local2 = (_local2 + "\n");
                    } else {
                        if ((((((_local6 == "'")) || ((_local6 == "\"")))) || ((_local6 == "\\")))){
                            _local2 = (_local2 + _local6);
                        } else {
                            _local2 = (_local2 + ("\\" + _local6));
                        };
                    };
                } else {
                    if (_local6 == "\\"){
                        _local3 = true;
                    } else {
                        _local2 = (_local2 + _local6);
                    };
                };
                _local5++;
            };
            return (_local2);
        }

    }
}//package mb.utils 
﻿package mb.styles {
    import flash.filters.*;

    public class LabelStyle implements ISymbolStyle {

        public var placement:String = "center";
        public var xOff:Number = 0;
        public var yOff:Number = 0;
        public var xOffScale:Number = 0;
        public var yOffScale:Number = 0;
        public var xSpace:Number = 0;
        public var ySpace:Number = 0;
        public var yOffMultiple:int = 0;
        public var useHalo:Boolean = false;
        public var haloFilter:BitmapFilter;
        public var text:String = "";
        public var pointStyle:PointStyle = null;
        public var textStyle:TextStyle;
        public var visible:Boolean = true;

        public function LabelStyle(){
            this.textStyle = new TextStyle();
        }
        public function setId(_arg1:int):void{
            if (this.pointStyle !== null){
                this.pointStyle.setId(_arg1);
            };
        }

    }
}//package mb.styles 
﻿package mb.styles {

    public class HoverPointStyle extends PointStyle {

        private var _pointStyle:PointStyle;
        private var _hoverStyle:ShapeOverlayStyle;

        public function HoverPointStyle(_arg1:PointStyle, _arg2:ShapeOverlayStyle){
            this._pointStyle = _arg1;
            this._hoverStyle = _arg2;
        }
        override public function setId(_arg1:int):void{
            this._pointStyle.setId(_arg1);
            size = (this._pointStyle.size * this._pointStyle.symbolScale);
            size = (size * this._hoverStyle.sizeMultiplier);
            this.init(this._hoverStyle);
            if (this._hoverStyle.scaleCallback){
                size = (this._hoverStyle.size * this._hoverStyle.scaleCallback());
            };
            if (this._hoverStyle.matchFillColor){
                fillColor = this._pointStyle.fillColor;
                if (fillAlpha == 0){
                    fillAlpha = this._pointStyle.fillAlpha;
                };
            };
            if (this._hoverStyle.matchStrokeColor){
                strokeColor = this._pointStyle.strokeColor;
            };
            if (this._hoverStyle.matchStrokeWeight){
                strokeWeight = this._pointStyle.strokeWeight;
            };
        }

    }
}//package mb.styles 
﻿package mb.styles {
    import flash.display.*;

    public interface IShapeFill {

        function beginFill(_arg1:Graphics):void;

    }
}//package mb.styles 
﻿package mb.styles {

    public class PointStyle extends ShapeStyle implements ISymbolStyle {

        public var size:Number = 0;
        public var scaling:Number = 0;
        public var symbolScale:Number = 1;
        public var width:Number = 0;
        public var height:Number = 0;
        public var className:String = null;

        public function updateScale(_arg1:Number):void{
            this.symbolScale = (1 + (this.scaling * (_arg1 - 1)));
        }
        override public function get visible():Boolean{
            return (_visible);
        }

    }
}//package mb.styles 
﻿package mb.styles {
    import flash.display.*;
    import mb.shapes.*;
    import flash.filters.*;

    public class ShapeStyle implements IShapeStyle, ISymbolStyle {

        public var strokeWeight:Number = 0;
        public var strokeColor:Number = 0;
        public var strokeAlpha:Number = 0.5;
        public var hoverStyle:ShapeOverlayStyle = null;
        public var selectionStyle:ShapeOverlayStyle = null;
        public var capsStyle:String = "round";
        public var paletteMap:PaletteMap = null;
        public var specialFill:IShapeFill = null;
        public var specialPath:IPath = null;
        public var stealthy:Boolean = false;
        public var z:int = 0;
        public var useZ:Boolean = false;
        public var fillColor:Number = 0;
        public var fillAlpha:Number = 0;
        protected var _visible:Boolean = true;
        public var filter:BitmapFilter;
        public var filterFunction:Function;

        public function get visible():Boolean{
            return (((this._visible) && ((((((this.strokeWeight > 0)) && ((this.strokeAlpha > 0)))) || ((this.fillAlpha > 0))))));
        }
        public function set visible(_arg1:Boolean):void{
            this._visible = _arg1;
        }
        public function setId(_arg1:int):void{
        }
        public function setStroke(_arg1:Number, _arg2:Number, _arg3:Number=1):ShapeStyle{
            this.strokeWeight = _arg1;
            this.strokeColor = _arg2;
            this.strokeAlpha = _arg3;
            return (this);
        }
        public function setFill(_arg1:Number, _arg2:Number=1):ShapeStyle{
            this.fillColor = _arg1;
            this.fillAlpha = _arg2;
            return (this);
        }
        public function beginDrawing(_arg1:Graphics, _arg2:Boolean=false):void{
            if (this.strokeWeight > 0){
                if (this.specialPath != null){
                    _arg1.lineStyle(this.strokeWeight, this.strokeColor, this.strokeAlpha, _arg2, "normal", this.specialPath.capsStyle);
                } else {
                    _arg1.lineStyle(this.strokeWeight, this.strokeColor, this.strokeAlpha, _arg2, "normal", this.capsStyle);
                };
            };
            if (this.specialFill !== null){
                this.specialFill.beginFill(_arg1);
            } else {
                if (this.fillAlpha > 0){
                    _arg1.beginFill(this.fillColor, this.fillAlpha);
                };
            };
        }
        public function decorateShapeStyle(_arg1:ShapeStyle):void{
            _arg1.fillColor = this.fillColor;
            _arg1.fillAlpha = this.fillAlpha;
            _arg1.strokeWeight = this.strokeWeight;
            _arg1.strokeAlpha = this.strokeAlpha;
            _arg1.strokeColor = this.strokeColor;
        }
        public function clone():ShapeStyle{
            var _local1:ShapeStyle = new ShapeStyle();
            this.decorateShapeStyle(_local1);
            return (_local1);
        }
        public function init(_arg1:Object):void{
            if (_arg1.fillColor !== undefined){
                this.fillColor = _arg1.fillColor;
            };
            if (_arg1.fillAlpha !== undefined){
                this.fillAlpha = _arg1.fillAlpha;
            };
            if (_arg1.strokeWeight !== undefined){
                this.strokeWeight = _arg1.strokeWeight;
            };
            if (_arg1.strokeColor !== undefined){
                this.strokeColor = _arg1.strokeColor;
            };
            if (_arg1.strokeAlpha !== undefined){
                this.strokeAlpha = _arg1.strokeAlpha;
            };
            if (_arg1.visible !== undefined){
                this.visible = _arg1.visible;
            };
        }

    }
}//package mb.styles 
﻿package mb.styles {
    import flash.display.*;

    public interface IShapeStyle {

        function beginDrawing(_arg1:Graphics, _arg2:Boolean=false):void;

    }
}//package mb.styles 
﻿package mb.styles {

    public class ShapeOverlayStyle extends PointStyle {

        public var floatLayer:Boolean = true;
        public var matchFillColor:Boolean = false;
        public var matchStrokeColor:Boolean = false;
        public var matchStrokeWeight:Boolean = false;
        public var matchVisibility:Boolean = false;
        public var strokeMultiplier:Number = 1;
        public var sizeMultiplier:Number = 1;
        public var scaleCallback:Function;
        private var _baseStyle:ShapeStyle;
        private var _decoratorStyle:ShapeStyle;

        public function ShapeOverlayStyle(_arg1:ShapeStyle=null){
            this.setBaseStyle(_arg1);
        }
        public function setBaseStyle(_arg1:ShapeStyle):void{
            this._baseStyle = _arg1;
            if (_arg1){
                filterFunction = this._baseStyle.filterFunction;
            };
        }
        public function setDecoratorStyle(_arg1:ShapeStyle):void{
            this._decoratorStyle = _arg1;
        }
        override public function setId(_arg1:int):void{
            if (this._baseStyle){
                this._baseStyle.setId(_arg1);
            };
            if (this._decoratorStyle){
                this._decoratorStyle.setId(_arg1);
                this.init(this._decoratorStyle);
            };
            if (this._baseStyle){
                if (this.matchFillColor){
                    fillColor = this._baseStyle.fillColor;
                    if (fillAlpha == 0){
                        fillAlpha = this._baseStyle.fillAlpha;
                    };
                };
                if (this._baseStyle.useZ){
                    z = this._baseStyle.z;
                };
                if (this.matchStrokeColor){
                    strokeColor = this._baseStyle.strokeColor;
                };
                if (this.matchStrokeWeight){
                    strokeWeight = (this._baseStyle.strokeWeight * this.strokeMultiplier);
                };
                if (this.matchVisibility){
                    visible = this._baseStyle.visible;
                };
            };
        }

    }
}//package mb.styles 
﻿package mb.styles {
    import mb.data.*;

    public class FilteredLabelStyle extends LabelStyle {

        private var _data:DataTable;
        private var _func:Function;

        public function FilteredLabelStyle(_arg1:Function, _arg2:DataTable){
            this._func = _arg1;
            this._data = _arg2;
        }
        override public function setId(_arg1:int):void{
            var _local2:Record = this._data.getRecordById(_arg1);
            this._func(this, _local2);
        }

    }
}//package mb.styles 
﻿package mb.styles {

    public interface ISymbolStyle {

        function setId(_arg1:int):void;

    }
}//package mb.styles 
﻿package mb.styles {
    import mb.data.*;

    public class FilteredPointStyle extends PointStyle {

        private var _data:DataTable;
        private var _func:Function;

        public function FilteredPointStyle(_arg1:Function, _arg2:DataTable){
            this._data = _arg2;
            this._func = _arg1;
        }
        override public function setId(_arg1:int):void{
            var _local2:Record = this._data.getRecordById(_arg1);
            this._func(this, _local2);
        }

    }
}//package mb.styles 
﻿package mb.styles {

    public class PaletteMap {

        public static const R:String = "r";
        public static const G:String = "g";
        public static const B:String = "b";
        public static const A:String = "a";

        public var r:Array;
        public var g:Array;
        public var b:Array;
        public var a:Array;

        public function PaletteMap(){
            this.a = this.initQuantiles(R, [], [0]);
            this.r = this.initQuantiles(R, [], [0]);
            this.g = this.initQuantiles(G, [], [0]);
            this.b = this.initQuantiles(B, [], [0]);
        }
        public function initQuantiles(_arg1:String, _arg2:Array, _arg3:Array):Array{
            var _local11:int;
            var _local4:Array = [];
            var _local5 = -1;
            var _local6 = -1;
            var _local7:int = (_arg2.length - 1);
            var _local8:Number = (((_arg3.length > 0)) ? _arg3[0] : 0);
            var _local9:int = (_arg3.length - 1);
            var _local10:int;
            while (_local10 < 0x0100) {
                if (_local7 > _local6){
                    _local11 = _arg2[(_local6 + 1)];
                    if (_local11 == _local10){
                        _local6++;
                        if (_local6 <= _local9){
                            _local8 = _arg3[(_local6 + 1)];
                        };
                    };
                };
                _local4[_local10] = _local8;
                _local10++;
            };
            return (_local4);
        }

    }
}//package mb.styles 
﻿package mb.styles {

    public class ShapeHoverStyle extends ShapeOverlayStyle {

    }
}//package mb.styles 
﻿package mb.styles {
    import flash.text.*;

    public class TextStyle {

        public var size:Number = 12;
        public var color:Number = 0;
        public var bold:Boolean = false;
        public var italic:Boolean = false;
        public var font:String = "_sans";
        public var embedded:Boolean = false;
        public var alpha:Number = 1;
        public var useHTML:Boolean = false;
        public var styleSheet:StyleSheet;
        public var mouseEnabled:Boolean = false;

        public function clone():TextStyle{
            var _local1:TextStyle = new TextStyle();
            _local1.size = this.size;
            _local1.color = this.color;
            _local1.bold = this.bold;
            _local1.italic = this.italic;
            _local1.font = this.font;
            _local1.embedded = this.embedded;
            _local1.alpha = this.alpha;
            _local1.useHTML = this.useHTML;
            _local1.styleSheet = this.styleSheet;
            _local1.mouseEnabled = this.mouseEnabled;
            return (_local1);
        }

    }
}//package mb.styles 
﻿package {
    import flash.display.*;

    public dynamic class Pointer extends MovieClip {

    }
}//package 
﻿package {
    import mb.data.*;
    import mb.*;
    import mb.text.*;
    import mb.utils.*;

    public class HomicideData {

        public static function getLatestYearFromIncidentsTable(_arg1:DataTable):int{
            var _local2:Array = _arg1.getFieldData("year");
            var _local3:int = Math.max.apply(null, _local2);
            return (_local3);
        }
        public static function filterIncidentsData(_arg1:DataTable){
            var _local14:Record;
            var _local15:String;
            var _local16:String;
            var _local17:String;
            var _local18:int;
            var _local19:String;
            var _local20:Array;
            var _local21:int;
            var _local22:int;
            var _local23:Number;
            var _local24:int;
            var _local25:int;
            var _local26:String;
            var _local27:String;
            var _local28:String;
            var _local29:int;
            var _local30:Date;
            _arg1.addField("time", C.INTEGER);
            _arg1.addField(A.F_RECENT_FLAG, C.INTEGER);
            _arg1.addField("month", C.INTEGER);
            _arg1.addField("age_group", C.INTEGER);
            _arg1.addField("daytime", C.INTEGER);
            var _local2:Date = new Date();
            var _local3:int = _local2.getFullYear();
            var _local4:int = _local2.getMonth();
            var _local5:int = _local2.getDate();
            var _local6:Date = new Date(_local3, _local4, (_local5 - A.DAYS_TO_SHOW));
            var _local7:Number = _local6.getTime();
            var _local8:Date = new Date((_local3 - 1), _local4, _local5);
            var _local9:Date = new Date((_local3 - 1), _local4, (_local5 - A.DAYS_TO_SHOW));
            var _local10:Number = _local8.getTime();
            var _local11:Number = _local9.getTime();
            var _local12:Number = _local9.getTime();
            var _local13:RecordSet = _arg1.getRecordSet();
            while (_local13.hasNext) {
                _local14 = _local13.nextRecord;
                _local15 = _local14.getString("weapon");
                switch (_local15){
                    case "gun":
                    case "FIREARM":
                    case "GUN":
                    case "GUNSHOT":
                    case "gunshot":
                    case "Shooting":
                    case "SHOT":
                    case "shot":
                    case "SHOTS":
                    case "shots":
                    case "SHOTs":
                    case "shot":
                        _local15 = A.GUN;
                        break;
                    case "knife":
                    case "CUTTING INSTRUMENT":
                    case "CUTTING":
                    case "KNIFE":
                    case "lacerations":
                    case "STAB":
                    case "STABBED":
                    case "stabbed":
                    case "STABBED multiple injuries":
                    case "stabbed/ human remains in plastic bag":
                    case "trauma, cuts":
                        _local15 = A.KNIFE;
                        break;
                    case "blunt_instrument":
                    case "beaten":
                    case "BLUNT INST":
                    case "BLUNT INSTRUMENT":
                    case "blunt object":
                    case "blunt object -golf club":
                    case "blunt object trauma":
                        _local15 = A.OTHER;
                        break;
                    case "other":
                    case "fire arson":
                    case "fire arson, stabbed":
                    case "trauma to the neck":
                    case "assault":
                    case "BOMB/INCENDIARY":
                    case "BOMB/INCENDIARY DE":
                    case "car fire":
                    case "head injury":
                    case "head trauma":
                    case "Injured in dispute":
                    case "multiple injuries":
                    case "OTHER WEAPON":
                    case "POISON/CHEMICAL":
                    case "POISON/CHEMICAL AG":
                    case "ROPE/WIRE":
                    case "starvation":
                    case "strangled":
                    case "strangled, stabbed, beaten":
                    case "taser":
                    case "trauma":
                        _local15 = A.OTHER;
                        break;
                    default:
                        _local15 = A.UNKNOWN;
                };
                _local14.insertString("weapon", _local15);
                _local16 = _local14.getString("primary_motive");
                switch (_local16){
                    case "BOYFRIEND/GIRLFRIE":
                    case "BOYFRIEND/GIRLFRIEND":
                    case "DOMESTIC":
                        _local16 = A.DOMESTIC;
                        break;
                    case "DISPUTE":
                    case "SEX":
                    case "GAY NON DOMESTIC":
                    case "REVENGE":
                    case "IMTIMIDATION":
                    case "INTIMIDATION":
                        _local16 = A.OTHER_DISPUTE;
                        break;
                    case "DRUGS":
                        _local16 = A.DRUGS;
                        break;
                    case "GANG":
                        _local16 = A.GANG;
                        break;
                    case "ROBBERY/BURGLARY":
                        _local16 = A.ROBBERY;
                        break;
                    case "OTHER":
                    case "RANDOM":
                    case "ACCIDENTAL":
                    default:
                        _local16 = A.UNKNOWN_MOTIVE;
                };
                _local14.insertString("primary_motive", _local16);
                _local17 = _local14.getString("light_dark");
                _local18 = 0;
                if (_local17 == "D"){
                    _local18 = 1;
                } else {
                    if (_local17 == "L"){
                        _local18 = 2;
                    };
                };
                _local14.insertNumber("daytime", _local18);
                _local19 = _local14.getString("incident_date");
                _local20 = _local19.split("/");
                _local21 = 0;
                _local22 = 0;
                _local23 = 0;
                if (_local20.length == 3){
                    _local26 = _local20[2];
                    _local27 = _local20[1];
                    _local28 = _local20[0];
                    _local22 = parseInt(_local28);
                    _local21 = parseInt(_local26);
                    _local21 = (parseInt(_local26) + (((_local21 < 20)) ? 2000 : 1900));
                    if (_local21 >= 2008){
                        _local29 = parseInt(_local27);
                        _local30 = new Date(Date.UTC(_local21, (_local22 - 1), _local29));
                        _local23 = _local30.getTime();
                    };
                };
                _local24 = (((_local7 <= _local23)) ? 1 : 0);
                _local14.insertNumber(A.F_RECENT_FLAG, _local24);
                _local14.insertNumber("time", _local23);
                _local25 = _local14.getNumber("year");
                if (_local21 != _local25){
                    _local14.insertNumber("year", _local21);
                };
                _local14.insertNumber("month", _local22);
            };
        }
        public static function cleanName(_arg1:String):String{
            _arg1 = Text.cleanString(_arg1);
            if ((((_arg1 == "Unknown")) || ((_arg1 == "Unnamed")))){
                return ("");
            };
            _arg1 = Text.capitalizeString(_arg1);
            return (_arg1);
        }
        public static function filterPersonData(_arg1:DataTable){
            var _local4:Record;
            var _local5:String;
            var _local6:String;
            var _local7:Number;
            var _local8:int;
            var _local9:String;
            var _local10:String;
            _arg1.addField("age_group", C.INTEGER);
            var _local2:Boolean = ((_arg1.fieldExists("fname")) && (_arg1.fieldExists("lname")));
            var _local3:RecordSet = _arg1.getRecordSet();
            while (_local3.hasNext) {
                _local4 = _local3.nextRecord;
                if (_local2){
                    _local9 = _local4.getString("fname");
                    _local10 = _local4.getString("lname");
                    if (_local9){
                        _local9 = cleanName(_local9);
                        _local4.insertString("fname", _local9);
                    };
                    if (_local10){
                        _local10 = cleanName(_local10);
                        _local4.insertString("lname", _local10);
                    };
                };
                _local5 = _local4.getString("sex");
                switch (_local5){
                    case "M":
                        break;
                    case "F":
                        break;
                    default:
                        _local5 = "";
                        _local4.insertString("sex", _local5);
                };
                _local6 = _local4.getString("race");
                if (((((((!((_local6 == "B"))) && (!((_local6 == "H"))))) && (!((_local6 == "W"))))) && (!((_local6 == "A"))))){
                    switch (_local6){
                        case "BLACK":
                            _local6 = "B";
                            break;
                        case "BH":
                        case "WH":
                        case "HISPANIC WHITE":
                        case "BLACK HISPANI":
                        case "HISPANIC BLACK":
                        case "WHITE HISPANI":
                            _local6 = "H";
                            break;
                        case "WHITE":
                            _local6 = "W";
                            break;
                        case "P":
                        case "ASIAN/PAC.ISL":
                        case "ASIAN/PACIFIC ISLANDER":
                            _local6 = "A";
                            break;
                        default:
                            _local6 = "";
                    };
                    _local4.insertString("race", _local6);
                };
                _local7 = _local4.getNumber("age");
                if (((isNaN(_local7)) || (!(_local5)))){
                    _local8 = A.UNKNOWN_AGE;
                } else {
                    if (_local7 < A.UNDER_18){
                        _local8 = A.UNDER_18;
                    } else {
                        if (_local7 < A.UNDER_25){
                            _local8 = A.UNDER_25;
                        } else {
                            if (_local7 < A.UNDER_35){
                                _local8 = A.UNDER_35;
                            } else {
                                if (_local7 < A.UNDER_45){
                                    _local8 = A.UNDER_45;
                                } else {
                                    if (_local7 < A.UNDER_55){
                                        _local8 = A.UNDER_55;
                                    } else {
                                        _local8 = A.SENIORS;
                                    };
                                };
                            };
                        };
                    };
                };
                _local4.insertNumber("age_group", _local8);
            };
        }

    }
}//package 
﻿package com.adobe.crypto {
    import flash.utils.*;
    import mx.utils.*;
    import com.adobe.utils.*;

    public class SHA1 {

        public static var digest:ByteArray;

        public static function hash(_arg1:String):String{
            var _local2:Array = createBlocksFromString(_arg1);
            var _local3:ByteArray = hashBlocks(_local2);
            return (((((IntUtil.toHex(_local3.readInt(), true) + IntUtil.toHex(_local3.readInt(), true)) + IntUtil.toHex(_local3.readInt(), true)) + IntUtil.toHex(_local3.readInt(), true)) + IntUtil.toHex(_local3.readInt(), true)));
        }
        public static function hashBytes(_arg1:ByteArray):String{
            var _local2:Array = SHA1.createBlocksFromByteArray(_arg1);
            var _local3:ByteArray = hashBlocks(_local2);
            return (((((IntUtil.toHex(_local3.readInt(), true) + IntUtil.toHex(_local3.readInt(), true)) + IntUtil.toHex(_local3.readInt(), true)) + IntUtil.toHex(_local3.readInt(), true)) + IntUtil.toHex(_local3.readInt(), true)));
        }
        public static function hashToBase64(_arg1:String):String{
            var _local7:uint;
            var _local2:Array = SHA1.createBlocksFromString(_arg1);
            var _local3:ByteArray = hashBlocks(_local2);
            var _local4 = "";
            _local3.position = 0;
            var _local5:int;
            while (_local5 < _local3.length) {
                _local7 = _local3.readUnsignedByte();
                _local4 = (_local4 + String.fromCharCode(_local7));
                _local5++;
            };
            var _local6:Base64Encoder = new Base64Encoder();
            _local6.encode(_local4);
            return (_local6.flush());
        }
        private static function hashBlocks(_arg1:Array):ByteArray{
            var _local9:int;
            var _local12:int;
            var _local13:int;
            var _local14:int;
            var _local15:int;
            var _local16:int;
            var _local17:int;
            var _local2 = 1732584193;
            var _local3:int = 4023233417;
            var _local4:int = 2562383102;
            var _local5 = 271733878;
            var _local6:int = 3285377520;
            var _local7:int = _arg1.length;
            var _local8:Array = new Array(80);
            var _local10:int;
            while (_local10 < _local7) {
                _local12 = _local2;
                _local13 = _local3;
                _local14 = _local4;
                _local15 = _local5;
                _local16 = _local6;
                _local17 = 0;
                while (_local17 < 20) {
                    if (_local17 < 16){
                        _local8[_local17] = _arg1[(_local10 + _local17)];
                    } else {
                        _local9 = (((_local8[(_local17 - 3)] ^ _local8[(_local17 - 8)]) ^ _local8[(_local17 - 14)]) ^ _local8[(_local17 - 16)]);
                        _local8[_local17] = ((_local9 << 1) | (_local9 >>> 31));
                    };
                    _local9 = ((((((_local12 << 5) | (_local12 >>> 27)) + ((_local13 & _local14) | (~(_local13) & _local15))) + _local16) + int(_local8[_local17])) + 1518500249);
                    _local16 = _local15;
                    _local15 = _local14;
                    _local14 = ((_local13 << 30) | (_local13 >>> 2));
                    _local13 = _local12;
                    _local12 = _local9;
                    _local17++;
                };
                while (_local17 < 40) {
                    _local9 = (((_local8[(_local17 - 3)] ^ _local8[(_local17 - 8)]) ^ _local8[(_local17 - 14)]) ^ _local8[(_local17 - 16)]);
                    _local8[_local17] = ((_local9 << 1) | (_local9 >>> 31));
                    _local9 = ((((((_local12 << 5) | (_local12 >>> 27)) + ((_local13 ^ _local14) ^ _local15)) + _local16) + int(_local8[_local17])) + 1859775393);
                    _local16 = _local15;
                    _local15 = _local14;
                    _local14 = ((_local13 << 30) | (_local13 >>> 2));
                    _local13 = _local12;
                    _local12 = _local9;
                    _local17++;
                };
                while (_local17 < 60) {
                    _local9 = (((_local8[(_local17 - 3)] ^ _local8[(_local17 - 8)]) ^ _local8[(_local17 - 14)]) ^ _local8[(_local17 - 16)]);
                    _local8[_local17] = ((_local9 << 1) | (_local9 >>> 31));
                    _local9 = ((((((_local12 << 5) | (_local12 >>> 27)) + (((_local13 & _local14) | (_local13 & _local15)) | (_local14 & _local15))) + _local16) + int(_local8[_local17])) + 2400959708);
                    _local16 = _local15;
                    _local15 = _local14;
                    _local14 = ((_local13 << 30) | (_local13 >>> 2));
                    _local13 = _local12;
                    _local12 = _local9;
                    _local17++;
                };
                while (_local17 < 80) {
                    _local9 = (((_local8[(_local17 - 3)] ^ _local8[(_local17 - 8)]) ^ _local8[(_local17 - 14)]) ^ _local8[(_local17 - 16)]);
                    _local8[_local17] = ((_local9 << 1) | (_local9 >>> 31));
                    _local9 = ((((((_local12 << 5) | (_local12 >>> 27)) + ((_local13 ^ _local14) ^ _local15)) + _local16) + int(_local8[_local17])) + 3395469782);
                    _local16 = _local15;
                    _local15 = _local14;
                    _local14 = ((_local13 << 30) | (_local13 >>> 2));
                    _local13 = _local12;
                    _local12 = _local9;
                    _local17++;
                };
                _local2 = (_local2 + _local12);
                _local3 = (_local3 + _local13);
                _local4 = (_local4 + _local14);
                _local5 = (_local5 + _local15);
                _local6 = (_local6 + _local16);
                _local10 = (_local10 + 16);
            };
            var _local11:ByteArray = new ByteArray();
            _local11.writeInt(_local2);
            _local11.writeInt(_local3);
            _local11.writeInt(_local4);
            _local11.writeInt(_local5);
            _local11.writeInt(_local6);
            _local11.position = 0;
            digest = new ByteArray();
            digest.writeBytes(_local11);
            digest.position = 0;
            return (_local11);
        }
        private static function createBlocksFromByteArray(_arg1:ByteArray):Array{
            var _local2:int = _arg1.position;
            _arg1.position = 0;
            var _local3:Array = new Array();
            var _local4:int = (_arg1.length * 8);
            var _local5 = 0xFF;
            var _local6:int;
            while (_local6 < _local4) {
                _local3[(_local6 >> 5)] = (_local3[(_local6 >> 5)] | ((_arg1.readByte() & _local5) << (24 - (_local6 % 32))));
                _local6 = (_local6 + 8);
            };
            _local3[(_local4 >> 5)] = (_local3[(_local4 >> 5)] | (128 << (24 - (_local4 % 32))));
            _local3[((((_local4 + 64) >> 9) << 4) + 15)] = _local4;
            _arg1.position = _local2;
            return (_local3);
        }
        private static function createBlocksFromString(_arg1:String):Array{
            var _local2:Array = new Array();
            var _local3:int = (_arg1.length * 8);
            var _local4 = 0xFF;
            var _local5:int;
            while (_local5 < _local3) {
                _local2[(_local5 >> 5)] = (_local2[(_local5 >> 5)] | ((_arg1.charCodeAt((_local5 / 8)) & _local4) << (24 - (_local5 % 32))));
                _local5 = (_local5 + 8);
            };
            _local2[(_local3 >> 5)] = (_local2[(_local3 >> 5)] | (128 << (24 - (_local3 % 32))));
            _local2[((((_local3 + 64) >> 9) << 4) + 15)] = _local3;
            return (_local2);
        }

    }
}//package com.adobe.crypto 
﻿package com.adobe.serialization.json {

    public final class JSONToken {

        static const token:JSONToken = new (JSONToken)();
;

        public var type:int;
        public var value:Object;

        public function JSONToken(_arg1:int=-1, _arg2:Object=null){
            this.type = _arg1;
            this.value = _arg2;
        }
        static function create(_arg1:int=-1, _arg2:Object=null):JSONToken{
            token.type = _arg1;
            token.value = _arg2;
            return (token);
        }

    }
}//package com.adobe.serialization.json 
﻿package com.adobe.serialization.json {

    public class JSONParseError extends Error {

        private var _location:int;
        private var _text:String;

        public function JSONParseError(_arg1:String="", _arg2:int=0, _arg3:String=""){
            super(_arg1);
            name = "JSONParseError";
            this._location = _arg2;
            this._text = _arg3;
        }
        public function get location():int{
            return (this._location);
        }
        public function get text():String{
            return (this._text);
        }

    }
}//package com.adobe.serialization.json 
﻿package com.adobe.serialization.json {

    public class JSONTokenizer {

        private const controlCharsRegExp:RegExp;

        private var strict:Boolean;
        private var obj:Object;
        private var jsonString:String;
        private var loc:int;
        private var ch:String;

        public function JSONTokenizer(_arg1:String, _arg2:Boolean){
            this.controlCharsRegExp = /[\x00-\x1F]/;
            super();
            this.jsonString = _arg1;
            this.strict = _arg2;
            this.loc = 0;
            this.nextChar();
        }
        public function getNextToken():JSONToken{
            var _local2:String;
            var _local3:String;
            var _local4:String;
            var _local5:String;
            var _local1:JSONToken;
            this.skipIgnored();
            switch (this.ch){
                case "{":
                    _local1 = JSONToken.create(JSONTokenType.LEFT_BRACE, this.ch);
                    this.nextChar();
                    break;
                case "}":
                    _local1 = JSONToken.create(JSONTokenType.RIGHT_BRACE, this.ch);
                    this.nextChar();
                    break;
                case "[":
                    _local1 = JSONToken.create(JSONTokenType.LEFT_BRACKET, this.ch);
                    this.nextChar();
                    break;
                case "]":
                    _local1 = JSONToken.create(JSONTokenType.RIGHT_BRACKET, this.ch);
                    this.nextChar();
                    break;
                case ",":
                    _local1 = JSONToken.create(JSONTokenType.COMMA, this.ch);
                    this.nextChar();
                    break;
                case ":":
                    _local1 = JSONToken.create(JSONTokenType.COLON, this.ch);
                    this.nextChar();
                    break;
                case "t":
                    _local2 = ((("t" + this.nextChar()) + this.nextChar()) + this.nextChar());
                    if (_local2 == "true"){
                        _local1 = JSONToken.create(JSONTokenType.TRUE, true);
                        this.nextChar();
                    } else {
                        this.parseError(("Expecting 'true' but found " + _local2));
                    };
                    break;
                case "f":
                    _local3 = (((("f" + this.nextChar()) + this.nextChar()) + this.nextChar()) + this.nextChar());
                    if (_local3 == "false"){
                        _local1 = JSONToken.create(JSONTokenType.FALSE, false);
                        this.nextChar();
                    } else {
                        this.parseError(("Expecting 'false' but found " + _local3));
                    };
                    break;
                case "n":
                    _local4 = ((("n" + this.nextChar()) + this.nextChar()) + this.nextChar());
                    if (_local4 == "null"){
                        _local1 = JSONToken.create(JSONTokenType.NULL, null);
                        this.nextChar();
                    } else {
                        this.parseError(("Expecting 'null' but found " + _local4));
                    };
                    break;
                case "N":
                    _local5 = (("N" + this.nextChar()) + this.nextChar());
                    if (_local5 == "NaN"){
                        _local1 = JSONToken.create(JSONTokenType.NAN, NaN);
                        this.nextChar();
                    } else {
                        this.parseError(("Expecting 'NaN' but found " + _local5));
                    };
                    break;
                case "\"":
                    _local1 = this.readString();
                    break;
                default:
                    if (((this.isDigit(this.ch)) || ((this.ch == "-")))){
                        _local1 = this.readNumber();
                    } else {
                        if (this.ch == ""){
                            _local1 = null;
                        } else {
                            this.parseError((("Unexpected " + this.ch) + " encountered"));
                        };
                    };
            };
            return (_local1);
        }
        final private function readString():JSONToken{
            var _local3:int;
            var _local4:int;
            var _local1:int = this.loc;
            do  {
                _local1 = this.jsonString.indexOf("\"", _local1);
                if (_local1 >= 0){
                    _local3 = 0;
                    _local4 = (_local1 - 1);
                    while (this.jsonString.charAt(_local4) == "\\") {
                        _local3++;
                        _local4--;
                    };
                    if ((_local3 & 1) == 0){
                        break;
                    };
                    _local1++;
                } else {
                    this.parseError("Unterminated string literal");
                };
            } while (true);
            var _local2:JSONToken = JSONToken.create(JSONTokenType.STRING, this.unescapeString(this.jsonString.substr(this.loc, (_local1 - this.loc))));
            this.loc = (_local1 + 1);
            this.nextChar();
            return (_local2);
        }
        public function unescapeString(_arg1:String):String{
            var _local4:int;
            var _local6:String;
            var _local7:String;
            var _local8:int;
            var _local9:int;
            var _local10:String;
            if (((this.strict) && (this.controlCharsRegExp.test(_arg1)))){
                this.parseError("String contains unescaped control character (0x00-0x1F)");
            };
            var _local2 = "";
            var _local3:int;
            _local4 = 0;
            var _local5:int = _arg1.length;
            do  {
                _local3 = _arg1.indexOf("\\", _local4);
                if (_local3 >= 0){
                    _local2 = (_local2 + _arg1.substr(_local4, (_local3 - _local4)));
                    _local4 = (_local3 + 2);
                    _local6 = _arg1.charAt((_local3 + 1));
                    switch (_local6){
                        case "\"":
                            _local2 = (_local2 + _local6);
                            break;
                        case "\\":
                            _local2 = (_local2 + _local6);
                            break;
                        case "n":
                            _local2 = (_local2 + "\n");
                            break;
                        case "r":
                            _local2 = (_local2 + "\r");
                            break;
                        case "t":
                            _local2 = (_local2 + "\t");
                            break;
                        case "u":
                            _local7 = "";
                            _local8 = (_local4 + 4);
                            if (_local8 > _local5){
                                this.parseError("Unexpected end of input.  Expecting 4 hex digits after \\u.");
                            };
                            _local9 = _local4;
                            while (_local9 < _local8) {
                                _local10 = _arg1.charAt(_local9);
                                if (!this.isHexDigit(_local10)){
                                    this.parseError(("Excepted a hex digit, but found: " + _local10));
                                };
                                _local7 = (_local7 + _local10);
                                _local9++;
                            };
                            _local2 = (_local2 + String.fromCharCode(parseInt(_local7, 16)));
                            _local4 = _local8;
                            break;
                        case "f":
                            _local2 = (_local2 + "\f");
                            break;
                        case "/":
                            _local2 = (_local2 + "/");
                            break;
                        case "b":
                            _local2 = (_local2 + "\b");
                            break;
                        default:
                            _local2 = (_local2 + ("\\" + _local6));
                    };
                } else {
                    _local2 = (_local2 + _arg1.substr(_local4));
                    break;
                };
            } while (_local4 < _local5);
            return (_local2);
        }
        final private function readNumber():JSONToken{
            var _local1 = "";
            if (this.ch == "-"){
                _local1 = (_local1 + "-");
                this.nextChar();
            };
            if (!this.isDigit(this.ch)){
                this.parseError("Expecting a digit");
            };
            if (this.ch == "0"){
                _local1 = (_local1 + this.ch);
                this.nextChar();
                if (this.isDigit(this.ch)){
                    this.parseError("A digit cannot immediately follow 0");
                } else {
                    if (((!(this.strict)) && ((this.ch == "x")))){
                        _local1 = (_local1 + this.ch);
                        this.nextChar();
                        if (this.isHexDigit(this.ch)){
                            _local1 = (_local1 + this.ch);
                            this.nextChar();
                        } else {
                            this.parseError("Number in hex format require at least one hex digit after \"0x\"");
                        };
                        while (this.isHexDigit(this.ch)) {
                            _local1 = (_local1 + this.ch);
                            this.nextChar();
                        };
                    };
                };
            } else {
                while (this.isDigit(this.ch)) {
                    _local1 = (_local1 + this.ch);
                    this.nextChar();
                };
            };
            if (this.ch == "."){
                _local1 = (_local1 + ".");
                this.nextChar();
                if (!this.isDigit(this.ch)){
                    this.parseError("Expecting a digit");
                };
                while (this.isDigit(this.ch)) {
                    _local1 = (_local1 + this.ch);
                    this.nextChar();
                };
            };
            if ((((this.ch == "e")) || ((this.ch == "E")))){
                _local1 = (_local1 + "e");
                this.nextChar();
                if ((((this.ch == "+")) || ((this.ch == "-")))){
                    _local1 = (_local1 + this.ch);
                    this.nextChar();
                };
                if (!this.isDigit(this.ch)){
                    this.parseError("Scientific notation number needs exponent value");
                };
                while (this.isDigit(this.ch)) {
                    _local1 = (_local1 + this.ch);
                    this.nextChar();
                };
            };
            var _local2:Number = Number(_local1);
            if (((isFinite(_local2)) && (!(isNaN(_local2))))){
                return (JSONToken.create(JSONTokenType.NUMBER, _local2));
            };
            this.parseError((("Number " + _local2) + " is not valid!"));
            return (null);
        }
        final private function nextChar():String{
            return ((this.ch = this.jsonString.charAt(this.loc++)));
        }
        final private function skipIgnored():void{
            var _local1:int;
            do  {
                _local1 = this.loc;
                this.skipWhite();
                this.skipComments();
            } while (_local1 != this.loc);
        }
        private function skipComments():void{
            if (this.ch == "/"){
                this.nextChar();
                switch (this.ch){
                    case "/":
                        do  {
                            this.nextChar();
                        } while (((!((this.ch == "\n"))) && (!((this.ch == "")))));
                        this.nextChar();
                        break;
                    case "*":
                        this.nextChar();
                        while (true) {
                            if (this.ch == "*"){
                                this.nextChar();
                                if (this.ch == "/"){
                                    this.nextChar();
                                    break;
                                };
                            } else {
                                this.nextChar();
                            };
                            if (this.ch == ""){
                                this.parseError("Multi-line comment not closed");
                            };
                        };
                        break;
                    default:
                        this.parseError((("Unexpected " + this.ch) + " encountered (expecting '/' or '*' )"));
                };
            };
        }
        final private function skipWhite():void{
            while (this.isWhiteSpace(this.ch)) {
                this.nextChar();
            };
        }
        final private function isWhiteSpace(_arg1:String):Boolean{
            if ((((((((_arg1 == " ")) || ((_arg1 == "\t")))) || ((_arg1 == "\n")))) || ((_arg1 == "\r")))){
                return (true);
            };
            if (((!(this.strict)) && ((_arg1.charCodeAt(0) == 160)))){
                return (true);
            };
            return (false);
        }
        final private function isDigit(_arg1:String):Boolean{
            return ((((_arg1 >= "0")) && ((_arg1 <= "9"))));
        }
        final private function isHexDigit(_arg1:String):Boolean{
            return (((((this.isDigit(_arg1)) || ((((_arg1 >= "A")) && ((_arg1 <= "F")))))) || ((((_arg1 >= "a")) && ((_arg1 <= "f"))))));
        }
        final public function parseError(_arg1:String):void{
            throw (new JSONParseError(_arg1, this.loc, this.jsonString));
        }

    }
}//package com.adobe.serialization.json 
﻿package com.adobe.serialization.json {

    public final class JSONTokenType {

        public static const UNKNOWN:int = -1;
        public static const COMMA:int = 0;
        public static const LEFT_BRACE:int = 1;
        public static const RIGHT_BRACE:int = 2;
        public static const LEFT_BRACKET:int = 3;
        public static const RIGHT_BRACKET:int = 4;
        public static const COLON:int = 6;
        public static const TRUE:int = 7;
        public static const FALSE:int = 8;
        public static const NULL:int = 9;
        public static const STRING:int = 10;
        public static const NUMBER:int = 11;
        public static const NAN:int = 12;

    }
}//package com.adobe.serialization.json 
﻿package com.adobe.serialization.json {

    public class JSONDecoder {

        private var strict:Boolean;
        private var value;
        private var tokenizer:JSONTokenizer;
        private var token:JSONToken;

        public function JSONDecoder(_arg1:String, _arg2:Boolean){
            this.strict = _arg2;
            this.tokenizer = new JSONTokenizer(_arg1, _arg2);
            this.nextToken();
            this.value = this.parseValue();
            if (((_arg2) && (!((this.nextToken() == null))))){
                this.tokenizer.parseError("Unexpected characters left in input stream");
            };
        }
        public function getValue(){
            return (this.value);
        }
        final private function nextToken():JSONToken{
            return ((this.token = this.tokenizer.getNextToken()));
        }
        final private function nextValidToken():JSONToken{
            this.token = this.tokenizer.getNextToken();
            this.checkValidToken();
            return (this.token);
        }
        final private function checkValidToken():void{
            if (this.token == null){
                this.tokenizer.parseError("Unexpected end of input");
            };
        }
        final private function parseArray():Array{
            var _local1:Array = new Array();
            this.nextValidToken();
            if (this.token.type == JSONTokenType.RIGHT_BRACKET){
                return (_local1);
            };
            if (((!(this.strict)) && ((this.token.type == JSONTokenType.COMMA)))){
                this.nextValidToken();
                if (this.token.type == JSONTokenType.RIGHT_BRACKET){
                    return (_local1);
                };
                this.tokenizer.parseError(("Leading commas are not supported.  Expecting ']' but found " + this.token.value));
            };
            _local1.push(this.parseValue());
            this.nextValidToken();
            if (this.token.type == JSONTokenType.RIGHT_BRACKET){
                return (_local1);
            };
            if (this.token.type == JSONTokenType.COMMA){
                this.nextToken();
                if (!this.strict){
                    this.checkValidToken();
                    if (this.token.type == JSONTokenType.RIGHT_BRACKET){
                        return (_local1);
                    };
                };
            } else {
                this.tokenizer.parseError(("Expecting ] or , but found " + this.token.value));
            };
            //unresolved jump
        }
        final private function parseObject():Object{
            var _local2:String;
            var _local1:Object = new Object();
            this.nextValidToken();
            if (this.token.type == JSONTokenType.RIGHT_BRACE){
                return (_local1);
            };
            if (((!(this.strict)) && ((this.token.type == JSONTokenType.COMMA)))){
                this.nextValidToken();
                if (this.token.type == JSONTokenType.RIGHT_BRACE){
                    return (_local1);
                };
                this.tokenizer.parseError(("Leading commas are not supported.  Expecting '}' but found " + this.token.value));
            };
            if (this.token.type == JSONTokenType.STRING){
                _local2 = String(this.token.value);
                this.nextValidToken();
                if (this.token.type == JSONTokenType.COLON){
                    this.nextToken();
                    _local1[_local2] = this.parseValue();
                    this.nextValidToken();
                    if (this.token.type == JSONTokenType.RIGHT_BRACE){
                        return (_local1);
                    };
                    if (this.token.type == JSONTokenType.COMMA){
                        this.nextToken();
                        if (!this.strict){
                            this.checkValidToken();
                            if (this.token.type == JSONTokenType.RIGHT_BRACE){
                                return (_local1);
                            };
                        };
                    } else {
                        this.tokenizer.parseError(("Expecting } or , but found " + this.token.value));
                    };
                } else {
                    this.tokenizer.parseError(("Expecting : but found " + this.token.value));
                };
            } else {
                this.tokenizer.parseError(("Expecting string but found " + this.token.value));
            };
            //unresolved jump
        }
        final private function parseValue():Object{
            this.checkValidToken();
            switch (this.token.type){
                case JSONTokenType.LEFT_BRACE:
                    return (this.parseObject());
                case JSONTokenType.LEFT_BRACKET:
                    return (this.parseArray());
                case JSONTokenType.STRING:
                case JSONTokenType.NUMBER:
                case JSONTokenType.TRUE:
                case JSONTokenType.FALSE:
                case JSONTokenType.NULL:
                    return (this.token.value);
                case JSONTokenType.NAN:
                    if (!this.strict){
                        return (this.token.value);
                    };
                    this.tokenizer.parseError(("Unexpected " + this.token.value));
                default:
                    this.tokenizer.parseError(("Unexpected " + this.token.value));
            };
            return (null);
        }

    }
}//package com.adobe.serialization.json 
﻿package com.adobe.utils {

    public class IntUtil {

        private static var hexChars:String = "0123456789abcdef";

        public static function rol(_arg1:int, _arg2:int):int{
            return (((_arg1 << _arg2) | (_arg1 >>> (32 - _arg2))));
        }
        public static function ror(_arg1:int, _arg2:int):uint{
            var _local3:int = (32 - _arg2);
            return (((_arg1 << _local3) | (_arg1 >>> (32 - _local3))));
        }
        public static function toHex(_arg1:int, _arg2:Boolean=false):String{
            var _local4:int;
            var _local5:int;
            var _local3 = "";
            if (_arg2){
                _local4 = 0;
                while (_local4 < 4) {
                    _local3 = (_local3 + (hexChars.charAt(((_arg1 >> (((3 - _local4) * 8) + 4)) & 15)) + hexChars.charAt(((_arg1 >> ((3 - _local4) * 8)) & 15))));
                    _local4++;
                };
            } else {
                _local5 = 0;
                while (_local5 < 4) {
                    _local3 = (_local3 + (hexChars.charAt(((_arg1 >> ((_local5 * 8) + 4)) & 15)) + hexChars.charAt(((_arg1 >> (_local5 * 8)) & 15))));
                    _local5++;
                };
            };
            return (_local3);
        }

    }
}//package com.adobe.utils 
﻿package com.google.maps {

    public final class PaneId {

        public static const PANE_MARKER:Number = 4;
        public static const PANE_MAP:Number = 0;
        public static const PANE_OVERLAYS:Number = 1;
        public static const PANE_FLOAT:Number = 7;

    }
}//package com.google.maps 
﻿package com.google.maps {
    import flash.events.*;

    public class MapMouseEvent extends MapEvent {

        public static const MOUSE_UP:String = "mapevent_mouseup";
        public static const CLICK:String = "mapevent_click";
        public static const MOUSE_MOVE:String = "mapevent_mousemove";
        public static const ROLL_OUT:String = "mapevent_rollout";
        public static const DRAG_START:String = "mapevent_dragstart";
        public static const DOUBLE_CLICK:String = "mapevent_doubleclick";
        public static const MOUSE_DOWN:String = "mapevent_mousedown";
        public static const ROLL_OVER:String = "mapevent_rollover";
        public static const DRAG_STEP:String = "mapevent_dragstep";
        public static const DRAG_END:String = "mapevent_dragend";

        private var eventLatLng:LatLng;
        private var eventAltKey:Boolean;
        private var eventShiftKey:Boolean;
        private var eventCtrlKey:Boolean;

        public function MapMouseEvent(_arg1:String, _arg2:Object, _arg3:LatLng, _arg4:Boolean=false, _arg5:Boolean=false, _arg6:Boolean=false, _arg7:Boolean=false, _arg8:Boolean=false){
            super(_arg1, _arg2, _arg4, _arg5);
            this.eventLatLng = _arg3;
            this.eventCtrlKey = _arg6;
            this.eventAltKey = _arg7;
            this.eventShiftKey = _arg8;
        }
        public static function fromCrossDomainEvent(_arg1:Event, _arg2:Object):MapMouseEvent{
            var _local3:MapMouseEvent;
            var _local4:Object;
            var _local5:Boolean;
            var _local6:Boolean;
            var _local7:Boolean;
            _local3 = (_arg1 as MapMouseEvent);
            if (((!((_local3 == null))) && ((_arg2 == _local3.target)))){
                return (_local3);
            };
            _local4 = Object(_arg1);
            _local5 = MapUtil.getBooleanOrDefault(_local4, "ctrlKey");
            _local6 = MapUtil.getBooleanOrDefault(_local4, "altKey");
            _local7 = MapUtil.getBooleanOrDefault(_local4, "shiftKey");
            _local3 = new MapMouseEvent(_arg1.type, wrapFeature(_local4.feature), LatLng.fromObject(_local4.latLng), _arg1.bubbles, _arg1.cancelable, _local5, _local6, _local7);
            _local3.copyEventData(_arg1, _arg2);
            return (_local3);
        }
        public static function createFromMouseEvent(_arg1:MouseEvent, _arg2:String, _arg3:Object, _arg4:LatLng, _arg5:Boolean=false, _arg6:Boolean=false):MapMouseEvent{
            if (_arg1){
                return (new MapMouseEvent(_arg2, _arg3, _arg4, _arg5, _arg6, _arg1.ctrlKey, _arg1.altKey, _arg1.shiftKey));
            };
            return (new MapMouseEvent(_arg2, _arg3, _arg4, _arg5, _arg6));
        }

        public function set altKey(_arg1:Boolean):void{
            this.eventAltKey = _arg1;
        }
        public function get altKey():Boolean{
            return (this.eventAltKey);
        }
        public function get latLng():LatLng{
            return (this.eventLatLng);
        }
        public function get shiftKey():Boolean{
            return (this.eventShiftKey);
        }
        public function set shiftKey(_arg1:Boolean):void{
            this.eventShiftKey = _arg1;
        }
        override public function get eventClassChain():Array{
            return (["MapMouseEvent", "MapEvent"]);
        }
        override public function clone():Event{
            return (((this.crossDomainEvent) ? fromCrossDomainEvent(crossDomainEvent.clone(), null) : new MapMouseEvent(this.type, this.feature, this.latLng, this.bubbles, this.cancelable, this.ctrlKey, this.altKey, this.shiftKey)));
        }
        public function set ctrlKey(_arg1:Boolean):void{
            this.eventCtrlKey = _arg1;
        }
        override public function toString():String{
            return ((((((((((((((((("[MapMouseEvent type=" + this.type) + " feature=") + this.feature) + " latLng=") + this.latLng) + " bubbles=") + this.bubbles) + " cancellable=") + this.cancelable) + " ctrlKey=") + this.ctrlKey) + " altKey=") + this.altKey) + " shiftKey=") + this.shiftKey) + "]"));
        }
        public function get ctrlKey():Boolean{
            return (this.eventCtrlKey);
        }

    }
}//package com.google.maps 
﻿package com.google.maps {

    public final class Constants {

        public static const ACTION_PAN:Number = 0;
        public static const ACTION_PAN_ZOOM_IN:Number = 2;
        public static const ACTION_NOTHING:Number = 3;
        public static const ACTION_ZOOM_IN:Number = 1;

    }
}//package com.google.maps 
﻿package com.google.maps {
    import com.google.maps.wrappers.*;

    public class MapTypeOptions {

        private var _urlArg:String;
        private var _linkColor:Object;
        private var _minResolution:Object;
        private var _shortName:String;
        private var _alt:String;
        private var _tileSize:Object;
        private var _maxResolution:Object;
        private var _textColor:Object;
        private var _radius:Object;
        private var _errorMessage:String;

        public function MapTypeOptions(_arg1:Object=null){
            if (_arg1 != null){
                this.copyFromObject(_arg1);
            };
        }
        public static function merge(_arg1:Array):MapTypeOptions{
            return ((Wrapper.mergeStyles(MapTypeOptions, _arg1) as MapTypeOptions));
        }
        public static function fromObject(_arg1:Object):MapTypeOptions{
            var _local2:MapTypeOptions;
            if (_arg1 == null){
                return (null);
            };
            _local2 = new (MapTypeOptions)();
            _local2.copyFromObject(_arg1);
            return (_local2);
        }
        public static function getDefaultOptions():MapTypeOptions{
            var _local1:ClientBootstrap;
            _local1 = ClientBootstrap.getInstance();
            return (_local1.getMapsFactory().getDefaultMapTypeOptions());
        }
        public static function setDefaultOptions(_arg1:MapTypeOptions):void{
            var _local2:ClientBootstrap;
            _local2 = ClientBootstrap.getInstance();
            _local2.getMapsFactory().setDefaultMapTypeOptions(_arg1);
        }

        public function set minResolution(_arg1:Object):void{
            this._minResolution = (_arg1 as Number);
        }
        public function get linkColor():Object{
            return (this._linkColor);
        }
        public function get alt():String{
            return (this._alt);
        }
        public function set errorMessage(_arg1:String):void{
            this._errorMessage = _arg1;
        }
        public function set shortName(_arg1:String):void{
            this._shortName = _arg1;
        }
        public function set linkColor(_arg1:Object):void{
            this._linkColor = (_arg1 as Number);
        }
        public function set urlArg(_arg1:String):void{
            this._urlArg = _arg1;
        }
        public function get tileSize():Object{
            return (this._tileSize);
        }
        public function set alt(_arg1:String):void{
            this._alt = _arg1;
        }
        public function get minResolution():Object{
            return (this._minResolution);
        }
        public function set maxResolution(_arg1:Object):void{
            this._maxResolution = (_arg1 as Number);
        }
        public function get radius():Object{
            return (this._radius);
        }
        public function set radius(_arg1:Object):void{
            this._radius = (_arg1 as Number);
        }
        public function set tileSize(_arg1:Object):void{
            this._tileSize = (_arg1 as Number);
        }
        public function get errorMessage():String{
            return (this._errorMessage);
        }
        public function get shortName():String{
            return (this._shortName);
        }
        public function set textColor(_arg1:Object):void{
            this._textColor = (_arg1 as Number);
        }
        public function copyFromObject(_arg1:Object):void{
            Wrapper.copyProperties(this, _arg1, ["maxResolution", "minResolution", "tileSize", "textColor", "linkColor", "radius"], Number);
            Wrapper.copyProperties(this, _arg1, ["shortName", "urlArg", "errorMessage", "alt"], String);
        }
        public function get maxResolution():Object{
            return (this._maxResolution);
        }
        public function get urlArg():String{
            return (this._urlArg);
        }
        public function toString():String{
            return ((((((((((((((((((((("MapTypeOptions: { shortName: " + this._shortName) + "\n\t  urlArg: ") + this._urlArg) + "\n\t  maxResolution: ") + this._maxResolution) + "\n\t  minResolution: ") + this._minResolution) + "\n\t  tileSize: ") + this._tileSize) + "\n\t  textColor: ") + this._textColor) + "\n\t  linkColor: ") + this._linkColor) + "\n\t  errorMessage: ") + this._errorMessage) + "\n\t  alt: ") + this._alt) + "\n\t  radius: ") + this._radius) + " }"));
        }
        public function get textColor():Object{
            return (this._textColor);
        }

    }
}//package com.google.maps 
﻿package com.google.maps {
    import flash.display.*;
    import com.google.maps.*;
    import com.google.maps.services.*;
    import com.google.maps.controls.*;
    import com.google.maps.overlays.*;

    final class MapsClientLibrary extends Sprite {

        public function MapsClientLibrary(){
            getLibraryTypes();
        }
        private function getLibraryTypes():Array{
            return ([Alpha, Color, Copyright, CopyrightCollection, CopyrightNotice, LatLng, Map, MapAction, MapMouseEvent, MapMoveEvent, MapZoomEvent, MapEvent, MapType, MapUtil, PaneId, ProjectionBase, R1Interval, S1Interval, TileLayerBase, ControlBase, ControlPosition, MapTypeControl, NavigationControl, OverviewMapControl, PositionControl, ScaleControl, ZoomControl, EncodedPolylineData, GroundOverlay, Marker, OverlayBase, Polygon, Polyline, TileLayerOverlay, ClientGeocoder, Directions, DirectionsEvent, GeocodingEvent, GeocodingResponse, Placemark, Route, ServiceStatus, Step]);
        }

    }
}//package com.google.maps 
﻿package com.google.maps.controls {
    import com.google.maps.*;
    import com.google.maps.interfaces.*;
    import com.google.maps.wrappers.*;

    public final class PositionControl extends IPositionControlWrapper {

        public function PositionControl(_arg1:PositionControlOptions=null){
            var bootstrap:* = null;
            var self:* = null;
            var options = _arg1;
            super();
            bootstrap = ClientBootstrap.getInstance();
            self = this;
            bootstrap.delayInitialize(function ():void{
                var _local1:IMapsFactory;
                var _local2:Object;
                _local1 = bootstrap.getMapsFactory();
                _local2 = _local1.createPositionControl2(options);
                Wrapper.instance().wrap(_local2, self, IPositionControl, IPositionControlWrapper);
            });
        }
    }
}//package com.google.maps.controls 
﻿package com.google.maps.controls {
    import com.google.maps.styles.*;
    import flash.geom.*;
    import com.google.maps.wrappers.*;

    public class ZoomControlOptions {

        private var _position:ControlPosition;
        private var _buttonStyle:ButtonStyle;
        private var _hasScrollTrack:Object;
        private var _buttonSize:Point;
        private var _buttonSpacing:Point;

        public function ZoomControlOptions(_arg1:Object=null){
            if (_arg1 != null){
                this.copyFromObject(_arg1);
            };
        }
        public static function merge(_arg1:Array):ZoomControlOptions{
            return ((Wrapper.mergeStyles(ZoomControlOptions, _arg1) as ZoomControlOptions));
        }
        public static function fromObject(_arg1:Object):ZoomControlOptions{
            var _local2:ZoomControlOptions;
            if (_arg1 == null){
                return (null);
            };
            _local2 = new (ZoomControlOptions)();
            _local2.copyFromObject(_arg1);
            return (_local2);
        }

        public function get hasScrollTrack():Object{
            return (this._hasScrollTrack);
        }
        public function set position(_arg1:ControlPosition):void{
            this._position = _arg1;
        }
        public function get buttonSize():Point{
            return (this._buttonSize);
        }
        public function set hasScrollTrack(_arg1:Object):void{
            this._hasScrollTrack = (_arg1 as Boolean);
        }
        public function copyFromObject(_arg1:Object):void{
            Wrapper.copyProperties(this, _arg1, ["buttonSize", "buttonSpacing"], Point);
            Wrapper.copyProperties(this, _arg1, ["hasScrollTrack"], Boolean);
            if (((_arg1.hasOwnProperty("position")) && (!((_arg1.position == null))))){
                this.position = ControlPosition.fromObject(_arg1.position);
            };
            if (_arg1.buttonStyle != null){
                if (this.buttonStyle == null){
                    this.buttonStyle = new ButtonStyle();
                };
                this.buttonStyle.copyFromObject(_arg1.buttonStyle);
            };
        }
        public function get buttonStyle():ButtonStyle{
            return (this._buttonStyle);
        }
        public function set buttonSpacing(_arg1:Point):void{
            this._buttonSpacing = _arg1;
        }
        public function set buttonSize(_arg1:Point):void{
            this._buttonSize = _arg1;
        }
        public function get position():ControlPosition{
            return (this._position);
        }
        public function toString():String{
            return ((((((((((("ZoomControlOptions:\n\t{ buttonSize: " + this._buttonSize) + "\n\t  buttonStyle: ") + this._buttonStyle) + "\n\t  buttonSpacing: ") + this._buttonSpacing) + "\n\t  hasScrollTrack: ") + this._hasScrollTrack) + "\n\t  position: ") + this._position.toString()) + " }"));
        }
        public function get buttonSpacing():Point{
            return (this._buttonSpacing);
        }
        public function set buttonStyle(_arg1:ButtonStyle):void{
            this._buttonStyle = _arg1;
        }

    }
}//package com.google.maps.controls 
﻿package com.google.maps.controls {
    import com.google.maps.styles.*;
    import flash.geom.*;
    import com.google.maps.wrappers.*;

    public class PositionControlOptions {

        private var _buttonStyle:ButtonStyle;
        private var _position:ControlPosition;
        private var _buttonSize:Point;
        private var _buttonSpacing:Point;

        public function PositionControlOptions(_arg1:Object=null){
            if (_arg1 != null){
                this.copyFromObject(_arg1);
            };
        }
        public static function merge(_arg1:Array):PositionControlOptions{
            return ((Wrapper.mergeStyles(PositionControlOptions, _arg1) as PositionControlOptions));
        }
        public static function fromObject(_arg1:Object):PositionControlOptions{
            var _local2:PositionControlOptions;
            if (_arg1 == null){
                return (null);
            };
            _local2 = new (PositionControlOptions)();
            _local2.copyFromObject(_arg1);
            return (_local2);
        }

        public function set buttonSpacing(_arg1:Point):void{
            this._buttonSpacing = _arg1;
        }
        public function copyFromObject(_arg1:Object):void{
            Wrapper.copyProperties(this, _arg1, ["buttonSize", "buttonSpacing"], Point);
            if (((_arg1.hasOwnProperty("position")) && (!((_arg1.position == null))))){
                this.position = ControlPosition.fromObject(_arg1.position);
            };
            if (_arg1.buttonStyle != null){
                if (this.buttonStyle == null){
                    this.buttonStyle = new ButtonStyle();
                };
                this.buttonStyle.copyFromObject(_arg1.buttonStyle);
            };
        }
        public function set buttonSize(_arg1:Point):void{
            this._buttonSize = _arg1;
        }
        public function get position():ControlPosition{
            return (this._position);
        }
        public function set position(_arg1:ControlPosition):void{
            this._position = _arg1;
        }
        public function toString():String{
            return ((((((((("PositionControlOptions:\n\t{ buttonSize: " + this._buttonSize) + "\n\t  buttonStyle: ") + this._buttonStyle) + "\n\t  buttonSpacing: ") + this._buttonSpacing) + "\n\t  position: ") + this._position.toString()) + " }"));
        }
        public function get buttonSpacing():Point{
            return (this._buttonSpacing);
        }
        public function get buttonSize():Point{
            return (this._buttonSize);
        }
        public function set buttonStyle(_arg1:ButtonStyle):void{
            this._buttonStyle = _arg1;
        }
        public function get buttonStyle():ButtonStyle{
            return (this._buttonStyle);
        }

    }
}//package com.google.maps.controls 
﻿package com.google.maps.controls {
    import com.google.maps.wrappers.*;

    public class NavigationControlOptions {

        private var _position:ControlPosition;

        public function NavigationControlOptions(_arg1:Object=null){
            if (_arg1 != null){
                this.copyFromObject(_arg1);
            };
        }
        public static function merge(_arg1:Array):NavigationControlOptions{
            return ((Wrapper.mergeStyles(NavigationControlOptions, _arg1) as NavigationControlOptions));
        }
        public static function fromObject(_arg1:Object):NavigationControlOptions{
            var _local2:NavigationControlOptions;
            if (_arg1 == null){
                return (null);
            };
            _local2 = new (NavigationControlOptions)();
            _local2.copyFromObject(_arg1);
            return (_local2);
        }

        public function set position(_arg1:ControlPosition):void{
            this._position = _arg1;
        }
        public function get position():ControlPosition{
            return (this._position);
        }
        public function toString():String{
            return ((("NavigationControlOptions:\n\t{  position: " + this._position) + " }"));
        }
        public function copyFromObject(_arg1:Object):void{
            if (((_arg1.hasOwnProperty("position")) && (!((_arg1.position == null))))){
                this.position = ControlPosition.fromObject(_arg1.position);
            };
        }

    }
}//package com.google.maps.controls 
﻿package com.google.maps.controls {
    import com.google.maps.styles.*;
    import flash.geom.*;
    import com.google.maps.wrappers.*;

    public class MapTypeControlOptions {

        public static const ALIGN_HORIZONTALLY:Number = 0;
        public static const ALIGN_VERTICALLY:Number = 1;

        private var _position:ControlPosition;
        private var _buttonAlignment:Object;
        private var _buttonStyle:ButtonStyle;
        private var _buttonSize:Point;
        private var _buttonSpacing:Point;

        public function MapTypeControlOptions(_arg1:Object=null){
            if (_arg1 != null){
                this.copyFromObject(_arg1);
            };
        }
        public static function merge(_arg1:Array):MapTypeControlOptions{
            return ((Wrapper.mergeStyles(MapTypeControlOptions, _arg1) as MapTypeControlOptions));
        }
        public static function fromObject(_arg1:Object):MapTypeControlOptions{
            var _local2:MapTypeControlOptions;
            if (_arg1 == null){
                return (null);
            };
            _local2 = new (MapTypeControlOptions)();
            _local2.copyFromObject(_arg1);
            return (_local2);
        }

        public function get buttonAlignment():Object{
            return (this._buttonAlignment);
        }
        public function get buttonSize():Point{
            return (this._buttonSize);
        }
        public function set position(_arg1:ControlPosition):void{
            this._position = _arg1;
        }
        public function copyFromObject(_arg1:Object):void{
            Wrapper.copyProperties(this, _arg1, ["buttonAlignment"], Number);
            Wrapper.copyProperties(this, _arg1, ["buttonSpacing", "buttonSize"], Point);
            if (((_arg1.hasOwnProperty("position")) && (!((_arg1.position == null))))){
                this.position = ControlPosition.fromObject(_arg1.position);
            };
            if (_arg1.buttonStyle != null){
                if (this.buttonStyle == null){
                    this.buttonStyle = new ButtonStyle();
                };
                this.buttonStyle.copyFromObject(_arg1.buttonStyle);
            };
        }
        public function get buttonStyle():ButtonStyle{
            return (this._buttonStyle);
        }
        public function set buttonSpacing(_arg1:Point):void{
            this._buttonSpacing = _arg1;
        }
        public function set buttonSize(_arg1:Point):void{
            this._buttonSize = _arg1;
        }
        public function set buttonAlignment(_arg1:Object):void{
            this._buttonAlignment = (_arg1 as Number);
        }
        public function toString():String{
            return ((((((((((("MapTypeControlOptions:\n\t{ buttonSize: " + this._buttonSize) + "\n\t  buttonStyle: ") + this._buttonStyle) + "\n\t  buttonSpacing: ") + this._buttonSpacing) + "\n\t  buttonAlignment: ") + this._buttonAlignment) + "\n\t  position: ") + this._position) + " }"));
        }
        public function get position():ControlPosition{
            return (this._position);
        }
        public function get buttonSpacing():Point{
            return (this._buttonSpacing);
        }
        public function set buttonStyle(_arg1:ButtonStyle):void{
            this._buttonStyle = _arg1;
        }

    }
}//package com.google.maps.controls 
﻿package com.google.maps.controls {
    import com.google.maps.*;
    import com.google.maps.interfaces.*;
    import com.google.maps.wrappers.*;

    public final class ZoomControl extends IZoomControlWrapper {

        public function ZoomControl(_arg1:ZoomControlOptions=null){
            var bootstrap:* = null;
            var self:* = null;
            var options = _arg1;
            super();
            bootstrap = ClientBootstrap.getInstance();
            self = this;
            bootstrap.delayInitialize(function ():void{
                var _local1:IMapsFactory;
                var _local2:Object;
                _local1 = bootstrap.getMapsFactory();
                _local2 = _local1.createZoomControl2(options);
                Wrapper.instance().wrap(_local2, self, IZoomControl, IZoomControlWrapper);
            });
        }
    }
}//package com.google.maps.controls 
﻿package com.google.maps.controls {
    import com.google.maps.*;
    import com.google.maps.interfaces.*;
    import com.google.maps.wrappers.*;

    public final class MapTypeControl extends IMapTypeControlWrapper {

        public function MapTypeControl(_arg1:MapTypeControlOptions=null){
            var bootstrap:* = null;
            var self:* = null;
            var options = _arg1;
            super();
            bootstrap = ClientBootstrap.getInstance();
            self = this;
            bootstrap.delayInitialize(function ():void{
                var _local1:IMapsFactory;
                var _local2:Object;
                _local1 = bootstrap.getMapsFactory();
                _local2 = _local1.createMapTypeControl2(options);
                Wrapper.instance().wrap(_local2, self, IMapTypeControl, MapTypeControl);
            });
        }
    }
}//package com.google.maps.controls 
﻿package com.google.maps.controls {
    import com.google.maps.styles.*;
    import flash.geom.*;
    import com.google.maps.wrappers.*;

    public class OverviewMapControlOptions {

        private var _position:ControlPosition;
        private var _padding:Point;
        private var _size:Point;
        private var _controlStyle:BevelStyle;
        private var _navigatorStyle:RectangleStyle;

        public function OverviewMapControlOptions(_arg1:Object=null){
            if (_arg1 != null){
                this.copyFromObject(_arg1);
            };
        }
        public static function merge(_arg1:Array):OverviewMapControlOptions{
            return ((Wrapper.mergeStyles(OverviewMapControlOptions, _arg1) as OverviewMapControlOptions));
        }
        public static function fromObject(_arg1:Object):OverviewMapControlOptions{
            var _local2:OverviewMapControlOptions;
            if (_arg1 == null){
                return (null);
            };
            _local2 = new (OverviewMapControlOptions)();
            _local2.copyFromObject(_arg1);
            return (_local2);
        }

        public function set size(_arg1:Point):void{
            if (_arg1 != null){
                this._size = new Point(_arg1.x, _arg1.y);
            } else {
                this._size = null;
            };
        }
        public function get size():Point{
            return (this._size);
        }
        public function get padding():Point{
            return (this._padding);
        }
        public function get controlStyle():BevelStyle{
            return (this._controlStyle);
        }
        public function set position(_arg1:ControlPosition):void{
            this._position = _arg1;
        }
        public function get navigatorStyle():RectangleStyle{
            return (this._navigatorStyle);
        }
        public function copyFromObject(_arg1:Object):void{
            if (((_arg1.hasOwnProperty("position")) && (!((_arg1.position == null))))){
                this.position = ControlPosition.fromObject(_arg1.position);
            };
            if (_arg1.size != null){
                this.size = new Point(_arg1.size.x, _arg1.size.y);
            };
            if (_arg1.padding != null){
                this.padding = new Point(_arg1.padding.x, _arg1.padding.y);
            };
            if (_arg1.controlStyle != null){
                if (this.controlStyle == null){
                    this.controlStyle = new BevelStyle();
                };
                this.controlStyle.copyFromObject(_arg1.controlStyle);
            };
            if (_arg1.navigatorStyle != null){
                if (this.navigatorStyle == null){
                    this.navigatorStyle = new RectangleStyle();
                };
                this.navigatorStyle.copyFromObject(_arg1.navigatorStyle);
            };
        }
        public function set padding(_arg1:Point):void{
            if (_arg1 != null){
                this._padding = new Point(_arg1.x, _arg1.y);
            } else {
                this._padding = null;
            };
        }
        public function set controlStyle(_arg1:BevelStyle):void{
            this._controlStyle = _arg1;
        }
        public function get position():ControlPosition{
            return (this._position);
        }
        public function toString():String{
            return (((((((((((("OverviewMapControlOptions: {" + "\n\tcontrolStyle: ") + this.controlStyle) + "\n\tsize: ") + this.size) + "\n\tpadding: ") + this.padding) + "\n\tnavigatorStyle: ") + this.navigatorStyle) + "\n\t  position: ") + this._position.toString()) + " }"));
        }
        public function set navigatorStyle(_arg1:RectangleStyle):void{
            this._navigatorStyle = _arg1;
        }

    }
}//package com.google.maps.controls 
﻿package com.google.maps.controls {
    import flash.text.*;
    import com.google.maps.wrappers.*;

    public class ScaleControlOptions {

        public static const UNITS_BOTH:int = 0;
        public static const UNITS_IMPERIAL_ONLY:int = 6;
        public static const UNITS_METRIC_ONLY:int = 5;
        public static const UNITS_BOTH_PREFER_METRIC:int = 1;
        public static const UNITS_SINGLE:int = 4;
        public static const UNITS_BOTH_PREFER_IMPERIAL:int = 2;

        private var _position:ControlPosition;
        private var _labelFormat:TextFormat;
        private var _maxWidth:Object;
        private var _lineThickness:Object;
        private var _units:Object;

        public function ScaleControlOptions(_arg1:Object=null){
            if (_arg1 != null){
                this.copyFromObject(_arg1);
            };
        }
        public static function fromObject(_arg1:Object):ScaleControlOptions{
            var _local2:ScaleControlOptions;
            if (_arg1 == null){
                return (null);
            };
            _local2 = new (ScaleControlOptions)();
            _local2.copyFromObject(_arg1);
            return (_local2);
        }
        public static function merge(_arg1:Array):ScaleControlOptions{
            return ((Wrapper.mergeStyles(ScaleControlOptions, _arg1) as ScaleControlOptions));
        }

        public function set lineThickness(_arg1:Object):void{
            if ((_arg1 is int)){
                this._lineThickness = int(_arg1);
            };
        }
        public function set maxWidth(_arg1:Object):void{
            if ((_arg1 is Number)){
                this._maxWidth = Number(_arg1);
            };
        }
        public function get labelFormat():TextFormat{
            return (this._labelFormat);
        }
        public function get maxWidth():Object{
            return (this._maxWidth);
        }
        public function set position(_arg1:ControlPosition):void{
            this._position = _arg1;
        }
        public function set labelFormat(_arg1:TextFormat):void{
            this._labelFormat = _arg1;
        }
        public function set units(_arg1:Object):void{
            if ((_arg1 is int)){
                this._units = int(_arg1);
            };
        }
        public function copyFromObject(_arg1:Object):void{
            Wrapper.copyProperties(this, _arg1, ["units", "lineThickness", "maxWidth"], Number);
            if (((_arg1.hasOwnProperty("position")) && (!((_arg1.position == null))))){
                this.position = ControlPosition.fromObject(_arg1.position);
            };
            if (_arg1.labelFormat != null){
                if (this.labelFormat == null){
                    this.labelFormat = new TextFormat();
                };
                Wrapper.copyTextFormatProperties(this.labelFormat, _arg1.labelFormat);
            };
        }
        public function get lineThickness():Object{
            return (this._lineThickness);
        }
        public function get position():ControlPosition{
            return (this._position);
        }
        public function toString():String{
            return ((((((((((("ScaleControlOptions:\n\t{ position: " + this._position) + "\n\t  units: ") + this._units) + "\n\t  lineThickness: ") + this._lineThickness) + "\n\t  maxWidth: ") + this._maxWidth) + "\n\t  labelFormat: ") + this._labelFormat) + " }"));
        }
        public function get units():Object{
            return (this._units);
        }

    }
}//package com.google.maps.controls 
﻿package com.google.maps.controls {
    import com.google.maps.*;
    import com.google.maps.interfaces.*;
    import com.google.maps.wrappers.*;

    public final class ScaleControl extends IScaleControlWrapper {

        public function ScaleControl(_arg1:ScaleControlOptions=null){
            var bootstrap:* = null;
            var self:* = null;
            var options = _arg1;
            super();
            bootstrap = ClientBootstrap.getInstance();
            self = this;
            bootstrap.delayInitialize(function ():void{
                var _local1:IMapsFactory;
                var _local2:Object;
                _local1 = bootstrap.getMapsFactory();
                _local2 = _local1.createScaleControl2(options);
                Wrapper.instance().wrap(_local2, self, IScaleControl, ScaleControl);
            });
        }
    }
}//package com.google.maps.controls 
﻿package com.google.maps.controls {
    import flash.display.*;
    import com.google.maps.interfaces.*;
    import flash.geom.*;
    import com.google.maps.wrappers.*;

    public class ControlBase extends WrappableComponent implements IControl {

        protected var position:ControlPosition;
        protected var map:IMap;

        public function ControlBase(_arg1:ControlPosition){
            this.position = _arg1;
            this.map = null;
        }
        public function setControlPosition(_arg1:ControlPosition):void{
            this.position = _arg1;
            this.map.placeControl(this, getControlPosition());
        }
        override public function get interfaceChain():Array{
            return (["IControl"]);
        }
        public function getControlPosition():ControlPosition{
            return (this.position);
        }
        public function getSize():Point{
            return (new Point(this.width, this.height));
        }
        public function initControlWithMap(_arg1:IMap):void{
            this.map = _arg1;
        }
        public function getDisplayObject():DisplayObject{
            return (this);
        }

    }
}//package com.google.maps.controls 
﻿package com.google.maps.controls {
    import com.google.maps.*;
    import com.google.maps.interfaces.*;
    import com.google.maps.wrappers.*;

    public final class NavigationControl extends INavigationControlWrapper {

        public function NavigationControl(_arg1:NavigationControlOptions=null){
            var bootstrap:* = null;
            var self:* = null;
            var options = _arg1;
            super();
            bootstrap = ClientBootstrap.getInstance();
            self = this;
            bootstrap.delayInitialize(function ():void{
                var _local1:IMapsFactory;
                var _local2:Object;
                _local1 = (bootstrap.getMapsFactory() as IMapsFactory);
                _local2 = _local1.createNavigationControl2(options);
                Wrapper.instance().wrap(_local2, self, INavigationControl, NavigationControl);
            });
        }
    }
}//package com.google.maps.controls 
﻿package com.google.maps.controls {

    public final class ControlPosition {

        public static const ANCHOR_BOTTOM_LEFT:Number = 32;
        public static const ANCHOR_TOP_RIGHT:Number = 1;
        public static const ANCHOR_BOTTOM_RIGHT:Number = 33;
        public static const ANCHOR_TOP_LEFT:Number = 0;

        private var internalPaddingX:Number;
        private var internalPaddingY:Number;
        private var internalAnchor:Number;

        public function ControlPosition(_arg1:Number, _arg2:Number=0, _arg3:Number=NaN){
            internalPaddingX = _arg2;
            internalPaddingY = ((isNaN(_arg3)) ? internalPaddingX : _arg3);
            internalAnchor = (((((((_arg1 == ANCHOR_TOP_LEFT)) || ((_arg1 == ANCHOR_BOTTOM_RIGHT)))) || ((_arg1 == ANCHOR_BOTTOM_LEFT)))) ? _arg1 : ANCHOR_TOP_RIGHT);
        }
        public static function fromObject(_arg1:Object):ControlPosition{
            return (new ControlPosition(_arg1.getAnchor(), _arg1.getOffsetX(), _arg1.getOffsetY()));
        }

        public function toString():String{
            return ((((((("ControlPosition:\n\t{ anchor: " + this.internalAnchor) + "\n\t  paddingX: ") + this.internalPaddingX) + "\n\t  paddingY: ") + this.internalPaddingY) + " }"));
        }
        public function getOffsetX():Number{
            return (internalPaddingX);
        }
        public function getOffsetY():Number{
            return (internalPaddingY);
        }
        public function getAnchor():Number{
            return (internalAnchor);
        }

    }
}//package com.google.maps.controls 
﻿package com.google.maps.controls {
    import com.google.maps.*;
    import com.google.maps.interfaces.*;
    import com.google.maps.wrappers.*;

    public final class OverviewMapControl extends IOverviewMapControlWrapper {

        public function OverviewMapControl(_arg1:OverviewMapControlOptions=null){
            var bootstrap:* = null;
            var self:* = null;
            var options = _arg1;
            super();
            bootstrap = ClientBootstrap.getInstance();
            self = this;
            bootstrap.delayInitialize(function ():void{
                var _local1:IMapsFactory;
                var _local2:Object;
                _local1 = bootstrap.getMapsFactory();
                _local2 = _local1.createOverviewMapControl2(options);
                Wrapper.instance().wrap(_local2, self, IOverviewMapControl, IOverviewMapControlWrapper);
            });
        }
    }
}//package com.google.maps.controls 
﻿package com.google.maps {
    import flash.events.*;
    import com.google.maps.interfaces.*;
    import com.google.maps.wrappers.*;

    public class CopyrightCollection extends ICopyrightCollectionWrapper implements ICopyrightCollection, IEventDispatcher {

        public function CopyrightCollection(_arg1:String=null){
            var _local2:ClientBootstrap;
            var _local3:IMapsFactory;
            super();
            _local2 = ClientBootstrap.getInstance();
            _local3 = _local2.getMapsFactory();
            Wrapper.instance().wrap(_local3.createCopyrightCollection(_arg1), this, ICopyrightCollection, CopyrightCollection);
        }
    }
}//package com.google.maps 
﻿package com.google.maps {

    public final class MapAction {

        public static const ACTION_PAN:Number = 0;
        public static const ACTION_PAN_ZOOM_IN:Number = 2;
        public static const ACTION_NOTHING:Number = 3;
        static const FORCE_LINK_CONSTANTS:Number = Constants.ACTION_PAN;
        public static const ACTION_ZOOM_IN:Number = 1;

    }
}//package com.google.maps 
﻿package com.google.maps {
    import flash.display.*;

    class ClientUtil {

        public static function getFlashVar(_arg1:LoaderInfo, _arg2:String):String{
            var _local3:Object;
            var _local4:String;
            _local3 = _arg1.parameters;
            _local4 = null;
            if (_local3 == null){
                return (null);
            };
            return ((_local3[_arg2] as String));
        }

    }
}//package com.google.maps 
﻿package com.google.maps {

    public class R1Interval {

        public var hi:Number;
        public var lo:Number;

        public function R1Interval(_arg1:Number, _arg2:Number){
            lo = _arg1;
            hi = _arg2;
        }
        public static function fromObject(_arg1:Object):R1Interval{
            if (_arg1 == null){
                return (null);
            };
            return (new R1Interval(_arg1.lo, _arg1.hi));
        }

        public function containsInterval(_arg1:R1Interval):Boolean{
            if (_arg1.isEmpty()){
                return (true);
            };
            return ((((_arg1.lo >= lo)) && ((_arg1.hi <= hi))));
        }
        public function isEmpty():Boolean{
            return ((lo > hi));
        }
        public function equals(_arg1:R1Interval):Boolean{
            if (isEmpty()){
                return (isEmpty());
            };
            return (((Math.abs((_arg1.lo - lo)) + Math.abs((hi - _arg1.hi))) <= MapUtil.FLOAT_ERROR_MARGIN));
        }
        public function span():Number{
            return (((isEmpty()) ? 0 : (hi - lo)));
        }
        public function intersects(_arg1:R1Interval):Boolean{
            if (lo <= _arg1.lo){
                return ((((_arg1.lo <= hi)) && ((_arg1.lo <= _arg1.hi))));
            };
            return ((((lo <= _arg1.hi)) && ((lo <= hi))));
        }
        public function center():Number{
            return (((hi + lo) / 2));
        }
        public function extend(_arg1:Number):void{
            if (isEmpty()){
                lo = _arg1;
                hi = _arg1;
            } else {
                if (_arg1 < lo){
                    lo = _arg1;
                } else {
                    if (_arg1 > hi){
                        hi = _arg1;
                    };
                };
            };
        }
        public function contains(_arg1:Number):Boolean{
            return ((((_arg1 >= lo)) && ((_arg1 <= hi))));
        }

    }
}//package com.google.maps 
﻿package com.google.maps {
    import flash.display.*;
    import flash.events.*;
    import com.google.maps.interfaces.*;
    import flash.net.*;
    import flash.system.*;
    import com.google.maps.wrappers.*;
    import flash.utils.*;

    public class ClientBootstrap extends EventDispatcher {

        public static const INIT_COMPLETE:String = "initcomplete";
        public static const LIBRARY_LOADED:String = "libraryloaded";
        public static const BOOTSTRAP_FAILED:String = "bootstrapfailed";

        private static var libraryUrlPrefix:String;
        private static var libraryUrlExtension:String;
        private static var instance:ClientBootstrap;

        private var container:ClientBootstrapSprite;
        private var factory:IMapsFactory;
        private var bootstrapLoader:Loader;
        private var registeredObjects:Dictionary;
        private var librarySwfLoader:Loader;
        private var nextFrameCalls:Array;
        private var timer:Timer;
        private var isInitialized:Boolean;
        private var delayInitializers:Array;

        public function ClientBootstrap(){
            this.bootstrapLoader = null;
            this.librarySwfLoader = null;
            this.factory = null;
            this.isInitialized = false;
            this.delayInitializers = [];
            this.container = null;
            this.registeredObjects = new Dictionary(true);
        }
        private static function getLibModuleName(_arg1:String):String{
            return (((libraryUrlPrefix + _arg1) + libraryUrlExtension));
        }
        private static function extractLibraryUrlPrefixAndExtension(_arg1:String):void{
            var _local2:int;
            var _local3:int;
            _local2 = _arg1.lastIndexOf(".");
            if (_local2 >= 1){
                _local3 = _arg1.lastIndexOf("/", (_local2 - 1));
                if ((((_local3 >= 1)) && (!((_arg1.charAt((_local3 - 1)) == "/"))))){
                    libraryUrlPrefix = _arg1.substring(0, _local2);
                    libraryUrlExtension = _arg1.substring(_local2);
                    return;
                };
            };
            libraryUrlPrefix = _arg1;
            libraryUrlExtension = "";
        }
        public static function getInstance():ClientBootstrap{
            if (ClientBootstrap.instance == null){
                ClientBootstrap.instance = new (ClientBootstrap)();
            };
            return (ClientBootstrap.instance);
        }

        private function executeNextFrameCalls(_arg1:Event):void{
            var _local2:Array;
            var _local3:Function;
            this.timer.removeEventListener(TimerEvent.TIMER, executeNextFrameCalls);
            this.timer = null;
            _local2 = this.nextFrameCalls;
            this.nextFrameCalls = null;
            if (_local2 != null){
                for each (_local3 in _local2) {
                    _local3();
                };
            };
        }
        private function allowLibraryDomain(_arg1:String):void{
            var _local2:Number;
            _local2 = _arg1.lastIndexOf("/");
            if (_local2 >= 0){
                _arg1 = _arg1.substring(0, _local2);
            };
            Security.allowDomain(_arg1);
        }
        public function isReady():Boolean{
            return (!((this.factory == null)));
        }
        public function unregisterObject(_arg1:Object):void{
            var _local2:Object;
            delete this.registeredObjects[_arg1];
            for (_local2 in this.registeredObjects) {
                if (_local2 != null){
                    return;
                };
            };
            unloadBootstrap();
        }
        public function loadBootstrap():void{
            if (this.isInitialized){
                return;
            };
            this.isInitialized = true;
            scheduleForNextFrame(internalLoadBootstrap);
        }
        private function loadUrl(_arg1:Loader, _arg2:String):Loader{
            var _local3:LoaderContext;
            var _local4:URLRequest;
            var _local5:RegExp;
            Log.log0(("ClientBootstrap - loading: " + _arg2));
            this.container.addChild(_arg1);
            if (!isAir()){
                _local5 = /:\d+/;
                allowLibraryDomain(_arg2.replace(_local5, ""));
            };
            _local3 = new LoaderContext(false, new ApplicationDomain());
            _local4 = new URLRequest(_arg2);
            BootstrapConfiguration.getInstance().loadAddingAcceptLanguageHeaderIfAir(_arg1, _local4, _local3);
            return (_arg1);
        }
        private function onLibrarySwfLoaded(_arg1:Event):void{
            scheduleForNextFrame(createFactory);
        }
        private function setUrl(_arg1:String):void{
            var _local2:Loader;
            extractLibraryUrlPrefixAndExtension(_arg1);
            _local2 = new Loader();
            _local2.contentLoaderInfo.addEventListener(Event.COMPLETE, this.onLibrarySwfLoaded);
            _local2.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, this.onBootstrapFailed);
            this.librarySwfLoader = loadUrl(_local2, _arg1);
        }
        private function scheduleForNextFrame(_arg1:Function):void{
            if (!this.nextFrameCalls){
                this.nextFrameCalls = [];
            };
            this.nextFrameCalls.push(_arg1);
            if (!this.timer){
                this.timer = new Timer(1, 1);
                this.timer.addEventListener(TimerEvent.TIMER, executeNextFrameCalls);
                this.timer.start();
            };
        }
        private function destroyFactory():void{
            var _local1:BootstrapConfiguration;
            var _local2:DisplayObject;
            var _local3:Object;
            if (this.librarySwfLoader != null){
                _local3 = (this.librarySwfLoader.content as Object);
                if (((!((_local3 == null))) && (_local3.hasOwnProperty("release")))){
                    _local3.release();
                };
            };
            _local1 = BootstrapConfiguration.getInstance();
            _local2 = _local1.stage;
            if (_local2 != null){
                _local2.removeEventListener(MouseEvent.MOUSE_UP, this.factory.reportMouseEvent);
                _local2.removeEventListener(MouseEvent.MOUSE_DOWN, this.factory.reportMouseEvent);
                _local2.removeEventListener(MouseEvent.MOUSE_MOVE, this.factory.reportMouseEvent);
            };
            this.factory = null;
            Wrapper.instance().clear();
        }
        private function onBootstrapLoaded(_arg1:Event):void{
            if (isAir()){
                scheduleForNextFrame(this.callSetUrl);
            };
        }
        private function unloadBootstrap():void{
            destroyFactory();
            if (this.container != null){
                this.container.release();
                this.container = null;
            };
            if (this.bootstrapLoader != null){
                this.bootstrapLoader.unload();
                this.bootstrapLoader = null;
            };
            if (this.librarySwfLoader != null){
                this.librarySwfLoader.unload();
                this.librarySwfLoader = null;
            };
            this.delayInitializers = [];
            this.dispatchEvent(new Event(ClientBootstrap.BOOTSTRAP_FAILED));
            BootstrapConfiguration.getInstance().lock(false);
            this.isInitialized = false;
        }
        public function getMapsFactory():IMapsFactory{
            return (this.factory);
        }
        private function callSetUrl():void{
            this.setUrl(Object(this.bootstrapLoader.content).getLibraryUrl());
        }
        public function registerObject(_arg1:Object):void{
            this.registeredObjects[_arg1] = true;
        }
        public function isAir():Boolean{
            return (BootstrapConfiguration.getInstance().isAir());
        }
        private function internalLoadBootstrap():void{
            var _local1:BootstrapConfiguration;
            var _local2:String;
            var _local3:Loader;
            _local1 = BootstrapConfiguration.getInstance();
            _local2 = _local1.getBootstrapUrl();
            _local3 = new Loader();
            _local3.contentLoaderInfo.addEventListener(Event.COMPLETE, this.onBootstrapLoaded);
            _local3.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, this.onBootstrapFailed);
            if (this.container == null){
                this.container = new ClientBootstrapSprite();
            };
            this.bootstrapLoader = loadUrl(_local3, _local2);
            this.container.setBootstrapLoader(this.bootstrapLoader);
            this.container.setUrlCallback(this.setUrl);
        }
        private function onBootstrapFailed(_arg1:Event):void{
            this.dispatchEvent(new Event(ClientBootstrap.BOOTSTRAP_FAILED));
        }
        private function createFactory():void{
            var _local1:Object;
            var _local2:BootstrapConfiguration;
            var _local3:Object;
            var _local4:int;
            var _local5:DisplayObject;
            _local1 = (this.librarySwfLoader.content as Object);
            _local2 = BootstrapConfiguration.getInstance();
            if (isAir()){
                _local1.configure(_local2, this.bootstrapLoader);
            };
            _local3 = _local1.getWrapper();
            Wrapper.instance().setAlienWrapper(_local3);
            this.factory = Wrapper.instance().wrapIMapsFactory(_local1.getFactory());
            this.factory.setClientFactory(new ClientFactory());
            this.dispatchEvent(new Event(ClientBootstrap.LIBRARY_LOADED));
            _local4 = 0;
            while (_local4 < delayInitializers.length) {
                var _local6 = delayInitializers;
                _local6[_local4]();
                _local4++;
            };
            delayInitializers = [];
            _local5 = _local2.stage;
            _local5.addEventListener(MouseEvent.MOUSE_UP, this.factory.reportMouseEvent);
            _local5.addEventListener(MouseEvent.MOUSE_DOWN, this.factory.reportMouseEvent);
            _local5.addEventListener(MouseEvent.MOUSE_MOVE, this.factory.reportMouseEvent);
            this.dispatchEvent(new Event(ClientBootstrap.INIT_COMPLETE));
        }
        public function delayInitialize(_arg1:Function):void{
            if (!isReady()){
                delayInitializers.push(_arg1);
            } else {
                _arg1();
            };
        }

    }
}//package com.google.maps 
﻿package com.google.maps {
    import flash.events.*;
    import com.google.maps.interfaces.*;
    import com.google.maps.wrappers.*;

    public class MapType extends IMapTypeWrapper implements IMapType, IEventDispatcher {

        public function MapType(_arg1:Array, _arg2:IProjection, _arg3:String, _arg4:MapTypeOptions=null){
            var _local5:ClientBootstrap;
            var _local6:IMapsFactory;
            super();
            _local5 = ClientBootstrap.getInstance();
            _local6 = _local5.getMapsFactory();
            Wrapper.instance().wrap(_local6.createMapType(_arg1, _arg2, _arg3, _arg4), this, IMapType, MapType);
        }
        public static function get HYBRID_MAP_TYPE():IMapType{
            return (getDefaultMapType(PConstants.HYBRID_MAP_TYPE_NAME));
        }
        public static function get SATELLITE_MAP_TYPE():IMapType{
            return (getDefaultMapType(PConstants.SATELLITE_MAP_TYPE_NAME));
        }
        public static function get PHYSICAL_MAP_TYPE():IMapType{
            return (getDefaultMapType(PConstants.PHYSICAL_MAP_TYPE_NAME));
        }
        public static function get DEFAULT_MAP_TYPES():Array{
            var _local1:ClientBootstrap;
            var _local2:IMapsFactory;
            _local1 = ClientBootstrap.getInstance();
            _local2 = _local1.getMapsFactory();
            return (_local2.getDefaultMapTypesList());
        }
        private static function getDefaultMapType(_arg1:String):IMapType{
            var _local2:ClientBootstrap;
            var _local3:IMapsFactory;
            _local2 = ClientBootstrap.getInstance();
            _local3 = _local2.getMapsFactory();
            return (_local3.getDefaultMapType(_arg1));
        }
        public static function get NORMAL_MAP_TYPE():IMapType{
            return (getDefaultMapType(PConstants.NORMAL_MAP_TYPE_NAME));
        }

    }
}//package com.google.maps 
﻿package com.google.maps {
    import flash.display.*;
    import flash.text.*;
    import com.google.maps.styles.*;
    import flash.geom.*;
    import com.google.maps.wrappers.*;

    public class InfoWindowOptions {

        public static const ALIGN_LEFT:Number = 0;
        public static const ALIGN_RIGHT:Number = 2;
        public static const ALIGN_CENTER:Number = 1;

        private var _contentStyleSheet:StyleSheet;
        private var _tailAlign:Object;
        private var _cornerRadius:Object;
        private var _tailHeight:Object;
        private var _content:String;
        private var _customOffset:Point;
        private var _height:Object;
        private var _customCloseRect:Rectangle;
        private var _title:String;
        private var _titleStyleSheet:StyleSheet;
        private var _hasCloseButton:Object;
        private var _fillStyle:FillStyle;
        private var _pointOffset:Point;
        private var _titleHTML:String;
        private var _drawDefaultFrame:Object;
        private var _strokeStyle:StrokeStyle;
        private var _tailOffset:Object;
        private var _titleFormat:TextFormat;
        private var _width:Object;
        private var _customContent:DisplayObject;
        private var _hasTail:Object;
        private var _contentFormat:TextFormat;
        private var _padding:Object;
        private var _tailWidth:Object;
        private var _hasShadow:Object;
        private var _contentHTML:String;

        public function InfoWindowOptions(_arg1:Object=null){
            if (_arg1 != null){
                this.copyFromObject(_arg1);
            };
        }
        public static function fromObject(_arg1:Object):InfoWindowOptions{
            var _local2:InfoWindowOptions;
            if (_arg1 == null){
                return (null);
            };
            _local2 = new (InfoWindowOptions)();
            _local2.copyFromObject(_arg1);
            return (_local2);
        }
        public static function getDefaultOptions():InfoWindowOptions{
            var _local1:ClientBootstrap;
            _local1 = ClientBootstrap.getInstance();
            return (_local1.getMapsFactory().getDefaultInfoWindowOptions());
        }
        public static function setDefaultOptions(_arg1:InfoWindowOptions):void{
            var _local2:ClientBootstrap;
            if (_arg1._customContent != null){
                throw (new Error("Cannot specify custom content in default InfoWindowOptions"));
            };
            _local2 = ClientBootstrap.getInstance();
            _local2.getMapsFactory().setDefaultInfoWindowOptions(_arg1);
        }
        public static function merge(_arg1:Array):InfoWindowOptions{
            return ((Wrapper.mergeStyles(InfoWindowOptions, _arg1) as InfoWindowOptions));
        }

        public function copyFromObject(_arg1:Object):void{
            Wrapper.copyProperties(this, _arg1, ["width", "height", "cornerRadius", "padding", "tailWidth", "tailHeight", "tailOffset", "tailAlign"], Number);
            Wrapper.copyProperties(this, _arg1, ["hasCloseButton", "hasTail", "hasShadow"], Boolean);
            Wrapper.copyProperties(this, _arg1, ["title", "titleHTML", "content", "contentHTML"], String);
            Wrapper.copyProperties(this, _arg1, ["customContent"], DisplayObject, true);
            Wrapper.copyProperties(this, _arg1, ["drawDefaultFrame"], Boolean, true);
            if (_arg1.strokeStyle != null){
                if (this.strokeStyle == null){
                    this.strokeStyle = new StrokeStyle();
                };
                this.strokeStyle.copyFromObject(_arg1.strokeStyle);
            };
            if (_arg1.fillStyle != null){
                if (this.fillStyle == null){
                    this.fillStyle = new FillStyle();
                };
                this.fillStyle.copyFromObject(_arg1.fillStyle);
            };
            if (_arg1.titleFormat != null){
                if (this.titleFormat == null){
                    this.titleFormat = new TextFormat();
                };
                Wrapper.copyTextFormatProperties(this.titleFormat, _arg1.titleFormat);
            };
            if (_arg1.titleStyleSheet != null){
                if (this.titleStyleSheet == null){
                    this.titleStyleSheet = new StyleSheet();
                };
                Wrapper.copyStyleSheetProperties(this.titleStyleSheet, _arg1.titleStyleSheet);
            };
            if (_arg1.contentFormat != null){
                if (this.contentFormat == null){
                    this.contentFormat = new TextFormat();
                };
                Wrapper.copyTextFormatProperties(this.contentFormat, _arg1.contentFormat);
            };
            if (_arg1.contentStyleSheet != null){
                if (this.contentStyleSheet == null){
                    this.contentStyleSheet = new StyleSheet();
                };
                Wrapper.copyStyleSheetProperties(this.contentStyleSheet, _arg1.contentStyleSheet);
            };
            if (_arg1.pointOffset != null){
                if (this.pointOffset == null){
                    this.pointOffset = new Point();
                };
                Wrapper.copyPointProperties(this.pointOffset, _arg1.pointOffset);
            };
            if (MapUtil.hasNonNullProperty(_arg1, "customOffset")){
                if (this.customOffset == null){
                    this.customOffset = new Point();
                };
                Wrapper.copyPointProperties(this.customOffset, _arg1.customOffset);
            };
            if (MapUtil.hasNonNullProperty(_arg1, "customCloseRect")){
                if (this.customCloseRect == null){
                    this.customCloseRect = new Rectangle();
                };
                Wrapper.copyRectangleProperties(this.customCloseRect, _arg1.customCloseRect);
            };
        }
        public function get tailOffset():Object{
            return (this._tailOffset);
        }
        public function set tailOffset(_arg1:Object):void{
            this._tailOffset = (_arg1 as Number);
        }
        public function get hasTail():Object{
            return (this._hasTail);
        }
        public function set titleHTML(_arg1:String):void{
            this._titleHTML = _arg1;
            if (this._titleHTML != null){
                this._title = null;
            };
        }
        public function set contentStyleSheet(_arg1:StyleSheet):void{
            this._contentStyleSheet = _arg1;
        }
        public function get padding():Object{
            return (this._padding);
        }
        public function get titleHTML():String{
            return (this._titleHTML);
        }
        public function set hasTail(_arg1:Object):void{
            this._hasTail = (_arg1 as Boolean);
        }
        public function set customCloseRect(_arg1:Rectangle):void{
            this._customCloseRect = ((_arg1)!=null) ? _arg1.clone() : null;
        }
        public function get drawDefaultFrame():Object{
            return (this._drawDefaultFrame);
        }
        public function set padding(_arg1:Object):void{
            this._padding = (_arg1 as Number);
        }
        public function get height():Object{
            return (this._height);
        }
        public function set tailAlign(_arg1:Object):void{
            this._tailAlign = (_arg1 as Number);
        }
        public function set tailHeight(_arg1:Object):void{
            this._tailHeight = (_arg1 as Number);
        }
        public function set drawDefaultFrame(_arg1:Object):void{
            this._drawDefaultFrame = (_arg1 as Boolean);
        }
        public function get cornerRadius():Object{
            return (this._cornerRadius);
        }
        public function set contentHTML(_arg1:String):void{
            this._contentHTML = _arg1;
            if (this._contentHTML != null){
                this._content = null;
            };
        }
        public function get pointOffset():Point{
            return (this._pointOffset);
        }
        public function set height(_arg1:Object):void{
            this._height = (_arg1 as Number);
        }
        public function get hasCloseButton():Object{
            return (this._hasCloseButton);
        }
        public function get tailWidth():Object{
            return (this._tailWidth);
        }
        public function get title():String{
            return (this._title);
        }
        public function get hasShadow():Object{
            return (this._hasShadow);
        }
        public function set titleStyleSheet(_arg1:StyleSheet):void{
            this._titleStyleSheet = _arg1;
        }
        public function get customOffset():Point{
            return (this._customOffset);
        }
        public function get strokeStyle():StrokeStyle{
            return (this._strokeStyle);
        }
        public function get titleFormat():TextFormat{
            return (this._titleFormat);
        }
        public function toString():String{
            return (((((((((((((((((((((((((((((((((((((((((((((((((((("InfoWindowOptions:" + "\n\t{ strokeStyle: ") + this._strokeStyle) + "\n\t  fillStyle: ") + this._fillStyle) + "\n\t  titleFormat: ") + this._titleFormat) + "\n\t  titleStyleSheet: ") + this._titleStyleSheet) + "\n\t  contentFormat: ") + this._contentFormat) + "\n\t  contentStyleSheet: ") + this._contentStyleSheet) + "\n\t  width: ") + this._width) + "\n\t  height: ") + this._height) + "\n\t  cornerRadius: ") + this._cornerRadius) + "\n\t  padding: ") + this._padding) + "\n\t  hasCloseButton: ") + this._hasCloseButton) + "\n\t  hasTail: ") + this._hasTail) + "\n\t  tailWidth: ") + this._tailWidth) + "\n\t  tailHeight: ") + this._tailHeight) + "\n\t  tailOffset: ") + this._tailOffset) + "\n\t  tailAlign: ") + this._tailAlign) + "\n\t  pointOffset: ") + this._pointOffset) + "\n\t  hasShadow: ") + this._hasShadow) + "\n\t  title: ") + this._title) + "\n\t  titleHTML: ") + this._titleHTML) + "\n\t  content: ") + this._content) + "\n\t  contentHTML: ") + this._contentHTML) + "\n\t  customContent: ") + this._customContent) + "\n\t  customOffset: ") + this._customOffset) + "\n\t  customCloseRect: ") + this._customCloseRect) + " }"));
        }
        public function get content():String{
            return (this._content);
        }
        public function get contentStyleSheet():StyleSheet{
            return (this._contentStyleSheet);
        }
        public function set pointOffset(_arg1:Point):void{
            this._pointOffset = _arg1;
        }
        public function set customContent(_arg1:DisplayObject):void{
            this._customContent = _arg1;
        }
        public function set width(_arg1:Object):void{
            this._width = (_arg1 as Number);
        }
        public function get tailAlign():Object{
            return (this._tailAlign);
        }
        public function get tailHeight():Object{
            return (this._tailHeight);
        }
        public function set cornerRadius(_arg1:Object):void{
            this._cornerRadius = (_arg1 as Number);
        }
        public function set contentFormat(_arg1:TextFormat):void{
            this._contentFormat = _arg1;
        }
        public function get customCloseRect():Rectangle{
            return (this._customCloseRect);
        }
        public function get titleStyleSheet():StyleSheet{
            return (this._titleStyleSheet);
        }
        public function set hasCloseButton(_arg1:Object):void{
            this._hasCloseButton = (_arg1 as Boolean);
        }
        public function get contentHTML():String{
            return (this._contentHTML);
        }
        public function set tailWidth(_arg1:Object):void{
            this._tailWidth = (_arg1 as Number);
        }
        public function set hasShadow(_arg1:Object):void{
            this._hasShadow = (_arg1 as Boolean);
        }
        public function set title(_arg1:String):void{
            this._title = _arg1;
            if (this._title != null){
                this._titleHTML = null;
            };
        }
        public function set strokeStyle(_arg1:StrokeStyle):void{
            this._strokeStyle = _arg1;
        }
        public function get width():Object{
            return (this._width);
        }
        public function get customContent():DisplayObject{
            return (this._customContent);
        }
        public function set customOffset(_arg1:Point):void{
            this._customOffset = ((_arg1)!=null) ? new Point(_arg1.x, _arg1.y) : null;
        }
        public function get contentFormat():TextFormat{
            return (this._contentFormat);
        }
        public function set fillStyle(_arg1:FillStyle):void{
            this._fillStyle = _arg1;
        }
        public function set titleFormat(_arg1:TextFormat):void{
            this._titleFormat = _arg1;
        }
        public function get fillStyle():FillStyle{
            return (this._fillStyle);
        }
        public function set content(_arg1:String):void{
            this._content = _arg1;
            if (this._content != null){
                this._contentHTML = null;
            };
        }

    }
}//package com.google.maps 
﻿package com.google.maps.services {
    import com.google.maps.wrappers.*;

    public class DirectionsOptions {

        public static const TRAVEL_MODE_DRIVING:uint = 0;
        public static const TRAVEL_MODE_WALKING:uint = 1;
        static const DEFAULT_OPTIONS:DirectionsOptions = new DirectionsOptions({locale:null});
;

        private var _travelMode:Object;
        private var _locale:String;
        private var _avoidHighways:Object;

        public function DirectionsOptions(_arg1:Object=null){
            if (_arg1 != null){
                this.copyFromObject(_arg1);
            };
        }
        public static function fromObject(_arg1:Object):DirectionsOptions{
            var _local2:DirectionsOptions;
            if (_arg1 == null){
                return (null);
            };
            _local2 = new (DirectionsOptions)();
            _local2.copyFromObject(_arg1);
            return (_local2);
        }
        public static function merge(_arg1:Array):DirectionsOptions{
            return ((Wrapper.mergeStyles(DirectionsOptions, _arg1) as DirectionsOptions));
        }

        public function set countryCode(_arg1:String):void{
            var _local2:String;
            _local2 = this.language;
            this._locale = ((_local2) ? ((_local2 + "_") + _arg1) : ("_" + _arg1));
        }
        public function set travelMode(_arg1:Object):void{
            _travelMode = (_arg1 as uint);
        }
        public function get countryCode():String{
            var _local1:int;
            if (this._locale){
                _local1 = this._locale.indexOf("_");
                if (_local1 >= 0){
                    return (this._locale.substring((_local1 + 1)));
                };
            };
            return (null);
        }
        public function toString():String{
            return (((((((((("DirectionsOptions: {" + "\n\tlanguage: ") + this.language) + "\n\tcountryCode: ") + this.countryCode) + "\n\ttravelMode: ") + this.travelMode) + "\n\tavoidHighways: ") + this.avoidHighways) + "\n\t}"));
        }
        public function set locale(_arg1:String):void{
            this._locale = _arg1;
        }
        public function set avoidHighways(_arg1:Object):void{
            _avoidHighways = (_arg1 as Boolean);
        }
        public function set language(_arg1:String):void{
            var _local2:String;
            _local2 = this.countryCode;
            this._locale = ((_local2) ? ((_arg1 + "_") + _local2) : _arg1);
        }
        public function get locale():String{
            return (this._locale);
        }
        public function get avoidHighways():Object{
            return (_avoidHighways);
        }
        public function get travelMode():Object{
            return (_travelMode);
        }
        public function copyFromObject(_arg1:Object):void{
            Wrapper.copyProperties(this, _arg1, ["travelMode"], uint, true);
            Wrapper.copyProperties(this, _arg1, ["avoidHighways"], Boolean);
            Wrapper.copyProperties(this, _arg1, ["locale"], String);
            Wrapper.copyProperties(this, _arg1, ["language"], String, true);
            Wrapper.copyProperties(this, _arg1, ["countryCode"], String, true);
        }
        public function get language():String{
            var _local1:int;
            if (this._locale){
                _local1 = this._locale.indexOf("_");
                if (_local1 != 0){
                    return ((((_local1 > 0)) ? this._locale.substring(0, _local1) : this._locale));
                };
            };
            return (null);
        }

    }
}//package com.google.maps.services 
﻿package com.google.maps.services {
    import com.google.maps.*;
    import flash.events.*;
    import com.google.maps.interfaces.*;
    import com.google.maps.wrappers.*;

    public final class Directions extends IDirectionsWrapper implements IDirections, IEventDispatcher {

        public function Directions(_arg1:DirectionsOptions=null){
            var _local2:ClientBootstrap;
            var _local3:IMapsFactory;
            super();
            _local2 = ClientBootstrap.getInstance();
            _local3 = _local2.getMapsFactory();
            Wrapper.instance().wrap(_local3.createDirections(_arg1), this, IDirections, Directions);
        }
        private static function waypointToString(_arg1:Object):String{
            var _local2:LatLng;
            var _local3:Placemark;
            if ((_arg1 is String)){
                return ((_arg1 as String));
            };
            if ((_arg1 is LatLng)){
                _local2 = (_arg1 as LatLng);
                return (_local2.toUrlValue());
            };
            if ((_arg1 is Placemark)){
                _local3 = (_arg1 as Placemark);
                return (((_local3.address + " @") + _local3.point.toUrlValue()));
            };
            return ("");
        }

        public function loadFromWaypoints(_arg1:Array):void{
            var _local2:String;
            var _local3:uint;
            _local2 = "";
            if (_arg1.length >= 2){
                _local2 = ("from:" + waypointToString(_arg1[0]));
                _local3 = 1;
                while (_local3 < _arg1.length) {
                    _local2 = (_local2 + (" to:" + waypointToString(_arg1[_local3])));
                    _local3++;
                };
            };
            this.load(_local2);
        }

    }
}//package com.google.maps.services 
﻿package com.google.maps.services {
    import com.google.maps.*;
    import com.google.maps.wrappers.*;

    public class Route {

        var _endLatLng:LatLng;
        var _durationHtml:String;
        var _endGeocode:Placemark;
        var _distance:Number;
        var _startGeocode:Placemark;
        var _distanceHtml:String;
        var _steps:Array;
        var _summaryHtml:String;
        var _duration:Number;
        var _endPolylineIndex:uint;

        public static function fromObject(_arg1:Object):Route{
            var _local2:Route;
            if (_arg1 == null){
                return (null);
            };
            _local2 = new (Route)();
            _local2._endLatLng = LatLng.fromObject(_arg1._endLatLng);
            _local2._startGeocode = Placemark.fromObject(_arg1._startGeocode);
            _local2._endGeocode = Placemark.fromObject(_arg1._endGeocode);
            _local2._steps = Wrapper.instance().wrapStepArray(_arg1._steps);
            _local2._summaryHtml = _arg1._summaryHtml;
            _local2._distanceHtml = _arg1._distanceHtml;
            _local2._durationHtml = _arg1._durationHtml;
            _local2._distance = _arg1._distance;
            _local2._duration = _arg1._duration;
            _local2._endPolylineIndex = _arg1._endPolylineIndex;
            return (_local2);
        }

        public function get distanceHtml():String{
            return (_distanceHtml);
        }
        public function get startGeocode():Placemark{
            return (_startGeocode);
        }
        public function get numSteps():uint{
            return (_steps.length);
        }
        public function get duration():Number{
            return (_duration);
        }
        public function getStep(_arg1:uint):Step{
            return (_steps[_arg1]);
        }
        public function get endLatLng():LatLng{
            return (_endLatLng);
        }
        public function get endGeocode():Placemark{
            return (_endGeocode);
        }
        public function get durationHtml():String{
            return (_durationHtml);
        }
        public function get summaryHtml():String{
            return (_summaryHtml);
        }
        public function get distance():Number{
            return (_distance);
        }

    }
}//package com.google.maps.services 
﻿package com.google.maps.services {
    import com.google.maps.*;
    import flash.events.*;
    import com.google.maps.interfaces.*;
    import com.google.maps.wrappers.*;

    public final class ClientGeocoder extends IClientGeocoderWrapper implements IClientGeocoder, IEventDispatcher {

        public function ClientGeocoder(_arg1:ClientGeocoderOptions=null){
            var _local2:ClientBootstrap;
            var _local3:IMapsFactory;
            super();
            _local2 = ClientBootstrap.getInstance();
            _local3 = _local2.getMapsFactory();
            Wrapper.instance().wrap(_local3.createClientGeocoder2(_arg1), this, IClientGeocoder, ClientGeocoder);
        }
    }
}//package com.google.maps.services 
﻿package com.google.maps.services {
    import com.google.maps.*;
    import com.google.maps.wrappers.*;

    public class ClientGeocoderOptions {

        static const DEFAULT_OPTIONS:ClientGeocoderOptions = new ClientGeocoderOptions({
            language:null,
            countryCode:null,
            viewport:null
        });
;

        private var _countryCode:String;
        private var _viewport:LatLngBounds;
        private var _language:String;

        public function ClientGeocoderOptions(_arg1:Object=null){
            if (_arg1 != null){
                this.copyFromObject(_arg1);
            };
        }
        public static function fromObject(_arg1:Object):ClientGeocoderOptions{
            var _local2:ClientGeocoderOptions;
            if (_arg1 == null){
                return (null);
            };
            _local2 = new (ClientGeocoderOptions)();
            _local2.copyFromObject(_arg1);
            return (_local2);
        }
        public static function merge(_arg1:Array):ClientGeocoderOptions{
            return ((Wrapper.mergeStyles(ClientGeocoderOptions, _arg1) as ClientGeocoderOptions));
        }

        public function get countryCode():String{
            return (this._countryCode);
        }
        public function set countryCode(_arg1:String):void{
            this._countryCode = _arg1;
        }
        public function set viewport(_arg1:LatLngBounds):void{
            this._viewport = _arg1;
        }
        public function get viewport():LatLngBounds{
            return (this._viewport);
        }
        public function set language(_arg1:String):void{
            this._language = _arg1;
        }
        public function get language():String{
            return (this._language);
        }
        public function toString():String{
            return (((((((("ClientGeocoderOptions: {" + "\n\tlanguage: ") + this.language) + "\n\tcountryCode: ") + this.countryCode) + "\n\tviewport: ") + this.viewport) + "\n\t}"));
        }
        public function copyFromObject(_arg1:Object):void{
            Wrapper.copyProperties(this, _arg1, ["language"], String);
            Wrapper.copyProperties(this, _arg1, ["countryCode"], String);
            if (_arg1.viewport != null){
                this.viewport = LatLngBounds.fromObject(_arg1.viewport);
            };
        }

    }
}//package com.google.maps.services 
﻿package com.google.maps.services {
    import com.google.maps.*;
    import com.google.maps.wrappers.*;

    public dynamic class Placemark {

        public var point:LatLng;
        public var address:String;
        public var addressDetails:Object;

        public static function fromObject(_arg1:Object):Placemark{
            var _local2:Placemark;
            if (_arg1 == null){
                return (null);
            };
            _local2 = new (Placemark)();
            _local2.point = LatLng.fromObject(_arg1.point);
            _local2.address = (_arg1.address as String);
            _local2.addressDetails = _arg1.addressDetails;
            Wrapper.copyObject(_local2, _arg1);
            return (_local2);
        }

        public function toString():String{
            return (((address + " @") + point.toString()));
        }

    }
}//package com.google.maps.services 
﻿package com.google.maps.services {
    import com.google.maps.*;

    public class Step {

        var _polylineIndex:uint;
        var _durationHtml:String;
        var _descriptionHtml:String;
        var _distance:Number;
        var _latLng:LatLng;
        var _distanceHtml:String;
        var _duration:Number;

        public static function fromObject(_arg1:Object):Step{
            var _local2:Step;
            if (_arg1 == null){
                return (null);
            };
            _local2 = new (Step)();
            _local2._latLng = LatLng.fromObject(_arg1._latLng);
            _local2._descriptionHtml = _arg1._descriptionHtml;
            _local2._distanceHtml = _arg1._distanceHtml;
            _local2._durationHtml = _arg1._durationHtml;
            _local2._distance = _arg1._distance;
            _local2._duration = _arg1._duration;
            _local2._polylineIndex = _arg1._polylineIndex;
            return (_local2);
        }

        public function get distanceHtml():String{
            return (_distanceHtml);
        }
        public function get latLng():LatLng{
            return (_latLng);
        }
        public function get descriptionHtml():String{
            return (_descriptionHtml);
        }
        public function get duration():Number{
            return (_duration);
        }
        public function get durationHtml():String{
            return (_durationHtml);
        }
        public function get polylineIndex():uint{
            return (_polylineIndex);
        }
        public function get distance():Number{
            return (_distance);
        }

    }
}//package com.google.maps.services 
﻿package com.google.maps.services {
    import com.google.maps.*;
    import flash.events.*;
    import com.google.maps.wrappers.*;

    public final class GeocodingEvent extends MapEvent {

        public static const GEOCODING_FAILURE:String = "geocodingfailure";
        public static const GEOCODING_SUCCESS:String = "geocodingsuccess";

        public var name:String;
        public var response:GeocodingResponse;
        public var status:Number;
        public var request:String;

        public function GeocodingEvent(_arg1:String, _arg2:Boolean=false, _arg3:Boolean=false){
            super(_arg1, null, _arg2, _arg3);
        }
        public static function fromCrossDomainEvent(_arg1:Event, _arg2:Object):GeocodingEvent{
            var _local3:GeocodingEvent;
            _local3 = (_arg1 as GeocodingEvent);
            if (((!((_local3 == null))) && ((_arg2 == _local3.target)))){
                return (_local3);
            };
            _local3 = new GeocodingEvent(_arg1.type, _arg1.bubbles, _arg1.cancelable);
            _local3.copyEventData(_arg1, _arg2);
            return (_local3);
        }

        override public function get eventClassChain():Array{
            return (["GeocodingEvent", "MapEvent"]);
        }
        override protected function copyEventData(_arg1:Event, _arg2:Object):void{
            var _local3:Object;
            super.copyEventData(_arg1, _arg2);
            _local3 = Object(_arg1);
            this.name = (_local3.name as String);
            this.request = (_local3.request as String);
            this.status = (_local3.status as Number);
            this.response = Wrapper.instance().wrapGeocodingResponse(_local3.response);
        }

    }
}//package com.google.maps.services 
﻿package com.google.maps.services {
    import com.google.maps.wrappers.*;

    public dynamic class GeocodingResponse {

        public var name:String;
        public var placemarks:Array;

        public static function fromObject(_arg1:Object):GeocodingResponse{
            var _local2:GeocodingResponse;
            if (_arg1 == null){
                return (null);
            };
            _local2 = new (GeocodingResponse)();
            _local2.name = _arg1.name;
            _local2.placemarks = Wrapper.instance().wrapPlacemarkArray(_arg1.placemarks);
            Wrapper.copyObject(_local2, _arg1);
            return (_local2);
        }

    }
}//package com.google.maps.services 
﻿package com.google.maps.services {

    public class ServiceStatus {

        public static const GEO_ABORTED_REQUEST:Number = 10101;
        public static const GEO_BAD_REQUEST:Number = 400;
        public static const GEO_MISSING_QUERY:Number = 601;
        public static const GEO_MISSING_ADDRESS:Number = 601;
        public static const GEO_BAD_KEY:Number = 610;
        public static const GEO_SUCCESS:Number = 200;
        public static const GEO_UNAVAILABLE_ADDRESS:Number = 603;
        public static const GEO_UNKNOWN_ADDRESS:Number = 602;
        public static const GEO_SERVER_ERROR:Number = 500;
        public static const GEO_BAD_STATUS_START:Number = 600;
        public static const GEO_UNKNOWN_DIRECTIONS:Number = 604;
        public static const GEO_TOO_MANY_QUERIES:Number = 620;

    }
}//package com.google.maps.services 
﻿package com.google.maps.services {
    import com.google.maps.*;
    import flash.events.*;
    import com.google.maps.interfaces.*;
    import com.google.maps.wrappers.*;

    public final class DirectionsEvent extends MapEvent {

        public static const DIRECTIONS_ABORTED:String = "directionsaborted";
        public static const DIRECTIONS_SUCCESS:String = "directionssuccess";
        public static const DIRECTIONS_FAILURE:String = "directionsfailure";

        public var name:String;
        public var status:Number;
        public var request:String;

        public function DirectionsEvent(_arg1:String, _arg2:IDirections, _arg3:Boolean=false, _arg4:Boolean=false){
            super(_arg1, _arg2, _arg3, _arg4);
        }
        protected static function wrapDirections(_arg1:Object):IDirections{
            return (IDirections(Wrapper.instance().wrap(_arg1, null, IDirections, null)));
        }
        public static function fromCrossDomainEvent(_arg1:Event, _arg2:Object):DirectionsEvent{
            var _local3:DirectionsEvent;
            _local3 = (_arg1 as DirectionsEvent);
            if (((!((_local3 == null))) && ((_arg2 == _local3.target)))){
                return (_local3);
            };
            _local3 = new DirectionsEvent(_arg1.type, wrapDirections(getEventFeature(_arg1)), _arg1.bubbles, _arg1.cancelable);
            _local3.copyEventData(_arg1, _arg2);
            return (_local3);
        }

        public function get directions():Directions{
            return ((this.feature as Directions));
        }
        override public function get eventClassChain():Array{
            return (["DirectionsEvent", "MapEvent"]);
        }
        override protected function copyEventData(_arg1:Event, _arg2:Object):void{
            var _local3:Object;
            super.copyEventData(_arg1, _arg2);
            _local3 = Object(_arg1);
            this.name = (_local3.name as String);
            this.request = (_local3.request as String);
            this.status = (_local3.status as Number);
        }

    }
}//package com.google.maps.services 
﻿package com.google.maps {

    public class CopyrightNotice {

        private var prefix:String;
        private var copyrightTexts:Array;

        public function CopyrightNotice(_arg1:String, _arg2:Array){
            this.prefix = _arg1;
            this.copyrightTexts = _arg2;
        }
        public static function fromObject(_arg1:Object):CopyrightNotice{
            if (_arg1 == null){
                return (null);
            };
            return (new CopyrightNotice(_arg1.getPrefix(), _arg1.getTexts()));
        }

        public function getTexts():Array{
            return (this.copyrightTexts);
        }
        public function getPrefix():String{
            return (this.prefix);
        }
        public function toString():String{
            return (((this.prefix + " ") + this.copyrightTexts.join(", ")));
        }

    }
}//package com.google.maps 
﻿package com.google.maps {

    public final class PConstants {

        public static const HYBRID_MAP_URL_ARG:String = "k";
        public static const TERMS_OF_USE_ID:String = "terms";
        public static const SATELLITE_MAP_TYPE_NAME:String = "satellite";
        public static const MAX_RESOLUTION_MAP:Number = 30;
        public static const NORMAL_MAP_ABBR_ID:String = "normal_map_abbreviated";
        public static const MAX_RESOLUTION_PHYSICAL:Number = 30;
        public static const HYBRID_MAP_NAME_ID:String = "hybrid_map";
        public static const DEFAULT_RESOLUTION_MAP:Number = 17;
        public static const HYBRID_MAP_ALT_ID:String = "show_imagery_with_street_names";
        public static const SATELLITE_MAP_ERROR_ID:String = "keyhole_error_tile";
        public static const ZOOM_LEVEL_LIMIT:Number = (Math.max(MAX_RESOLUTION_MAP, MAX_RESOLUTION_SATELLITE) + 1);
        public static const SATELLITE_MAP_URL_ARG:String = "k";
        public static const DEFAULT_PANNING_DISTANCE:Number = 100;
        public static const HYBRID_MAP_ABBR_ID:String = "hybrid_map_abbreviated";
        public static const DEFAULT_RESOLUTION_SATELLITE:Number = 19;
        public static const SATELLITE_MAP_ALT_ID:String = "show_satellite_imagery";
        public static const SATELLITE_MAP_NAME_ID:String = "keyhole_map";
        public static const HYBRID_MAP_TYPE_NAME:String = "hybrid";
        public static const SATELLITE_COPYRIGHT_PREFIX_ID:String = "satellite_prefix";
        public static const UNIMPLEMENTED_METHOD:String = "Method not implemented";
        public static const PHYSICAL_MAP_TYPE_NAME:String = "physical";
        public static const SATELLITE_MAP_ABBR_ID:String = "keyhole_map_abbreviated";
        public static const GOOGLE_COPYRIGHT_PREFIX_ID:String = "google";
        public static const NORMAL_MAP_ALT_ID:String = "show_street_map";
        public static const MAP_COPYRIGHT_PREFIX_ID:String = "map_prefix";
        public static const MASTER_NAME:String = "com_google_maps_Master";
        public static const NORMAL_MAP_TYPE_NAME:String = "normal";
        public static const PHYSICAL_MAP_URL_ARG:String = "p";
        public static const NORMAL_MAP_ERROR_ID:String = "map_error_tile";
        public static const NOT_IMPLEMENTED:String = "Required interface method not implemented";
        public static const PHYSICAL_MAP_ALT_ID:String = "show_street_map_with_terrain";
        public static const PHYSICAL_MAP_NAME_ID:String = "terrain_map";
        public static const MAX_RESOLUTION_SATELLITE:Number = 30;
        public static const NORMAL_MAP_URL_ARG:String = "m";
        public static const DEFAULT_RESOLUTION_PHYSICAL:Number = 17;
        public static const NORMAL_MAP_NAME_ID:String = "normal_map";
        public static const PHYSICAL_MAP_ABBR_ID:String = "terrain_map_abbreviated";

    }
}//package com.google.maps 
﻿package com.google.maps {
    import com.google.maps.styles.*;
    import com.google.maps.interfaces.*;
    import com.google.maps.wrappers.*;

    public class MapOptions {

        private var _crosshairsStrokeStyle:StrokeStyle;
        private var _controlByKeyboard:Object;
        private var _backgroundFillStyle:FillStyle;
        private var _continuousZoom:Object;
        private var _dragging:Object;
        private var _crosshairs:Object;
        private var _zoom:Object;
        private var _doubleClickMode:Object;
        private var _overlayRaising:Object;
        private var _mouseClickRange:Object;
        private var _mapTypes:Array;
        private var _mapType:IMapType;
        private var _center:LatLng;

        public function MapOptions(_arg1:Object=null){
            if (_arg1 != null){
                this.copyFromObject(_arg1);
            };
        }
        public static function merge(_arg1:Array):MapOptions{
            return ((Wrapper.mergeStyles(MapOptions, _arg1) as MapOptions));
        }
        public static function fromObject(_arg1:Object):MapOptions{
            var _local2:MapOptions;
            if (_arg1 == null){
                return (null);
            };
            _local2 = new (MapOptions)();
            _local2.copyFromObject(_arg1);
            return (_local2);
        }

        public function get continuousZoom():Object{
            return (this._continuousZoom);
        }
        public function set continuousZoom(_arg1:Object):void{
            this._continuousZoom = (_arg1 as Boolean);
        }
        public function get crosshairsStrokeStyle():StrokeStyle{
            return (this._crosshairsStrokeStyle);
        }
        public function set crosshairsStrokeStyle(_arg1:StrokeStyle):void{
            this._crosshairsStrokeStyle = _arg1;
        }
        public function get crosshairs():Object{
            return (this._crosshairs);
        }
        public function get mouseClickRange():Object{
            return (this._mouseClickRange);
        }
        public function get controlByKeyboard():Object{
            return (this._controlByKeyboard);
        }
        public function set dragging(_arg1:Object):void{
            this._dragging = (_arg1 as Boolean);
        }
        public function set crosshairs(_arg1:Object):void{
            this._crosshairs = (_arg1 as Boolean);
        }
        public function set zoom(_arg1:Object):void{
            this._zoom = (_arg1 as Number);
        }
        public function get doubleClickMode():Object{
            return (this._doubleClickMode);
        }
        public function set center(_arg1:LatLng):void{
            this._center = _arg1;
        }
        public function set mouseClickRange(_arg1:Object):void{
            this._mouseClickRange = (_arg1 as Number);
        }
        public function set controlByKeyboard(_arg1:Object):void{
            this._controlByKeyboard = (_arg1 as Boolean);
        }
        public function get overlayRaising():Object{
            return (this._overlayRaising);
        }
        public function get mapType():IMapType{
            return (this._mapType);
        }
        public function set backgroundFillStyle(_arg1:FillStyle):void{
            this._backgroundFillStyle = _arg1;
        }
        public function get dragging():Object{
            return (this._dragging);
        }
        public function get zoom():Object{
            return (this._zoom);
        }
        public function get center():LatLng{
            return (this._center);
        }
        public function copyFromObject(_arg1:Object):void{
            Wrapper.copyProperties(this, _arg1, ["zoom", "doubleClickMode"], Number);
            Wrapper.copyProperties(this, _arg1, ["mouseClickRange"], Number, true);
            Wrapper.copyProperties(this, _arg1, ["crosshairs", "controlByKeyboard", "overlayRaising", "dragging", "continuousZoom"], Boolean);
            if (_arg1.backgroundFillStyle != null){
                if (this.backgroundFillStyle == null){
                    this.backgroundFillStyle = new FillStyle();
                };
                this.backgroundFillStyle.copyFromObject(_arg1.backgroundFillStyle);
            };
            if (_arg1.crosshairsStrokeStyle != null){
                if (this.crosshairsStrokeStyle == null){
                    this.crosshairsStrokeStyle = new StrokeStyle();
                };
                this.crosshairsStrokeStyle.copyFromObject(_arg1.crosshairsStrokeStyle);
            };
            if (_arg1.mapType){
                this.mapType = Wrapper.instance().wrapIMapType(_arg1.mapType);
            };
            if (_arg1.mapTypes != null){
                this.mapTypes = Wrapper.instance().wrapIMapTypeArray(_arg1.mapTypes);
            };
            if (_arg1.center != null){
                this.center = LatLng.fromObject(_arg1.center);
            };
        }
        public function get backgroundFillStyle():FillStyle{
            return (this._backgroundFillStyle);
        }
        public function set mapType(_arg1:IMapType):void{
            this._mapType = _arg1;
        }
        public function set overlayRaising(_arg1:Object):void{
            this._overlayRaising = (_arg1 as Boolean);
        }
        public function toString():String{
            return (((((((((((((((((((((((((((("MapOptions: {" + "\n\tbackgroundFillStyle: ") + this._backgroundFillStyle) + "\n\tcrosshairs: ") + this._crosshairs) + "\n\tcrosshairsStrokeStyle: ") + this._crosshairsStrokeStyle) + "\n\tcontrolByKeyboard: ") + this._controlByKeyboard) + "\n\toverlayRaising: ") + this._overlayRaising) + "\n\tdoubleClickMode: ") + this._doubleClickMode) + "\n\tdragging: ") + this._dragging) + "\n\tcontinuousZoom: ") + this._continuousZoom) + "\n\tmapType: ") + this._mapType) + "\n\tmapTypes: ") + this._mapTypes) + "\n\tcenter: ") + this._center) + "\n\tzoom: ") + this._zoom) + "\n\tmouseClickRange: ") + this._mouseClickRange) + "\n\t}"));
        }
        public function set doubleClickMode(_arg1:Object):void{
            this._doubleClickMode = (_arg1 as Number);
        }
        public function set mapTypes(_arg1:Array):void{
            this._mapTypes = _arg1;
        }
        public function get mapTypes():Array{
            return (this._mapTypes);
        }

    }
}//package com.google.maps 
﻿package com.google.maps {

    public class MapUtil {

        public static const FLOAT_ERROR_MARGIN:Number = 1E-9;

        public static function calculateLatLngBounds(_arg1:Array):LatLngBounds{
            var _local2:LatLngBounds;
            var _local3:Number;
            if (((!((_arg1 == null))) && ((_arg1.length > 0)))){
                _local2 = new LatLngBounds();
                _local3 = 0;
                while (_local3 < _arg1.length) {
                    _local2.extend(_arg1[_local3]);
                    _local3++;
                };
                return (_local2);
            };
            return (null);
        }
        public static function wrapHalfOpen(_arg1:Number, _arg2:Number, _arg3:Number):Number{
            while (_arg1 >= _arg3) {
                _arg1 = (_arg1 - (_arg3 - _arg2));
            };
            while (_arg1 < _arg2) {
                _arg1 = (_arg1 + (_arg3 - _arg2));
            };
            return (_arg1);
        }
        public static function wrap(_arg1:Number, _arg2:Number, _arg3:Number):Number{
            while (_arg1 > _arg3) {
                _arg1 = (_arg1 - (_arg3 - _arg2));
            };
            while (_arg1 < _arg2) {
                _arg1 = (_arg1 + (_arg3 - _arg2));
            };
            return (_arg1);
        }
        public static function wrapPeriod(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):Number{
            while (_arg1 > _arg3) {
                _arg1 = (_arg1 - _arg4);
            };
            while (_arg1 < _arg2) {
                _arg1 = (_arg1 + _arg4);
            };
            return (_arg1);
        }
        public static function getBooleanOrDefault(_arg1:Object, _arg2:String, _arg3:Boolean=false):Boolean{
            if (_arg1.hasOwnProperty(_arg2)){
                return ((_arg1[_arg2] as Boolean));
            };
            return (_arg3);
        }
        public static function hasNonNullProperty(_arg1:Object, _arg2:String):Boolean{
            if (_arg1.hasOwnProperty(_arg2)){
                return (!((_arg1[_arg2] == null)));
            };
            return (false);
        }
        public static function copyObject(_arg1:Object, _arg2:Object):void{
            var _local3:Object;
            for (_local3 in _arg2) {
                _arg1[_local3] = _arg2[_local3];
            };
        }
        public static function degreesToRadians(_arg1:Number):Number{
            return ((_arg1 * (Math.PI / 180)));
        }
        public static function approxEquals(_arg1:Number, _arg2:Number, _arg3:Number=1E-9):Boolean{
            return ((Math.abs((_arg1 - _arg2)) <= _arg3));
        }
        public static function radiansToDegrees(_arg1:Number):Number{
            return ((_arg1 / (Math.PI / 180)));
        }
        public static function cloneObject(_arg1:Object):Object{
            var _local2:Object;
            var _local3:Object;
            _local2 = new Object();
            for (_local3 in _arg1) {
                _local2[_local3] = _arg1[_local3];
            };
            return (_local2);
        }
        public static function bound(_arg1:Number, _arg2:Number=NaN, _arg3:Number=NaN):Number{
            if (!isNaN(_arg2)){
                _arg1 = Math.max(_arg1, _arg2);
            };
            if (!isNaN(_arg3)){
                _arg1 = Math.min(_arg1, _arg3);
            };
            return (_arg1);
        }

    }
}//package com.google.maps 
﻿package com.google.maps {
    import flash.events.*;

    public class MapZoomEvent extends MapEvent {

        public static const CONTINUOUS_ZOOM_START:String = "mapevent_continuouszoomstart";
        public static const CONTINUOUS_ZOOM_STEP:String = "mapevent_continuouszoomstep";
        public static const ZOOM_CHANGED:String = "mapevent_zoomchanged";
        public static const ZOOM_RANGE_CHANGED:String = "mapevent_zoomrangechanged";
        public static const ZOOM_END:String = "mapevent_zoomend";
        public static const ZOOM_START:String = "mapevent_zoomstart";
        public static const ZOOM_STEP:String = "mapevent_zoomstep";
        public static const CONTINUOUS_ZOOM_END:String = "mapevent_continuouszoomend";

        private var eventZoomLevel:Number;

        public function MapZoomEvent(_arg1:String, _arg2:Number, _arg3:Boolean=false, _arg4:Boolean=false){
            super(_arg1, null, _arg3, _arg4);
            this.eventZoomLevel = _arg2;
        }
        public static function fromCrossDomainEvent(_arg1:Event, _arg2:Object):MapZoomEvent{
            var _local3:MapZoomEvent;
            _local3 = (_arg1 as MapZoomEvent);
            if (((!((_local3 == null))) && ((_arg2 == _local3.target)))){
                return (_local3);
            };
            _local3 = new MapZoomEvent(_arg1.type, Object(_arg1).zoomLevel, _arg1.bubbles, _arg1.cancelable);
            _local3.copyEventData(_arg1, _arg2);
            return (_local3);
        }

        override public function clone():Event{
            return (((this.crossDomainEvent) ? fromCrossDomainEvent(crossDomainEvent.clone(), null) : new MapZoomEvent(this.type, this.zoomLevel, this.bubbles, this.cancelable)));
        }
        override public function get eventClassChain():Array{
            return (["MapZoomEvent", "MapEvent"]);
        }
        public function get zoomLevel():Number{
            return (this.eventZoomLevel);
        }
        override public function toString():String{
            return ((((((((("[MapZoomEvent type=" + this.type) + " zoomLevel=") + this.zoomLevel) + " bubbles=") + this.bubbles) + " cancellable=") + this.cancelable) + "]"));
        }

    }
}//package com.google.maps 
﻿package com.google.maps {

    public final class Alpha {

        public static const PERCENT_80:Number = 0.8;
        public static const UNSEEN:Number = 0;
        public static const PERCENT_0:Number = 0;
        public static const PERCENT_100:Number = 1;
        public static const PERCENT_20:Number = 0.2;
        public static const PERCENT_60:Number = 0.6;
        public static const PERCENT_40:Number = 0.4;
        public static const OPAQUE:Number = 1;
        public static const PERCENT_90:Number = 0.9;
        public static const PERCENT_30:Number = 0.3;
        public static const PERCENT_10:Number = 0.1;
        public static const PERCENT_70:Number = 0.7;
        public static const PERCENT_50:Number = 0.5;

    }
}//package com.google.maps 
﻿package com.google.maps.overlays {
    import com.google.maps.*;
    import com.google.maps.styles.*;
    import com.google.maps.wrappers.*;

    public class PolygonOptions {

        private var toolTip:String;
        public var fillStyle:FillStyle;
        public var strokeStyle:StrokeStyle;

        public function PolygonOptions(_arg1:Object=null){
            if (_arg1 != null){
                this.copyFromObject(_arg1);
            };
        }
        public static function merge(_arg1:Array):PolygonOptions{
            return ((Wrapper.mergeStyles(PolygonOptions, _arg1) as PolygonOptions));
        }
        public static function fromObject(_arg1:Object):PolygonOptions{
            var _local2:PolygonOptions;
            if (_arg1 == null){
                return (null);
            };
            _local2 = new (PolygonOptions)();
            _local2.copyFromObject(_arg1);
            return (_local2);
        }
        public static function getDefaultOptions():PolygonOptions{
            var _local1:ClientBootstrap;
            _local1 = ClientBootstrap.getInstance();
            return (_local1.getMapsFactory().getDefaultPolygonOptions());
        }
        public static function setDefaultOptions(_arg1:PolygonOptions):void{
            var _local2:ClientBootstrap;
            _local2 = ClientBootstrap.getInstance();
            _local2.getMapsFactory().setDefaultPolygonOptions(_arg1);
        }

        public function get tooltip():String{
            return (this.toolTip);
        }
        public function toString():String{
            return ((((((("PolygonOptions: { strokeStyle: " + this.strokeStyle) + " fillStyle: ") + this.fillStyle) + " toolTip: ") + this.toolTip) + "}"));
        }
        public function set tooltip(_arg1:String):void{
            this.toolTip = _arg1;
        }
        public function copyFromObject(_arg1:Object):void{
            if (_arg1.strokeStyle != null){
                if (this.strokeStyle == null){
                    this.strokeStyle = new StrokeStyle();
                };
                this.strokeStyle.copyFromObject(_arg1.strokeStyle);
            };
            if (_arg1.fillStyle != null){
                if (this.fillStyle == null){
                    this.fillStyle = new FillStyle();
                };
                this.fillStyle.copyFromObject(_arg1.fillStyle);
            };
            Wrapper.copyProperties(this, _arg1, ["tooltip"], String, true);
        }

    }
}//package com.google.maps.overlays 
﻿package com.google.maps.overlays {

    public class EncodedPolylineData {

        public var zoomFactor:Number;
        public var points:String;
        public var levels:String;
        public var numLevels:Number;

        public function EncodedPolylineData(_arg1:String, _arg2:Number, _arg3:String, _arg4:Number){
            this.points = _arg1;
            this.zoomFactor = _arg2;
            this.levels = _arg3;
            this.numLevels = _arg4;
        }
        public static function fromObject(_arg1:Object):EncodedPolylineData{
            if (_arg1 == null){
                return (null);
            };
            return (new EncodedPolylineData(_arg1.points, _arg1.zoomFactor, _arg1.levels, _arg1.numLevels));
        }

    }
}//package com.google.maps.overlays 
﻿package com.google.maps.overlays {
    import com.google.maps.*;
    import flash.events.*;
    import com.google.maps.interfaces.*;
    import com.google.maps.wrappers.*;

    public class TileLayerOverlay extends ITileLayerOverlayWrapper implements ITileLayerOverlay, IEventDispatcher {

        public function TileLayerOverlay(_arg1:ITileLayer, _arg2:int=0x0100, _arg3:IProjection=null){
            var _local4:ClientBootstrap;
            var _local5:IMapsFactory;
            super();
            _local4 = ClientBootstrap.getInstance();
            _local5 = _local4.getMapsFactory();
            Wrapper.instance().wrap(_local5.createTileLayerOverlay(_arg1, _arg2, _arg3), this, ITileLayerOverlay, TileLayerOverlay);
        }
        override public function set pane(_arg1:IPane):void{
        }
        override public function get pane():IPane{
            return (super.pane);
        }

    }
}//package com.google.maps.overlays 
﻿package com.google.maps.overlays {
    import flash.display.*;
    import flash.events.*;
    import com.google.maps.interfaces.*;
    import com.google.maps.wrappers.*;
    import flash.utils.*;

    public class OverlayBase extends WrappableComponent implements IOverlay, IEventDispatcher {

        private var _pane:IPane;

        public function getDefaultPane(_arg1:IMap):IPane{
            throw (new Error(notImplemented("getDefaultPane")));
        }
        private function notImplemented(_arg1:String):String{
            return (((("Method not implemented: " + getQualifiedClassName(this)) + ".") + _arg1));
        }
        public function get shadow():DisplayObject{
            return (null);
        }
        public function get foreground():DisplayObject{
            return (this);
        }
        override public function get visible():Boolean{
            return (super.visible);
        }
        public function get pane():IPane{
            return (this._pane);
        }
        public function set pane(_arg1:IPane):void{
            this._pane = _arg1;
        }
        override public function set visible(_arg1:Boolean):void{
            super.visible = _arg1;
            if (this.shadow != null){
                this.shadow.visible = _arg1;
            };
        }
        public function positionOverlay(_arg1:Boolean):void{
            throw (new Error(notImplemented("positionOverlay")));
        }

    }
}//package com.google.maps.overlays 
﻿package com.google.maps.overlays {
    import com.google.maps.*;
    import com.google.maps.styles.*;
    import com.google.maps.wrappers.*;

    public class PolylineOptions {

        public var strokeStyle:StrokeStyle;
        private var _geodesic:Object;

        public function PolylineOptions(_arg1:Object=null){
            if (_arg1 != null){
                this.copyFromObject(_arg1);
            };
        }
        public static function merge(_arg1:Array):PolylineOptions{
            return ((Wrapper.mergeStyles(PolylineOptions, _arg1) as PolylineOptions));
        }
        public static function fromObject(_arg1:Object):PolylineOptions{
            var _local2:PolylineOptions;
            if (_arg1 == null){
                return (null);
            };
            _local2 = new (PolylineOptions)();
            _local2.copyFromObject(_arg1);
            return (_local2);
        }
        public static function getDefaultOptions():PolylineOptions{
            var _local1:ClientBootstrap;
            _local1 = ClientBootstrap.getInstance();
            return (_local1.getMapsFactory().getDefaultPolylineOptions());
        }
        public static function setDefaultOptions(_arg1:PolylineOptions):void{
            var _local2:ClientBootstrap;
            _local2 = ClientBootstrap.getInstance();
            _local2.getMapsFactory().setDefaultPolylineOptions(_arg1);
        }

        public function set geodesic(_arg1:Object):void{
            this._geodesic = (_arg1 as Boolean);
        }
        public function get geodesic():Object{
            return (this._geodesic);
        }
        public function toString():String{
            return (((("PolylineOptions:" + "\n\t{ strokeStyle: ") + this.strokeStyle) + " }"));
        }
        public function copyFromObject(_arg1:Object):void{
            if (_arg1.strokeStyle != null){
                if (this.strokeStyle == null){
                    this.strokeStyle = new StrokeStyle();
                };
                this.strokeStyle.copyFromObject(_arg1.strokeStyle);
            };
            Wrapper.copyProperties(this, _arg1, ["geodesic"], Boolean, true);
        }

    }
}//package com.google.maps.overlays 
﻿package com.google.maps.overlays {
    import flash.display.*;
    import com.google.maps.*;
    import flash.events.*;
    import com.google.maps.interfaces.*;
    import com.google.maps.wrappers.*;

    public class Polyline extends IPolylineWrapper implements IPolyline, IEventDispatcher {

        private static var CREATE_UNLINKED:Array = [];

        public function Polyline(_arg1:Array, _arg2:PolylineOptions=null){
            var _local3:ClientBootstrap;
            var _local4:IMapsFactory;
            super();
            if (_arg1 !== CREATE_UNLINKED){
                _local3 = ClientBootstrap.getInstance();
                _local4 = _local3.getMapsFactory();
                Wrapper.instance().wrap(_local4.createPolyline(_arg1, _arg2), this, IPolyline, Polyline);
            };
        }
        public static function fromEncoded(_arg1:EncodedPolylineData, _arg2:PolylineOptions=null):Polyline{
            var _local3:Polyline;
            var _local4:ClientBootstrap;
            var _local5:Object;
            _local3 = new Polyline(CREATE_UNLINKED, null);
            _local4 = ClientBootstrap.getInstance();
            _local5 = _local4.getMapsFactory();
            Wrapper.instance().wrap(_local5.createPolylineFromEncoded(_arg1.points, _arg1.zoomFactor, _arg1.levels, _arg1.numLevels, _arg2), _local3, IPolyline, Polyline);
            return (_local3);
        }

        override public function set pane(_arg1:IPane):void{
        }
        override public function get pane():IPane{
            return (super.pane);
        }
        public function getDisplayObject():DisplayObject{
            return (this.foreground);
        }

    }
}//package com.google.maps.overlays 
﻿package com.google.maps.overlays {
    import flash.display.*;
    import flash.text.*;
    import com.google.maps.*;
    import com.google.maps.styles.*;
    import com.google.maps.interfaces.*;
    import flash.geom.*;
    import com.google.maps.wrappers.*;

    public class MarkerOptions {

        public static const ALIGN_LEFT:Number = 0;
        public static const ALIGN_VERTICAL_CENTER:Number = 16;
        public static const ALIGN_BOTTOM:Number = 32;
        public static const ALIGN_RIGHT:Number = 2;
        public static const ALIGN_HORIZONTAL_CENTER:Number = 1;
        public static const ALIGN_TOP:Number = 0;

        private var _iconOffset:Point;
        private var _draggable:Object;
        private var _gravity:Object;
        private var _strokeStyle:StrokeStyle;
        private var _radius:Object;
        private var _tooltip:String;
        private var _labelFormat:TextFormat;
        private var _icon:DisplayObject;
        private var _hasShadow:Object;
        private var _clickable:Object;
        private var _iconAlignment:Object;
        private var _fillStyle:FillStyle;
        private var _label:String;

        public function MarkerOptions(_arg1:Object=null){
            if (_arg1 != null){
                this.copyFromObject(_arg1);
            };
        }
        public static function fromObject(_arg1:Object):MarkerOptions{
            var _local2:MarkerOptions;
            if (_arg1 == null){
                return (null);
            };
            _local2 = new (MarkerOptions)();
            _local2.copyFromObject(_arg1);
            return (_local2);
        }
        public static function getDefaultOptions():MarkerOptions{
            var _local1:IMapsFactory;
            _local1 = ClientBootstrap.getInstance().getMapsFactory();
            return (_local1.getDefaultMarkerOptions());
        }
        public static function merge(_arg1:Array):MarkerOptions{
            return ((Wrapper.mergeStyles(MarkerOptions, _arg1) as MarkerOptions));
        }
        public static function setDefaultOptions(_arg1:MarkerOptions):void{
            var _local2:IMapsFactory;
            if (_arg1._icon != null){
                throw (new Error("Cannot specify a custom icon in default MarkerOptions"));
            };
            _local2 = ClientBootstrap.getInstance().getMapsFactory();
            _local2.setDefaultMarkerOptions(_arg1);
        }

        public function get tooltip():String{
            return (this._tooltip);
        }
        public function set tooltip(_arg1:String):void{
            this._tooltip = _arg1;
        }
        public function get draggable():Object{
            return (this._draggable);
        }
        public function get labelFormat():TextFormat{
            return (this._labelFormat);
        }
        public function get radius():Object{
            return (this._radius);
        }
        public function set gravity(_arg1:Object):void{
            this._gravity = (_arg1 as Number);
        }
        public function set draggable(_arg1:Object):void{
            this._draggable = (_arg1 as Boolean);
        }
        public function set radius(_arg1:Object):void{
            this._radius = (_arg1 as Number);
        }
        public function set labelFormat(_arg1:TextFormat):void{
            this._labelFormat = _arg1;
        }
        public function set strokeStyle(_arg1:StrokeStyle):void{
            this._strokeStyle = _arg1;
        }
        public function set hasShadow(_arg1:Object):void{
            this._hasShadow = (_arg1 as Boolean);
        }
        public function set clickable(_arg1:Object):void{
            this._clickable = (_arg1 as Boolean);
        }
        public function get gravity():Object{
            return (this._gravity);
        }
        public function set iconAlignment(_arg1:Object):void{
            this._iconAlignment = _arg1;
        }
        public function get strokeStyle():StrokeStyle{
            return (this._strokeStyle);
        }
        public function get hasShadow():Object{
            return (this._hasShadow);
        }
        public function set fillStyle(_arg1:FillStyle):void{
            this._fillStyle = _arg1;
        }
        public function set iconOffset(_arg1:Point):void{
            this._iconOffset = ((_arg1)!=null) ? new Point(_arg1.x, _arg1.y) : null;
        }
        public function copyFromObject(_arg1:Object):void{
            Wrapper.copyProperties(this, _arg1, ["radius", "gravity", "iconAlignment"], Number);
            Wrapper.copyProperties(this, _arg1, ["hasShadow", "draggable"], Boolean);
            Wrapper.copyProperties(this, _arg1, ["clickable"], Boolean, true);
            Wrapper.copyProperties(this, _arg1, ["label", "tooltip"], String);
            Wrapper.copyProperties(this, _arg1, ["iconOffset"], Point);
            Wrapper.copyProperties(this, _arg1, ["icon"], DisplayObject);
            if (_arg1.strokeStyle != null){
                if (this.strokeStyle == null){
                    this.strokeStyle = new StrokeStyle();
                };
                this.strokeStyle.copyFromObject(_arg1.strokeStyle);
            };
            if (_arg1.fillStyle != null){
                if (this.fillStyle == null){
                    this.fillStyle = new FillStyle();
                };
                this.fillStyle.copyFromObject(_arg1.fillStyle);
            };
            if (_arg1.labelFormat != null){
                if (this.labelFormat == null){
                    this.labelFormat = new TextFormat();
                };
                Wrapper.copyTextFormatProperties(this.labelFormat, _arg1.labelFormat);
            };
        }
        public function set label(_arg1:String):void{
            this._label = _arg1;
            if (this._label != null){
                this._icon = null;
            };
        }
        public function get clickable():Object{
            return (this._clickable);
        }
        public function get iconOffset():Point{
            return (this._iconOffset);
        }
        public function get fillStyle():FillStyle{
            return (this._fillStyle);
        }
        public function get iconAlignment():Object{
            return (this._iconAlignment);
        }
        public function set icon(_arg1:DisplayObject):void{
            this._icon = _arg1;
            if (this._icon != null){
                this._label = null;
            };
        }
        public function toString():String{
            return (((((((((((((((((((((((((((("MarkerOptions:" + "\n\t{ strokeStyle: ") + this._strokeStyle) + "\n\t  fillStyle: ") + this._fillStyle) + "\n\t  label: ") + this._label) + "\n\t  labelFormat: ") + this._labelFormat) + "\n\t  tooltip: ") + this._tooltip) + "\n\t  radius: ") + this._radius) + "\n\t  hasShadow: ") + this._hasShadow) + "\n\t  clickable: ") + this._clickable) + "\n\t  draggable: ") + this._draggable) + "\n\t  gravity: ") + this._gravity) + "\n\t  icon: ") + this._icon) + "\n\t  iconAlignment: ") + this._iconAlignment) + "\n\t  iconOffset: ") + this._iconOffset) + " }"));
        }
        public function get label():String{
            return (this._label);
        }
        public function get icon():DisplayObject{
            return (this._icon);
        }

    }
}//package com.google.maps.overlays 
﻿package com.google.maps.overlays {
    import flash.display.*;
    import com.google.maps.*;
    import flash.events.*;
    import com.google.maps.interfaces.*;
    import com.google.maps.wrappers.*;

    public class Marker extends IMarkerWrapper implements IMarker, IEventDispatcher {

        public function Marker(_arg1:LatLng, _arg2:MarkerOptions=null){
            var _local3:ClientBootstrap;
            var _local4:IMapsFactory;
            super();
            _local3 = ClientBootstrap.getInstance();
            _local4 = _local3.getMapsFactory();
            Wrapper.instance().wrap(_local4.createMarker(_arg1, _arg2), this, IMarker, Marker);
        }
        override public function set pane(_arg1:IPane):void{
        }
        override public function get pane():IPane{
            return (super.pane);
        }
        public function getDisplayObject():DisplayObject{
            return (this.foreground);
        }

    }
}//package com.google.maps.overlays 
﻿package com.google.maps.overlays {
    import flash.display.*;
    import com.google.maps.*;
    import flash.events.*;
    import com.google.maps.interfaces.*;
    import com.google.maps.wrappers.*;

    public class GroundOverlay extends IGroundOverlayWrapper implements IGroundOverlay, IEventDispatcher {

        public function GroundOverlay(_arg1:DisplayObject, _arg2:LatLngBounds, _arg3:GroundOverlayOptions=null){
            var _local4:ClientBootstrap;
            var _local5:IMapsFactory;
            super();
            _local4 = ClientBootstrap.getInstance();
            _local5 = _local4.getMapsFactory();
            Wrapper.instance().wrap(_local5.createGroundOverlay(_arg1, _arg2, _arg3), this, IGroundOverlay, GroundOverlay);
        }
        override public function set pane(_arg1:IPane):void{
        }
        override public function get pane():IPane{
            return (super.pane);
        }
        public function getDisplayObject():DisplayObject{
            return (this.foreground);
        }

    }
}//package com.google.maps.overlays 
﻿package com.google.maps.overlays {
    import flash.display.*;
    import com.google.maps.*;
    import flash.events.*;
    import com.google.maps.interfaces.*;
    import com.google.maps.wrappers.*;

    public class Polygon extends IPolygonWrapper implements IPolygon, IEventDispatcher {

        private static var CREATE_UNLINKED:Array = [];

        public function Polygon(_arg1:Array, _arg2:PolygonOptions=null){
            var _local3:ClientBootstrap;
            var _local4:IMapsFactory;
            super();
            if (_arg1 !== CREATE_UNLINKED){
                _local3 = ClientBootstrap.getInstance();
                _local4 = _local3.getMapsFactory();
                Wrapper.instance().wrap(_local4.createPolygon(_arg1, _arg2), this, IPolygon, Polygon);
            };
        }
        public static function fromEncoded(_arg1:Array, _arg2:PolygonOptions=null):Polygon{
            var _local3:Polygon;
            var _local4:ClientBootstrap;
            var _local5:Object;
            _local3 = new Polygon(CREATE_UNLINKED);
            _local4 = ClientBootstrap.getInstance();
            _local5 = _local4.getMapsFactory();
            Wrapper.instance().wrap(_local5.createPolygonFromEncoded(_arg1, _arg2), _local3, IPolygon, Polygon);
            return (_local3);
        }

        override public function set pane(_arg1:IPane):void{
        }
        override public function get pane():IPane{
            return (super.pane);
        }
        public function getDisplayObject():DisplayObject{
            return (this.foreground);
        }

    }
}//package com.google.maps.overlays 
﻿package com.google.maps.overlays {
    import com.google.maps.*;
    import com.google.maps.styles.*;
    import com.google.maps.interfaces.*;
    import flash.geom.*;
    import com.google.maps.wrappers.*;

    public class GroundOverlayOptions {

        private var _strokeStyle:StrokeStyle;
        private var _rotationContentCenter:Point;
        private var _rotation:Object;

        public function GroundOverlayOptions(_arg1:Object=null){
            if (_arg1 != null){
                this.copyFromObject(_arg1);
            };
        }
        public static function merge(_arg1:Array):GroundOverlayOptions{
            return ((Wrapper.mergeStyles(GroundOverlayOptions, _arg1) as GroundOverlayOptions));
        }
        public static function fromObject(_arg1:Object):GroundOverlayOptions{
            var _local2:GroundOverlayOptions;
            if (_arg1 == null){
                return (null);
            };
            _local2 = new (GroundOverlayOptions)();
            _local2.copyFromObject(_arg1);
            return (_local2);
        }
        public static function getDefaultOptions():GroundOverlayOptions{
            var _local1:IMapsFactory;
            _local1 = ClientBootstrap.getInstance().getMapsFactory();
            return (_local1.getDefaultGroundOverlayOptions());
        }
        public static function setDefaultOptions(_arg1:GroundOverlayOptions):void{
            var _local2:IMapsFactory;
            _local2 = ClientBootstrap.getInstance().getMapsFactory();
            _local2.setDefaultGroundOverlayOptions(_arg1);
        }

        public function set rotationContentCenter(_arg1:Point):void{
            this._rotationContentCenter = ((_arg1)!=null) ? new Point(_arg1.x, _arg1.y) : null;
        }
        public function copyFromObject(_arg1:Object):void{
            Wrapper.copyProperties(this, _arg1, ["rotation"], Number);
            if (_arg1.strokeStyle != null){
                if (this.strokeStyle == null){
                    this.strokeStyle = new StrokeStyle();
                };
                this.strokeStyle.copyFromObject(_arg1.strokeStyle);
            };
            if (MapUtil.hasNonNullProperty(_arg1, "rotationContentCenter")){
                if (this.rotationContentCenter == null){
                    this.rotationContentCenter = new Point();
                };
                Wrapper.copyPointProperties(this.rotationContentCenter, _arg1.rotationContentCenter);
            };
        }
        public function toString():String{
            return (((((((("GroundOverlayOptions:" + "\n\t{ strokeStyle: ") + this._strokeStyle) + "\n\t  rotation: ") + this._rotation) + "\n\t  rotationContentCenter: ") + this._rotationContentCenter) + " }"));
        }
        public function get rotationContentCenter():Point{
            return (this._rotationContentCenter);
        }
        public function set strokeStyle(_arg1:StrokeStyle):void{
            this._strokeStyle = _arg1;
        }
        public function get strokeStyle():StrokeStyle{
            return (this._strokeStyle);
        }
        public function set rotation(_arg1:Object):void{
            this._rotation = (_arg1 as Number);
        }
        public function get rotation():Object{
            return (this._rotation);
        }

    }
}//package com.google.maps.overlays 
﻿package com.google.maps {
    import flash.display.*;
    import com.google.maps.*;

    class ClientBootstrapSprite extends Sprite {

        private var bootstrapLoader:Loader;
        private var urlCallback:Function;

        public function ClientBootstrapSprite(){
            this.name = PConstants.MASTER_NAME;
        }
        public function release():void{
            while (this.numChildren != 0) {
                this.removeChild(this.getChildAt(0));
            };
        }
        public function setUrlCallback(_arg1:Function):void{
            this.urlCallback = _arg1;
        }
        public function getBootstrapConfiguration():Object{
            return (BootstrapConfiguration.getInstance());
        }
        public function setBootstrapLoader(_arg1:Loader):void{
            this.bootstrapLoader = _arg1;
        }
        public function setUrl(_arg1:String):void{
            this.urlCallback(_arg1);
        }
        public function getBootstrapLoader():Loader{
            return (this.bootstrapLoader);
        }

    }
}//package com.google.maps 
﻿package com.google.maps {
    import flash.display.*;
    import com.google.maps.interfaces.*;
    import flash.geom.*;
    import com.google.maps.wrappers.*;
    import flash.errors.*;

    public class TileLayerBase extends WrapperBase implements ITileLayer {

        private var copyrightCollection:ICopyrightCollection;
        private var alpha:Number;
        private var minResolution:Number;
        private var maxResolution:Number;
        private var mapType:IMapType;

        public function TileLayerBase(_arg1:ICopyrightCollection, _arg2:Number=NaN, _arg3:Number=NaN, _arg4:Number=1){
            if (_arg1 == null){
                throw (new IllegalOperationError("Copyright collection must be provided"));
            };
            this.copyrightCollection = _arg1;
            this.alpha = _arg4;
            this.minResolution = ((isNaN(_arg2)) ? 0 : _arg2);
            this.maxResolution = ((isNaN(_arg3)) ? this.minResolution : _arg3);
            this.mapType = null;
        }
        override public function get interfaceChain():Array{
            return (["ITileLayer"]);
        }
        public function getCopyrightCollection():ICopyrightCollection{
            return (this.copyrightCollection);
        }
        public function getMapType():IMapType{
            return (this.mapType);
        }
        public function setMapType(_arg1:IMapType):void{
            this.mapType = _arg1;
        }
        public function getMinResolution():Number{
            return (this.minResolution);
        }
        public function loadTile(_arg1:Point, _arg2:Number):DisplayObject{
            throw (new IllegalOperationError(PConstants.UNIMPLEMENTED_METHOD));
        }
        public function getAlpha():Number{
            return (this.alpha);
        }
        public function getMaxResolution():Number{
            return (this.maxResolution);
        }

    }
}//package com.google.maps 
﻿package com.google.maps {
    import flash.display.*;
    import com.google.maps.*;
    import flash.net.*;
    import flash.system.*;
    import com.adobe.crypto.*;

    class BootstrapConfiguration {

        public static const DEFAULT_LOCAL_URL:String = "file://*";
        private static const HTML_PARAMS:Array = ["key", "client", "channel", "sensor", "language", "countryCode", "languages", "version"];
        private static const MFE_REQUEST_PARAMS:Array = ["key", "client", "channel"];
        private static const ERROR_UNKNOWN_AIR_URL:String = "Initialization failed: please specify an application URL.";
        private static const NATIVE_APPLICATION_NAME:String = "flash.desktop.NativeApplication";
        private static const ERROR_UNKNOWN_KEY:String = "Initialization failed: please specify an API key or client id.";
        private static const BOOTSTRAP_PATH:String = "/mapsapi/publicapi?file=flashapi";
        private static const BOOTSTRAP_PARAMS:Array = ["url", "key", "client", "channel", "sensor", "hl", "v", "vlib", "flpub", "flh", "fliburl", "flc"];
        private static const MAJOR_VERSION_DEFAULT:String = "1";
        private static const ERROR_CLIENT_BUT_NO_SENSOR:String = "Initialization failed: please specify sensor parameter.";

        private static var instance:BootstrapConfiguration;

        private var _acceptLanguageHeader:String;
        private var _version:String;
        private var _languages:String;
        private var _key:String;
        private var _locked:Boolean;
        private var _clientConfiguration:String;
        private var _url:String;
        private var nativeApplication:Object;
        private var _channel:String;
        private var _language:String;
        private var _mfeRequestParams:String;
        private var _sensor:String;
        private var _countryCode:String;
        private var _client:String;
        private var _hash:String;
        private var _stage:DisplayObject;

        public function BootstrapConfiguration(){
            var _local1:ApplicationDomain;
            var _local2:Class;
            super();
            _local1 = ApplicationDomain.currentDomain;
            if (_local1.hasDefinition(NATIVE_APPLICATION_NAME)){
                _local2 = (_local1.getDefinition(NATIVE_APPLICATION_NAME) as Class);
                this.nativeApplication = _local2["nativeApplication"];
            };
        }
        public static function getInstance():BootstrapConfiguration{
            if (BootstrapConfiguration.instance == null){
                BootstrapConfiguration.instance = new (BootstrapConfiguration)();
            };
            return (BootstrapConfiguration.instance);
        }

        public function get channel():String{
            return (this._channel);
        }
        private function get hl():String{
            return (this.language);
        }
        public function get stage():DisplayObject{
            return (this._stage);
        }
        public function set channel(_arg1:String):void{
            checkLocked(this._channel, _arg1);
            this._channel = _arg1;
        }
        public function set client(_arg1:String):void{
            checkLocked(this._client, _arg1);
            this._client = _arg1;
        }
        public function getBootstrapUrl():String{
            var _local1:String;
            var _local2:Array;
            var _local3:int;
            var _local4:String;
            var _local5:String;
            _local1 = "http://";
            _local1 = (_local1 + Release.mfeHost);
            _local1 = (_local1 + BootstrapConfiguration.BOOTSTRAP_PATH);
            _local2 = BootstrapConfiguration.BOOTSTRAP_PARAMS;
            _local3 = 0;
            while (_local3 < _local2.length) {
                _local4 = _local2[_local3];
                _local5 = this[_local4];
                if (_local5 != null){
                    _local1 = (_local1 + ((("&" + _local4) + "=") + encodeURIComponent(_local5)));
                };
                _local3++;
            };
            return (_local1);
        }
        public function get languages():String{
            return (this._languages);
        }
        public function initialize(_arg1:LoaderInfo, _arg2:DisplayObject):void{
            var _local3:Array;
            var _local4:Number;
            var _local5:String;
            var _local6:String;
            if (this._locked){
                return;
            };
            _local3 = BootstrapConfiguration.HTML_PARAMS;
            _local4 = 0;
            while (_local4 != _local3.length) {
                _local5 = _local3[_local4];
                _local6 = ClientUtil.getFlashVar(_arg1, _local5);
                if (_local6){
                    this[_local5] = _local6;
                };
                _local4++;
            };
            this._stage = _arg2;
            if (this.isAir()){
                this._hash = SHA1.hashBytes(_arg1["bytes"]);
            } else {
                this._url = _arg1.url;
            };
            this._clientConfiguration = getClientConfiguration();
        }
        public function get countryCode():String{
            return (this._countryCode);
        }
        public function lock(_arg1:Boolean=true):void{
            if (this._locked != _arg1){
                if (_arg1){
                    checkIsReady();
                };
                this._locked = _arg1;
            };
        }
        public function set version(_arg1:String):void{
            checkLocked(this._version, _arg1);
            this._version = _arg1;
        }
        private function getClientConfiguration():String{
            var _local1:String;
            _local1 = "";
            if (isAir()){
                _local1 = (_local1 + "a");
            };
            return (_local1);
        }
        public function set languages(_arg1:String):void{
            var _local2:Array;
            var _local3:String;
            var _local4:Number;
            var _local5:int;
            this._languages = _arg1;
            if (_arg1.search(/\d/) >= 0){
                this._acceptLanguageHeader = _arg1.toLowerCase();
            } else {
                _local2 = _arg1.split(",");
                _local3 = _local2[0];
                _local4 = 0.8;
                _local5 = 1;
                while (_local5 < _local2.length) {
                    _local3 = (_local3 + ((("," + _local2[_local5]) + ";q=") + _local4));
                    _local4 = Math.max(0.1, _local4);
                    _local4 = (_local4 - 0.1);
                    _local5++;
                };
                this._acceptLanguageHeader = _local3.toLowerCase();
            };
        }
        public function get sensor():String{
            return (this._sensor);
        }
        public function set key(_arg1:String):void{
            checkLocked(this._key, _arg1);
            this._key = _arg1;
        }
        public function set language(_arg1:String):void{
            checkLocked(this._language, _arg1);
            this._language = _arg1;
        }
        private function checkLocked(_arg1, _arg2):void{
            if (((this._locked) && (!((_arg1 == _arg2))))){
                throw (new Error("Configuration parameters can no longer be changed"));
            };
        }
        public function isAir():Boolean{
            return (!((this.nativeApplication == null)));
        }
        public function get client():String{
            return (this._client);
        }
        public function set countryCode(_arg1:String):void{
            checkLocked(this._countryCode, _arg1);
            this._countryCode = _arg1;
        }
        private function getMajorVersion():String{
            return (MAJOR_VERSION_DEFAULT);
        }
        private function get vlib():String{
            return (this.version);
        }
        public function getClientVersion():String{
            return (Release.version);
        }
        public function get fliburl():String{
            return (null);
        }
        public function set url(_arg1:String):void{
            if (isAir()){
                this._url = _arg1;
            };
        }
        public function get key():String{
            return (this._key);
        }
        public function get flh():String{
            return (this._hash);
        }
        public function getMfeRequestParams():String{
            var _local1:String;
            var _local2:Array;
            var _local3:Number;
            var _local4:String;
            if ((((this._mfeRequestParams == null)) || (!(this._locked)))){
                _local1 = "";
                _local2 = BootstrapConfiguration.MFE_REQUEST_PARAMS;
                _local3 = 0;
                while (_local3 != _local2.length) {
                    _local4 = _local2[_local3];
                    if (this[_local4] != null){
                        _local1 = (_local1 + ((("&" + _local4) + "=") + encodeURIComponent(this[_local4])));
                    };
                    _local3++;
                };
                if (this._locked){
                    this._mfeRequestParams = _local1;
                };
                return (_local1);
            };
            return (this._mfeRequestParams);
        }
        public function get version():String{
            return (this._version);
        }
        public function loadAddingAcceptLanguageHeaderIfAir(_arg1:Loader, _arg2:URLRequest, _arg3:LoaderContext):void{
            var _local4:Array;
            if (((isAir()) && (this._acceptLanguageHeader))){
                _local4 = [new URLRequestHeader("Accept-Language", this._acceptLanguageHeader)];
                if (_arg2.requestHeaders){
                    _local4 = _arg2.requestHeaders.concat(_local4);
                };
                _arg2.requestHeaders = _local4;
                _arg1.load(_arg2, _arg3);
                return;
            };
            _arg1.load(_arg2, _arg3);
        }
        public function get flc():String{
            return (this._clientConfiguration);
        }
        public function get url():String{
            if (this._url == null){
                return (null);
            };
            if ((((0 == this._url.search("file://"))) || ((0 == this._url.search(/https?:\/\/localhost(:\d+)?\//))))){
                return (DEFAULT_LOCAL_URL);
            };
            return (this._url);
        }
        public function get language():String{
            return (this._language);
        }
        private function checkIsReady():void{
            if (this.key == null){
                if (this.client == null){
                    throw (new Error(ERROR_UNKNOWN_KEY));
                };
                if (this.sensor == null){
                    throw (new Error(ERROR_CLIENT_BUT_NO_SENSOR));
                };
            };
            if (((((this.sensor) && (!((this.sensor == "false"))))) && (!((this.sensor == "true"))))){
                throw (new Error(((("Please set sensor to \"false\" or \"true\", " + "not \"") + this.sensor) + "\".")));
            };
            if (((this.isAir()) && ((this._url == null)))){
                throw (new Error(ERROR_UNKNOWN_AIR_URL));
            };
        }
        public function set sensor(_arg1:String):void{
            checkLocked(this._sensor, _arg1);
            this._sensor = _arg1;
        }
        private function get v():String{
            return (((getMajorVersion() + ".") + Release.version));
        }
        public function get flpub():String{
            if (this.nativeApplication != null){
                return (this.nativeApplication["publisherID"]);
            };
            return (null);
        }

    }
}//package com.google.maps 
﻿package com.google.maps {
    import flash.events.*;
    import com.google.maps.interfaces.*;
    import com.google.maps.wrappers.*;

    public class MapEvent extends Event {

        public static const MAP_READY:String = "mapevent_mapready";
        public static const OVERLAY_MOVED:String = "mapevent_overlaymoved";
        public static const OVERLAY_CHANGED:String = "mapevent_overlaychanged";
        public static const MAP_INITIALIZE_FAILED:String = "mapevent_mapinitializefailed";
        public static const DISPLAY_MESSAGE:String = "mapevent_displaymessage";
        public static const MAPTYPE_CHANGED:String = "maptypechanged";
        public static const OVERLAY_ADDED:String = "mapevent_overlayadded";
        public static const MAP_PREINITIALIZE:String = "mapevent_mappreinitialize";
        public static const MAP_READY_INTERNAL:String = "readyinternal";
        public static const SIZE_CHANGED:String = "mapevent_sizechanged";
        public static const CONTROL_ADDED:String = "mapevent_controladded";
        public static const MAPTYPE_ADDED:String = "mapevent_maptypeadded";
        public static const COPYRIGHTS_UPDATED:String = "mapevent_copyrightsupdated";
        public static const INFOWINDOW_OPENED:String = "mapevent_infowindowopened";
        public static const INFOWINDOW_CLOSED:String = "mapevent_infowindowclosed";
        public static const OVERLAY_REMOVED:String = "mapevent_overlayremoved";
        public static const INFOWINDOW_CLOSING:String = "mapevent_infowindowclosing";
        public static const OVERLAY_BEFORE_REMOVED:String = "mapevent_overlaybeforeremoved";
        public static const MAPTYPE_REMOVED:String = "mapevent_maptyperemoved";
        public static const OVERLAY_ANIMATE_END:String = "mapevent_overlayanimateend";
        public static const CONTROL_REMOVED:String = "mapevent_controlremoved";
        public static const VISIBILITY_CHANGED:String = "mapevent_visibilitychanged";

        protected var crossDomainEvent:Event;
        private var localTarget:Object;
        private var eventFeature:Object;

        public function MapEvent(_arg1:String, _arg2:Object, _arg3:Boolean=false, _arg4:Boolean=false){
            super(_arg1, _arg3, _arg4);
            this.eventFeature = _arg2;
        }
        protected static function wrapFeature(_arg1:Object):Object{
            return (((_arg1)!=null) ? Wrapper.instance().wrap(_arg1, null, IWrappable, Object) : null);
        }
        public static function fromCrossDomainEvent(_arg1:Event, _arg2:Object):MapEvent{
            var _local3:MapEvent;
            _local3 = (_arg1 as MapEvent);
            if (((!((_local3 == null))) && ((_arg2 == _local3.target)))){
                return (_local3);
            };
            _local3 = new MapEvent(_arg1.type, wrapFeature(getEventFeature(_arg1)), _arg1.bubbles, _arg1.cancelable);
            _local3.copyEventData(_arg1, _arg2);
            return (_local3);
        }
        public static function getEventFeature(_arg1:Event):Object{
            return (Object(_arg1).feature);
        }

        override public function isDefaultPrevented():Boolean{
            return (((this.crossDomainEvent) ? this.crossDomainEvent.isDefaultPrevented() : super.isDefaultPrevented()));
        }
        override public function get eventPhase():uint{
            return (((this.crossDomainEvent) ? this.crossDomainEvent.eventPhase : super.eventPhase));
        }
        override public function formatToString(_arg1:String, ... _args):String{
            return (((this.crossDomainEvent) ? this.crossDomainEvent.formatToString(_arg1, _args) : super.formatToString(_arg1, _args)));
        }
        override public function preventDefault():void{
            if (this.crossDomainEvent){
                this.crossDomainEvent.preventDefault();
            } else {
                super.preventDefault();
            };
        }
        override public function get target():Object{
            return (this.currentTarget);
        }
        override public function get cancelable():Boolean{
            return (((this.crossDomainEvent) ? this.crossDomainEvent.cancelable : super.cancelable));
        }
        override public function clone():Event{
            return (((this.crossDomainEvent) ? fromCrossDomainEvent(crossDomainEvent.clone(), null) : new MapEvent(this.type, this.feature, this.bubbles, this.cancelable)));
        }
        public function get eventClassChain():Array{
            return (["MapEvent"]);
        }
        override public function get bubbles():Boolean{
            return (((this.crossDomainEvent) ? this.crossDomainEvent.bubbles : super.bubbles));
        }
        override public function stopPropagation():void{
            if (this.crossDomainEvent){
                this.crossDomainEvent.stopPropagation();
            } else {
                super.stopPropagation();
            };
        }
        override public function toString():String{
            return ((((((((("[MapEvent type=" + this.type) + " feature=") + this.feature) + " bubbles=") + this.bubbles) + " cancellable=") + this.cancelable) + "]"));
        }
        protected function copyEventData(_arg1:Event, _arg2:Object):void{
            this.crossDomainEvent = _arg1;
            this.localTarget = _arg2;
        }
        override public function get currentTarget():Object{
            return (((this.localTarget) ? this.localTarget : super.target));
        }
        public function get feature():Object{
            return (this.eventFeature);
        }
        override public function get type():String{
            return (((this.crossDomainEvent) ? this.crossDomainEvent.type : super.type));
        }
        override public function stopImmediatePropagation():void{
            if (this.crossDomainEvent){
                this.crossDomainEvent.stopImmediatePropagation();
            } else {
                super.stopImmediatePropagation();
            };
        }

    }
}//package com.google.maps 
﻿package com.google.maps {
    import com.google.maps.interfaces.*;
    import flash.geom.*;
    import com.google.maps.wrappers.*;
    import flash.errors.*;

    public class ProjectionBase extends WrapperBase implements IProjection {

        override public function get interfaceChain():Array{
            return (["IProjection"]);
        }
        public function fromLatLngToPixel(_arg1:LatLng, _arg2:Number):Point{
            throw (new IllegalOperationError(PConstants.UNIMPLEMENTED_METHOD));
        }
        public function getWrapWidth(_arg1:Number):Number{
            throw (new IllegalOperationError(PConstants.UNIMPLEMENTED_METHOD));
        }
        public function tileCheckRange(_arg1:Point, _arg2:Number, _arg3:Number):Boolean{
            throw (new IllegalOperationError(PConstants.UNIMPLEMENTED_METHOD));
        }
        public function fromPixelToLatLng(_arg1:Point, _arg2:Number, _arg3:Boolean=false):LatLng{
            throw (new IllegalOperationError(PConstants.UNIMPLEMENTED_METHOD));
        }

    }
}//package com.google.maps 
﻿package com.google.maps {
    import flash.display.*;
    import flash.text.*;
    import flash.events.*;
    import com.google.maps.interfaces.*;
    import flash.geom.*;
    import com.google.maps.wrappers.*;
    import flash.utils.*;

    public class Map extends IMapWrapper implements IMap {

        private var size:Point;
        private var autoSize:Boolean;
        private var timer:Timer;
        private var isInitialized:Boolean;
        private var initOptions:MapOptions;
        private var myParent:DisplayObject;
        private var delayedCalls:Array;
        private var controlList:Array;
        private var unloaded:Boolean;

        public function Map(){
            this.controlList = [];
            this.delayedCalls = [];
            this.unloaded = false;
            this.isInitialized = false;
            this.addEventListener(Event.ADDED_TO_STAGE, onAdded);
            this.setInitialSize();
        }
        private function configureSize(_arg1:Boolean):void{
            var _local2:Stage;
            if (_arg1){
                this.myParent = this.parent;
                this.myParent.addEventListener(Event.RESIZE, this.onParentResize);
                _local2 = (this.parent as Stage);
                if (((!((_local2 == null))) && (this.autoSize))){
                    _local2.scaleMode = StageScaleMode.NO_SCALE;
                    _local2.align = StageAlign.TOP_LEFT;
                    onParentResize();
                };
            } else {
                this.myParent.removeEventListener(Event.RESIZE, this.onParentResize);
                this.myParent = null;
            };
        }
        public function get languages():String{
            return (BootstrapConfiguration.getInstance().languages);
        }
        private function internalSetSize(_arg1:Point):void{
            this.size = _arg1;
            if (this.isLoaded()){
                super.setSize(_arg1);
            };
            drawBackground();
        }
        private function bindInstance(_arg1:Event=null):void{
            var _local2:ClientBootstrap;
            var _local3:IMapsFactory;
            var _local4:Object;
            if (this.unloaded){
                return;
            };
            dispatchEvent(new MapEvent(MapEvent.MAP_PREINITIALIZE, this));
            _local2 = ClientBootstrap.getInstance();
            _local3 = _local2.getMapsFactory();
            _local4 = _local3.createMap2(this.initOptions);
            Wrapper.instance().wrap(_local4, this, IMap, Map);
        }
        public function set languages(_arg1:String):void{
            BootstrapConfiguration.getInstance().languages = _arg1;
        }
        public function set channel(_arg1:String):void{
            BootstrapConfiguration.getInstance().channel = _arg1;
        }
        override public function removeControl(_arg1:IControl):void{
            var _local2:ClientBootstrap;
            var _local3:int;
            _local2 = ClientBootstrap.getInstance();
            if (_local2.isReady()){
                super.removeControl(_arg1);
            } else {
                _local3 = controlList.indexOf(_arg1);
                if (_local3 >= 0){
                    controlList.splice(_local3, 1);
                };
            };
        }
        private function onAdded(_arg1:Event):void{
            var configuration:* = null;
            var bootstrap:* = null;
            var event:* = _arg1;
            this.removeEventListener(Event.ADDED_TO_STAGE, onAdded);
            this.addEventListener(Event.REMOVED_FROM_STAGE, onRemoved);
            configureSize(true);
            drawBackground();
            if (!this.isInitialized){
                configuration = BootstrapConfiguration.getInstance();
                configuration.initialize(this.root.loaderInfo, this.stage);
                try {
                    configuration.lock();
                } catch(e:Error) {
                    bootstrapFailure(e.message);
                    return;
                };
                bootstrap = ClientBootstrap.getInstance();
                bootstrap.addEventListener(ClientBootstrap.BOOTSTRAP_FAILED, onBootstrapFailed);
                bootstrap.loadBootstrap();
                bootstrap.registerObject(this);
                if (bootstrap.isReady()){
                    bindInstance();
                    onBootstrapInitComplete();
                } else {
                    bootstrap.addEventListener(ClientBootstrap.LIBRARY_LOADED, this.bindInstance);
                    bootstrap.addEventListener(ClientBootstrap.INIT_COMPLETE, this.onBootstrapInitComplete);
                };
            };
            this.isInitialized = true;
        }
        private function onBootstrapFailed(_arg1:Event):void{
            var _local2:ClientBootstrap;
            var _local3:String;
            _local2 = ClientBootstrap.getInstance();
            _local2.removeEventListener(ClientBootstrap.BOOTSTRAP_FAILED, onBootstrapFailed);
            _local3 = ((client) ? "client id" : "API key");
            bootstrapFailure((("Initialization failed: please check the " + _local3) + ",\nswf location, version and network availability."));
        }
        public function get key():String{
            return (BootstrapConfiguration.getInstance().key);
        }
        protected function delayCall(_arg1:Function):void{
            if (this.timer == null){
                this.timer = new Timer(1, 1);
                this.timer.addEventListener(TimerEvent.TIMER, this.executeDelayedCalls);
                this.timer.start();
            };
            this.delayedCalls.push(_arg1);
        }
        public function set language(_arg1:String):void{
            BootstrapConfiguration.getInstance().language = _arg1;
        }
        public function get countryCode():String{
            return (BootstrapConfiguration.getInstance().countryCode);
        }
        public function set key(_arg1:String):void{
            BootstrapConfiguration.getInstance().key = _arg1;
        }
        protected function callLater(_arg1:Function):void{
            delayCall(_arg1);
        }
        public function set url(_arg1:String):void{
            BootstrapConfiguration.getInstance().url = _arg1;
        }
        public function get version():String{
            return (BootstrapConfiguration.getInstance().version);
        }
        public function getInterfaceVersion():String{
            return (Release.version);
        }
        override public function unload():void{
            var _local1:ClientBootstrap;
            if (this.isLoaded()){
                super.unload();
            };
            if (this.parent != null){
                this.parent.removeChild(this);
            };
            this.removeEventListener(Event.ADDED_TO_STAGE, onAdded);
            this.removeEventListener(Event.REMOVED_FROM_STAGE, onRemoved);
            this.unloaded = true;
            this.controlList = null;
            this.clearWrapper();
            _local1 = ClientBootstrap.getInstance();
            _local1.removeEventListener(ClientBootstrap.BOOTSTRAP_FAILED, onBootstrapFailed);
            _local1.unregisterObject(this);
        }
        public function get channel():String{
            return (BootstrapConfiguration.getInstance().channel);
        }
        override public function get height():Number{
            return (this.size.y);
        }
        private function bootstrapFailure(_arg1:String):void{
            var _local2:TextField;
            Log.log0(("Bootstrap failure: " + _arg1));
            _local2 = new TextField();
            _local2.background = true;
            _local2.autoSize = TextFieldAutoSize.CENTER;
            _local2.defaultTextFormat = new TextFormat("_sans", 16);
            _local2.x = (this.width / 2);
            _local2.y = (this.height / 2);
            _local2.text = _arg1;
            addChild(_local2);
            dispatchEvent(new MapEvent(MapEvent.MAP_INITIALIZE_FAILED, this));
        }
        public function set countryCode(_arg1:String):void{
            BootstrapConfiguration.getInstance().countryCode = _arg1;
        }
        public function set sensor(_arg1:String):void{
            BootstrapConfiguration.getInstance().sensor = _arg1;
        }
        public function get language():String{
            return (BootstrapConfiguration.getInstance().language);
        }
        private function onParentResize(_arg1:Event=null):void{
            var _local2:Stage;
            if (this.autoSize){
                _local2 = (this.parent as Stage);
                if (_local2 != null){
                    internalSetSize(new Point(_local2.stageWidth, _local2.stageHeight));
                } else {
                    internalSetSize(new Point((this.parent.width * this.parent.scaleX), (this.parent.height * this.parent.scaleY)));
                };
                drawBackground();
            };
        }
        private function onRemoved(_arg1:Event):void{
            this.addEventListener(Event.ADDED_TO_STAGE, onAdded);
            this.removeEventListener(Event.REMOVED_FROM_STAGE, onRemoved);
            configureSize(false);
        }
        override public function addControl(_arg1:IControl):void{
            var _local2:ClientBootstrap;
            _local2 = ClientBootstrap.getInstance();
            if (_local2.isReady()){
                super.addControl(_arg1);
            } else {
                controlList.push(_arg1);
            };
        }
        override public function setSize(_arg1:Point):void{
            this.autoSize = false;
            internalSetSize(_arg1);
        }
        public function set client(_arg1:String):void{
            BootstrapConfiguration.getInstance().client = _arg1;
        }
        private function onBootstrapInitComplete(_arg1:Event=null):void{
            var _local2:ClientBootstrap;
            _local2 = ClientBootstrap.getInstance();
            _local2.removeEventListener(ClientBootstrap.BOOTSTRAP_FAILED, this.onBootstrapFailed);
            _local2.removeEventListener(ClientBootstrap.LIBRARY_LOADED, this.bindInstance);
            _local2.removeEventListener(ClientBootstrap.INIT_COMPLETE, this.onBootstrapInitComplete);
            if (this.unloaded){
                return;
            };
            this.addEventListener(MapEvent.MAP_READY_INTERNAL, onMapReadyInternal);
            configureMap();
        }
        private function executeDelayedCalls(_arg1:Event):void{
            var _local2:Array;
            var _local3:int;
            this.timer.removeEventListener(TimerEvent.TIMER, this.executeDelayedCalls);
            this.timer = null;
            _local2 = this.delayedCalls;
            this.delayedCalls = [];
            if (_local2 != null){
                while (_local3 < _local2.length) {
                    var _local4 = _local2;
                    _local4[_local3]();
                    _local3++;
                };
            };
        }
        private function setInitialSize():void{
            this.autoSize = true;
            this.size = new Point(0x0100, 0x0100);
        }
        public function setInitOptions(_arg1:MapOptions):void{
            this.initOptions = _arg1;
        }
        public function set version(_arg1:String):void{
            BootstrapConfiguration.getInstance().version = _arg1;
        }
        private function drawBackground():void{
            this.graphics.clear();
            this.graphics.beginFill(0xC0C0C0);
            this.graphics.lineStyle();
            this.graphics.drawRect(0, 0, this.width, this.height);
            this.graphics.endFill();
        }
        public function get sensor():String{
            return (BootstrapConfiguration.getInstance().sensor);
        }
        override public function get width():Number{
            return (this.size.x);
        }
        private function onMapReadyInternal(_arg1:Event):void{
            var _local2:Number;
            this.removeEventListener(MapEvent.MAP_READY_INTERNAL, onMapReadyInternal);
            internalSetSize(new Point(this.width, this.height));
            _local2 = 0;
            while (_local2 < controlList.length) {
                super.addControl(controlList[_local2]);
                _local2++;
            };
            controlList = [];
        }
        override public function isLoaded():Boolean{
            return (((!((this.instance == null))) && (super.isLoaded())));
        }
        public function get url():String{
            return (BootstrapConfiguration.getInstance().url);
        }
        public function get client():String{
            return (BootstrapConfiguration.getInstance().client);
        }

    }
}//package com.google.maps 
﻿package com.google.maps {

    public class LatLng {

        public static const EARTH_RADIUS:Number = 6378137;

        private var lngDegrees_:Number;
        private var latDegrees_:Number;

        public function LatLng(_arg1:Number, _arg2:Number, _arg3:Boolean=false){
            if (!_arg3){
                _arg1 = MapUtil.bound(_arg1, -90, 90);
                _arg2 = MapUtil.wrap(_arg2, -180, 180);
            };
            latDegrees_ = _arg1;
            lngDegrees_ = _arg2;
        }
        public static function wrapLatLng(_arg1:LatLng):LatLng{
            return (new LatLng(_arg1.lat(), _arg1.lng(), false));
        }
        private static function quantize(_arg1:Number, _arg2:Number):Number{
            var _local3:Number;
            _local3 = Math.pow(10, _arg2);
            return ((Math.round((_arg1 * _local3)) / _local3));
        }
        public static function fromRadians(_arg1:Number, _arg2:Number, _arg3:Boolean=false):LatLng{
            return (new LatLng(MapUtil.radiansToDegrees(_arg1), MapUtil.radiansToDegrees(_arg2), _arg3));
        }
        public static function fromObject(_arg1:Object):LatLng{
            return (((_arg1)!=null) ? new LatLng(_arg1.lat(), _arg1.lng(), true) : null);
        }
        public static function fromUrlValue(_arg1:String):LatLng{
            var _local2:Array;
            _local2 = _arg1.split(",");
            return (new LatLng(parseFloat(_local2[0]), parseFloat(_local2[1])));
        }

        public function latRadians():Number{
            return (MapUtil.degreesToRadians(latDegrees_));
        }
        public function toUrlValue(_arg1:Number=6):String{
            return (((quantize(lat(), _arg1) + ",") + quantize(lng(), _arg1)));
        }
        public function lng():Number{
            return (lngDegrees_);
        }
        public function lat():Number{
            return (latDegrees_);
        }
        public function angleFrom(_arg1:LatLng):Number{
            var _local2:Number;
            var _local3:Number;
            var _local4:Number;
            var _local5:Number;
            _local2 = latRadians();
            _local3 = _arg1.latRadians();
            _local4 = (_local2 - _local3);
            _local5 = (lngRadians() - _arg1.lngRadians());
            return ((2 * Math.asin(Math.sqrt((Math.pow(Math.sin((_local4 / 2)), 2) + ((Math.cos(_local2) * Math.cos(_local3)) * Math.pow(Math.sin((_local5 / 2)), 2)))))));
        }
        public function toString():String{
            return ((((("(" + this.lat()) + ", ") + this.lng()) + ")"));
        }
        public function lngRadians():Number{
            return (MapUtil.degreesToRadians(lngDegrees_));
        }
        public function distanceFrom(_arg1:LatLng, _arg2:Number=6378137):Number{
            return ((angleFrom(_arg1) * _arg2));
        }
        public function clone():LatLng{
            return (new LatLng(lat(), lng(), true));
        }
        public function equals(_arg1:LatLng):Boolean{
            if (!_arg1){
                return (false);
            };
            return (((MapUtil.approxEquals(lat(), _arg1.lat())) && (MapUtil.approxEquals(lng(), _arg1.lng()))));
        }

    }
}//package com.google.maps 
﻿package com.google.maps {

    public final class Color {

        public static const GRAY10:Number = 0xA0A0A0;
        public static const GRAY7:Number = 0x707070;
        public static const GRAY13:Number = 0xD0D0D0;
        public static const GRAY15:Number = 0xF0F0F0;
        public static const MAGENTA:Number = 0xFF00FF;
        public static const GRAY11:Number = 0xB0B0B0;
        public static const GRAY12:Number = 0xC0C0C0;
        public static const WHITE:Number = 0xFFFFFF;
        public static const BLUE:Number = 0xFF;
        public static const DEFAULTLINK:Number = 7829452;
        public static const BLACK:Number = 0;
        public static const GREEN:Number = 0xFF00;
        public static const CYAN:Number = 0xFFFF;
        public static const GRAY1:Number = 0x101010;
        public static const GRAY2:Number = 0x202020;
        public static const GRAY3:Number = 0x303030;
        public static const RED:Number = 0xFF0000;
        public static const GRAY5:Number = 0x505050;
        public static const GRAY6:Number = 0x606060;
        public static const YELLOW:Number = 0xFFFF00;
        public static const GRAY8:Number = 0x808080;
        public static const GRAY9:Number = 0x909090;
        public static const GRAY4:Number = 0x404040;
        public static const GRAY14:Number = 0xE0E0E0;

        private var _b:Number;
        private var _g:Number;
        private var _r:Number;

        public function Color(_arg1:Number){
            _r = (_arg1 >> 16);
            _g = ((_arg1 & 0xFF00) >> 8);
            _b = (_arg1 & 0xFF);
        }
        public static function fromObject(_arg1:Object):Color{
            return (((_arg1)!=null) ? new Color(_arg1.rgb) : null);
        }
        public static function toHtml(_arg1:Number):String{
            var _local2:String;
            var _local3:Number;
            var _local4:String;
            if (((!(("number" == "number"))) || (isNaN(_arg1)))){
                _arg1 = 0;
            };
            _local2 = "#000000";
            _local3 = Math.floor(MapUtil.bound(_arg1, 0, 0xFFFFFF));
            _local4 = _local3.toString(16);
            return ((_local2.substr(0, (7 - _local4.length)) + _local4));
        }

        public function get b():Number{
            return (Math.round(_b));
        }
        public function set r(_arg1:Number):void{
            _r = (((_arg1 > 0xFF)) ? 0xFF : (((_arg1 < 0)) ? 0 : _arg1));
        }
        public function set b(_arg1:Number):void{
            _b = (((_arg1 > 0xFF)) ? 0xFF : (((_arg1 < 0)) ? 0 : _arg1));
        }
        public function toString():String{
            return (((((("R:" + r) + "/G:") + g) + "/B:") + b));
        }
        public function get g():Number{
            return (Math.round(_g));
        }
        public function get r():Number{
            return (Math.round(_r));
        }
        public function get rgb():Number{
            return ((((r << 16) + (g << 8)) + b));
        }
        public function set g(_arg1:Number):void{
            _g = (((_arg1 > 0xFF)) ? 0xFF : (((_arg1 < 0)) ? 0 : _arg1));
        }
        public function incRGB(_arg1:Number, _arg2:Number, _arg3:Number):void{
            r = (_r + _arg1);
            g = (_g + _arg2);
            b = (_b + _arg3);
        }
        public function setRGB(_arg1:Number, _arg2:Number, _arg3:Number):void{
            r = _arg1;
            g = _arg2;
            b = _arg3;
        }

    }
}//package com.google.maps 
﻿package com.google.maps {

    public class LatLngBounds {

        private static const PI:Number = Math.PI;

        private var lng_:S1Interval;
        private var lat_:R1Interval;

        public function LatLngBounds(_arg1:LatLng=null, _arg2:LatLng=null){
            var _local3:Number;
            var _local4:Number;
            var _local5:Number;
            var _local6:Number;
            super();
            if (((_arg1) && (!(_arg2)))){
                _arg2 = _arg1;
            };
            if (_arg1){
                _local3 = MapUtil.bound(_arg1.latRadians(), (-(PI) / 2), (PI / 2));
                _local4 = MapUtil.bound(_arg2.latRadians(), (-(PI) / 2), (PI / 2));
                lat_ = new R1Interval(_local3, _local4);
                _local5 = _arg1.lngRadians();
                _local6 = _arg2.lngRadians();
                if ((_local6 - _local5) >= (PI * 2)){
                    lng_ = new S1Interval(-(PI), PI);
                } else {
                    _local5 = MapUtil.wrap(_local5, -(PI), PI);
                    _local6 = MapUtil.wrap(_local6, -(PI), PI);
                    lng_ = new S1Interval(_local5, _local6);
                };
            } else {
                lat_ = new R1Interval(1, -1);
                lng_ = new S1Interval(PI, -(PI));
            };
        }
        public static function fromObject(_arg1:Object):LatLngBounds{
            if (_arg1 == null){
                return (null);
            };
            return (new LatLngBounds(LatLng.fromObject(_arg1.getSouthWest()), LatLng.fromObject(_arg1.getNorthEast())));
        }

        public function getNorthEast():LatLng{
            return (LatLng.fromRadians(lat_.hi, lng_.hi));
        }
        public function containsLatLng(_arg1:LatLng):Boolean{
            return (((lat_.contains(_arg1.latRadians())) && (lng_.contains(_arg1.lngRadians()))));
        }
        public function isFullLat():Boolean{
            return ((((lat_.hi >= (PI / 2))) && ((lat_.lo <= (-(PI) / 2)))));
        }
        public function isEmpty():Boolean{
            return (((lat_.isEmpty()) || (lng_.isEmpty())));
        }
        public function getCenter():LatLng{
            return (LatLng.fromRadians(lat_.center(), lng_.center()));
        }
        public function intersects(_arg1:LatLngBounds):Boolean{
            return (((lat_.intersects(_arg1.lat_)) && (lng_.intersects(_arg1.lng_))));
        }
        public function isFullLng():Boolean{
            return (lng_.isFull());
        }
        public function union(_arg1:LatLngBounds):void{
            extend(_arg1.getSouthWest());
            extend(_arg1.getNorthEast());
        }
        public function getSouth():Number{
            return (MapUtil.radiansToDegrees(lat_.lo));
        }
        public function clone():LatLngBounds{
            return (new LatLngBounds(getSouthWest(), getNorthEast()));
        }
        public function getNorthWest():LatLng{
            return (LatLng.fromRadians(lat_.hi, lng_.lo));
        }
        public function extend(_arg1:LatLng):void{
            lat_.extend(_arg1.latRadians());
            lng_.extend(_arg1.lngRadians());
        }
        public function isLargerThan(_arg1:LatLngBounds):Boolean{
            var _local2:LatLng;
            var _local3:LatLng;
            _local2 = toSpan();
            _local3 = _arg1.toSpan();
            return ((((_local2.lat() > _local3.lat())) && ((_local2.lng() > _local3.lng()))));
        }
        public function getWest():Number{
            return (MapUtil.radiansToDegrees(lng_.lo));
        }
        public function getSouthWest():LatLng{
            return (LatLng.fromRadians(lat_.lo, lng_.lo));
        }
        public function getNorth():Number{
            return (MapUtil.radiansToDegrees(lat_.hi));
        }
        public function toString():String{
            return ((((("(" + getSouthWest()) + ", ") + getNorthEast()) + ")"));
        }
        public function getEast():Number{
            return (MapUtil.radiansToDegrees(lng_.hi));
        }
        public function containsBounds(_arg1:LatLngBounds):Boolean{
            return (((lat_.containsInterval(_arg1.lat_)) && (lng_.containsInterval(_arg1.lng_))));
        }
        public function getSouthEast():LatLng{
            return (LatLng.fromRadians(lat_.lo, lng_.hi));
        }
        public function toSpan():LatLng{
            return (LatLng.fromRadians(lat_.span(), lng_.span(), true));
        }
        public function equals(_arg1:LatLngBounds):Boolean{
            return (((lat_.equals(_arg1.lat_)) && (lng_.equals(_arg1.lng_))));
        }

    }
}//package com.google.maps 
﻿package com.google.maps.interfaces {
    import flash.display.*;
    import com.google.maps.*;
    import com.google.maps.services.*;
    import com.google.maps.controls.*;
    import com.google.maps.overlays.*;
    import flash.events.*;

    public interface IMapsFactory extends IWrappable {

        function createMap(_arg1:Sprite, _arg2:IEventDispatcher):Object;
        function createScaleControl2(_arg1:ScaleControlOptions=null):Object;
        function createZoomControl2(_arg1:ZoomControlOptions=null):Object;
        function createNavigationControl2(_arg1:NavigationControlOptions=null):Object;
        function createPolygonFromEncoded(_arg1:Array, _arg2:PolygonOptions=null):Object;
        function reportMouseEvent(_arg1:MouseEvent):void;
        function setDefaultGroundOverlayOptions(_arg1:GroundOverlayOptions):void;
        function setDefaultMarkerOptions(_arg1:MarkerOptions):void;
        function setDefaultInfoWindowOptions(_arg1:InfoWindowOptions):void;
        function createOverviewMapControl(_arg1:Sprite, _arg2:IEventDispatcher, _arg3:OverviewMapControlOptions=null):Object;
        function createClientGeocoder2(_arg1:ClientGeocoderOptions=null):Object;
        function createPositionControl(_arg1:Sprite, _arg2:IEventDispatcher, _arg3:PositionControlOptions=null):Object;
        function createPositionControl2(_arg1:PositionControlOptions=null):Object;
        function createOverviewMapControl2(_arg1:OverviewMapControlOptions=null):Object;
        function createMarker(_arg1:LatLng, _arg2:MarkerOptions=null):Object;
        function createPolygon(_arg1:Array, _arg2:PolygonOptions=null):Object;
        function createPolylineFromEncoded(_arg1:String, _arg2:Number, _arg3:String, _arg4:Number, _arg5:PolylineOptions=null):Object;
        function createMapType(_arg1:Array, _arg2:IProjection, _arg3:String, _arg4:MapTypeOptions=null):Object;
        function getDefaultGroundOverlayOptions():GroundOverlayOptions;
        function createMapTypeControl(_arg1:Sprite, _arg2:IEventDispatcher, _arg3:MapTypeControlOptions=null):Object;
        function setDefaultMapTypeOptions(_arg1:MapTypeOptions):void;
        function createCopyrightCollection(_arg1:String=null):Object;
        function setDefaultPolygonOptions(_arg1:PolygonOptions):void;
        function getDefaultMapType(_arg1:String):IMapType;
        function getDefaultMapTypesList():Array;
        function createZoomControl(_arg1:Sprite, _arg2:IEventDispatcher, _arg3:ZoomControlOptions=null):Object;
        function createMapTypeControl2(_arg1:MapTypeControlOptions=null):Object;
        function createDirections(_arg1:DirectionsOptions=null):Object;
        function createMap2(_arg1:MapOptions=null):Object;
        function getDefaultMapTypeOptions():MapTypeOptions;
        function createGroundOverlay(_arg1:DisplayObject, _arg2:LatLngBounds, _arg3:GroundOverlayOptions=null):Object;
        function getDefaultInfoWindowOptions():InfoWindowOptions;
        function getDefaultPolygonOptions():PolygonOptions;
        function createTileLayerOverlay(_arg1:ITileLayer, _arg2:int=0x0100, _arg3:IProjection=null):Object;
        function getDefaultMarkerOptions():MarkerOptions;
        function getDefaultPolylineOptions():PolylineOptions;
        function createClientGeocoder(_arg1:String=null, _arg2:LatLngBounds=null):Object;
        function setClientFactory(_arg1:IClientFactory):void;
        function createPolyline(_arg1:Array, _arg2:PolylineOptions=null):Object;
        function setDefaultPolylineOptions(_arg1:PolylineOptions):void;

    }
}//package com.google.maps.interfaces 
﻿package com.google.maps.interfaces {
    import flash.geom.*;

    public interface IOverviewMapControl extends IControl {

        function setSize(_arg1:Point):void;

    }
}//package com.google.maps.interfaces 
﻿package com.google.maps.interfaces {
    import com.google.maps.*;
    import com.google.maps.overlays.*;

    public interface IMarker extends IOverlay {

        function hide():void;
        function closeInfoWindow():void;
        function setLatLng(_arg1:LatLng):void;
        function setOptions(_arg1:MarkerOptions):void;
        function getOptions():MarkerOptions;
        function openInfoWindow(_arg1:InfoWindowOptions=null):IInfoWindow;
        function isHidden():Boolean;
        function getLatLng():LatLng;
        function show():void;

    }
}//package com.google.maps.interfaces 
﻿package com.google.maps.interfaces {

    public interface IMapFocusableComponent extends IWrappableSprite {

        function set focusable(_arg1:Boolean):void;
        function grabFocus():void;
        function releaseFocus():void;
        function get focusable():Boolean;
        function hasFocus():Boolean;

    }
}//package com.google.maps.interfaces 
﻿package com.google.maps.interfaces {

    public interface IWrappable {

        function get wrapper():Object;
        function set wrapper(_arg1:Object):void;
        function get interfaceChain():Array;

    }
}//package com.google.maps.interfaces 
﻿package com.google.maps.interfaces {

    public interface IZoomControl extends IControl {

    }
}//package com.google.maps.interfaces 
﻿package com.google.maps.interfaces {
    import com.google.maps.*;

    public interface ICopyrightCollection extends IWrappableEventDispatcher {

        function getCopyrights(_arg1:LatLngBounds, _arg2:Number):Array;
        function getCopyrightNotice(_arg1:LatLngBounds, _arg2:Number):CopyrightNotice;
        function getCopyrightsAtLatLng(_arg1:LatLng):Array;
        function addCopyright(_arg1:Copyright):Boolean;

    }
}//package com.google.maps.interfaces 
﻿package com.google.maps.interfaces {
    import com.google.maps.*;
    import com.google.maps.services.*;
    import com.google.maps.overlays.*;

    public interface IDirections extends IWrappableEventDispatcher {

        function getRoute(_arg1:uint):Route;
        function get duration():Number;
        function getGeocode(_arg1:uint):Placemark;
        function get distanceHtml():String;
        function get numGeocodes():uint;
        function clear():void;
        function get copyrightsHtml():String;
        function get durationHtml():String;
        function createPolyline(_arg1:PolylineOptions=null):IPolyline;
        function getOptions():DirectionsOptions;
        function setOptions(_arg1:DirectionsOptions):void;
        function load(_arg1:String):void;
        function get numRoutes():uint;
        function get summaryHtml():String;
        function get status():uint;
        function get bounds():LatLngBounds;
        function get distance():Number;

    }
}//package com.google.maps.interfaces 
﻿package com.google.maps.interfaces {
    import flash.display.*;
    import com.google.maps.controls.*;
    import flash.geom.*;

    public interface IControl extends IWrappableEventDispatcher {

        function setControlPosition(_arg1:ControlPosition):void;
        function initControlWithMap(_arg1:IMap):void;
        function getDisplayObject():DisplayObject;
        function getControlPosition():ControlPosition;
        function getSize():Point;

    }
}//package com.google.maps.interfaces 
﻿package com.google.maps.interfaces {
    import flash.display.*;

    public interface ISpriteFactory extends IWrappable {

        function getParent(_arg1:DisplayObject):DisplayObjectContainer;
        function getChildCount(_arg1:DisplayObjectContainer):int;
        function toWrappableSprite(_arg1:DisplayObject):IWrappableSprite;
        function getEventDispatcher(_arg1:DisplayObject):IWrappableEventDispatcher;
        function addChildAt(_arg1:DisplayObjectContainer, _arg2:DisplayObject, _arg3:int):DisplayObject;
        function createSprite():IWrappableSprite;
        function removeChildAt(_arg1:DisplayObjectContainer, _arg2:int):DisplayObject;
        function get version():int;
        function createComponent():IWrappableSprite;
        function addChild(_arg1:DisplayObjectContainer, _arg2:DisplayObject):DisplayObject;
        function removeChild(_arg1:DisplayObjectContainer, _arg2:DisplayObject):DisplayObject;

    }
}//package com.google.maps.interfaces 
﻿package com.google.maps.interfaces {

    public interface IScaleControl extends IControl {

    }
}//package com.google.maps.interfaces 
﻿package com.google.maps.interfaces {
    import flash.display.*;

    public interface IOverlay extends IWrappableEventDispatcher {

        function getDefaultPane(_arg1:IMap):IPane;
        function get foreground():DisplayObject;
        function set visible(_arg1:Boolean):void;
        function positionOverlay(_arg1:Boolean):void;
        function set pane(_arg1:IPane):void;
        function get visible():Boolean;
        function get pane():IPane;
        function get shadow():DisplayObject;

    }
}//package com.google.maps.interfaces 
﻿package com.google.maps.interfaces {

    public interface IPaneManager extends IWrappable {

        function placePaneAt(_arg1:IPane, _arg2:int):void;
        function createPane(_arg1:int=-1):IPane;
        function removePane(_arg1:IPane):void;
        function removeAllPanes():void;
        function getPaneById(_arg1:int):IPane;
        function getPaneAt(_arg1:int):IPane;
        function getPaneIndex(_arg1:IPane):int;
        function containsPane(_arg1:IPane):Boolean;
        function clearOverlays():void;
        function get map():IMap;
        function get paneCount():int;

    }
}//package com.google.maps.interfaces 
﻿package com.google.maps.interfaces {

    public interface IMapTypeControl extends IControl {

    }
}//package com.google.maps.interfaces 
﻿package com.google.maps.interfaces {
    import com.google.maps.*;
    import com.google.maps.overlays.*;

    public interface IPolyline extends IOverlay {

        function hide():void;
        function getLatLngBounds():LatLngBounds;
        function getVertexCount():Number;
        function getLength(_arg1:Number=6378137):Number;
        function getVertex(_arg1:Number):LatLng;
        function setOptions(_arg1:PolylineOptions):void;
        function getOptions():PolylineOptions;
        function isHidden():Boolean;
        function show():void;

    }
}//package com.google.maps.interfaces 
﻿package com.google.maps.interfaces {

    public interface IInfoWindow extends IOverlay, IWrappable {

        function hide():void;
        function get removed():Boolean;
        function isHidden():Boolean;
        function show():void;

    }
}//package com.google.maps.interfaces 
﻿package com.google.maps.interfaces {
    import flash.events.*;

    public interface IWrappableEventDispatcher extends IEventDispatcher, IWrappable {

        function getBaseEventDispatcher():Object;

    }
}//package com.google.maps.interfaces 
﻿package com.google.maps.interfaces {
    import com.google.maps.*;
    import flash.geom.*;

    public interface IPane extends IWrappableEventDispatcher {

        function fromPaneCoordsToLatLng(_arg1:Point, _arg2:Boolean=false):LatLng;
        function updatePosition(_arg1:Boolean=false):void;
        function clear():void;
        function fromProjectionPointToPaneCoords(_arg1:Point):Point;
        function get id():uint;
        function get map():IMap;
        function set visible(_arg1:Boolean):void;
        function get paneManager():IPaneManager;
        function bringToTop(_arg1:IOverlay):void;
        function removeOverlay(_arg1:IOverlay):void;
        function addOverlay(_arg1:IOverlay):void;
        function getViewportBounds():Rectangle;
        function get visible():Boolean;
        function fromPaneCoordsToProjectionPoint(_arg1:Point):Point;
        function fromLatLngToPaneCoords(_arg1:LatLng, _arg2:Boolean=false):Point;
        function invalidate():void;

    }
}//package com.google.maps.interfaces 
﻿package com.google.maps.interfaces {
    import com.google.maps.*;
    import flash.geom.*;

    public interface IMapType extends IWrappableEventDispatcher {

        function getCopyrights(_arg1:LatLngBounds, _arg2:Number):Array;
        function getProjection():IProjection;
        function getTileSize():Number;
        function getName(_arg1:Boolean=false):String;
        function getSpanZoomLevel(_arg1:LatLng, _arg2:LatLng, _arg3:Point):Number;
        function getLinkColor():Number;
        function getErrorMessage():String;
        function getRadius():Number;
        function getTextColor():Number;
        function getUrlArg():String;
        function getTileLayers():Array;
        function getMinimumResolution(_arg1:LatLng=null):Number;
        function getBoundsZoomLevel(_arg1:LatLngBounds, _arg2:Point):Number;
        function setMaxResolutionOverride(_arg1:Number):void;
        function getMaxResolutionOverride():Number;
        function getAlt():String;
        function getMaximumResolution(_arg1:LatLng=null):Number;

    }
}//package com.google.maps.interfaces 
﻿package com.google.maps.interfaces {
    import com.google.maps.*;
    import com.google.maps.services.*;

    public interface IClientGeocoder extends IWrappableEventDispatcher {

        function resetCache():void;
        function getBaseCountryCode():String;
        function reverseGeocode(_arg1:LatLng):void;
        function setOptions(_arg1:ClientGeocoderOptions):void;
        function getOptions():ClientGeocoderOptions;
        function setBaseCountryCode(_arg1:String):void;
        function setViewport(_arg1:LatLngBounds):void;
        function getViewport():LatLngBounds;
        function geocode(_arg1:String):void;

    }
}//package com.google.maps.interfaces 
﻿package com.google.maps.interfaces {
    import flash.display.*;
    import flash.text.*;
    import flash.geom.*;

    public interface IClientFactory extends IWrappable {

        function getVersion():int;
        function getSpriteFactory():ISpriteFactory;
        function createTextField():TextField;
        function getSwcVersion():String;
        function copyToBitmap(_arg1:DisplayObject, _arg2:Point, _arg3:Matrix):DisplayObject;

    }
}//package com.google.maps.interfaces 
﻿package com.google.maps.interfaces {
    import flash.display.*;
    import com.google.maps.*;
    import com.google.maps.controls.*;
    import flash.geom.*;

    public interface IMap extends IWrappableEventDispatcher {

        function scrollWheelZoomEnabled():Boolean;
        function zoomOut(_arg1:LatLng=null, _arg2:Boolean=false):void;
        function enableCrosshairs():void;
        function disableContinuousZoom():void;
        function monitorCopyright(_arg1:IMap):void;
        function fromPointToLatLng(_arg1:Point, _arg2:Number=NaN, _arg3:Boolean=false):LatLng;
        function clearOverlays():void;
        function getPaneManager():IPaneManager;
        function removeMapType(_arg1:IMapType):void;
        function enableDragging():void;
        function getBoundsZoomLevel(_arg1:LatLngBounds):Number;
        function configureMap():void;
        function getImplementationVersion():String;
        function disableCrosshairs():void;
        function setSize(_arg1:Point):void;
        function draggingEnabled():Boolean;
        function disableControlByKeyboard():void;
        function clearControls():void;
        function openInfoWindow(_arg1:LatLng, _arg2:InfoWindowOptions=null):IInfoWindow;
        function removeOverlay(_arg1:IOverlay):void;
        function controlByKeyboardEnabled():Boolean;
        function fromLatLngToViewport(_arg1:LatLng, _arg2:Boolean=false):Point;
        function getMinZoomLevel(_arg1:IMapType=null, _arg2:LatLng=null):Number;
        function setDoubleClickMode(_arg1:Number):void;
        function removeControl(_arg1:IControl):void;
        function getDoubleClickMode():Number;
        function getProjection():IProjection;
        function savePosition():void;
        function get overlayRaising():Boolean;
        function getZoom():Number;
        function getCenter():LatLng;
        function loadResourceString(_arg1:String):String;
        function isLoaded():Boolean;
        function getLatLngBounds():LatLngBounds;
        function panBy(_arg1:Point):void;
        function addMapType(_arg1:IMapType):void;
        function placeControl(_arg1:IControl, _arg2:ControlPosition):void;
        function disableDragging():void;
        function enableControlByKeyboard():void;
        function setZoom(_arg1:Number, _arg2:Boolean=false):void;
        function returnToSavedPosition():void;
        function setCenter(_arg1:LatLng, _arg2:Number=NaN, _arg3:IMapType=null):void;
        function continuousZoomEnabled():Boolean;
        function getMaxZoomLevel(_arg1:IMapType=null, _arg2:LatLng=null):Number;
        function enableContinuousZoom():void;
        function zoomIn(_arg1:LatLng=null, _arg2:Boolean=false, _arg3:Boolean=false):void;
        function getOptions():MapOptions;
        function displayHint(_arg1:String):void;
        function getDisplayObject():DisplayObject;
        function fromLatLngToPoint(_arg1:LatLng, _arg2:Number=NaN):Point;
        function closeInfoWindow():Boolean;
        function get MERCATOR_PROJECTION():IProjection;
        function crosshairsEnabled():Boolean;
        function fromViewportToLatLng(_arg1:Point, _arg2:Boolean=false):LatLng;
        function set overlayRaising(_arg1:Boolean):void;
        function getCurrentMapType():IMapType;
        function setMapType(_arg1:IMapType):void;
        function addOverlay(_arg1:IOverlay):void;
        function getSize():Point;
        function panTo(_arg1:LatLng):void;
        function disableScrollWheelZoom():void;
        function getMapTypes():Array;
        function addControl(_arg1:IControl):void;
        function enableScrollWheelZoom():void;
        function unload():void;

    }
}//package com.google.maps.interfaces 
﻿package com.google.maps.interfaces {

    public interface INavigationControl extends IControl {

    }
}//package com.google.maps.interfaces 
﻿package com.google.maps.interfaces {
    import com.google.maps.*;
    import com.google.maps.overlays.*;

    public interface IPolygon extends IOverlay {

        function hide():void;
        function getOuterVertex(_arg1:Number):LatLng;
        function getInnerVertexCount(_arg1:Number):Number;
        function getLatLngBounds():LatLngBounds;
        function getOuterVertexCount():Number;
        function setOptions(_arg1:PolygonOptions):void;
        function getInnerVertex(_arg1:Number, _arg2:Number):LatLng;
        function getInnerPolylineCount():Number;
        function getOptions():PolygonOptions;
        function isHidden():Boolean;
        function show():void;

    }
}//package com.google.maps.interfaces 
﻿package com.google.maps.interfaces {

    public interface ITileLayerOverlay extends IOverlay {

        function get tileSize():int;
        function get tileLayer():ITileLayer;
        function get projection():IProjection;

    }
}//package com.google.maps.interfaces 
﻿package com.google.maps.interfaces {
    import flash.display.*;
    import flash.geom.*;

    public interface ITileLayer extends IWrappable {

        function getMapType():IMapType;
        function getMinResolution():Number;
        function getAlpha():Number;
        function loadTile(_arg1:Point, _arg2:Number):DisplayObject;
        function getCopyrightCollection():ICopyrightCollection;
        function getMaxResolution():Number;
        function setMapType(_arg1:IMapType):void;

    }
}//package com.google.maps.interfaces 
﻿package com.google.maps.interfaces {

    public interface IPositionControl extends IControl {

    }
}//package com.google.maps.interfaces 
﻿package com.google.maps.interfaces {
    import flash.display.*;

    public interface IWrappableSprite extends IWrappableEventDispatcher {

        function getSprite():Sprite;

    }
}//package com.google.maps.interfaces 
﻿package com.google.maps.interfaces {
    import com.google.maps.overlays.*;

    public interface IGroundOverlay extends IOverlay {

        function hide():void;
        function setOptions(_arg1:GroundOverlayOptions):void;
        function getOptions():GroundOverlayOptions;
        function isHidden():Boolean;
        function show():void;

    }
}//package com.google.maps.interfaces 
﻿package com.google.maps.interfaces {
    import com.google.maps.*;
    import flash.geom.*;

    public interface IProjection extends IWrappable {

        function getWrapWidth(_arg1:Number):Number;
        function tileCheckRange(_arg1:Point, _arg2:Number, _arg3:Number):Boolean;
        function fromLatLngToPixel(_arg1:LatLng, _arg2:Number):Point;
        function fromPixelToLatLng(_arg1:Point, _arg2:Number, _arg3:Boolean=false):LatLng;

    }
}//package com.google.maps.interfaces 
﻿package com.google.maps {

    public class Copyright {

        private var supplemental:Boolean;
        private var minZoom:Number;
        private var text:String;
        private var bounds:LatLngBounds;
        private var maxZoom:Number;
        private var id:String;

        public function Copyright(_arg1:String, _arg2:LatLngBounds, _arg3:Number, _arg4:String, _arg5:Number=NaN, _arg6:Boolean=false){
            this.id = _arg1;
            this.minZoom = _arg3;
            this.bounds = _arg2;
            this.text = _arg4;
            this.maxZoom = _arg5;
            this.supplemental = _arg6;
        }
        public static function fromObject(_arg1:Object):Copyright{
            if (_arg1 == null){
                return (null);
            };
            return (new Copyright(_arg1.getId(), LatLngBounds.fromObject(_arg1.getBounds()), _arg1.getMinZoom(), _arg1.getText(), _arg1.getMaxZoom(), _arg1.isSupplemental()));
        }

        public function getText():String{
            return (this.text);
        }
        public function getBounds():LatLngBounds{
            return (this.bounds);
        }
        public function getMaxZoom():Number{
            return (this.maxZoom);
        }
        public function getId():String{
            return (id);
        }
        public function isSupplemental():Boolean{
            return (this.supplemental);
        }
        public function getMinZoom():Number{
            return (this.minZoom);
        }

    }
}//package com.google.maps 
﻿package com.google.maps {

    public final class Log {

        public static function log4(_arg1:String):void{
        }
        public static function get level():Number{
            return (0);
        }
        public static function set level(_arg1:Number):void{
        }
        public static function log(_arg1:String, _arg2:Number=2):void{
        }
        public static function log0(_arg1:String):void{
        }
        public static function log1(_arg1:String):void{
        }
        public static function log2(_arg1:String):void{
        }
        public static function log3(_arg1:String):void{
        }

    }
}//package com.google.maps 
﻿package com.google.maps {

    public class S1Interval {

        public var hi:Number;
        public var lo:Number;

        public function S1Interval(_arg1:Number, _arg2:Number){
            if ((((_arg1 == -(Math.PI))) && (!((_arg2 == Math.PI))))){
                lo = Math.PI;
            };
            if ((((_arg2 == -(Math.PI))) && (!((_arg1 == Math.PI))))){
                hi = Math.PI;
            };
            lo = _arg1;
            hi = _arg2;
        }
        public static function fromObject(_arg1:Object):S1Interval{
            if (_arg1 == null){
                return (null);
            };
            return (new S1Interval(_arg1.lo, _arg1.hi));
        }
        public static function distance(_arg1:Number, _arg2:Number):Number{
            var _local3:Number;
            _local3 = (_arg2 - _arg1);
            if (_local3 >= 0){
                return (_local3);
            };
            return (((_arg2 + Math.PI) - (_arg1 - Math.PI)));
        }

        public function containsInterval(_arg1:S1Interval):Boolean{
            if (isInverted()){
                if (_arg1.isInverted()){
                    return ((((_arg1.lo >= lo)) && ((_arg1.hi <= hi))));
                };
                return ((((((_arg1.lo >= lo)) || ((_arg1.hi <= hi)))) && (!(isEmpty()))));
            };
            if (_arg1.isInverted()){
                return (((isFull()) || (_arg1.isEmpty())));
            };
            return ((((_arg1.lo >= lo)) && ((_arg1.hi <= hi))));
        }
        public function isEmpty():Boolean{
            return (((lo - hi) == (2 * Math.PI)));
        }
        public function contains(_arg1:Number):Boolean{
            if (_arg1 == -(Math.PI)){
                _arg1 = Math.PI;
            };
            if (isInverted()){
                return ((((((_arg1 >= lo)) || ((_arg1 <= hi)))) && (!(isEmpty()))));
            };
            return ((((_arg1 >= lo)) && ((_arg1 <= hi))));
        }
        public function span():Number{
            if (isEmpty()){
                return (0);
            };
            if (isInverted()){
                return (((2 * Math.PI) - (lo - hi)));
            };
            return ((hi - lo));
        }
        public function intersects(_arg1:S1Interval):Boolean{
            if (((isEmpty()) || (_arg1.isEmpty()))){
                return (false);
            };
            if (isInverted()){
                return (((((_arg1.isInverted()) || ((_arg1.lo <= hi)))) || ((_arg1.hi >= lo))));
            };
            if (_arg1.isInverted()){
                return ((((_arg1.lo <= hi)) || ((_arg1.hi >= lo))));
            };
            return ((((_arg1.lo <= hi)) && ((_arg1.hi >= lo))));
        }
        public function center():Number{
            var _local1:Number;
            _local1 = ((lo + hi) / 2);
            if (isInverted()){
                _local1 = (_local1 + Math.PI);
                _local1 = MapUtil.wrap(_local1, -(Math.PI), Math.PI);
            };
            return (_local1);
        }
        public function equals(_arg1:S1Interval):Boolean{
            if (isEmpty()){
                return (_arg1.isEmpty());
            };
            return (((((Math.abs((_arg1.lo - lo)) % 2) * Math.PI) + ((Math.abs((_arg1.hi - hi)) % 2) * Math.PI)) <= MapUtil.FLOAT_ERROR_MARGIN));
        }
        public function isFull():Boolean{
            return (((hi - lo) == (2 * Math.PI)));
        }
        public function extend(_arg1:Number):void{
            if (contains(_arg1)){
                return;
            };
            if (isEmpty()){
                hi = _arg1;
                lo = _arg1;
            } else {
                if (distance(_arg1, lo) < distance(hi, _arg1)){
                    lo = _arg1;
                } else {
                    hi = _arg1;
                };
            };
        }
        public function isInverted():Boolean{
            return ((lo > hi));
        }

    }
}//package com.google.maps 
﻿package com.google.maps {
    import flash.display.*;
    import flash.text.*;
    import com.google.maps.interfaces.*;
    import flash.geom.*;
    import com.google.maps.wrappers.*;

    public class ClientFactory implements IClientFactory {

        private var spriteFactory:ISpriteFactory;
        private var _wrapper:Object;

        public function getVersion():int{
            return (2);
        }
        public function set wrapper(_arg1:Object):void{
            this._wrapper = _arg1;
        }
        public function getSwcVersion():String{
            return (Release.version);
        }
        public function createTextField():TextField{
            return (new TextField());
        }
        public function get interfaceChain():Array{
            return (["IClientFactory"]);
        }
        public function get wrapper():Object{
            return (this._wrapper);
        }
        public function getSpriteFactory():ISpriteFactory{
            if (this.spriteFactory == null){
                this.spriteFactory = new SpriteFactory();
            };
            return (this.spriteFactory);
        }
        public function copyToBitmap(_arg1:DisplayObject, _arg2:Point, _arg3:Matrix):DisplayObject{
            return (Wrapper.copyPixelsToBitmap(_arg1, _arg2, _arg3));
        }

    }
}//package com.google.maps 
﻿package com.google.maps {

    public final class Release {

        public static const version:String = "9a";
        public static const mfeHost:String = "maps.googleapis.com";

    }
}//package com.google.maps 
﻿package com.google.maps.wrappers {
    import com.google.maps.interfaces.*;
    import flash.geom.*;

    public class IOverviewMapControlWrapper extends IControlWrapper implements IOverviewMapControl {

        override public function get interfaceChain():Array{
            return (["IOverviewMapControl", "IControl"]);
        }
        public function setSize(_arg1:Point):void{
            Wrapper.checkValid(this.instance);
            this.instance.setSize(_arg1);
        }

    }
}//package com.google.maps.wrappers 
﻿package com.google.maps.wrappers {
    import com.google.maps.*;
    import com.google.maps.interfaces.*;

    public class ICopyrightCollectionWrapper extends EventDispatcherWrapper implements ICopyrightCollection {

        public function getCopyrightsAtLatLng(_arg1:LatLng):Array{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapCopyrightArray(this.instance.getCopyrightsAtLatLng(this.extWrapper.wrapLatLng(_arg1))));
        }
        override public function get interfaceChain():Array{
            return (["ICopyrightCollection"]);
        }
        public function getCopyrights(_arg1:LatLngBounds, _arg2:Number):Array{
            Wrapper.checkValid(this.instance);
            return (this.instance.getCopyrights(this.extWrapper.wrapLatLngBounds(_arg1), _arg2));
        }
        public function getCopyrightNotice(_arg1:LatLngBounds, _arg2:Number):CopyrightNotice{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapCopyrightNotice(this.instance.getCopyrightNotice(this.extWrapper.wrapLatLngBounds(_arg1), _arg2)));
        }
        public function addCopyright(_arg1:Copyright):Boolean{
            Wrapper.checkValid(this.instance);
            return (this.instance.addCopyright(this.extWrapper.wrapCopyright(_arg1)));
        }

    }
}//package com.google.maps.wrappers 
﻿package com.google.maps.wrappers {
    import flash.display.*;
    import com.google.maps.interfaces.*;

    public class WrappableComponent extends Sprite implements IMapFocusableComponent {

        private var listenerCache:WrappedListenerCache;
        private var isFocusable:Boolean;
        protected var extWrapper:Object;
        protected var instance:Object;
        private var baseEventDispatcher:BaseEventDispatcher;

        public function WrappableComponent(){
            initializeEventDispatcher();
            isFocusable = true;
            focusable = false;
        }
        public function grabFocus():void{
            try {
                if (stage){
                    stage.focus = this;
                };
            } catch(ex) {
            };
        }
        public function initializeWrapper(_arg1:Object, _arg2:Object):void{
            this.extWrapper = _arg2;
            this.wrapper = _arg1;
        }
        public function get interfaceChain():Array{
            return (["IMapFocusableComponent", "IWrappableSprite", "IWrappableEventDispatcher", "IEventDispatcher", "IWrappable"]);
        }
        public function releaseFocus():void{
            if (!hasFocus()){
                return;
            };
            try {
                if (stage){
                    stage.focus = null;
                };
            } catch(ex) {
            };
        }
        public function set wrapper(_arg1:Object):void{
            if (this.instance == null){
                this.instance = _arg1;
                this.onAttached();
            };
        }
        public function get focusable():Boolean{
            return (isFocusable);
        }
        private function initializeEventDispatcher():void{
            var _local1:BaseEventDispatcher;
            _local1 = new BaseEventDispatcher();
            _local1.addListenerMethod = super.addEventListener;
            _local1.removeListenerMethod = super.removeEventListener;
            _local1.willTriggerMethod = super.willTrigger;
            _local1.hasListenerMethod = super.hasEventListener;
            _local1.dispatchMethod = super.dispatchEvent;
            this.listenerCache = new WrappedListenerCache(this, _local1);
            this.baseEventDispatcher = _local1;
        }
        override public function removeEventListener(_arg1:String, _arg2:Function, _arg3:Boolean=false):void{
            if (this.listenerCache != null){
                this.listenerCache.removeEventListener(_arg1, _arg2, _arg3);
            } else {
                super.removeEventListener(_arg1, _arg2, _arg3);
            };
        }
        override public function addEventListener(_arg1:String, _arg2:Function, _arg3:Boolean=false, _arg4:int=0, _arg5:Boolean=false):void{
            if (this.listenerCache != null){
                this.listenerCache.addEventListener(_arg1, _arg2, _arg3, _arg4, _arg5);
            } else {
                super.addEventListener(_arg1, _arg2, _arg3, _arg4, _arg5);
            };
        }
        public function set focusable(_arg1:Boolean):void{
            tabEnabled = _arg1;
            isFocusable = _arg1;
        }
        public function hasFocus():Boolean{
            return (((stage) && ((stage.focus == this))));
        }
        public function getBaseEventDispatcher():Object{
            return (this.baseEventDispatcher);
        }
        protected function clearWrapper():void{
            this.listenerCache.clearEventCache();
            this.extWrapper = null;
            this.instance = null;
        }
        public function get wrapper():Object{
            return (this.instance);
        }
        public function getSprite():Sprite{
            return (this);
        }
        protected function onAttached():void{
        }

    }
}//package com.google.maps.wrappers 
﻿package com.google.maps.wrappers {
    import com.google.maps.overlays.*;
    import com.google.maps.interfaces.*;

    public class IGroundOverlayWrapper extends IOverlayWrapper implements IGroundOverlay {

        public function isHidden():Boolean{
            Wrapper.checkValid(this.instance);
            return (this.instance.isHidden());
        }
        override public function get interfaceChain():Array{
            return (["IGroundOverlay", "IOverlay"]);
        }
        public function hide():void{
            Wrapper.checkValid(this.instance);
            this.instance.hide();
        }
        public function getOptions():GroundOverlayOptions{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapGroundOverlayOptions(this.instance.getOptions()));
        }
        public function show():void{
            Wrapper.checkValid(this.instance);
            this.instance.show();
        }
        public function setOptions(_arg1:GroundOverlayOptions):void{
            Wrapper.checkValid(this.instance);
            this.instance.setOptions(this.extWrapper.wrapGroundOverlayOptions(_arg1));
        }

    }
}//package com.google.maps.wrappers 
﻿package com.google.maps.wrappers {
    import flash.display.*;
    import com.google.maps.interfaces.*;

    public class IOverlayWrapper extends EventDispatcherWrapper implements IOverlay {

        public function get foreground():DisplayObject{
            Wrapper.checkValid(this.instance);
            return (this.instance.foreground);
        }
        override public function get interfaceChain():Array{
            return (["IOverlay"]);
        }
        public function set pane(_arg1:IPane):void{
            Wrapper.checkValid(this.instance);
            this.instance.pane = this.extWrapper.wrapIPane(_arg1);
        }
        public function get shadow():DisplayObject{
            Wrapper.checkValid(this.instance);
            return (this.instance.shadow);
        }
        public function positionOverlay(_arg1:Boolean):void{
            Wrapper.checkValid(this.instance);
            this.instance.positionOverlay(_arg1);
        }
        public function get pane():IPane{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapIPane(this.instance.pane));
        }
        public function getDefaultPane(_arg1:IMap):IPane{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapIPane(this.instance.getDefaultPane(this.extWrapper.wrapIMap(_arg1))));
        }
        public function get visible():Boolean{
            Wrapper.checkValid(this.instance);
            return (this.instance.visible);
        }
        public function set visible(_arg1:Boolean):void{
            Wrapper.checkValid(this.instance);
            this.instance.visible = _arg1;
        }

    }
}//package com.google.maps.wrappers 
﻿package com.google.maps.wrappers {
    import com.google.maps.*;
    import com.google.maps.overlays.*;
    import com.google.maps.interfaces.*;

    public class IPolylineWrapper extends IOverlayWrapper implements IPolyline {

        public function isHidden():Boolean{
            Wrapper.checkValid(this.instance);
            return (this.instance.isHidden());
        }
        override public function get interfaceChain():Array{
            return (["IPolyline", "IOverlay"]);
        }
        public function setOptions(_arg1:PolylineOptions):void{
            Wrapper.checkValid(this.instance);
            this.instance.setOptions(this.extWrapper.wrapPolylineOptions(_arg1));
        }
        public function getVertexCount():Number{
            Wrapper.checkValid(this.instance);
            return (this.instance.getVertexCount());
        }
        public function getVertex(_arg1:Number):LatLng{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapLatLng(this.instance.getVertex(_arg1)));
        }
        public function hide():void{
            Wrapper.checkValid(this.instance);
            this.instance.hide();
        }
        public function getLatLngBounds():LatLngBounds{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapLatLngBounds(this.instance.getLatLngBounds()));
        }
        public function getLength(_arg1:Number=6378137):Number{
            Wrapper.checkValid(this.instance);
            return (this.instance.getLength(_arg1));
        }
        public function getOptions():PolylineOptions{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapPolylineOptions(this.instance.getOptions()));
        }
        public function show():void{
            Wrapper.checkValid(this.instance);
            this.instance.show();
        }

    }
}//package com.google.maps.wrappers 
﻿package com.google.maps.wrappers {
    import com.google.maps.*;
    import com.google.maps.interfaces.*;
    import flash.geom.*;

    public class IMapTypeWrapper extends EventDispatcherWrapper implements IMapType {

        public function getTextColor():Number{
            Wrapper.checkValid(this.instance);
            return (this.instance.getTextColor());
        }
        public function getCopyrights(_arg1:LatLngBounds, _arg2:Number):Array{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapCopyrightNoticeArray(this.instance.getCopyrights(this.extWrapper.wrapLatLngBounds(_arg1), _arg2)));
        }
        override public function get interfaceChain():Array{
            return (["IMapType"]);
        }
        public function getName(_arg1:Boolean=false):String{
            Wrapper.checkValid(this.instance);
            return (this.instance.getName(_arg1));
        }
        public function getSpanZoomLevel(_arg1:LatLng, _arg2:LatLng, _arg3:Point):Number{
            Wrapper.checkValid(this.instance);
            return (this.instance.getSpanZoomLevel(this.extWrapper.wrapLatLng(_arg1), this.extWrapper.wrapLatLng(_arg2), _arg3));
        }
        public function getRadius():Number{
            Wrapper.checkValid(this.instance);
            return (this.instance.getRadius());
        }
        public function getMinimumResolution(_arg1:LatLng=null):Number{
            Wrapper.checkValid(this.instance);
            return (this.instance.getMinimumResolution(this.extWrapper.wrapLatLng(_arg1)));
        }
        public function getTileLayers():Array{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapITileLayerArray(this.instance.getTileLayers()));
        }
        public function getMaximumResolution(_arg1:LatLng=null):Number{
            Wrapper.checkValid(this.instance);
            return (this.instance.getMaximumResolution(this.extWrapper.wrapLatLng(_arg1)));
        }
        public function getBoundsZoomLevel(_arg1:LatLngBounds, _arg2:Point):Number{
            Wrapper.checkValid(this.instance);
            return (this.instance.getBoundsZoomLevel(this.extWrapper.wrapLatLngBounds(_arg1), _arg2));
        }
        public function getProjection():IProjection{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapIProjection(this.instance.getProjection()));
        }
        public function getLinkColor():Number{
            Wrapper.checkValid(this.instance);
            return (this.instance.getLinkColor());
        }
        public function getErrorMessage():String{
            Wrapper.checkValid(this.instance);
            return (this.instance.getErrorMessage());
        }
        public function getTileSize():Number{
            Wrapper.checkValid(this.instance);
            return (this.instance.getTileSize());
        }
        public function setMaxResolutionOverride(_arg1:Number):void{
            Wrapper.checkValid(this.instance);
            this.instance.setMaxResolutionOverride(_arg1);
        }
        public function getMaxResolutionOverride():Number{
            Wrapper.checkValid(this.instance);
            return (this.instance.getMaxResolutionOverride());
        }
        public function getUrlArg():String{
            Wrapper.checkValid(this.instance);
            return (this.instance.getUrlArg());
        }
        public function getAlt():String{
            Wrapper.checkValid(this.instance);
            return (this.instance.getAlt());
        }

    }
}//package com.google.maps.wrappers 
﻿package com.google.maps.wrappers {
    import flash.display.*;
    import com.google.maps.interfaces.*;

    public class WrappableSprite extends Sprite implements IWrappableSprite {

        private var listenerCache:WrappedListenerCache;
        protected var extWrapper:Object;
        protected var instance:Object;
        private var baseEventDispatcher:BaseEventDispatcher;

        public function WrappableSprite(){
            initializeEventDispatcher();
        }
        public function initializeWrapper(_arg1:Object, _arg2:Object):void{
            this.extWrapper = _arg2;
            this.wrapper = _arg1;
        }
        public function get interfaceChain():Array{
            return (["IWrappableSprite", "IWrappableEventDispatcher", "IEventDispatcher", "IWrappable"]);
        }
        public function set wrapper(_arg1:Object):void{
            if (this.instance == null){
                this.instance = _arg1;
                this.onAttached();
            };
        }
        private function initializeEventDispatcher():void{
            var _local1:BaseEventDispatcher;
            _local1 = new BaseEventDispatcher();
            _local1.addListenerMethod = super.addEventListener;
            _local1.removeListenerMethod = super.removeEventListener;
            _local1.willTriggerMethod = super.willTrigger;
            _local1.hasListenerMethod = super.hasEventListener;
            _local1.dispatchMethod = super.dispatchEvent;
            this.listenerCache = new WrappedListenerCache(this, _local1);
            this.baseEventDispatcher = _local1;
        }
        override public function removeEventListener(_arg1:String, _arg2:Function, _arg3:Boolean=false):void{
            if (this.listenerCache != null){
                this.listenerCache.removeEventListener(_arg1, _arg2, _arg3);
            } else {
                super.removeEventListener(_arg1, _arg2, _arg3);
            };
        }
        override public function addEventListener(_arg1:String, _arg2:Function, _arg3:Boolean=false, _arg4:int=0, _arg5:Boolean=false):void{
            if (this.listenerCache != null){
                this.listenerCache.addEventListener(_arg1, _arg2, _arg3, _arg4, _arg5);
            } else {
                super.addEventListener(_arg1, _arg2, _arg3, _arg4, _arg5);
            };
        }
        public function getBaseEventDispatcher():Object{
            return (this.baseEventDispatcher);
        }
        protected function clearWrapper():void{
            this.listenerCache.clearEventCache();
            this.extWrapper = null;
            this.instance = null;
        }
        public function get wrapper():Object{
            return (this.instance);
        }
        public function getSprite():Sprite{
            return (this);
        }
        protected function onAttached():void{
        }

    }
}//package com.google.maps.wrappers 
﻿package com.google.maps.wrappers {
    import com.google.maps.interfaces.*;

    public class IInfoWindowWrapper extends IOverlayWrapper implements IInfoWindow {

        public function isHidden():Boolean{
            Wrapper.checkValid(this.instance);
            return (this.instance.isHidden());
        }
        public function show():void{
            Wrapper.checkValid(this.instance);
            this.instance.show();
        }
        override public function get interfaceChain():Array{
            return (["IInfoWindow", "IOverlay"]);
        }
        public function hide():void{
            Wrapper.checkValid(this.instance);
            this.instance.hide();
        }
        public function get removed():Boolean{
            Wrapper.checkValid(this.instance);
            return (this.instance.removed);
        }

    }
}//package com.google.maps.wrappers 
﻿package com.google.maps.wrappers {
    import com.google.maps.*;
    import com.google.maps.overlays.*;
    import com.google.maps.interfaces.*;

    public class IPolygonWrapper extends IOverlayWrapper implements IPolygon {

        public function isHidden():Boolean{
            Wrapper.checkValid(this.instance);
            return (this.instance.isHidden());
        }
        override public function get interfaceChain():Array{
            return (["IPolygon", "IOverlay"]);
        }
        public function getInnerVertexCount(_arg1:Number):Number{
            Wrapper.checkValid(this.instance);
            return (this.instance.getInnerVertexCount(_arg1));
        }
        public function hide():void{
            Wrapper.checkValid(this.instance);
            this.instance.hide();
        }
        public function getOuterVertex(_arg1:Number):LatLng{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapLatLng(this.instance.getOuterVertex(_arg1)));
        }
        public function getOuterVertexCount():Number{
            Wrapper.checkValid(this.instance);
            return (this.instance.getOuterVertexCount());
        }
        public function getLatLngBounds():LatLngBounds{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapLatLngBounds(this.instance.getLatLngBounds()));
        }
        public function setOptions(_arg1:PolygonOptions):void{
            Wrapper.checkValid(this.instance);
            this.instance.setOptions(this.extWrapper.wrapPolygonOptions(_arg1));
        }
        public function getInnerPolylineCount():Number{
            Wrapper.checkValid(this.instance);
            return (this.instance.getInnerPolylineCount());
        }
        public function getOptions():PolygonOptions{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapPolygonOptions(this.instance.getOptions()));
        }
        public function getInnerVertex(_arg1:Number, _arg2:Number):LatLng{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapLatLng(this.instance.getInnerVertex(_arg1, _arg2)));
        }
        public function show():void{
            Wrapper.checkValid(this.instance);
            this.instance.show();
        }

    }
}//package com.google.maps.wrappers 
﻿package com.google.maps.wrappers {
    import flash.display.*;
    import com.google.maps.controls.*;
    import com.google.maps.interfaces.*;
    import flash.geom.*;

    public class IControlWrapper extends WrappableComponent implements IControl {

        public function setControlPosition(_arg1:ControlPosition):void{
            Wrapper.checkValid(this.instance);
            this.instance.setControlPosition(this.extWrapper.wrapControlPosition(_arg1));
        }
        override public function get interfaceChain():Array{
            return (["IControl"]);
        }
        public function getControlPosition():ControlPosition{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapControlPosition(this.instance.getControlPosition()));
        }
        public function getSize():Point{
            Wrapper.checkValid(this.instance);
            return (this.instance.getSize());
        }
        public function initControlWithMap(_arg1:IMap):void{
            Wrapper.checkValid(this.instance);
            this.instance.initControlWithMap(this.extWrapper.wrapIMap(_arg1));
        }
        public function getDisplayObject():DisplayObject{
            Wrapper.checkValid(this.instance);
            return (this.instance.getDisplayObject());
        }

    }
}//package com.google.maps.wrappers 
﻿package com.google.maps.wrappers {
    import com.google.maps.interfaces.*;

    public class ITileLayerOverlayWrapper extends IOverlayWrapper implements ITileLayerOverlay {

        override public function get interfaceChain():Array{
            return (["ITileLayerOverlay", "IOverlay"]);
        }
        public function get projection():IProjection{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapIProjection(this.instance.projection));
        }
        public function get tileSize():int{
            Wrapper.checkValid(this.instance);
            return (this.instance.tileSize);
        }
        public function get tileLayer():ITileLayer{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapITileLayer(this.instance.tileLayer));
        }

    }
}//package com.google.maps.wrappers 
﻿package com.google.maps.wrappers {
    import com.google.maps.interfaces.*;

    public class IZoomControlWrapper extends IControlWrapper implements IZoomControl {

        override public function get interfaceChain():Array{
            return (["IZoomControl", "IControl"]);
        }

    }
}//package com.google.maps.wrappers 
﻿package com.google.maps.wrappers {
    import com.google.maps.interfaces.*;

    public class IScaleControlWrapper extends IControlWrapper implements IScaleControl {

        override public function get interfaceChain():Array{
            return (["IScaleControl", "IControl"]);
        }

    }
}//package com.google.maps.wrappers 
﻿package com.google.maps.wrappers {
    import com.google.maps.interfaces.*;

    public class IPaneManagerWrapper extends WrapperBase implements IPaneManager {

        public function createPane(_arg1:int=1):IPane{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapIPane(this.instance.createPane(_arg1)));
        }
        override public function get interfaceChain():Array{
            return (["IPaneManager"]);
        }
        public function removePane(_arg1:IPane):void{
            Wrapper.checkValid(this.instance);
            this.instance.removePane(this.extWrapper.wrapIPane(_arg1));
        }
        public function getPaneById(_arg1:int):IPane{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapIPane(this.instance.getPaneById(_arg1)));
        }
        public function getPaneIndex(_arg1:IPane):int{
            Wrapper.checkValid(this.instance);
            return (this.instance.getPaneIndex(this.extWrapper.wrapIPane(_arg1)));
        }
        public function get paneCount():int{
            Wrapper.checkValid(this.instance);
            return (this.instance.paneCount);
        }
        public function get map():IMap{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapIMap(this.instance.map));
        }
        public function removeAllPanes():void{
            Wrapper.checkValid(this.instance);
            this.instance.removeAllPanes();
        }
        public function placePaneAt(_arg1:IPane, _arg2:int):void{
            Wrapper.checkValid(this.instance);
            this.instance.placePaneAt(this.extWrapper.wrapIPane(_arg1), _arg2);
        }
        public function containsPane(_arg1:IPane):Boolean{
            Wrapper.checkValid(this.instance);
            return (this.instance.containsPane(this.extWrapper.wrapIPane(_arg1)));
        }
        public function clearOverlays():void{
            Wrapper.checkValid(this.instance);
            this.instance.clearOverlays();
        }
        public function getPaneAt(_arg1:int):IPane{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapIPane(this.instance.getPaneAt(_arg1)));
        }

    }
}//package com.google.maps.wrappers 
﻿package com.google.maps.wrappers {
    import flash.display.*;
    import com.google.maps.*;
    import com.google.maps.services.*;
    import com.google.maps.controls.*;
    import com.google.maps.overlays.*;
    import flash.events.*;
    import com.google.maps.interfaces.*;

    public class IMapsFactoryWrapper extends WrapperBase implements IMapsFactory {

        public function createClientGeocoder(_arg1:String=null, _arg2:LatLngBounds=null):Object{
            Wrapper.checkValid(this.instance);
            return (this.instance.createClientGeocoder(_arg1, this.extWrapper.wrapLatLngBounds(_arg2)));
        }
        public function createZoomControl2(_arg1:ZoomControlOptions=null):Object{
            Wrapper.checkValid(this.instance);
            return (this.instance.createZoomControl2(this.extWrapper.wrapZoomControlOptions(_arg1)));
        }
        public function setDefaultPolygonOptions(_arg1:PolygonOptions):void{
            Wrapper.checkValid(this.instance);
            this.instance.setDefaultPolygonOptions(this.extWrapper.wrapPolygonOptions(_arg1));
        }
        override public function get interfaceChain():Array{
            return (["IMapsFactory"]);
        }
        public function createPolygonFromEncoded(_arg1:Array, _arg2:PolygonOptions=null):Object{
            Wrapper.checkValid(this.instance);
            return (this.instance.createPolygonFromEncoded(_arg1, this.extWrapper.wrapPolygonOptions(_arg2)));
        }
        public function createOverviewMapControl2(_arg1:OverviewMapControlOptions=null):Object{
            Wrapper.checkValid(this.instance);
            return (this.instance.createOverviewMapControl2(this.extWrapper.wrapOverviewMapControlOptions(_arg1)));
        }
        public function createClientGeocoder2(_arg1:ClientGeocoderOptions=null):Object{
            Wrapper.checkValid(this.instance);
            return (this.instance.createClientGeocoder2(this.extWrapper.wrapClientGeocoderOptions(_arg1)));
        }
        public function createPolylineFromEncoded(_arg1:String, _arg2:Number, _arg3:String, _arg4:Number, _arg5:PolylineOptions=null):Object{
            Wrapper.checkValid(this.instance);
            return (this.instance.createPolylineFromEncoded(_arg1, _arg2, _arg3, _arg4, this.extWrapper.wrapPolylineOptions(_arg5)));
        }
        public function createPolygon(_arg1:Array, _arg2:PolygonOptions=null):Object{
            Wrapper.checkValid(this.instance);
            return (this.instance.createPolygon(this.extWrapper.wrapLatLngArray(_arg1), this.extWrapper.wrapPolygonOptions(_arg2)));
        }
        public function createCopyrightCollection(_arg1:String=null):Object{
            Wrapper.checkValid(this.instance);
            return (this.instance.createCopyrightCollection(_arg1));
        }
        public function getDefaultMapType(_arg1:String):IMapType{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapIMapType(this.instance.getDefaultMapType(_arg1)));
        }
        public function createMapTypeControl2(_arg1:MapTypeControlOptions=null):Object{
            Wrapper.checkValid(this.instance);
            return (this.instance.createMapTypeControl2(this.extWrapper.wrapMapTypeControlOptions(_arg1)));
        }
        public function createTileLayerOverlay(_arg1:ITileLayer, _arg2:int=0x0100, _arg3:IProjection=null):Object{
            Wrapper.checkValid(this.instance);
            return (this.instance.createTileLayerOverlay(this.extWrapper.wrapITileLayer(_arg1), _arg2, this.extWrapper.wrapIProjection(_arg3)));
        }
        public function setDefaultGroundOverlayOptions(_arg1:GroundOverlayOptions):void{
            Wrapper.checkValid(this.instance);
            this.instance.setDefaultGroundOverlayOptions(this.extWrapper.wrapGroundOverlayOptions(_arg1));
        }
        public function createMapType(_arg1:Array, _arg2:IProjection, _arg3:String, _arg4:MapTypeOptions=null):Object{
            Wrapper.checkValid(this.instance);
            return (this.instance.createMapType(this.extWrapper.wrapITileLayerArray(_arg1), this.extWrapper.wrapIProjection(_arg2), _arg3, this.extWrapper.wrapMapTypeOptions(_arg4)));
        }
        public function setDefaultPolylineOptions(_arg1:PolylineOptions):void{
            Wrapper.checkValid(this.instance);
            this.instance.setDefaultPolylineOptions(this.extWrapper.wrapPolylineOptions(_arg1));
        }
        public function createMap(_arg1:Sprite, _arg2:IEventDispatcher):Object{
            Wrapper.checkValid(this.instance);
            return (this.instance.createMap(_arg1, this.extWrapper.wrapIEventDispatcher(_arg2)));
        }
        public function getDefaultPolylineOptions():PolylineOptions{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapPolylineOptions(this.instance.getDefaultPolylineOptions()));
        }
        public function createScaleControl2(_arg1:ScaleControlOptions=null):Object{
            Wrapper.checkValid(this.instance);
            return (this.instance.createScaleControl2(this.extWrapper.wrapScaleControlOptions(_arg1)));
        }
        public function getDefaultInfoWindowOptions():InfoWindowOptions{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapInfoWindowOptions(this.instance.getDefaultInfoWindowOptions()));
        }
        public function createNavigationControl2(_arg1:NavigationControlOptions=null):Object{
            Wrapper.checkValid(this.instance);
            return (this.instance.createNavigationControl2(this.extWrapper.wrapNavigationControlOptions(_arg1)));
        }
        public function getDefaultMarkerOptions():MarkerOptions{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapMarkerOptions(this.instance.getDefaultMarkerOptions()));
        }
        public function reportMouseEvent(_arg1:MouseEvent):void{
            Wrapper.checkValid(this.instance);
            this.instance.reportMouseEvent(this.extWrapper.wrapMouseEvent(_arg1));
        }
        public function createGroundOverlay(_arg1:DisplayObject, _arg2:LatLngBounds, _arg3:GroundOverlayOptions=null):Object{
            Wrapper.checkValid(this.instance);
            return (this.instance.createGroundOverlay(_arg1, this.extWrapper.wrapLatLngBounds(_arg2), this.extWrapper.wrapGroundOverlayOptions(_arg3)));
        }
        public function setDefaultInfoWindowOptions(_arg1:InfoWindowOptions):void{
            Wrapper.checkValid(this.instance);
            this.instance.setDefaultInfoWindowOptions(this.extWrapper.wrapInfoWindowOptions(_arg1));
        }
        public function setDefaultMarkerOptions(_arg1:MarkerOptions):void{
            Wrapper.checkValid(this.instance);
            this.instance.setDefaultMarkerOptions(this.extWrapper.wrapMarkerOptions(_arg1));
        }
        public function createOverviewMapControl(_arg1:Sprite, _arg2:IEventDispatcher, _arg3:OverviewMapControlOptions=null):Object{
            Wrapper.checkValid(this.instance);
            return (this.instance.createOverviewMapControl(_arg1, this.extWrapper.wrapIEventDispatcher(_arg2), this.extWrapper.wrapOverviewMapControlOptions(_arg3)));
        }
        public function createPositionControl(_arg1:Sprite, _arg2:IEventDispatcher, _arg3:PositionControlOptions=null):Object{
            Wrapper.checkValid(this.instance);
            return (this.instance.createPositionControl(_arg1, this.extWrapper.wrapIEventDispatcher(_arg2), this.extWrapper.wrapPositionControlOptions(_arg3)));
        }
        public function createPositionControl2(_arg1:PositionControlOptions=null):Object{
            Wrapper.checkValid(this.instance);
            return (this.instance.createPositionControl2(this.extWrapper.wrapPositionControlOptions(_arg1)));
        }
        public function createPolyline(_arg1:Array, _arg2:PolylineOptions=null):Object{
            Wrapper.checkValid(this.instance);
            return (this.instance.createPolyline(this.extWrapper.wrapLatLngArray(_arg1), this.extWrapper.wrapPolylineOptions(_arg2)));
        }
        public function getDefaultGroundOverlayOptions():GroundOverlayOptions{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapGroundOverlayOptions(this.instance.getDefaultGroundOverlayOptions()));
        }
        public function createMapTypeControl(_arg1:Sprite, _arg2:IEventDispatcher, _arg3:MapTypeControlOptions=null):Object{
            Wrapper.checkValid(this.instance);
            return (this.instance.createMapTypeControl(_arg1, this.extWrapper.wrapIEventDispatcher(_arg2), this.extWrapper.wrapMapTypeControlOptions(_arg3)));
        }
        public function createMarker(_arg1:LatLng, _arg2:MarkerOptions=null):Object{
            Wrapper.checkValid(this.instance);
            return (this.instance.createMarker(this.extWrapper.wrapLatLng(_arg1), this.extWrapper.wrapMarkerOptions(_arg2)));
        }
        public function setDefaultMapTypeOptions(_arg1:MapTypeOptions):void{
            Wrapper.checkValid(this.instance);
            this.instance.setDefaultMapTypeOptions(this.extWrapper.wrapMapTypeOptions(_arg1));
        }
        public function getDefaultMapTypesList():Array{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapIMapTypeArray(this.instance.getDefaultMapTypesList()));
        }
        public function createZoomControl(_arg1:Sprite, _arg2:IEventDispatcher, _arg3:ZoomControlOptions=null):Object{
            Wrapper.checkValid(this.instance);
            return (this.instance.createZoomControl(_arg1, this.extWrapper.wrapIEventDispatcher(_arg2), this.extWrapper.wrapZoomControlOptions(_arg3)));
        }
        public function getDefaultPolygonOptions():PolygonOptions{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapPolygonOptions(this.instance.getDefaultPolygonOptions()));
        }
        public function createDirections(_arg1:DirectionsOptions=null):Object{
            Wrapper.checkValid(this.instance);
            return (this.instance.createDirections(this.extWrapper.wrapDirectionsOptions(_arg1)));
        }
        public function createMap2(_arg1:MapOptions=null):Object{
            Wrapper.checkValid(this.instance);
            return (this.instance.createMap2(this.extWrapper.wrapMapOptions(_arg1)));
        }
        public function getDefaultMapTypeOptions():MapTypeOptions{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapMapTypeOptions(this.instance.getDefaultMapTypeOptions()));
        }
        public function setClientFactory(_arg1:IClientFactory):void{
            Wrapper.checkValid(this.instance);
            this.instance.setClientFactory(this.extWrapper.wrapIClientFactory(_arg1));
        }

    }
}//package com.google.maps.wrappers 
﻿package com.google.maps.wrappers {
    import com.google.maps.interfaces.*;

    public class WrapperBase implements IWrappable {

        protected var extWrapper:Object;
        protected var instance:Object;

        protected function onAttached():void{
        }
        protected function clearWrapper():void{
            this.extWrapper = null;
            this.instance = null;
        }
        public function get interfaceChain():Array{
            return (null);
        }
        public function set wrapper(_arg1:Object):void{
            if (this.instance == null){
                this.instance = _arg1;
                this.onAttached();
            };
        }
        public function get wrapper():Object{
            return (this.instance);
        }
        function initializeWrapper(_arg1:Object, _arg2:Object):void{
            this.extWrapper = _arg2;
            this.wrapper = _arg1;
        }

    }
}//package com.google.maps.wrappers 
﻿package com.google.maps.wrappers {
    import flash.events.*;

    public class WrappedListenerCache {

        private var eventDispatcher:IEventDispatcher;
        private var target:Object;
        private var callbackMap:Object;

        public function WrappedListenerCache(_arg1:Object, _arg2:IEventDispatcher){
            this.callbackMap = {};
            this.target = _arg1;
            this.eventDispatcher = _arg2;
        }
        public function removeEventListener(_arg1:String, _arg2:Function, _arg3:Boolean=false):void{
            var _local4:Array;
            var _local5:int;
            if (!Wrapper.instance().isLibraryEvent(_arg1)){
                this.eventDispatcher.removeEventListener(_arg1, _arg2, _arg3);
                return;
            };
            _local4 = this.callbackMap[_arg1];
            if (_local4){
                _local5 = (_local4.length - 1);
                while (_local5 >= 0) {
                    if ((((_arg2 == _local4[_local5].original)) && ((_arg3 == _local4[_local5].useCapture)))){
                        this.eventDispatcher.removeEventListener(_arg1, _local4[_local5].wrapped, _arg3);
                        _local4.splice(_local5, 1);
                        break;
                    };
                    _local5--;
                };
            };
        }
        public function addEventListener(_arg1:String, _arg2:Function, _arg3:Boolean=false, _arg4:int=0, _arg5:Boolean=false):void{
            var _local6:Function;
            var _local7:Object;
            var _local8:Array;
            if (!Wrapper.instance().isLibraryEvent(_arg1)){
                this.eventDispatcher.addEventListener(_arg1, _arg2, _arg3, _arg4, _arg5);
                return;
            };
            _local6 = Wrapper.instance().wrapEventHandler(_arg2, target);
            _local7 = {
                original:_arg2,
                wrapped:_local6,
                useCapture:_arg3
            };
            _local8 = this.callbackMap[_arg1];
            if (_local8 != null){
                _local8.push(_local7);
            } else {
                this.callbackMap[_arg1] = [_local7];
            };
            this.eventDispatcher.addEventListener(_arg1, _local6, _arg3, _arg4, _arg5);
        }
        public function clearEventCache():void{
            var _local1:String;
            var _local2:Array;
            var _local3:int;
            var _local4:Object;
            for (_local1 in this.callbackMap) {
                _local2 = this.callbackMap[_local1];
                _local3 = 0;
                while (_local3 < _local2.length) {
                    _local4 = _local2[_local3];
                    this.eventDispatcher.removeEventListener(_local1, _local4.wrapped, _local4.useCapture);
                    _local3++;
                };
            };
            this.callbackMap = {};
        }

    }
}//package com.google.maps.wrappers 
﻿package com.google.maps.wrappers {
    import com.google.maps.interfaces.*;

    public class INavigationControlWrapper extends IControlWrapper implements INavigationControl {

        override public function get interfaceChain():Array{
            return (["INavigationControl", "IControl"]);
        }

    }
}//package com.google.maps.wrappers 
﻿package com.google.maps.wrappers {
    import flash.events.*;
    import com.google.maps.interfaces.*;

    public class EventDispatcherWrapper extends WrapperBase implements IWrappableEventDispatcher {

        private var baseEventDispatcher:Object;
        private var listenerCache:WrappedListenerCache;

        public function dispatchEvent(_arg1:Event):Boolean{
            return (baseEventDispatcher.dispatchEvent(_arg1));
        }
        override protected function clearWrapper():void{
            this.listenerCache.clearEventCache();
            super.clearWrapper();
        }
        public function removeEventListener(_arg1:String, _arg2:Function, _arg3:Boolean=false):void{
            listenerCache.removeEventListener(_arg1, _arg2, _arg3);
        }
        public function addEventListener(_arg1:String, _arg2:Function, _arg3:Boolean=false, _arg4:int=0, _arg5:Boolean=false):void{
            listenerCache.addEventListener(_arg1, _arg2, _arg3, _arg4, _arg5);
        }
        public function getBaseEventDispatcher():Object{
            return (this.baseEventDispatcher);
        }
        public function willTrigger(_arg1:String):Boolean{
            return (baseEventDispatcher.willTrigger(_arg1));
        }
        override protected function onAttached():void{
            super.onAttached();
            initializeEventDispatcher(this.instance);
        }
        public function initializeEventDispatcher(_arg1:Object):void{
            var _local2:Object;
            var _local3:BaseEventDispatcher;
            if (this.listenerCache != null){
                return;
            };
            _local2 = _arg1.getBaseEventDispatcher();
            _local3 = new BaseEventDispatcher();
            _local3.addListenerMethod = _local2.addEventListener;
            _local3.removeListenerMethod = _local2.removeEventListener;
            _local3.willTriggerMethod = _local2.willTrigger;
            _local3.hasListenerMethod = _local2.hasEventListener;
            _local3.dispatchMethod = _local2.dispatchEvent;
            this.listenerCache = new WrappedListenerCache(this, _local3);
            this.baseEventDispatcher = _local2;
        }
        public function hasEventListener(_arg1:String):Boolean{
            return (baseEventDispatcher.hasEventListener(_arg1));
        }

    }
}//package com.google.maps.wrappers 
﻿package com.google.maps.wrappers {
    import com.google.maps.interfaces.*;

    public class IMapTypeControlWrapper extends IControlWrapper implements IMapTypeControl {

        override public function get interfaceChain():Array{
            return (["IMapTypeControl", "IControl"]);
        }

    }
}//package com.google.maps.wrappers 
﻿package com.google.maps.wrappers {
    import com.google.maps.interfaces.*;

    public class IPositionControlWrapper extends IControlWrapper implements IPositionControl {

        override public function get interfaceChain():Array{
            return (["IPositionControl", "IControl"]);
        }

    }
}//package com.google.maps.wrappers 
﻿package com.google.maps.wrappers {
    import com.google.maps.*;
    import com.google.maps.interfaces.*;
    import flash.geom.*;

    public class IPaneWrapper extends EventDispatcherWrapper implements IPane {

        public function fromLatLngToPaneCoords(_arg1:LatLng, _arg2:Boolean=false):Point{
            Wrapper.checkValid(this.instance);
            return (this.instance.fromLatLngToPaneCoords(this.extWrapper.wrapLatLng(_arg1), _arg2));
        }
        override public function get interfaceChain():Array{
            return (["IPane"]);
        }
        public function updatePosition(_arg1:Boolean=false):void{
            Wrapper.checkValid(this.instance);
            this.instance.updatePosition(_arg1);
        }
        public function fromProjectionPointToPaneCoords(_arg1:Point):Point{
            Wrapper.checkValid(this.instance);
            return (this.instance.fromProjectionPointToPaneCoords(_arg1));
        }
        public function get id():uint{
            Wrapper.checkValid(this.instance);
            return (this.instance.id);
        }
        public function removeOverlay(_arg1:IOverlay):void{
            Wrapper.checkValid(this.instance);
            this.instance.removeOverlay(this.extWrapper.wrapIOverlay(_arg1));
        }
        public function get paneManager():IPaneManager{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapIPaneManager(this.instance.paneManager));
        }
        public function fromPaneCoordsToLatLng(_arg1:Point, _arg2:Boolean=false):LatLng{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapLatLng(this.instance.fromPaneCoordsToLatLng(_arg1, _arg2)));
        }
        public function invalidate():void{
            Wrapper.checkValid(this.instance);
            this.instance.invalidate();
        }
        public function clear():void{
            Wrapper.checkValid(this.instance);
            this.instance.clear();
        }
        public function bringToTop(_arg1:IOverlay):void{
            Wrapper.checkValid(this.instance);
            this.instance.bringToTop(this.extWrapper.wrapIOverlay(_arg1));
        }
        public function get map():IMap{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapIMap(this.instance.map));
        }
        public function addOverlay(_arg1:IOverlay):void{
            Wrapper.checkValid(this.instance);
            this.instance.addOverlay(this.extWrapper.wrapIOverlay(_arg1));
        }
        public function set visible(_arg1:Boolean):void{
            Wrapper.checkValid(this.instance);
            this.instance.visible = _arg1;
        }
        public function getViewportBounds():Rectangle{
            Wrapper.checkValid(this.instance);
            return (this.instance.getViewportBounds());
        }
        public function get visible():Boolean{
            Wrapper.checkValid(this.instance);
            return (this.instance.visible);
        }
        public function fromPaneCoordsToProjectionPoint(_arg1:Point):Point{
            Wrapper.checkValid(this.instance);
            return (this.instance.fromPaneCoordsToProjectionPoint(_arg1));
        }

    }
}//package com.google.maps.wrappers 
﻿package com.google.maps.wrappers {
    import flash.display.*;
    import com.google.maps.interfaces.*;
    import flash.geom.*;

    public class ITileLayerWrapper extends WrapperBase implements ITileLayer {

        public function setMapType(_arg1:IMapType):void{
            Wrapper.checkValid(this.instance);
            this.instance.setMapType(this.extWrapper.wrapIMapType(_arg1));
        }
        override public function get interfaceChain():Array{
            return (["ITileLayer"]);
        }
        public function getCopyrightCollection():ICopyrightCollection{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapICopyrightCollection(this.instance.getCopyrightCollection()));
        }
        public function getMapType():IMapType{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapIMapType(this.instance.getMapType()));
        }
        public function getMinResolution():Number{
            Wrapper.checkValid(this.instance);
            return (this.instance.getMinResolution());
        }
        public function getAlpha():Number{
            Wrapper.checkValid(this.instance);
            return (this.instance.getAlpha());
        }
        public function getMaxResolution():Number{
            Wrapper.checkValid(this.instance);
            return (this.instance.getMaxResolution());
        }
        public function loadTile(_arg1:Point, _arg2:Number):DisplayObject{
            Wrapper.checkValid(this.instance);
            return (this.instance.loadTile(_arg1, _arg2));
        }

    }
}//package com.google.maps.wrappers 
﻿package com.google.maps.wrappers {
    import com.google.maps.*;
    import com.google.maps.overlays.*;
    import com.google.maps.interfaces.*;

    public class IMarkerWrapper extends IOverlayWrapper implements IMarker {

        override public function get interfaceChain():Array{
            return (["IMarker", "IOverlay"]);
        }
        public function isHidden():Boolean{
            Wrapper.checkValid(this.instance);
            return (this.instance.isHidden());
        }
        public function openInfoWindow(_arg1:InfoWindowOptions=null):IInfoWindow{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapIInfoWindow(this.instance.openInfoWindow(this.extWrapper.wrapInfoWindowOptions(_arg1))));
        }
        public function setLatLng(_arg1:LatLng):void{
            Wrapper.checkValid(this.instance);
            this.instance.setLatLng(this.extWrapper.wrapLatLng(_arg1));
        }
        public function hide():void{
            Wrapper.checkValid(this.instance);
            this.instance.hide();
        }
        public function closeInfoWindow():void{
            Wrapper.checkValid(this.instance);
            this.instance.closeInfoWindow();
        }
        public function getOptions():MarkerOptions{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapMarkerOptions(this.instance.getOptions()));
        }
        public function getLatLng():LatLng{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapLatLng(this.instance.getLatLng()));
        }
        public function show():void{
            Wrapper.checkValid(this.instance);
            this.instance.show();
        }
        public function setOptions(_arg1:MarkerOptions):void{
            Wrapper.checkValid(this.instance);
            this.instance.setOptions(this.extWrapper.wrapMarkerOptions(_arg1));
        }

    }
}//package com.google.maps.wrappers 
﻿package com.google.maps.wrappers {
    import com.google.maps.*;
    import com.google.maps.services.*;
    import com.google.maps.interfaces.*;

    public class IClientGeocoderWrapper extends EventDispatcherWrapper implements IClientGeocoder {

        override public function get interfaceChain():Array{
            return (["IClientGeocoder"]);
        }
        public function getBaseCountryCode():String{
            Wrapper.checkValid(this.instance);
            return (this.instance.getBaseCountryCode());
        }
        public function setBaseCountryCode(_arg1:String):void{
            Wrapper.checkValid(this.instance);
            this.instance.setBaseCountryCode(_arg1);
        }
        public function geocode(_arg1:String):void{
            Wrapper.checkValid(this.instance);
            this.instance.geocode(_arg1);
        }
        public function setViewport(_arg1:LatLngBounds):void{
            Wrapper.checkValid(this.instance);
            this.instance.setViewport(this.extWrapper.wrapLatLngBounds(_arg1));
        }
        public function getViewport():LatLngBounds{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapLatLngBounds(this.instance.getViewport()));
        }
        public function getOptions():ClientGeocoderOptions{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapClientGeocoderOptions(this.instance.getOptions()));
        }
        public function resetCache():void{
            Wrapper.checkValid(this.instance);
            this.instance.resetCache();
        }
        public function reverseGeocode(_arg1:LatLng):void{
            Wrapper.checkValid(this.instance);
            this.instance.reverseGeocode(this.extWrapper.wrapLatLng(_arg1));
        }
        public function setOptions(_arg1:ClientGeocoderOptions):void{
            Wrapper.checkValid(this.instance);
            this.instance.setOptions(this.extWrapper.wrapClientGeocoderOptions(_arg1));
        }

    }
}//package com.google.maps.wrappers 
﻿package com.google.maps.wrappers {
    import flash.events.*;

    public class BaseEventDispatcher extends WrapperBase implements IEventDispatcher {

        public var willTriggerMethod:Function;
        public var removeListenerMethod:Function;
        public var hasListenerMethod:Function;
        public var addListenerMethod:Function;
        public var dispatchMethod:Function;

        public function dispatchEvent(_arg1:Event):Boolean{
            return (dispatchMethod(_arg1));
        }
        public function removeEventListener(_arg1:String, _arg2:Function, _arg3:Boolean=false):void{
            removeListenerMethod(_arg1, _arg2, _arg3);
        }
        public function addEventListener(_arg1:String, _arg2:Function, _arg3:Boolean=false, _arg4:int=0, _arg5:Boolean=false):void{
            addListenerMethod(_arg1, _arg2, _arg3, _arg4, _arg5);
        }
        public function willTrigger(_arg1:String):Boolean{
            return (willTriggerMethod(_arg1));
        }
        public function hasEventListener(_arg1:String):Boolean{
            return (hasListenerMethod(_arg1));
        }

    }
}//package com.google.maps.wrappers 
﻿package com.google.maps.wrappers {
    import flash.display.*;
    import com.google.maps.*;
    import com.google.maps.controls.*;
    import com.google.maps.interfaces.*;
    import flash.geom.*;
    import flash.utils.*;

    public class IMapWrapper extends WrappableComponent implements IMap {

        public function IMapWrapper(){
            if (getQualifiedClassName(this).indexOf("::IMapWrapper") != -1){
                throw (new Error(("Abstract class - " + "Cannot instantiate objects of class IMapWrapper directly")));
            };
        }
        public function getCurrentMapType():IMapType{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapIMapType(this.instance.getCurrentMapType()));
        }
        public function setMapType(_arg1:IMapType):void{
            Wrapper.checkValid(this.instance);
            this.instance.setMapType(this.extWrapper.wrapIMapType(_arg1));
        }
        public function getBoundsZoomLevel(_arg1:LatLngBounds):Number{
            Wrapper.checkValid(this.instance);
            return (this.instance.getBoundsZoomLevel(this.extWrapper.wrapLatLngBounds(_arg1)));
        }
        public function getPaneManager():IPaneManager{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapIPaneManager(this.instance.getPaneManager()));
        }
        public function clearControls():void{
            Wrapper.checkValid(this.instance);
            this.instance.clearControls();
        }
        public function controlByKeyboardEnabled():Boolean{
            Wrapper.checkValid(this.instance);
            return (this.instance.controlByKeyboardEnabled());
        }
        public function openInfoWindow(_arg1:LatLng, _arg2:InfoWindowOptions=null):IInfoWindow{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapIInfoWindow(this.instance.openInfoWindow(this.extWrapper.wrapLatLng(_arg1), this.extWrapper.wrapInfoWindowOptions(_arg2))));
        }
        public function removeControl(_arg1:IControl):void{
            Wrapper.checkValid(this.instance);
            this.instance.removeControl(this.extWrapper.wrapIControl(_arg1));
        }
        public function getDoubleClickMode():Number{
            Wrapper.checkValid(this.instance);
            return (this.instance.getDoubleClickMode());
        }
        public function getProjection():IProjection{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapIProjection(this.instance.getProjection()));
        }
        public function getZoom():Number{
            Wrapper.checkValid(this.instance);
            return (this.instance.getZoom());
        }
        public function disableDragging():void{
            Wrapper.checkValid(this.instance);
            this.instance.disableDragging();
        }
        public function loadResourceString(_arg1:String):String{
            Wrapper.checkValid(this.instance);
            return (this.instance.loadResourceString(_arg1));
        }
        public function zoomIn(_arg1:LatLng=null, _arg2:Boolean=false, _arg3:Boolean=false):void{
            Wrapper.checkValid(this.instance);
            this.instance.zoomIn(this.extWrapper.wrapLatLng(_arg1), _arg2, _arg3);
        }
        public function getOptions():MapOptions{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapMapOptions(this.instance.getOptions()));
        }
        public function displayHint(_arg1:String):void{
            Wrapper.checkValid(this.instance);
            this.instance.displayHint(_arg1);
        }
        public function placeControl(_arg1:IControl, _arg2:ControlPosition):void{
            Wrapper.checkValid(this.instance);
            this.instance.placeControl(this.extWrapper.wrapIControl(_arg1), this.extWrapper.wrapControlPosition(_arg2));
        }
        public function enableCrosshairs():void{
            Wrapper.checkValid(this.instance);
            this.instance.enableCrosshairs();
        }
        public function addOverlay(_arg1:IOverlay):void{
            Wrapper.checkValid(this.instance);
            this.instance.addOverlay(this.extWrapper.wrapIOverlay(_arg1));
        }
        public function getSize():Point{
            Wrapper.checkValid(this.instance);
            return (this.instance.getSize());
        }
        public function scrollWheelZoomEnabled():Boolean{
            Wrapper.checkValid(this.instance);
            return (this.instance.scrollWheelZoomEnabled());
        }
        public function zoomOut(_arg1:LatLng=null, _arg2:Boolean=false):void{
            Wrapper.checkValid(this.instance);
            this.instance.zoomOut(this.extWrapper.wrapLatLng(_arg1), _arg2);
        }
        public function disableContinuousZoom():void{
            Wrapper.checkValid(this.instance);
            this.instance.disableContinuousZoom();
        }
        public function closeInfoWindow():Boolean{
            Wrapper.checkValid(this.instance);
            return (this.instance.closeInfoWindow());
        }
        public function set overlayRaising(_arg1:Boolean):void{
            Wrapper.checkValid(this.instance);
            this.instance.overlayRaising = _arg1;
        }
        public function configureMap():void{
            Wrapper.checkValid(this.instance);
            this.instance.configureMap();
        }
        public function returnToSavedPosition():void{
            Wrapper.checkValid(this.instance);
            this.instance.returnToSavedPosition();
        }
        public function fromLatLngToPoint(_arg1:LatLng, _arg2:Number=NaN):Point{
            Wrapper.checkValid(this.instance);
            return (this.instance.fromLatLngToPoint(this.extWrapper.wrapLatLng(_arg1), _arg2));
        }
        public function disableControlByKeyboard():void{
            Wrapper.checkValid(this.instance);
            this.instance.disableControlByKeyboard();
        }
        public function addMapType(_arg1:IMapType):void{
            Wrapper.checkValid(this.instance);
            this.instance.addMapType(this.extWrapper.wrapIMapType(_arg1));
        }
        public function getMaxZoomLevel(_arg1:IMapType=null, _arg2:LatLng=null):Number{
            Wrapper.checkValid(this.instance);
            return (this.instance.getMaxZoomLevel(this.extWrapper.wrapIMapType(_arg1), this.extWrapper.wrapLatLng(_arg2)));
        }
        public function draggingEnabled():Boolean{
            Wrapper.checkValid(this.instance);
            return (this.instance.draggingEnabled());
        }
        public function getDisplayObject():DisplayObject{
            Wrapper.checkValid(this.instance);
            return (this.instance.getDisplayObject());
        }
        public function unload():void{
            Wrapper.checkValid(this.instance);
            this.instance.unload();
        }
        override public function get interfaceChain():Array{
            return (["IMap"]);
        }
        public function getImplementationVersion():String{
            Wrapper.checkValid(this.instance);
            return (this.instance.getImplementationVersion());
        }
        public function removeOverlay(_arg1:IOverlay):void{
            Wrapper.checkValid(this.instance);
            this.instance.removeOverlay(this.extWrapper.wrapIOverlay(_arg1));
        }
        public function get overlayRaising():Boolean{
            Wrapper.checkValid(this.instance);
            return (this.instance.overlayRaising);
        }
        public function getCenter():LatLng{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapLatLng(this.instance.getCenter()));
        }
        public function setZoom(_arg1:Number, _arg2:Boolean=false):void{
            Wrapper.checkValid(this.instance);
            this.instance.setZoom(_arg1, _arg2);
        }
        public function setCenter(_arg1:LatLng, _arg2:Number=NaN, _arg3:IMapType=null):void{
            Wrapper.checkValid(this.instance);
            this.instance.setCenter(this.extWrapper.wrapLatLng(_arg1), _arg2, this.extWrapper.wrapIMapType(_arg3));
        }
        public function continuousZoomEnabled():Boolean{
            Wrapper.checkValid(this.instance);
            return (this.instance.continuousZoomEnabled());
        }
        public function enableControlByKeyboard():void{
            Wrapper.checkValid(this.instance);
            this.instance.enableControlByKeyboard();
        }
        public function crosshairsEnabled():Boolean{
            Wrapper.checkValid(this.instance);
            return (this.instance.crosshairsEnabled());
        }
        public function disableScrollWheelZoom():void{
            Wrapper.checkValid(this.instance);
            this.instance.disableScrollWheelZoom();
        }
        public function addControl(_arg1:IControl):void{
            Wrapper.checkValid(this.instance);
            this.instance.addControl(this.extWrapper.wrapIControl(_arg1));
        }
        public function enableScrollWheelZoom():void{
            Wrapper.checkValid(this.instance);
            this.instance.enableScrollWheelZoom();
        }
        public function fromPointToLatLng(_arg1:Point, _arg2:Number=NaN, _arg3:Boolean=false):LatLng{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapLatLng(this.instance.fromPointToLatLng(_arg1, _arg2, _arg3)));
        }
        public function setSize(_arg1:Point):void{
            Wrapper.checkValid(this.instance);
            this.instance.setSize(_arg1);
        }
        public function clearOverlays():void{
            Wrapper.checkValid(this.instance);
            this.instance.clearOverlays();
        }
        public function removeMapType(_arg1:IMapType):void{
            Wrapper.checkValid(this.instance);
            this.instance.removeMapType(this.extWrapper.wrapIMapType(_arg1));
        }
        public function disableCrosshairs():void{
            Wrapper.checkValid(this.instance);
            this.instance.disableCrosshairs();
        }
        public function monitorCopyright(_arg1:IMap):void{
            Wrapper.checkValid(this.instance);
            this.instance.monitorCopyright(this.extWrapper.wrapIMap(_arg1));
        }
        public function fromLatLngToViewport(_arg1:LatLng, _arg2:Boolean=false):Point{
            Wrapper.checkValid(this.instance);
            return (this.instance.fromLatLngToViewport(this.extWrapper.wrapLatLng(_arg1), _arg2));
        }
        public function getMinZoomLevel(_arg1:IMapType=null, _arg2:LatLng=null):Number{
            Wrapper.checkValid(this.instance);
            return (this.instance.getMinZoomLevel(this.extWrapper.wrapIMapType(_arg1), this.extWrapper.wrapLatLng(_arg2)));
        }
        public function setDoubleClickMode(_arg1:Number):void{
            Wrapper.checkValid(this.instance);
            this.instance.setDoubleClickMode(_arg1);
        }
        public function savePosition():void{
            Wrapper.checkValid(this.instance);
            this.instance.savePosition();
        }
        public function isLoaded():Boolean{
            Wrapper.checkValid(this.instance);
            return (this.instance.isLoaded());
        }
        public function getLatLngBounds():LatLngBounds{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapLatLngBounds(this.instance.getLatLngBounds()));
        }
        public function panBy(_arg1:Point):void{
            Wrapper.checkValid(this.instance);
            this.instance.panBy(_arg1);
        }
        public function enableContinuousZoom():void{
            Wrapper.checkValid(this.instance);
            this.instance.enableContinuousZoom();
        }
        public function get MERCATOR_PROJECTION():IProjection{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapIProjection(this.instance.MERCATOR_PROJECTION));
        }
        public function fromViewportToLatLng(_arg1:Point, _arg2:Boolean=false):LatLng{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapLatLng(this.instance.fromViewportToLatLng(_arg1, _arg2)));
        }
        public function getMapTypes():Array{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapIMapTypeArray(this.instance.getMapTypes()));
        }
        public function panTo(_arg1:LatLng):void{
            Wrapper.checkValid(this.instance);
            this.instance.panTo(this.extWrapper.wrapLatLng(_arg1));
        }
        public function enableDragging():void{
            Wrapper.checkValid(this.instance);
            this.instance.enableDragging();
        }

    }
}//package com.google.maps.wrappers 
﻿package com.google.maps.wrappers {
    import com.google.maps.*;
    import com.google.maps.interfaces.*;
    import flash.geom.*;

    public class IProjectionWrapper extends WrapperBase implements IProjection {

        public function tileCheckRange(_arg1:Point, _arg2:Number, _arg3:Number):Boolean{
            Wrapper.checkValid(this.instance);
            return (this.instance.tileCheckRange(_arg1, _arg2, _arg3));
        }
        override public function get interfaceChain():Array{
            return (["IProjection"]);
        }
        public function getWrapWidth(_arg1:Number):Number{
            Wrapper.checkValid(this.instance);
            return (this.instance.getWrapWidth(_arg1));
        }
        public function fromPixelToLatLng(_arg1:Point, _arg2:Number, _arg3:Boolean=false):LatLng{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapLatLng(this.instance.fromPixelToLatLng(_arg1, _arg2, _arg3)));
        }
        public function fromLatLngToPixel(_arg1:LatLng, _arg2:Number):Point{
            Wrapper.checkValid(this.instance);
            return (this.instance.fromLatLngToPixel(this.extWrapper.wrapLatLng(_arg1), _arg2));
        }

    }
}//package com.google.maps.wrappers 
﻿package com.google.maps.wrappers {
    import flash.display.*;
    import com.google.maps.interfaces.*;

    public final class SpriteFactory extends WrapperBase implements ISpriteFactory {

        public function getChildCount(_arg1:DisplayObjectContainer):int{
            return (_arg1.numChildren);
        }
        public function addChild(_arg1:DisplayObjectContainer, _arg2:DisplayObject):DisplayObject{
            return (_arg1.addChild(_arg2));
        }
        public function removeChildAt(_arg1:DisplayObjectContainer, _arg2:int):DisplayObject{
            return (_arg1.removeChildAt(_arg2));
        }
        public function addChildAt(_arg1:DisplayObjectContainer, _arg2:DisplayObject, _arg3:int):DisplayObject{
            return (_arg1.addChildAt(_arg2, _arg3));
        }
        public function get version():int{
            return (1);
        }
        public function getParent(_arg1:DisplayObject):DisplayObjectContainer{
            return (_arg1.parent);
        }
        public function createSprite():IWrappableSprite{
            return (new WrappableSprite());
        }
        public function getEventDispatcher(_arg1:DisplayObject):IWrappableEventDispatcher{
            var _local2:IWrappableEventDispatcher;
            var _local3:EventDispatcherWrapper;
            _local2 = toWrappableSprite(_arg1);
            if (_local2 == null){
                _local3 = new EventDispatcherWrapper();
                _local3.initializeEventDispatcher(_arg1);
                _local2 = _local3;
            };
            return (_local2);
        }
        public function createComponent():IWrappableSprite{
            return (new WrappableComponent());
        }
        public function toWrappableSprite(_arg1:DisplayObject):IWrappableSprite{
            return ((_arg1 as IWrappableSprite));
        }
        public function removeChild(_arg1:DisplayObjectContainer, _arg2:DisplayObject):DisplayObject{
            return (_arg1.removeChild(_arg2));
        }

    }
}//package com.google.maps.wrappers 
﻿package com.google.maps.wrappers {
    import flash.display.*;
    import flash.text.*;
    import com.google.maps.*;
    import com.google.maps.services.*;
    import com.google.maps.controls.*;
    import com.google.maps.overlays.*;
    import flash.events.*;
    import com.google.maps.styles.*;
    import com.google.maps.interfaces.*;
    import flash.geom.*;
    import flash.utils.*;
    import flash.errors.*;

    public final class Wrapper {

        private static var nativeWrapper:Wrapper;

        private var wrappersMap:Object;
        private var eventClassMap:Object;
        private var eventNamesMap:Object;
        private var alienWrapper:Object;

        public function Wrapper(){
            var _local1:Object;
            super();
            _local1 = {};
            initializeEventNamesMap(_local1);
            this.eventNamesMap = _local1;
            _local1 = {};
            initializeEventClassMap(_local1);
            this.eventClassMap = _local1;
            _local1 = {};
            initializeWrappersMap(_local1);
            _local1["IWrappableEventDispatcher"] = EventDispatcherWrapper;
            this.wrappersMap = _local1;
        }
        public static function copyProperties(_arg1:Object, _arg2:Object, _arg3:Array, _arg4:Class=null, _arg5:Boolean=false):void{
            var _local6:Number;
            var _local7:String;
            var _local8:*;
            var _local9:*;
            _local6 = 0;
            for (;_local6 < _arg3.length;_local6++) {
                _local7 = _arg3[_local6];
                if (((_arg5) && (!(_arg2.hasOwnProperty(_local7))))){
                } else {
                    _local8 = _arg2[_local7];
                    if (_arg4 != null){
                        _local9 = (_local8 as _arg4);
                        if (_local9 == null){
                            continue;
                        };
                    };
                    _arg1[_local7] = _local8;
                };
            };
        }
        public static function copyTextFormatProperties(_arg1:TextFormat, _arg2:Object):void{
            copyProperties(_arg1, _arg2, ["align", "font", "target", "url"], String);
            copyProperties(_arg1, _arg2, ["bold", "bullet", "italic", "kerning", "underline"], Boolean);
            copyProperties(_arg1, _arg2, ["blockIndent", "color", "indent", "leading", "leftMargin", "letterSpacing", "rightMargin", "size"], Number);
            if (((!((_arg2.tabStops == null))) && ((_arg2.tabStops is Array)))){
                _arg1.tabStops = cloneArray(_arg2.tabStops);
            };
        }
        public static function copyRectangleProperties(_arg1:Rectangle, _arg2:Object):void{
            copyProperties(_arg1, _arg2, ["x", "y", "width", "height"], Number);
        }
        public static function copyPointProperties(_arg1:Point, _arg2:Object):void{
            copyProperties(_arg1, _arg2, ["x", "y"], Number);
        }
        public static function copyPixelsToBitmap(_arg1:DisplayObject, _arg2:Point, _arg3:Matrix):DisplayObject{
            var _local4:BitmapData;
            _local4 = new BitmapData(_arg2.x, _arg2.y, true, Color.BLACK);
            _local4.draw(_arg1, _arg3);
            return (new Bitmap(_local4, "auto", false));
        }
        public static function checkValid(_arg1:Object):void{
            if (_arg1 == null){
                throw (new IllegalOperationError("Object not initialized"));
            };
        }
        public static function instance():Wrapper{
            if (Wrapper.nativeWrapper == null){
                Wrapper.nativeWrapper = new (Wrapper)();
            };
            return (Wrapper.nativeWrapper);
        }
        public static function copyStyleSheetProperties(_arg1:StyleSheet, _arg2:Object):void{
            var _local3:int;
            var _local4:String;
            if (((!((_arg2.styleNames == null))) && ((_arg2.styleNames is Array)))){
                _local3 = 0;
                while (_local3 < _arg2.styleNames.length) {
                    _local4 = _arg2.styleNames[_local3];
                    _arg1.setStyle(_local4, _arg2.getStyle(_local4));
                    _local3++;
                };
            };
        }
        public static function mergeStyles(_arg1:Class, _arg2:Array):Object{
            var _local3:Object;
            var _local4:Boolean;
            var _local5:Number;
            if (_arg2 == null){
                return (null);
            };
            _local3 = new (_arg1)();
            _local4 = false;
            _local5 = 0;
            while (_local5 < _arg2.length) {
                if (_arg2[_local5] != null){
                    _local3.copyFromObject(_arg2[_local5]);
                    _local4 = true;
                };
                _local5++;
            };
            return (((_local4) ? _local3 : null));
        }
        public static function copyObject(_arg1:Object, _arg2:Object):void{
            var _local3:String;
            for (_local3 in _arg2) {
                if (_arg1[_local3] == null){
                    _arg1[_local3] = _arg2[_local3];
                };
            };
        }
        public static function cloneArray(_arg1:Array, _arg2:Boolean=false):Array{
            var _local3:Array;
            var _local4:Number;
            var _local5:*;
            var _local6:Array;
            if (!_arg2){
                return ([].concat(_arg1));
            };
            _local3 = [];
            _local4 = 0;
            while (_local4 < _arg1.length) {
                _local5 = _arg1[_local4];
                _local6 = (_local5 as Array);
                if (_local6 != null){
                    _local3.push(cloneArray(_local6));
                } else {
                    _local3.push(_local5);
                };
                _local4++;
            };
            return (_local3);
        }

        public function wrapDirectionsOptions(_arg1:Object):DirectionsOptions{
            if (_arg1 == null){
                return (null);
            };
            return (DirectionsOptions.fromObject(_arg1));
        }
        public function wrapButtonStyle(_arg1:Object):ButtonStyle{
            if (_arg1 == null){
                return (null);
            };
            return (ButtonStyle.fromObject(_arg1));
        }
        public function wrapS1Interval(_arg1:Object):S1Interval{
            if (_arg1 == null){
                return (null);
            };
            return (S1Interval.fromObject(_arg1));
        }
        public function wrapICopyrightCollection(_arg1:Object, _arg2:ICopyrightCollectionWrapper=null):ICopyrightCollection{
            return (ICopyrightCollection(wrap(_arg1, _arg2, ICopyrightCollection, ICopyrightCollectionWrapper)));
        }
        private function wrapEvent(_arg1:Event, _arg2:Object):Event{
            var _local3:Object;
            var _local4:Array;
            var _local5:Number;
            var _local6:String;
            var _local7:Class;
            _local3 = _arg1;
            if (!_local3.hasOwnProperty("eventClassChain")){
                return (_arg1);
            };
            _local4 = _local3.eventClassChain;
            if (_local4 != null){
                _local5 = 0;
                while (_local5 < _local4.length) {
                    _local6 = _local4[_local5];
                    _local7 = eventClassMap[_local6];
                    return (Object(_local7).fromCrossDomainEvent(_arg1, _arg2));
                };
            };
            return (_arg1);
        }
        public function wrapCopyrightNoticeArray(_arg1:Object):Array{
            var _local2:Array;
            var _local3:Number;
            var _local4:Number;
            if (_arg1 == null){
                return (null);
            };
            _local2 = [];
            _local3 = _arg1.length;
            _local4 = 0;
            while (_local4 < _local3) {
                _local2.push(this.wrapCopyrightNotice(_arg1[_local4]));
                _local4++;
            };
            return (_local2);
        }
        public function wrapMapOptions(_arg1:Object):MapOptions{
            if (_arg1 == null){
                return (null);
            };
            return (MapOptions.fromObject(_arg1));
        }
        private function initializeEventNamesMap(_arg1:Object):void{
            addEventNamesToMap(_arg1, MapEvent);
            addEventNamesToMap(_arg1, MapMouseEvent);
            addEventNamesToMap(_arg1, MapMoveEvent);
            addEventNamesToMap(_arg1, MapZoomEvent);
            addEventNamesToMap(_arg1, DirectionsEvent);
            addEventNamesToMap(_arg1, GeocodingEvent);
        }
        public function wrapRectangleStyle(_arg1:Object):RectangleStyle{
            if (_arg1 == null){
                return (null);
            };
            return (RectangleStyle.fromObject(_arg1));
        }
        public function wrapIOverlay(_arg1:Object, _arg2:IOverlayWrapper=null):IOverlay{
            return (IOverlay(wrap(_arg1, _arg2, IOverlay, IOverlayWrapper)));
        }
        public function wrapIScaleControl(_arg1:Object, _arg2:IScaleControlWrapper=null):IScaleControl{
            return (IScaleControl(wrap(_arg1, _arg2, IScaleControl, IScaleControlWrapper)));
        }
        public function wrapPolylineOptions(_arg1:Object):PolylineOptions{
            if (_arg1 == null){
                return (null);
            };
            return (PolylineOptions.fromObject(_arg1));
        }
        public function wrapClientGeocoderOptions(_arg1:Object):ClientGeocoderOptions{
            if (_arg1 == null){
                return (null);
            };
            return (ClientGeocoderOptions.fromObject(_arg1));
        }
        public function wrapITileLayerArray(_arg1:Object):Array{
            var _local2:Array;
            var _local3:Number;
            var _local4:Number;
            if (_arg1 == null){
                return (null);
            };
            _local2 = [];
            _local3 = _arg1.length;
            _local4 = 0;
            while (_local4 < _local3) {
                _local2.push(this.wrapITileLayer(_arg1[_local4]));
                _local4++;
            };
            return (_local2);
        }
        public function wrapButtonFaceStyle(_arg1:Object):ButtonFaceStyle{
            if (_arg1 == null){
                return (null);
            };
            return (ButtonFaceStyle.fromObject(_arg1));
        }
        public function wrapIMap(_arg1:Object, _arg2:IMapWrapper=null):IMap{
            return (IMap(wrap(_arg1, _arg2, IMap, IMapWrapper)));
        }
        public function wrapIControl(_arg1:Object, _arg2:IControlWrapper=null):IControl{
            return (IControl(wrap(_arg1, _arg2, IControl, IControlWrapper)));
        }
        public function wrapNavigationControlOptions(_arg1:Object):NavigationControlOptions{
            if (_arg1 == null){
                return (null);
            };
            return (NavigationControlOptions.fromObject(_arg1));
        }
        public function wrapIMapTypeArray(_arg1:Object):Array{
            var _local2:Array;
            var _local3:Number;
            var _local4:Number;
            if (_arg1 == null){
                return (null);
            };
            _local2 = [];
            _local3 = _arg1.length;
            _local4 = 0;
            while (_local4 < _local3) {
                _local2.push(this.wrapIMapType(_arg1[_local4]));
                _local4++;
            };
            return (_local2);
        }
        public function wrapTextField(_arg1:TextField):TextField{
            return (_arg1);
        }
        public function wrapCopyright(_arg1:Object):Copyright{
            if (_arg1 == null){
                return (null);
            };
            return (Copyright.fromObject(_arg1));
        }
        public function wrapZoomControlOptions(_arg1:Object):ZoomControlOptions{
            if (_arg1 == null){
                return (null);
            };
            return (ZoomControlOptions.fromObject(_arg1));
        }
        public function wrapIPolyline(_arg1:Object, _arg2:IPolylineWrapper=null):IPolyline{
            return (IPolyline(wrap(_arg1, _arg2, IPolyline, IPolylineWrapper)));
        }
        public function wrapINavigationControl(_arg1:Object, _arg2:INavigationControlWrapper=null):INavigationControl{
            return (INavigationControl(wrap(_arg1, _arg2, INavigationControl, INavigationControlWrapper)));
        }
        public function wrapMatrix(_arg1:Matrix):Matrix{
            return (_arg1);
        }
        public function wrapMapTypeControlOptions(_arg1:Object):MapTypeControlOptions{
            if (_arg1 == null){
                return (null);
            };
            return (MapTypeControlOptions.fromObject(_arg1));
        }
        public function wrapRoute(_arg1:Object):Route{
            if (_arg1 == null){
                return (null);
            };
            return (Route.fromObject(_arg1));
        }
        public function wrapStrokeStyle(_arg1:Object):StrokeStyle{
            if (_arg1 == null){
                return (null);
            };
            return (StrokeStyle.fromObject(_arg1));
        }
        public function wrapPlacemark(_arg1:Object):Placemark{
            if (_arg1 == null){
                return (null);
            };
            return (Placemark.fromObject(_arg1));
        }
        public function wrapGeocodingResponse(_arg1:Object):GeocodingResponse{
            if (_arg1 == null){
                return (null);
            };
            return (GeocodingResponse.fromObject(_arg1));
        }
        public function wrapIMapsFactory(_arg1:Object, _arg2:IMapsFactoryWrapper=null):IMapsFactory{
            return (IMapsFactory(wrap(_arg1, _arg2, IMapsFactory, IMapsFactoryWrapper)));
        }
        public function wrapIPositionControl(_arg1:Object, _arg2:IPositionControlWrapper=null):IPositionControl{
            return (IPositionControl(wrap(_arg1, _arg2, IPositionControl, IPositionControlWrapper)));
        }
        public function wrapStep(_arg1:Object):Step{
            if (_arg1 == null){
                return (null);
            };
            return (Step.fromObject(_arg1));
        }
        public function wrapGradientStyle(_arg1:Object):GradientStyle{
            if (_arg1 == null){
                return (null);
            };
            return (GradientStyle.fromObject(_arg1));
        }
        public function wrapColor(_arg1:Object):Color{
            if (_arg1 == null){
                return (null);
            };
            return (Color.fromObject(_arg1));
        }
        public function wrapEventHandler(_arg1:Function, _arg2:Object=null):Function{
            var handler:* = _arg1;
            var target = _arg2;
            return (function (_arg1:Event):void{
                handler(wrapEvent(_arg1, ((target) ? target : _arg1.target)));
            });
        }
        public function wrapCopyrightArray(_arg1:Object):Array{
            var _local2:Array;
            var _local3:Number;
            var _local4:Number;
            if (_arg1 == null){
                return (null);
            };
            _local2 = [];
            _local3 = _arg1.length;
            _local4 = 0;
            while (_local4 < _local3) {
                _local2.push(this.wrapCopyright(_arg1[_local4]));
                _local4++;
            };
            return (_local2);
        }
        public function wrapScaleControlOptions(_arg1:Object):ScaleControlOptions{
            if (_arg1 == null){
                return (null);
            };
            return (ScaleControlOptions.fromObject(_arg1));
        }
        public function wrapStepArray(_arg1:Object):Array{
            var _local2:Array;
            var _local3:Number;
            var _local4:Number;
            if (_arg1 == null){
                return (null);
            };
            _local2 = [];
            _local3 = _arg1.length;
            _local4 = 0;
            while (_local4 < _local3) {
                _local2.push(this.wrapStep(_arg1[_local4]));
                _local4++;
            };
            return (_local2);
        }
        public function wrapITileLayer(_arg1:Object, _arg2:ITileLayerWrapper=null):ITileLayer{
            return (ITileLayer(wrap(_arg1, _arg2, ITileLayer, ITileLayerWrapper)));
        }
        public function wrapLatLngBounds(_arg1:Object):LatLngBounds{
            if (_arg1 == null){
                return (null);
            };
            return (LatLngBounds.fromObject(_arg1));
        }
        public function wrapIPane(_arg1:Object, _arg2:IPaneWrapper=null):IPane{
            return (IPane(wrap(_arg1, _arg2, IPane, IPaneWrapper)));
        }
        public function wrapBevelStyle(_arg1:Object):BevelStyle{
            if (_arg1 == null){
                return (null);
            };
            return (BevelStyle.fromObject(_arg1));
        }
        public function wrapLatLngArray(_arg1:Object):Array{
            var _local2:Array;
            var _local3:Number;
            var _local4:Number;
            if (_arg1 == null){
                return (null);
            };
            _local2 = [];
            _local3 = _arg1.length;
            _local4 = 0;
            while (_local4 < _local3) {
                _local2.push(this.wrapLatLng(_arg1[_local4]));
                _local4++;
            };
            return (_local2);
        }
        public function wrapIGroundOverlay(_arg1:Object, _arg2:IGroundOverlayWrapper=null):IGroundOverlay{
            return (IGroundOverlay(wrap(_arg1, _arg2, IGroundOverlay, IGroundOverlayWrapper)));
        }
        public function wrapIZoomControl(_arg1:Object, _arg2:IZoomControlWrapper=null):IZoomControl{
            return (IZoomControl(wrap(_arg1, _arg2, IZoomControl, IZoomControlWrapper)));
        }
        private function initializeWrappersMap(_arg1:Object):void{
            _arg1["IMap"] = IMapWrapper;
            _arg1["IMapsFactory"] = IMapsFactoryWrapper;
            _arg1["IControl"] = IControlWrapper;
            _arg1["IMapTypeControl"] = IMapTypeControlWrapper;
            _arg1["IOverviewMapControl"] = IOverviewMapControlWrapper;
            _arg1["IPositionControl"] = IPositionControlWrapper;
            _arg1["IScaleControl"] = IScaleControlWrapper;
            _arg1["IZoomControl"] = IZoomControlWrapper;
            _arg1["INavigationControl"] = INavigationControlWrapper;
            _arg1["IClientGeocoder"] = IClientGeocoderWrapper;
            _arg1["ICopyrightCollection"] = ICopyrightCollectionWrapper;
            _arg1["IDirections"] = IDirectionsWrapper;
            _arg1["IGroundOverlay"] = IGroundOverlayWrapper;
            _arg1["IInfoWindow"] = IInfoWindowWrapper;
            _arg1["IMapType"] = IMapTypeWrapper;
            _arg1["IMarker"] = IMarkerWrapper;
            _arg1["IOverlay"] = IOverlayWrapper;
            _arg1["IPane"] = IPaneWrapper;
            _arg1["IPaneManager"] = IPaneManagerWrapper;
            _arg1["IPolygon"] = IPolygonWrapper;
            _arg1["IPolyline"] = IPolylineWrapper;
            _arg1["IProjection"] = IProjectionWrapper;
            _arg1["ITileLayer"] = ITileLayerWrapper;
            _arg1["ITileLayerOverlay"] = ITileLayerOverlayWrapper;
        }
        public function clear():void{
            this.alienWrapper = null;
            Wrapper.nativeWrapper = null;
        }
        private function initializeEventClassMap(_arg1:Object):void{
            _arg1["MapEvent"] = MapEvent;
            _arg1["MapMouseEvent"] = MapMouseEvent;
            _arg1["MapMoveEvent"] = MapMoveEvent;
            _arg1["MapZoomEvent"] = MapZoomEvent;
            _arg1["DirectionsEvent"] = DirectionsEvent;
            _arg1["GeocodingEvent"] = GeocodingEvent;
        }
        public function wrapPlacemarkArray(_arg1:Object):Array{
            var _local2:Array;
            var _local3:Number;
            var _local4:Number;
            if (_arg1 == null){
                return (null);
            };
            _local2 = [];
            _local3 = _arg1.length;
            _local4 = 0;
            while (_local4 < _local3) {
                _local2.push(this.wrapPlacemark(_arg1[_local4]));
                _local4++;
            };
            return (_local2);
        }
        public function wrap(_arg1:Object, _arg2:Object, _arg3:Class, _arg4:Class):Object{
            var _local5:Object;
            var _local6:Object;
            var _local7:Array;
            var _local8:Number;
            var _local9:String;
            var _local10:Class;
            if (_arg1 == null){
                return (null);
            };
            if (_arg2 == null){
                _local5 = (_arg1 as _arg3);
                if (_local5 != null){
                    return (_local5);
                };
                _local6 = (_arg1.wrapper as _arg3);
                if (_local6 != null){
                    return (_local6);
                };
                _local7 = _arg1.interfaceChain;
                if (_local7 != null){
                    _local8 = 0;
                    while (_local8 < _local7.length) {
                        _local9 = _local7[_local8];
                        _local10 = (wrappersMap[_local9] as Class);
                        if (_local10 != null){
                            _arg2 = (new (_local10)() as _arg3);
                            if (_arg2 != null){
                                break;
                            };
                        };
                        _local8++;
                    };
                };
                if (_arg2 == null){
                    _arg2 = new (_arg4)();
                };
            };
            _arg2.initializeWrapper(_arg1, this.alienWrapper);
            _arg1.wrapper = _arg2;
            return (_arg2);
        }
        public function setAlienWrapper(_arg1:Object):void{
            if (this.alienWrapper == null){
                this.alienWrapper = _arg1;
                _arg1.setAlienWrapper(this);
            };
        }
        public function wrapFillStyle(_arg1:Object):FillStyle{
            if (_arg1 == null){
                return (null);
            };
            return (FillStyle.fromObject(_arg1));
        }
        public function wrapCopyrightNotice(_arg1:Object):CopyrightNotice{
            if (_arg1 == null){
                return (null);
            };
            return (CopyrightNotice.fromObject(_arg1));
        }
        public function wrapInfoWindowOptions(_arg1:Object):InfoWindowOptions{
            if (_arg1 == null){
                return (null);
            };
            return (InfoWindowOptions.fromObject(_arg1));
        }
        public function wrapIMarker(_arg1:Object, _arg2:IMarkerWrapper=null):IMarker{
            return (IMarker(wrap(_arg1, _arg2, IMarker, IMarkerWrapper)));
        }
        public function wrapOverviewMapControlOptions(_arg1:Object):OverviewMapControlOptions{
            if (_arg1 == null){
                return (null);
            };
            return (OverviewMapControlOptions.fromObject(_arg1));
        }
        public function wrapIInfoWindow(_arg1:Object, _arg2:IInfoWindowWrapper=null):IInfoWindow{
            return (IInfoWindow(wrap(_arg1, _arg2, IInfoWindow, IInfoWindowWrapper)));
        }
        public function wrapMouseEvent(_arg1:MouseEvent):MouseEvent{
            return (_arg1);
        }
        public function wrapIOverviewMapControl(_arg1:Object, _arg2:IOverviewMapControlWrapper=null):IOverviewMapControl{
            return (IOverviewMapControl(wrap(_arg1, _arg2, IOverviewMapControl, IOverviewMapControlWrapper)));
        }
        public function wrapMarkerOptions(_arg1:Object):MarkerOptions{
            if (_arg1 == null){
                return (null);
            };
            return (MarkerOptions.fromObject(_arg1));
        }
        public function wrapR1Interval(_arg1:Object):R1Interval{
            if (_arg1 == null){
                return (null);
            };
            return (R1Interval.fromObject(_arg1));
        }
        public function wrapIWrappableEventDispatcher(_arg1:Object, _arg2:EventDispatcherWrapper=null):IWrappableEventDispatcher{
            return (IWrappableEventDispatcher(wrap(_arg1, _arg2, IEventDispatcher, EventDispatcherWrapper)));
        }
        public function wrapIEventDispatcher(_arg1:Object, _arg2:EventDispatcherWrapper=null):IEventDispatcher{
            return (IEventDispatcher(wrap(_arg1, _arg2, IEventDispatcher, EventDispatcherWrapper)));
        }
        public function isLibraryEvent(_arg1:String):Boolean{
            return (!((this.eventNamesMap[_arg1] == null)));
        }
        private function addEventNamesToMap(_arg1:Object, _arg2:Class):void{
            var _local3:XML;
            var _local4:XMLList;
            var _local5:int;
            var _local6:XML;
            _local3 = describeType(_arg2);
            _local4 = _local3.child("constant");
            _local5 = 0;
            while (_local5 < _local4.length()) {
                _local6 = _local4[_local5];
                if (_local6.@type == "String"){
                    _arg1[_arg2[_local6.@name]] = 1;
                };
                _local5++;
            };
        }
        public function wrapITileLayerOverlay(_arg1:Object, _arg2:ITileLayerOverlayWrapper=null):ITileLayerOverlay{
            return (ITileLayerOverlay(wrap(_arg1, _arg2, ITileLayerOverlay, ITileLayerOverlayWrapper)));
        }
        public function wrapIMapTypeControl(_arg1:Object, _arg2:IMapTypeControlWrapper=null):IMapTypeControl{
            return (IMapTypeControl(wrap(_arg1, _arg2, IMapTypeControl, IMapTypeControlWrapper)));
        }
        public function wrapIProjection(_arg1:Object, _arg2:IProjectionWrapper=null):IProjection{
            return (IProjection(wrap(_arg1, _arg2, IProjection, IProjectionWrapper)));
        }
        public function wrapLatLng(_arg1:Object):LatLng{
            if (_arg1 == null){
                return (null);
            };
            return (LatLng.fromObject(_arg1));
        }
        public function wrapMapTypeOptions(_arg1:Object):MapTypeOptions{
            if (_arg1 == null){
                return (null);
            };
            return (MapTypeOptions.fromObject(_arg1));
        }
        public function wrapIDirections(_arg1:Object, _arg2:IDirectionsWrapper=null):IDirections{
            return (IDirections(wrap(_arg1, _arg2, IDirections, IDirectionsWrapper)));
        }
        public function wrapPositionControlOptions(_arg1:Object):PositionControlOptions{
            if (_arg1 == null){
                return (null);
            };
            return (PositionControlOptions.fromObject(_arg1));
        }
        public function wrapIPaneManager(_arg1:Object, _arg2:IPaneManagerWrapper=null):IPaneManager{
            return (IPaneManager(wrap(_arg1, _arg2, IPaneManager, IPaneManagerWrapper)));
        }
        public function wrapIMapType(_arg1:Object, _arg2:IMapTypeWrapper=null):IMapType{
            return (IMapType(wrap(_arg1, _arg2, IMapType, IMapTypeWrapper)));
        }
        public function wrapRouteArray(_arg1:Object):Array{
            var _local2:Array;
            var _local3:Number;
            var _local4:Number;
            if (_arg1 == null){
                return (null);
            };
            _local2 = [];
            _local3 = _arg1.length;
            _local4 = 0;
            while (_local4 < _local3) {
                _local2.push(this.wrapRoute(_arg1[_local4]));
                _local4++;
            };
            return (_local2);
        }
        public function wrapIPolygon(_arg1:Object, _arg2:IPolygonWrapper=null):IPolygon{
            return (IPolygon(wrap(_arg1, _arg2, IPolygon, IPolygonWrapper)));
        }
        public function wrapControlPosition(_arg1:Object):ControlPosition{
            if (_arg1 == null){
                return (null);
            };
            return (ControlPosition.fromObject(_arg1));
        }
        public function wrapPolygonOptions(_arg1:Object):PolygonOptions{
            if (_arg1 == null){
                return (null);
            };
            return (PolygonOptions.fromObject(_arg1));
        }
        public function wrapIClientGeocoder(_arg1:Object, _arg2:IClientGeocoderWrapper=null):IClientGeocoder{
            return (IClientGeocoder(wrap(_arg1, _arg2, IClientGeocoder, IClientGeocoderWrapper)));
        }
        public function wrapGroundOverlayOptions(_arg1:Object):GroundOverlayOptions{
            if (_arg1 == null){
                return (null);
            };
            return (GroundOverlayOptions.fromObject(_arg1));
        }

    }
}//package com.google.maps.wrappers 
﻿package com.google.maps.wrappers {
    import com.google.maps.*;
    import com.google.maps.services.*;
    import com.google.maps.overlays.*;
    import com.google.maps.interfaces.*;

    public class IDirectionsWrapper extends EventDispatcherWrapper implements IDirections {

        override public function get interfaceChain():Array{
            return (["IDirections"]);
        }
        public function setOptions(_arg1:DirectionsOptions):void{
            Wrapper.checkValid(this.instance);
            this.instance.setOptions(this.extWrapper.wrapDirectionsOptions(_arg1));
        }
        public function get duration():Number{
            Wrapper.checkValid(this.instance);
            return (this.instance.duration);
        }
        public function get numGeocodes():uint{
            Wrapper.checkValid(this.instance);
            return (this.instance.numGeocodes);
        }
        public function getGeocode(_arg1:uint):Placemark{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapPlacemark(this.instance.getGeocode(_arg1)));
        }
        public function getRoute(_arg1:uint):Route{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapRoute(this.instance.getRoute(_arg1)));
        }
        public function get bounds():LatLngBounds{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapLatLngBounds(this.instance.bounds));
        }
        public function get distanceHtml():String{
            Wrapper.checkValid(this.instance);
            return (this.instance.distanceHtml);
        }
        public function get copyrightsHtml():String{
            Wrapper.checkValid(this.instance);
            return (this.instance.copyrightsHtml);
        }
        public function clear():void{
            Wrapper.checkValid(this.instance);
            this.instance.clear();
        }
        public function get durationHtml():String{
            Wrapper.checkValid(this.instance);
            return (this.instance.durationHtml);
        }
        public function load(_arg1:String):void{
            Wrapper.checkValid(this.instance);
            this.instance.load(_arg1);
        }
        public function getOptions():DirectionsOptions{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapDirectionsOptions(this.instance.getOptions()));
        }
        public function createPolyline(_arg1:PolylineOptions=null):IPolyline{
            Wrapper.checkValid(this.instance);
            return (Wrapper.instance().wrapIPolyline(this.instance.createPolyline(this.extWrapper.wrapPolylineOptions(_arg1))));
        }
        public function get numRoutes():uint{
            Wrapper.checkValid(this.instance);
            return (this.instance.numRoutes);
        }
        public function get distance():Number{
            Wrapper.checkValid(this.instance);
            return (this.instance.distance);
        }
        public function get summaryHtml():String{
            Wrapper.checkValid(this.instance);
            return (this.instance.summaryHtml);
        }
        public function get status():uint{
            Wrapper.checkValid(this.instance);
            return (this.instance.status);
        }

    }
}//package com.google.maps.wrappers 
﻿package com.google.maps {
    import flash.events.*;

    public class MapMoveEvent extends MapEvent {

        public static const MOVE_START:String = "mapevent_movestart";
        public static const MOVE_STEP:String = "mapevent_movestep";
        public static const MOVE_END:String = "mapevent_moveend";

        private var eventLatLng:LatLng;

        public function MapMoveEvent(_arg1:String, _arg2:LatLng, _arg3:Boolean=false, _arg4:Boolean=false){
            super(_arg1, null, _arg3, _arg4);
            this.eventLatLng = _arg2;
        }
        public static function fromCrossDomainEvent(_arg1:Event, _arg2:Object):MapMoveEvent{
            var _local3:MapMoveEvent;
            _local3 = (_arg1 as MapMoveEvent);
            if (((!((_local3 == null))) && ((_arg2 == _local3.target)))){
                return (_local3);
            };
            _local3 = new MapMoveEvent(_arg1.type, LatLng.fromObject(Object(_arg1).latLng), _arg1.bubbles, _arg1.cancelable);
            _local3.copyEventData(_arg1, _arg2);
            return (_local3);
        }

        public function get latLng():LatLng{
            return (this.eventLatLng);
        }
        override public function get eventClassChain():Array{
            return (["MapMoveEvent", "MapEvent"]);
        }
        override public function clone():Event{
            return (((this.crossDomainEvent) ? fromCrossDomainEvent(crossDomainEvent.clone(), null) : new MapMoveEvent(this.type, this.latLng, this.bubbles, this.cancelable)));
        }
        override public function toString():String{
            return ((((((((("[MapMoveEvent type=" + this.type) + " latLng=") + this.latLng) + " bubbles=") + this.bubbles) + " cancellable=") + this.cancelable) + "]"));
        }

    }
}//package com.google.maps 
﻿package com.google.maps.styles {
    import com.google.maps.wrappers.*;

    public class RectangleStyle {

        private var _fillStyle:FillStyle = null;
        private var _strokeStyle:StrokeStyle = null;

        public function RectangleStyle(_arg1:Object=null){
            _fillStyle = null;
            _strokeStyle = null;
            super();
            if (_arg1 != null){
                copyFromObject(_arg1);
            };
        }
        public static function fromObject(_arg1:Object):RectangleStyle{
            var _local2:RectangleStyle;
            if (_arg1 == null){
                return (null);
            };
            _local2 = new (RectangleStyle)();
            _local2.copyFromObject(_arg1);
            return (_local2);
        }
        public static function mergeStyles(_arg1:Array):RectangleStyle{
            return ((Wrapper.mergeStyles(RectangleStyle, _arg1) as RectangleStyle));
        }

        public function copyFromObject(_arg1:Object):void{
            if (_arg1.strokeStyle != null){
                if (this.strokeStyle == null){
                    this.strokeStyle = new StrokeStyle();
                };
                this.strokeStyle.copyFromObject(_arg1.strokeStyle);
            };
            if (_arg1.fillStyle != null){
                if (this.fillStyle == null){
                    this.fillStyle = new FillStyle();
                };
                this.fillStyle.copyFromObject(_arg1.fillStyle);
            };
        }
        public function toString():String{
            return (((((("RectangleStyle: { " + "\n\tfillStyle: ") + this._fillStyle) + "\n\tstrokeStyle: ") + this._strokeStyle) + " } "));
        }
        public function get fillStyle():FillStyle{
            return (this._fillStyle);
        }
        public function set strokeStyle(_arg1:StrokeStyle):void{
            this._strokeStyle = _arg1;
        }
        public function get strokeStyle():StrokeStyle{
            return (this._strokeStyle);
        }
        public function set fillStyle(_arg1:FillStyle):void{
            this._fillStyle = _arg1;
        }

    }
}//package com.google.maps.styles 
﻿package com.google.maps.styles {
    import com.google.maps.wrappers.*;

    public class FillStyle {

        private var _color:Object;
        private var _gradient:GradientStyle;
        private var _alpha:Object;

        public function FillStyle(_arg1:Object=null){
            if (_arg1 != null){
                copyFromObject(_arg1);
            };
        }
        public static function fromObject(_arg1:Object):FillStyle{
            var _local2:FillStyle;
            if (_arg1 == null){
                return (null);
            };
            _local2 = new (FillStyle)();
            _local2.copyFromObject(_arg1);
            return (_local2);
        }
        public static function mergeStyles(_arg1:Array):FillStyle{
            return ((Wrapper.mergeStyles(FillStyle, _arg1) as FillStyle));
        }

        public function set gradient(_arg1:GradientStyle):void{
            this._gradient = _arg1;
        }
        public function get color():Object{
            return (this._color);
        }
        public function set color(_arg1:Object):void{
            this._color = (_arg1 as Number);
            if (this._color != null){
                this._gradient = null;
            };
        }
        public function copyFromObject(_arg1:Object):void{
            Wrapper.copyProperties(this, _arg1, ["color", "alpha"], Number);
            if (_arg1.gradient != null){
                this.gradient = GradientStyle.fromObject(_arg1.gradient);
            };
        }
        public function toString():String{
            return (((((((("FillStyle: {" + "\n\tcolor: ") + this._color) + "\n\talpha: ") + this._alpha) + "\n\tgradient: ") + this._gradient) + "\n\t}"));
        }
        public function get alpha():Object{
            return (this._alpha);
        }
        public function get gradient():GradientStyle{
            return (this._gradient);
        }
        public function set alpha(_arg1:Object):void{
            this._alpha = (_arg1 as Number);
            if (this._alpha != null){
                this._gradient = null;
            };
        }

    }
}//package com.google.maps.styles 
﻿package com.google.maps.styles {
    import com.google.maps.wrappers.*;

    public class BevelStyle extends RectangleStyle {

        public static const BEVEL_NONE:Number = 0;
        public static const BEVEL_LOWERED:Number = 2;
        public static const BEVEL_RAISED:Number = 1;

        private var _bevelAlpha:Object = null;
        private var _shadowColor:Object = null;
        private var _highlightColor:Object = null;
        private var _bevelStyle:Object = null;
        private var _bevelThickness:Object = null;

        public function BevelStyle(_arg1:Object=null){
            _highlightColor = null;
            _shadowColor = null;
            _bevelAlpha = null;
            _bevelStyle = null;
            _bevelThickness = null;
            super();
            if (_arg1 != null){
                copyFromObject(_arg1);
            };
        }
        public static function fromObject(_arg1:Object):BevelStyle{
            var _local2:BevelStyle;
            if (_arg1 == null){
                return (null);
            };
            _local2 = new (BevelStyle)();
            _local2.copyFromObject(_arg1);
            return (_local2);
        }
        public static function mergeStyles(_arg1:Array):BevelStyle{
            return ((Wrapper.mergeStyles(BevelStyle, _arg1) as BevelStyle));
        }

        public function get bevelAlpha():Object{
            return (this._bevelAlpha);
        }
        public function set shadowColor(_arg1:Object):void{
            if (_arg1 != null){
                this._shadowColor = (_arg1 as Number);
            } else {
                this._shadowColor = null;
            };
        }
        public function get highlightColor():Object{
            return (this._highlightColor);
        }
        public function get bevelStyle():Object{
            return (this._bevelStyle);
        }
        public function get bevelThickness():Object{
            return (this._bevelThickness);
        }
        public function set highlightColor(_arg1:Object):void{
            if (_arg1 != null){
                this._highlightColor = (_arg1 as Number);
            } else {
                this._highlightColor = null;
            };
        }
        public function set bevelAlpha(_arg1:Object):void{
            if (_arg1 != null){
                this._bevelAlpha = (_arg1 as Number);
            } else {
                this._bevelAlpha = null;
            };
        }
        override public function copyFromObject(_arg1:Object):void{
            super.copyFromObject(_arg1);
            Wrapper.copyProperties(this, _arg1, ["bevelStyle", "highlightColor", "shadowColor", "bevelAlpha", "bevelThickness"], Number);
        }
        public function get shadowColor():Object{
            return (this._shadowColor);
        }
        override public function toString():String{
            return (((((((((((((("BevelStyle: { " + "\n\t") + super.toString()) + "\n\tbevelStyle: ") + this._bevelStyle) + "\n\tbevelThickness: ") + this._bevelThickness) + "\n\thighlightColor: ") + this._highlightColor) + "\n\tshadowColor: ") + this._shadowColor) + "\n\tbevelAlpha: ") + this._bevelAlpha) + " } "));
        }
        public function set bevelThickness(_arg1:Object):void{
            if (_arg1 != null){
                this._bevelThickness = (_arg1 as Number);
            } else {
                this._bevelThickness = null;
            };
        }
        public function set bevelStyle(_arg1:Object):void{
            if (_arg1 != null){
                this._bevelStyle = (_arg1 as Number);
            } else {
                this._bevelStyle = null;
            };
        }

    }
}//package com.google.maps.styles 
﻿package com.google.maps.styles {
    import com.google.maps.wrappers.*;

    public class StrokeStyle {

        private var _color:Object;
        private var _pixelHinting:Object;
        private var _thickness:Object;
        private var _alpha:Object;

        public function StrokeStyle(_arg1:Object=null){
            if (_arg1 != null){
                copyFromObject(_arg1);
            };
        }
        public static function fromObject(_arg1:Object):StrokeStyle{
            var _local2:StrokeStyle;
            if (_arg1 == null){
                return (null);
            };
            _local2 = new (StrokeStyle)();
            _local2.copyFromObject(_arg1);
            return (_local2);
        }
        public static function mergeStyles(_arg1:Array):StrokeStyle{
            return ((Wrapper.mergeStyles(StrokeStyle, _arg1) as StrokeStyle));
        }

        public function copyFromObject(_arg1:Object):void{
            Wrapper.copyProperties(this, _arg1, ["thickness", "color", "alpha"], Number);
            Wrapper.copyProperties(this, _arg1, ["pixelHinting"], Boolean, true);
        }
        public function get color():Object{
            return (this._color);
        }
        public function get alpha():Object{
            return (this._alpha);
        }
        public function set color(_arg1:Object):void{
            this._color = (_arg1 as Number);
        }
        public function toString():String{
            return (((((((((("StrokeStyle: {" + "\n\tthickness: ") + this._thickness) + "\n\tcolor: ") + this._color) + "\n\talpha: ") + this._alpha) + "\n\tpixelHinting: ") + this._pixelHinting) + "\n\t}"));
        }
        public function get pixelHinting():Object{
            return (this._pixelHinting);
        }
        public function set pixelHinting(_arg1:Object):void{
            this._pixelHinting = (_arg1 as Boolean);
        }
        public function set thickness(_arg1:Object):void{
            this._thickness = (_arg1 as Number);
        }
        public function get thickness():Object{
            return (this._thickness);
        }
        public function set alpha(_arg1:Object):void{
            this._alpha = (_arg1 as Number);
        }

    }
}//package com.google.maps.styles 
﻿package com.google.maps.styles {
    import com.google.maps.wrappers.*;

    public class ButtonStyle {

        private var _downState:ButtonFaceStyle;
        private var _upState:ButtonFaceStyle;
        private var _overState:ButtonFaceStyle;

        public function ButtonStyle(_arg1:Object=null){
            if (_arg1 != null){
                copyFromObject(_arg1);
            };
        }
        public static function fromObject(_arg1:Object):ButtonStyle{
            var _local2:ButtonStyle;
            if (_arg1 == null){
                return (null);
            };
            _local2 = new (ButtonStyle)();
            _local2.copyFromObject(_arg1);
            return (_local2);
        }
        public static function mergeStyles(_arg1:Array):ButtonStyle{
            return ((Wrapper.mergeStyles(ButtonStyle, _arg1) as ButtonStyle));
        }

        public function get allStates():ButtonFaceStyle{
            return (null);
        }
        public function set downState(_arg1:ButtonFaceStyle):void{
            this._downState = _arg1;
        }
        public function setAllStates(_arg1:ButtonFaceStyle):void{
            if (_arg1 == null){
                return;
            };
            if (this._upState == null){
                this._upState = new ButtonFaceStyle();
            };
            this._upState.copyFromObject(_arg1);
            if (this._overState == null){
                this._overState = new ButtonFaceStyle();
            };
            this._overState.copyFromObject(_arg1);
            if (this._downState == null){
                this._downState = new ButtonFaceStyle();
            };
            this._downState.copyFromObject(_arg1);
        }
        public function set upState(_arg1:ButtonFaceStyle):void{
            this._upState = _arg1;
        }
        public function copyFromObject(_arg1:Object):void{
            var _local2:ButtonFaceStyle;
            if (_arg1.allStates){
                _local2 = new ButtonFaceStyle(_arg1.allStates);
                this.setAllStates(_local2);
            };
            if (_arg1.upState != null){
                if (this.upState == null){
                    this.upState = new ButtonFaceStyle();
                };
                this.upState.copyFromObject(_arg1.upState);
            };
            if (_arg1.downState != null){
                if (this.downState == null){
                    this.downState = new ButtonFaceStyle();
                };
                this.downState.copyFromObject(_arg1.downState);
            };
            if (_arg1.overState != null){
                if (this.overState == null){
                    this.overState = new ButtonFaceStyle();
                };
                this.overState.copyFromObject(_arg1.overState);
            };
        }
        public function get downState():ButtonFaceStyle{
            return (this._downState);
        }
        public function get upState():ButtonFaceStyle{
            return (this._upState);
        }
        public function set overState(_arg1:ButtonFaceStyle):void{
            this._overState = _arg1;
        }
        public function toString():String{
            return ((((((("ButtonStyle: { upState: " + this._upState) + ", overState: ") + this._overState) + ", downState: ") + this._downState) + " }"));
        }
        public function get overState():ButtonFaceStyle{
            return (this._overState);
        }

    }
}//package com.google.maps.styles 
﻿package com.google.maps.styles {
    import flash.text.*;
    import com.google.maps.wrappers.*;

    public class ButtonFaceStyle extends BevelStyle {

        private var _labelFormat:TextFormat = null;

        public function ButtonFaceStyle(_arg1:Object=null){
            _labelFormat = null;
            super(null);
            if (_arg1 != null){
                copyFromObject(_arg1);
            };
        }
        public static function fromObject(_arg1:Object):ButtonFaceStyle{
            var _local2:ButtonFaceStyle;
            if (_arg1 == null){
                return (null);
            };
            _local2 = new (ButtonFaceStyle)();
            _local2.copyFromObject(_arg1);
            return (_local2);
        }
        public static function mergeStyles(_arg1:Array):ButtonFaceStyle{
            return ((Wrapper.mergeStyles(ButtonFaceStyle, _arg1) as ButtonFaceStyle));
        }

        public function get labelFormat():TextFormat{
            return (this._labelFormat);
        }
        override public function toString():String{
            return (((((("ButtonFaceStyle: { " + "\n\t") + super.toString()) + "\n\tlabelFormat: ") + this._labelFormat) + " } "));
        }
        public function set labelFormat(_arg1:TextFormat):void{
            this._labelFormat = _arg1;
        }
        override public function copyFromObject(_arg1:Object):void{
            super.copyFromObject(_arg1);
            if (_arg1.labelFormat != null){
                if (this.labelFormat == null){
                    this.labelFormat = new TextFormat();
                };
                Wrapper.copyTextFormatProperties(this.labelFormat, _arg1.labelFormat);
            };
        }

    }
}//package com.google.maps.styles 
﻿package com.google.maps.styles {
    import flash.geom.*;
    import com.google.maps.wrappers.*;

    public class GradientStyle {

        public var interpolationMethod:String;
        public var matrix:Matrix;
        public var ratios:Array;
        public var colors:Array;
        public var alphas:Array;
        public var focalPointRatio:Number;
        public var type:String;
        public var spreadMethod:String;

        public function GradientStyle(_arg1:Object=null){
            if (_arg1 != null){
                this.copyFromObject(_arg1);
            };
        }
        public static function fromObject(_arg1:Object):GradientStyle{
            var _local2:GradientStyle;
            if (_arg1 == null){
                return (null);
            };
            _local2 = new (GradientStyle)();
            _local2.copyFromObject(_arg1);
            return (_local2);
        }

        public function toString():String{
            return ((("GradientStyle { type: " + this.type) + " ... } "));
        }
        function copyFromObject(_arg1:Object):void{
            this.type = _arg1.type;
            this.colors = Wrapper.cloneArray(_arg1.colors);
            this.alphas = Wrapper.cloneArray(_arg1.alphas);
            this.ratios = Wrapper.cloneArray(_arg1.ratios);
            this.matrix = ((_arg1.matrix) ? _arg1.matrix.clone() : null);
            this.spreadMethod = _arg1.spreadMethod;
            this.interpolationMethod = _arg1.interpolationMethod;
            this.focalPointRatio = _arg1.focalPointRatio;
        }

    }
}//package com.google.maps.styles 
﻿package com.google.analytics.v4 {
    import com.google.analytics.utils.*;
    import com.google.analytics.core.*;
    import com.google.analytics.debug.*;
    import com.google.analytics.campaign.*;

    public class Configuration {

        public var serverMode:ServerOperationMode;
        public var detectFlash:Boolean = true;
        public var hasSiteOverlay:Boolean = false;
        public var allowLocalTracking:Boolean = true;
        public var secureRemoteGIFpath:String = "https://ssl.google-analytics.com/__utm.gif";
        private var _version:String = "4.3as";
        public var allowDomainHash:Boolean = true;
        public var detectClientInfo:Boolean = true;
        public var idleLoop:Number = 30;
        public var isTrackOutboundSubdomains:Boolean = false;
        public var cookiePath:String = "/";
        public var transactionFieldDelim:String = "|";
        private var _organic:Organic;
        private var _cookieName:String = "analytics";
        public var campaignKey:CampaignKey;
        public var google:String = "google";
        public var googleCsePath:String = "cse";
        public var bucketCapacity:Number = 10;
        private var _sampleRate:Number = 1;
        public var remoteGIFpath:String = "http://www.google-analytics.com/__utm.gif";
        public var googleSearchParam:String = "q";
        public var allowLinker:Boolean = false;
        public var maxOutboundLinkExamined:Number = 1000;
        private var _debug:DebugConfiguration;
        public var allowAnchor:Boolean = false;
        private var _domain:Domain;
        private var _trackingLimitPerSession:int = 500;
        public var tokenCliff:int = 10;
        public var sessionTimeout:Number;
        public var idleTimeout:Number = 60;
        public var campaignTracking:Boolean = true;
        public var domainName:String = "";
        public var detectTitle:Boolean = true;
        public var tokenRate:Number = 0.2;
        public var conversionTimeout:Number;
        public var localGIFpath:String = "/__utm.gif";

        public function Configuration(_arg1:DebugConfiguration=null){
            _organic = new Organic();
            conversionTimeout = Timespan.sixmonths;
            sessionTimeout = Timespan.thirtyminutes;
            campaignKey = new CampaignKey();
            serverMode = ServerOperationMode.remote;
            super();
            _debug = _arg1;
            _domain = new Domain(DomainNameMode.auto, "", _debug);
            serverMode = ServerOperationMode.remote;
            _initOrganicSources();
        }
        public function get organic():Organic{
            return (_organic);
        }
        public function get cookieName():String{
            return (_cookieName);
        }
        public function get trackingLimitPerSession():int{
            return (_trackingLimitPerSession);
        }
        private function _initOrganicSources():void{
            addOrganicSource(google, googleSearchParam);
            addOrganicSource("yahoo", "p");
            addOrganicSource("msn", "q");
            addOrganicSource("aol", "query");
            addOrganicSource("aol", "encquery");
            addOrganicSource("lycos", "query");
            addOrganicSource("ask", "q");
            addOrganicSource("altavista", "q");
            addOrganicSource("netscape", "query");
            addOrganicSource("cnn", "query");
            addOrganicSource("looksmart", "qt");
            addOrganicSource("about", "terms");
            addOrganicSource("mamma", "query");
            addOrganicSource("alltheweb", "q");
            addOrganicSource("gigablast", "q");
            addOrganicSource("voila", "rdata");
            addOrganicSource("virgilio", "qs");
            addOrganicSource("live", "q");
            addOrganicSource("baidu", "wd");
            addOrganicSource("alice", "qs");
            addOrganicSource("yandex", "text");
            addOrganicSource("najdi", "q");
            addOrganicSource("aol", "q");
            addOrganicSource("club-internet", "q");
            addOrganicSource("mama", "query");
            addOrganicSource("seznam", "q");
            addOrganicSource("search", "q");
            addOrganicSource("wp", "szukaj");
            addOrganicSource("onet", "qt");
            addOrganicSource("netsprint", "q");
            addOrganicSource("google.interia", "q");
            addOrganicSource("szukacz", "q");
            addOrganicSource("yam", "k");
            addOrganicSource("pchome", "q");
            addOrganicSource("kvasir", "searchExpr");
            addOrganicSource("sesam", "q");
            addOrganicSource("ozu", "q");
            addOrganicSource("terra", "query");
            addOrganicSource("nostrum", "query");
            addOrganicSource("mynet", "q");
            addOrganicSource("ekolay", "q");
            addOrganicSource("search.ilse", "search_for");
        }
        public function get sampleRate():Number{
            return (_sampleRate);
        }
        public function addOrganicSource(_arg1:String, _arg2:String):void{
            var engine:* = _arg1;
            var keyword:* = _arg2;
            try {
                _organic.addSource(engine, keyword);
            } catch(e:Error) {
                if (((_debug) && (_debug.active))){
                    _debug.warning(e.message);
                };
            };
        }
        public function get domain():Domain{
            return (_domain);
        }
        public function set sampleRate(_arg1:Number):void{
            if (_arg1 <= 0){
                _arg1 = 0.1;
            };
            if (_arg1 > 1){
                _arg1 = 1;
            };
            _arg1 = Number(_arg1.toFixed(2));
            _sampleRate = _arg1;
        }
        public function get version():String{
            return (_version);
        }

    }
}//package com.google.analytics.v4 
﻿package com.google.analytics.v4 {
    import com.google.analytics.core.*;

    public interface GoogleAnalyticsAPI {

        function setCampSourceKey(_arg1:String):void;
        function getServiceMode():ServerOperationMode;
        function resetSession():void;
        function setLocalServerMode():void;
        function setCampContentKey(_arg1:String):void;
        function addOrganic(_arg1:String, _arg2:String):void;
        function setDetectFlash(_arg1:Boolean):void;
        function addTrans(_arg1:String, _arg2:String, _arg3:Number, _arg4:Number, _arg5:Number, _arg6:String, _arg7:String, _arg8:String):Object;
        function trackEvent(_arg1:String, _arg2:String, _arg3:String=null, _arg4:Number=NaN):Boolean;
        function setCampTermKey(_arg1:String):void;
        function setCampNameKey(_arg1:String):void;
        function addIgnoredOrganic(_arg1:String):void;
        function addItem(_arg1:String, _arg2:String, _arg3:String, _arg4:String, _arg5:Number, _arg6:int):void;
        function setAllowLinker(_arg1:Boolean):void;
        function getClientInfo():Boolean;
        function getDetectFlash():Boolean;
        function setCampaignTrack(_arg1:Boolean):void;
        function createEventTracker(_arg1:String):EventTracker;
        function setCookieTimeout(_arg1:int):void;
        function setAllowAnchor(_arg1:Boolean):void;
        function trackTrans():void;
        function clearOrganic():void;
        function trackPageview(_arg1:String=""):void;
        function setLocalGifPath(_arg1:String):void;
        function getVersion():String;
        function getLocalGifPath():String;
        function setVar(_arg1:String):void;
        function clearIgnoredOrganic():void;
        function setCampMediumKey(_arg1:String):void;
        function addIgnoredRef(_arg1:String):void;
        function setClientInfo(_arg1:Boolean):void;
        function setCookiePath(_arg1:String):void;
        function setSampleRate(_arg1:Number):void;
        function setSessionTimeout(_arg1:int):void;
        function setRemoteServerMode():void;
        function clearIgnoredRef():void;
        function setDomainName(_arg1:String):void;
        function setDetectTitle(_arg1:Boolean):void;
        function setAllowHash(_arg1:Boolean):void;
        function getAccount():String;
        function linkByPost(_arg1:Object, _arg2:Boolean=false):void;
        function link(_arg1:String, _arg2:Boolean=false):void;
        function setCampNOKey(_arg1:String):void;
        function setLocalRemoteServerMode():void;
        function cookiePathCopy(_arg1:String):void;
        function getDetectTitle():Boolean;

    }
}//package com.google.analytics.v4 
﻿package com.google.analytics.v4 {
    import com.google.analytics.core.*;
    import com.google.analytics.debug.*;
    import com.google.analytics.external.*;

    public class Bridge implements GoogleAnalyticsAPI {

        private static var _linkTrackingObject_js:XML = <script>
            <![CDATA[
                function( container , target )
                {
                    var targets ;
                    var name ;
                    if( target.indexOf(".") > 0 )
                    {
                        targets = target.split(".");
                        name    = targets.pop();
                    }
                    else
                    {
                        targets = [];
                        name    = target;
                    }
                    var ref   = window;
                    var depth = targets.length;
                    for( var j = 0 ; j < depth ; j++ )
                    {
                        ref = ref[ targets[j] ] ;
                    }
                    window[container][target] = ref[name] ;
                }
            ]]>
        </script>
        ;
        private static var _createTrackingObject_js:XML = <script>
            <![CDATA[
                function( acct )
                {
                    _GATracker[acct] = _gat._getTracker(acct);
                }
            ]]>
        </script>
        ;
        private static var _injectTrackingObject_js:XML = <script>
            <![CDATA[
                function()
                {
                    try 
                    {
                        _GATracker
                    }
                    catch(e) 
                    {
                        _GATracker = {};
                    }
                }
            ]]>
        </script>
        ;
        private static var _checkGAJS_js:XML = <script>
            <![CDATA[
                function()
                {
                    if( _gat && _gat._getTracker )
                    {
                        return true;
                    }
                    return false;
                }
            ]]>
        </script>
        ;
        private static var _checkValidTrackingObject_js:XML = <script>
            <![CDATA[
                function(acct)
                {
                    if( _GATracker[acct] && (_GATracker[acct]._getAccount) )
                    {
                        return true ;
                    }
                    else
                    {
                        return false;
                    }
                }
            ]]>
        </script>
        ;

        private var _debug:DebugConfiguration;
        private var _proxy:JavascriptProxy;
        private var _jsContainer:String = "_GATracker";
        private var _hasGATracker:Boolean = false;
        private var _account:String;

        public function Bridge(_arg1:String, _arg2:DebugConfiguration, _arg3:JavascriptProxy){
            var _local4:String;
            var _local5:String;
            var _local6:String;
            super();
            _account = _arg1;
            _debug = _arg2;
            _proxy = _arg3;
            if (!_checkGAJS()){
                _local4 = "";
                _local4 = (_local4 + "ga.js not found, be sure to check if\n");
                _local4 = (_local4 + "<script src=\"http://www.google-analytics.com/ga.js\"></script>\n");
                _local4 = (_local4 + "is included in the HTML.");
                _debug.warning(_local4);
                throw (new Error(_local4));
            };
            if (!_hasGATracker){
                if (((_debug.javascript) && (_debug.verbose))){
                    _local5 = "";
                    _local5 = (_local5 + "The Google Analytics tracking code was not found on the container page\n");
                    _local5 = (_local5 + "we create it");
                    _debug.info(_local5, VisualDebugMode.advanced);
                };
                _injectTrackingObject();
            };
            if (Utils.validateAccount(_arg1)){
                _createTrackingObject(_arg1);
            } else {
                if (_checkTrackingObject(_arg1)){
                    _linkTrackingObject(_arg1);
                } else {
                    _local6 = "";
                    _local6 = (_local6 + (("JS Object \"" + _arg1) + "\" doesn't exist in DOM\n"));
                    _local6 = (_local6 + "Bridge object not created.");
                    _debug.warning(_local6);
                    throw (new Error(_local6));
                };
            };
        }
        public function link(_arg1:String, _arg2:Boolean=false):void{
            _debug.info((((("link( " + _arg1) + ", ") + _arg2) + " )"));
            _call("_link", _arg1, _arg2);
        }
        public function addOrganic(_arg1:String, _arg2:String):void{
            _debug.info((("addOrganic( " + [_arg1, _arg2].join(", ")) + " )"));
            _call("_addOrganic", _arg1);
        }
        public function setAllowLinker(_arg1:Boolean):void{
            _debug.info((("setAllowLinker( " + _arg1) + " )"));
            _call("_setAllowLinker", _arg1);
        }
        private function _linkTrackingObject(_arg1:String):void{
            _proxy.call(_linkTrackingObject_js, _jsContainer, _arg1);
        }
        public function trackEvent(_arg1:String, _arg2:String, _arg3:String=null, _arg4:Number=NaN):Boolean{
            var _local5 = 2;
            if (((_arg3) && (!((_arg3 == ""))))){
                _local5 = 3;
            };
            if ((((_local5 == 3)) && (!(isNaN(_arg4))))){
                _local5 = 4;
            };
            switch (_local5){
                case 4:
                    _debug.info((("trackEvent( " + [_arg1, _arg2, _arg3, _arg4].join(", ")) + " )"));
                    return (_call("_trackEvent", _arg1, _arg2, _arg3, _arg4));
                case 3:
                    _debug.info((("trackEvent( " + [_arg1, _arg2, _arg3].join(", ")) + " )"));
                    return (_call("_trackEvent", _arg1, _arg2, _arg3));
                case 2:
                default:
                    _debug.info((("trackEvent( " + [_arg1, _arg2].join(", ")) + " )"));
                    return (_call("_trackEvent", _arg1, _arg2));
            };
        }
        public function setClientInfo(_arg1:Boolean):void{
            _debug.info((("setClientInfo( " + _arg1) + " )"));
            _call("_setClientInfo", _arg1);
        }
        public function trackTrans():void{
            _debug.info("trackTrans()");
            _call("_trackTrans");
        }
        public function setCookieTimeout(_arg1:int):void{
            _debug.info((("setCookieTimeout( " + _arg1) + " )"));
            _call("_setCookieTimeout", _arg1);
        }
        public function trackPageview(_arg1:String=""):void{
            _debug.info((("trackPageview( " + _arg1) + " )"));
            _call("_trackPageview", _arg1);
        }
        public function getClientInfo():Boolean{
            _debug.info("getClientInfo()");
            return (_call("_getClientInfo"));
        }
        private function _checkValidTrackingObject(_arg1:String):Boolean{
            return (_proxy.call(_checkValidTrackingObject_js, _arg1));
        }
        private function _checkGAJS():Boolean{
            return (_proxy.call(_checkGAJS_js));
        }
        public function linkByPost(_arg1:Object, _arg2:Boolean=false):void{
            _debug.warning((((("linkByPost( " + _arg1) + ", ") + _arg2) + " ) not implemented"));
        }
        private function _call(_arg1:String, ... _args){
            _args.unshift(((((("window." + _jsContainer) + "[\"") + _account) + "\"].") + _arg1));
            return (_proxy.call.apply(_proxy, _args));
        }
        public function hasGAJS():Boolean{
            return (_checkGAJS());
        }
        private function _checkTrackingObject(_arg1:String):Boolean{
            var _local2:Boolean = _proxy.hasProperty(_arg1);
            var _local3:Boolean = _proxy.hasProperty((_arg1 + "._getAccount"));
            return (((_local2) && (_local3)));
        }
        public function resetSession():void{
            _debug.warning("resetSession() not implemented");
        }
        public function getDetectTitle():Boolean{
            _debug.info("getDetectTitle()");
            return (_call("_getDetectTitle"));
        }
        public function setCampNameKey(_arg1:String):void{
            _debug.info((("setCampNameKey( " + _arg1) + " )"));
            _call("_setCampNameKey", _arg1);
        }
        public function setDetectFlash(_arg1:Boolean):void{
            _debug.info((("setDetectFlash( " + _arg1) + " )"));
            _call("_setDetectFlash", _arg1);
        }
        public function createEventTracker(_arg1:String):EventTracker{
            _debug.info((("createEventTracker( " + _arg1) + " )"));
            return (new EventTracker(_arg1, this));
        }
        public function addItem(_arg1:String, _arg2:String, _arg3:String, _arg4:String, _arg5:Number, _arg6:int):void{
            _debug.info((("addItem( " + [_arg1, _arg2, _arg3, _arg4, _arg5, _arg6].join(", ")) + " )"));
            _call("_addItem", _arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
        }
        public function clearIgnoredOrganic():void{
            _debug.info("clearIgnoredOrganic()");
            _call("_clearIgnoreOrganic");
        }
        public function setVar(_arg1:String):void{
            _debug.info((("setVar( " + _arg1) + " )"));
            _call("_setVar", _arg1);
        }
        public function setDomainName(_arg1:String):void{
            _debug.info((("setDomainName( " + _arg1) + " )"));
            _call("_setDomainName", _arg1);
        }
        public function hasTrackingAccount(_arg1:String):Boolean{
            if (Utils.validateAccount(_arg1)){
                return (_checkValidTrackingObject(_arg1));
            };
            return (_checkTrackingObject(_arg1));
        }
        public function setCampSourceKey(_arg1:String):void{
            _debug.info((("setCampSourceKey( " + _arg1) + " )"));
            _call("_setCampSourceKey", _arg1);
        }
        public function addTrans(_arg1:String, _arg2:String, _arg3:Number, _arg4:Number, _arg5:Number, _arg6:String, _arg7:String, _arg8:String):Object{
            _debug.info((("addTrans( " + [_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8].join(", ")) + " )"));
            _call("_addTrans", _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8);
            return (null);
        }
        public function setCampContentKey(_arg1:String):void{
            _debug.info((("setCampContentKey( " + _arg1) + " )"));
            _call("_setCampContentKey", _arg1);
        }
        public function setLocalServerMode():void{
            _debug.info("setLocalServerMode()");
            _call("_setLocalServerMode");
        }
        public function getLocalGifPath():String{
            _debug.info("getLocalGifPath()");
            return (_call("_getLocalGifPath"));
        }
        public function clearIgnoredRef():void{
            _debug.info("clearIgnoredRef()");
            _call("_clearIgnoreRef");
        }
        public function setAllowAnchor(_arg1:Boolean):void{
            _debug.info((("setAllowAnchor( " + _arg1) + " )"));
            _call("_setAllowAnchor", _arg1);
        }
        public function setLocalGifPath(_arg1:String):void{
            _debug.info((("setLocalGifPath( " + _arg1) + " )"));
            _call("_setLocalGifPath", _arg1);
        }
        public function getVersion():String{
            _debug.info("getVersion()");
            return (_call("_getVersion"));
        }
        private function _injectTrackingObject():void{
            _proxy.executeBlock(_injectTrackingObject_js);
            _hasGATracker = true;
        }
        public function setCookiePath(_arg1:String):void{
            _debug.info((("setCookiePath( " + _arg1) + " )"));
            _call("_setCookiePath", _arg1);
        }
        public function setSampleRate(_arg1:Number):void{
            _debug.info((("setSampleRate( " + _arg1) + " )"));
            _call("_setSampleRate", _arg1);
        }
        public function setAllowHash(_arg1:Boolean):void{
            _debug.info((("setAllowHash( " + _arg1) + " )"));
            _call("_setAllowHash", _arg1);
        }
        public function addIgnoredOrganic(_arg1:String):void{
            _debug.info((("addIgnoredOrganic( " + _arg1) + " )"));
            _call("_addIgnoredOrganic", _arg1);
        }
        public function setCampNOKey(_arg1:String):void{
            _debug.info((("setCampNOKey( " + _arg1) + " )"));
            _call("_setCampNOKey", _arg1);
        }
        public function cookiePathCopy(_arg1:String):void{
            _debug.info((("cookiePathCopy( " + _arg1) + " )"));
            _call("_cookiePathCopy", _arg1);
        }
        public function setLocalRemoteServerMode():void{
            _debug.info("setLocalRemoteServerMode()");
            _call("_setLocalRemoteServerMode");
        }
        public function getServiceMode():ServerOperationMode{
            _debug.info("getServiceMode()");
            return (_call("_getServiceMode"));
        }
        public function setDetectTitle(_arg1:Boolean):void{
            _debug.info((("setDetectTitle( " + _arg1) + " )"));
            _call("_setDetectTitle", _arg1);
        }
        private function _createTrackingObject(_arg1:String):void{
            _proxy.call(_createTrackingObject_js, _arg1);
        }
        public function setCampaignTrack(_arg1:Boolean):void{
            _debug.info((("setCampaignTrack( " + _arg1) + " )"));
            _call("_setCampaignTrack", _arg1);
        }
        public function clearOrganic():void{
            _debug.info("clearOrganic()");
            _call("_clearOrganic");
        }
        public function setCampTermKey(_arg1:String):void{
            _debug.info((("setCampTermKey( " + _arg1) + " )"));
            _call("_setCampTermKey", _arg1);
        }
        public function getDetectFlash():Boolean{
            _debug.info("getDetectFlash()");
            return (_call("_getDetectFlash"));
        }
        public function setCampMediumKey(_arg1:String):void{
            _debug.info((("setCampMediumKey( " + _arg1) + " )"));
            _call("_setCampMediumKey", _arg1);
        }
        public function addIgnoredRef(_arg1:String):void{
            _debug.info((("addIgnoredRef( " + _arg1) + " )"));
            _call("_addIgnoredRef", _arg1);
        }
        public function setSessionTimeout(_arg1:int):void{
            _debug.info((("setSessionTimeout( " + _arg1) + " )"));
            _call("_setSessionTimeout", _arg1);
        }
        public function setRemoteServerMode():void{
            _debug.info("setRemoteServerMode()");
            _call("_setRemoteServerMode");
        }
        public function getAccount():String{
            _debug.info("getAccount()");
            return (_call("_getAccount"));
        }

    }
}//package com.google.analytics.v4 
﻿package com.google.analytics.v4 {
    import com.google.analytics.utils.*;
    import com.google.analytics.core.*;
    import com.google.analytics.debug.*;
    import com.google.analytics.data.*;
    import com.google.analytics.external.*;
    import com.google.analytics.campaign.*;

    public class Tracker implements GoogleAnalyticsAPI {

        private const EVENT_TRACKER_LABEL_KEY_NUM:int = 3;
        private const EVENT_TRACKER_VALUE_VALUE_NUM:int = 1;
        private const EVENT_TRACKER_PROJECT_ID:int = 5;
        private const EVENT_TRACKER_OBJECT_NAME_KEY_NUM:int = 1;
        private const EVENT_TRACKER_TYPE_KEY_NUM:int = 2;

        private var _adSense:AdSenseGlobals;
        private var _eventTracker:X10;
        private var _noSessionInformation:Boolean = false;
        private var _browserInfo:BrowserInfo;
        private var _debug:DebugConfiguration;
        private var _isNewVisitor:Boolean = false;
        private var _buffer:Buffer;
        private var _config:Configuration;
        private var _x10Module:X10;
        private var _campaign:CampaignManager;
        private var _formatedReferrer:String;
        private var _timeStamp:Number;
        private var _info:Environment;
        private var _domainHash:Number;
        private var _campaignInfo:CampaignInfo;
        private var _gifRequest:GIFRequest;
        private var _hasInitData:Boolean = false;
        private var _account:String;

        public function Tracker(_arg1:String, _arg2:Configuration, _arg3:DebugConfiguration, _arg4:Environment, _arg5:Buffer, _arg6:GIFRequest, _arg7:AdSenseGlobals){
            var _local8:String;
            super();
            _account = _arg1;
            _config = _arg2;
            _debug = _arg3;
            _info = _arg4;
            _buffer = _arg5;
            _gifRequest = _arg6;
            _adSense = _arg7;
            if (!Utils.validateAccount(_arg1)){
                _local8 = (("Account \"" + _arg1) + "\" is not valid.");
                _debug.warning(_local8);
                throw (new Error(_local8));
            };
            _initData();
        }
        private function _doTracking():Boolean{
            if (((((!((_info.protocol == Protocols.file))) && (!((_info.protocol == Protocols.none))))) && (_isNotGoogleSearch()))){
                return (true);
            };
            if (_config.allowLocalTracking){
                return (true);
            };
            return (false);
        }
        public function addOrganic(_arg1:String, _arg2:String):void{
            _debug.info((("addOrganic( " + [_arg1, _arg2].join(", ")) + " )"));
            _config.organic.addSource(_arg1, _arg2);
        }
        public function setAllowLinker(_arg1:Boolean):void{
            _config.allowLinker = _arg1;
            _debug.info((("setAllowLinker( " + _config.allowLinker) + " )"));
        }
        public function trackEvent(_arg1:String, _arg2:String, _arg3:String=null, _arg4:Number=NaN):Boolean{
            var _local5:Boolean;
            var _local6 = 2;
            if (((!((_arg1 == ""))) && (!((_arg2 == ""))))){
                _eventTracker.clearKey(EVENT_TRACKER_PROJECT_ID);
                _eventTracker.clearValue(EVENT_TRACKER_PROJECT_ID);
                _local5 = _eventTracker.setKey(EVENT_TRACKER_PROJECT_ID, EVENT_TRACKER_OBJECT_NAME_KEY_NUM, _arg1);
                _local5 = _eventTracker.setKey(EVENT_TRACKER_PROJECT_ID, EVENT_TRACKER_TYPE_KEY_NUM, _arg2);
                if (((_arg3) && (!((_arg3 == ""))))){
                    _local5 = _eventTracker.setKey(EVENT_TRACKER_PROJECT_ID, EVENT_TRACKER_LABEL_KEY_NUM, _arg3);
                    _local6 = 3;
                    if (!isNaN(_arg4)){
                        _local5 = _eventTracker.setValue(EVENT_TRACKER_PROJECT_ID, EVENT_TRACKER_VALUE_VALUE_NUM, _arg4);
                        _local6 = 4;
                    };
                };
                if (_local5){
                    _debug.info(((("valid event tracking call\ncategory: " + _arg1) + "\naction: ") + _arg2), VisualDebugMode.geek);
                    _sendXEvent(_eventTracker);
                };
            } else {
                _debug.warning(((("event tracking call is not valid, failed!\ncategory: " + _arg1) + "\naction: ") + _arg2), VisualDebugMode.geek);
                _local5 = false;
            };
            switch (_local6){
                case 4:
                    _debug.info((("trackEvent( " + [_arg1, _arg2, _arg3, _arg4].join(", ")) + " )"));
                    break;
                case 3:
                    _debug.info((("trackEvent( " + [_arg1, _arg2, _arg3].join(", ")) + " )"));
                    break;
                case 2:
                default:
                    _debug.info((("trackEvent( " + [_arg1, _arg2].join(", ")) + " )"));
            };
            return (_local5);
        }
        public function trackPageview(_arg1:String=""):void{
            _debug.info((("trackPageview( " + _arg1) + " )"));
            if (_doTracking()){
                _initData();
                _trackMetrics(_arg1);
                _noSessionInformation = false;
            } else {
                _debug.warning((("trackPageview( " + _arg1) + " ) failed"));
            };
        }
        public function setCookieTimeout(_arg1:int):void{
            _config.conversionTimeout = _arg1;
            _debug.info((("setCookieTimeout( " + _config.conversionTimeout) + " )"));
        }
        public function trackTrans():void{
            _debug.warning("trackTrans() not implemented");
        }
        public function setClientInfo(_arg1:Boolean):void{
            _config.detectClientInfo = _arg1;
            _debug.info((("setClientInfo( " + _config.detectClientInfo) + " )"));
        }
        public function linkByPost(_arg1:Object, _arg2:Boolean=false):void{
            _debug.warning((("linkByPost( " + [_arg1, _arg2].join(", ")) + " ) not implemented"));
        }
        private function _initData():void{
            var _local1:String;
            var _local2:String;
            if (!_hasInitData){
                _updateDomainName();
                _domainHash = _getDomainHash();
                _timeStamp = Math.round((new Date().getTime() / 1000));
                if (_debug.verbose){
                    _local1 = "";
                    _local1 = (_local1 + "_initData 0");
                    _local1 = (_local1 + ("\ndomain name: " + _config.domainName));
                    _local1 = (_local1 + ("\ndomain hash: " + _domainHash));
                    _local1 = (_local1 + (((("\ntimestamp:   " + _timeStamp) + " (") + new Date((_timeStamp * 1000))) + ")"));
                    _debug.info(_local1, VisualDebugMode.geek);
                };
            };
            if (_doTracking()){
                _handleCookie();
            };
            if (!_hasInitData){
                if (_doTracking()){
                    _formatedReferrer = _formatReferrer();
                    _browserInfo = new BrowserInfo(_config, _info);
                    _debug.info(("browserInfo: " + _browserInfo.toURLString()), VisualDebugMode.advanced);
                    if (_config.campaignTracking){
                        _campaign = new CampaignManager(_config, _debug, _buffer, _domainHash, _formatedReferrer, _timeStamp);
                        _campaignInfo = _campaign.getCampaignInformation(_info.locationSearch, _noSessionInformation);
                        _debug.info(("campaignInfo: " + _campaignInfo.toURLString()), VisualDebugMode.advanced);
                    };
                };
                _x10Module = new X10();
                _eventTracker = new X10();
                _hasInitData = true;
            };
            if (_config.hasSiteOverlay){
                _debug.warning("Site Overlay is not supported");
            };
            if (_debug.verbose){
                _local2 = "";
                _local2 = (_local2 + "_initData (misc)");
                _local2 = (_local2 + ("\nflash version: " + _info.flashVersion.toString(4)));
                _local2 = (_local2 + ("\nprotocol: " + _info.protocol));
                _local2 = (_local2 + (("\ndefault domain name (auto): \"" + _info.domainName) + "\""));
                _local2 = (_local2 + ("\nlanguage: " + _info.language));
                _local2 = (_local2 + ("\ndomain hash: " + _getDomainHash()));
                _local2 = (_local2 + ("\nuser-agent: " + _info.userAgent));
                _debug.info(_local2, VisualDebugMode.geek);
            };
        }
        public function getDetectTitle():Boolean{
            _debug.info("getDetectTitle()");
            return (_config.detectTitle);
        }
        public function resetSession():void{
            _debug.info("resetSession()");
            _buffer.resetCurrentSession();
        }
        public function getClientInfo():Boolean{
            _debug.info("getClientInfo()");
            return (_config.detectClientInfo);
        }
        private function _sendXEvent(_arg1:X10=null):void{
            var _local2:Variables;
            var _local3:EventInfo;
            var _local4:Variables;
            var _local5:Variables;
            _initData();
            if (_takeSample()){
                _local2 = new Variables();
                _local2.URIencode = true;
                _local3 = new EventInfo(true, _x10Module, _arg1);
                _local4 = _local3.toVariables();
                _local5 = _renderMetricsSearchVariables();
                _local2.join(_local4, _local5);
                _gifRequest.send(_account, _local2, false, true);
            };
        }
        public function setDetectFlash(_arg1:Boolean):void{
            _config.detectFlash = _arg1;
            _debug.info((("setDetectFlash( " + _config.detectFlash) + " )"));
        }
        public function setCampNameKey(_arg1:String):void{
            _config.campaignKey.UCCN = _arg1;
            var _local2 = (("setCampNameKey( " + _config.campaignKey.UCCN) + " )");
            if (_debug.mode == VisualDebugMode.geek){
                _debug.info((_local2 + " [UCCN]"));
            } else {
                _debug.info(_local2);
            };
        }
        private function _formatReferrer():String{
            var _local2:String;
            var _local3:URL;
            var _local4:URL;
            var _local1:String = _info.referrer;
            if ((((_local1 == "")) || ((_local1 == "localhost")))){
                _local1 = "-";
            } else {
                _local2 = _info.domainName;
                _local3 = new URL(_local1);
                _local4 = new URL(("http://" + _local2));
                if (_local3.hostName == _local2){
                    return ("-");
                };
                if (_local4.domain == _local3.domain){
                    if (_local4.subDomain != _local3.subDomain){
                        _local1 = "0";
                    };
                };
                if ((((_local1.charAt(0) == "[")) && (_local1.charAt((_local1.length - 1))))){
                    _local1 = "-";
                };
            };
            _debug.info(("formated referrer: " + _local1), VisualDebugMode.advanced);
            return (_local1);
        }
        private function _visitCode():Number{
            if (_debug.verbose){
                _debug.info(("visitCode: " + _buffer.utma.sessionId), VisualDebugMode.geek);
            };
            return (_buffer.utma.sessionId);
        }
        public function createEventTracker(_arg1:String):EventTracker{
            _debug.info((("createEventTracker( " + _arg1) + " )"));
            return (new EventTracker(_arg1, this));
        }
        public function addItem(_arg1:String, _arg2:String, _arg3:String, _arg4:String, _arg5:Number, _arg6:int):void{
            _debug.warning((("addItem( " + [_arg1, _arg2, _arg3, _arg4, _arg5, _arg6].join(", ")) + " ) not implemented"));
        }
        public function clearIgnoredOrganic():void{
            _debug.info("clearIgnoredOrganic()");
            _config.organic.clearIgnoredKeywords();
        }
        public function setVar(_arg1:String):void{
            var _local2:Variables;
            if (((!((_arg1 == ""))) && (_isNotGoogleSearch()))){
                _initData();
                _buffer.utmv.domainHash = _domainHash;
                _buffer.utmv.value = _arg1;
                if (_debug.verbose){
                    _debug.info(_buffer.utmv.toString(), VisualDebugMode.geek);
                };
                _debug.info((("setVar( " + _arg1) + " )"));
                if (_takeSample()){
                    _local2 = new Variables();
                    _local2.utmt = "var";
                    _gifRequest.send(_account, _local2);
                };
            } else {
                _debug.warning((("setVar \"" + _arg1) + "\" is ignored"));
            };
        }
        public function setDomainName(_arg1:String):void{
            if (_arg1 == "auto"){
                _config.domain.mode = DomainNameMode.auto;
            } else {
                if (_arg1 == "none"){
                    _config.domain.mode = DomainNameMode.none;
                } else {
                    _config.domain.mode = DomainNameMode.custom;
                    _config.domain.name = _arg1;
                };
            };
            _updateDomainName();
            _debug.info((("setDomainName( " + _config.domainName) + " )"));
        }
        private function _updateDomainName():void{
            var _local1:String;
            if (_config.domain.mode == DomainNameMode.auto){
                _local1 = _info.domainName;
                if (_local1.substring(0, 4) == "www."){
                    _local1 = _local1.substring(4);
                };
                _config.domain.name = _local1;
            };
            _config.domainName = _config.domain.name.toLowerCase();
            _debug.info(("domain name: " + _config.domainName), VisualDebugMode.advanced);
        }
        public function addTrans(_arg1:String, _arg2:String, _arg3:Number, _arg4:Number, _arg5:Number, _arg6:String, _arg7:String, _arg8:String):Object{
            _debug.warning((("addTrans( " + [_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8].join(", ")) + " ) not implemented"));
            return (null);
        }
        private function _renderMetricsSearchVariables(_arg1:String=""):Variables{
            var _local4:Variables;
            var _local2:Variables = new Variables();
            _local2.URIencode = true;
            var _local3:DocumentInfo = new DocumentInfo(_config, _info, _formatedReferrer, _arg1, _adSense);
            _debug.info(("docInfo: " + _local3.toURLString()), VisualDebugMode.geek);
            if (_config.campaignTracking){
                _local4 = _campaignInfo.toVariables();
            };
            var _local5:Variables = _browserInfo.toVariables();
            _local2.join(_local3.toVariables(), _local5, _local4);
            return (_local2);
        }
        public function setCampContentKey(_arg1:String):void{
            _config.campaignKey.UCCT = _arg1;
            var _local2 = (("setCampContentKey( " + _config.campaignKey.UCCT) + " )");
            if (_debug.mode == VisualDebugMode.geek){
                _debug.info((_local2 + " [UCCT]"));
            } else {
                _debug.info(_local2);
            };
        }
        private function _handleCookie():void{
            var _local1:String;
            var _local2:String;
            var _local3:Array;
            var _local4:String;
            if (_config.allowLinker){
            };
            if (((_buffer.hasUTMA()) && (!(_buffer.utma.isEmpty())))){
                if (((!(_buffer.hasUTMB())) || (!(_buffer.hasUTMC())))){
                    _buffer.updateUTMA(_timeStamp);
                    _noSessionInformation = true;
                };
                if (_debug.verbose){
                    _debug.info(("from cookie " + _buffer.utma.toString()), VisualDebugMode.geek);
                };
            } else {
                _debug.info("create a new utma", VisualDebugMode.advanced);
                _buffer.utma.domainHash = _domainHash;
                _buffer.utma.sessionId = _getUniqueSessionId();
                _buffer.utma.firstTime = _timeStamp;
                _buffer.utma.lastTime = _timeStamp;
                _buffer.utma.currentTime = _timeStamp;
                _buffer.utma.sessionCount = 1;
                if (_debug.verbose){
                    _debug.info(_buffer.utma.toString(), VisualDebugMode.geek);
                };
                _noSessionInformation = true;
                _isNewVisitor = true;
            };
            if (((_adSense.gaGlobal) && ((_adSense.dh == String(_domainHash))))){
                if (_adSense.sid){
                    _buffer.utma.currentTime = Number(_adSense.sid);
                    if (_debug.verbose){
                        _local1 = "";
                        _local1 = (_local1 + "AdSense sid found\n");
                        _local1 = (_local1 + (((("Override currentTime(" + _buffer.utma.currentTime) + ") from AdSense sid(") + Number(_adSense.sid)) + ")"));
                        _debug.info(_local1, VisualDebugMode.geek);
                    };
                };
                if (_isNewVisitor){
                    if (_adSense.sid){
                        _buffer.utma.lastTime = Number(_adSense.sid);
                        if (_debug.verbose){
                            _local2 = "";
                            _local2 = (_local2 + "AdSense sid found (new visitor)\n");
                            _local2 = (_local2 + (((("Override lastTime(" + _buffer.utma.lastTime) + ") from AdSense sid(") + Number(_adSense.sid)) + ")"));
                            _debug.info(_local2, VisualDebugMode.geek);
                        };
                    };
                    if (_adSense.vid){
                        _local3 = _adSense.vid.split(".");
                        _buffer.utma.sessionId = Number(_local3[0]);
                        _buffer.utma.firstTime = Number(_local3[1]);
                        if (_debug.verbose){
                            _local4 = "";
                            _local4 = (_local4 + "AdSense vid found (new visitor)\n");
                            _local4 = (_local4 + (((("Override sessionId(" + _buffer.utma.sessionId) + ") from AdSense vid(") + Number(_local3[0])) + ")\n"));
                            _local4 = (_local4 + (((("Override firstTime(" + _buffer.utma.firstTime) + ") from AdSense vid(") + Number(_local3[1])) + ")"));
                            _debug.info(_local4, VisualDebugMode.geek);
                        };
                    };
                    if (_debug.verbose){
                        _debug.info(("AdSense modified : " + _buffer.utma.toString()), VisualDebugMode.geek);
                    };
                };
            };
            _buffer.utmb.domainHash = _domainHash;
            if (isNaN(_buffer.utmb.trackCount)){
                _buffer.utmb.trackCount = 0;
            };
            if (isNaN(_buffer.utmb.token)){
                _buffer.utmb.token = _config.tokenCliff;
            };
            if (isNaN(_buffer.utmb.lastTime)){
                _buffer.utmb.lastTime = _buffer.utma.currentTime;
            };
            _buffer.utmc.domainHash = _domainHash;
            if (_debug.verbose){
                _debug.info(_buffer.utmb.toString(), VisualDebugMode.advanced);
                _debug.info(_buffer.utmc.toString(), VisualDebugMode.advanced);
            };
        }
        public function setLocalServerMode():void{
            _config.serverMode = ServerOperationMode.local;
            _debug.info("setLocalServerMode()");
        }
        public function clearIgnoredRef():void{
            _debug.info("clearIgnoredRef()");
            _config.organic.clearIgnoredReferrals();
        }
        public function setCampSourceKey(_arg1:String):void{
            _config.campaignKey.UCSR = _arg1;
            var _local2 = (("setCampSourceKey( " + _config.campaignKey.UCSR) + " )");
            if (_debug.mode == VisualDebugMode.geek){
                _debug.info((_local2 + " [UCSR]"));
            } else {
                _debug.info(_local2);
            };
        }
        public function getLocalGifPath():String{
            _debug.info("getLocalGifPath()");
            return (_config.localGIFpath);
        }
        public function setLocalGifPath(_arg1:String):void{
            _config.localGIFpath = _arg1;
            _debug.info((("setLocalGifPath( " + _config.localGIFpath) + " )"));
        }
        public function getVersion():String{
            _debug.info("getVersion()");
            return (_config.version);
        }
        public function setAllowAnchor(_arg1:Boolean):void{
            _config.allowAnchor = _arg1;
            _debug.info((("setAllowAnchor( " + _config.allowAnchor) + " )"));
        }
        private function _isNotGoogleSearch():Boolean{
            var _local1:String = _config.domainName;
            var _local2 = (_local1.indexOf("www.google.") < 0);
            var _local3 = (_local1.indexOf(".google.") < 0);
            var _local4 = (_local1.indexOf("google.") < 0);
            var _local5 = (_local1.indexOf("google.org") > -1);
            return (((((((((_local2) || (_local3))) || (_local4))) || (!((_config.cookiePath == "/"))))) || (_local5)));
        }
        public function setSampleRate(_arg1:Number):void{
            if (_arg1 < 0){
                _debug.warning("sample rate can not be negative, ignoring value.");
            } else {
                _config.sampleRate = _arg1;
            };
            _debug.info((("setSampleRate( " + _config.sampleRate) + " )"));
        }
        private function _takeSample():Boolean{
            if (_debug.verbose){
                _debug.info((((("takeSample: (" + (_visitCode() % 10000)) + ") < (") + (_config.sampleRate * 10000)) + ")"), VisualDebugMode.geek);
            };
            return (((_visitCode() % 10000) < (_config.sampleRate * 10000)));
        }
        public function setCookiePath(_arg1:String):void{
            _config.cookiePath = _arg1;
            _debug.info((("setCookiePath( " + _config.cookiePath) + " )"));
        }
        public function setAllowHash(_arg1:Boolean):void{
            _config.allowDomainHash = _arg1;
            _debug.info((("setAllowHash( " + _config.allowDomainHash) + " )"));
        }
        private function _generateUserDataHash():Number{
            var _local1 = "";
            _local1 = (_local1 + _info.appName);
            _local1 = (_local1 + _info.appVersion);
            _local1 = (_local1 + _info.language);
            _local1 = (_local1 + _info.platform);
            _local1 = (_local1 + _info.userAgent.toString());
            _local1 = (_local1 + (((_info.screenWidth + "x") + _info.screenHeight) + _info.screenColorDepth));
            _local1 = (_local1 + _info.referrer);
            return (Utils.generateHash(_local1));
        }
        public function setCampNOKey(_arg1:String):void{
            _config.campaignKey.UCNO = _arg1;
            var _local2 = (("setCampNOKey( " + _config.campaignKey.UCNO) + " )");
            if (_debug.mode == VisualDebugMode.geek){
                _debug.info((_local2 + " [UCNO]"));
            } else {
                _debug.info(_local2);
            };
        }
        public function addIgnoredOrganic(_arg1:String):void{
            _debug.info((("addIgnoredOrganic( " + _arg1) + " )"));
            _config.organic.addIgnoredKeyword(_arg1);
        }
        public function setLocalRemoteServerMode():void{
            _config.serverMode = ServerOperationMode.both;
            _debug.info("setLocalRemoteServerMode()");
        }
        public function cookiePathCopy(_arg1:String):void{
            _debug.warning((("cookiePathCopy( " + _arg1) + " ) not implemented"));
        }
        public function setDetectTitle(_arg1:Boolean):void{
            _config.detectTitle = _arg1;
            _debug.info((("setDetectTitle( " + _config.detectTitle) + " )"));
        }
        public function setCampTermKey(_arg1:String):void{
            _config.campaignKey.UCTR = _arg1;
            var _local2 = (("setCampTermKey( " + _config.campaignKey.UCTR) + " )");
            if (_debug.mode == VisualDebugMode.geek){
                _debug.info((_local2 + " [UCTR]"));
            } else {
                _debug.info(_local2);
            };
        }
        public function getServiceMode():ServerOperationMode{
            _debug.info("getServiceMode()");
            return (_config.serverMode);
        }
        private function _trackMetrics(_arg1:String=""):void{
            var _local2:Variables;
            var _local3:Variables;
            var _local4:Variables;
            var _local5:EventInfo;
            if (_takeSample()){
                _local2 = new Variables();
                _local2.URIencode = true;
                if (((_x10Module) && (_x10Module.hasData()))){
                    _local5 = new EventInfo(false, _x10Module);
                    _local3 = _local5.toVariables();
                };
                _local4 = _renderMetricsSearchVariables(_arg1);
                _local2.join(_local3, _local4);
                _gifRequest.send(_account, _local2);
            };
        }
        public function setCampaignTrack(_arg1:Boolean):void{
            _config.campaignTracking = _arg1;
            _debug.info((("setCampaignTrack( " + _config.campaignTracking) + " )"));
        }
        public function addIgnoredRef(_arg1:String):void{
            _debug.info((("addIgnoredRef( " + _arg1) + " )"));
            _config.organic.addIgnoredReferral(_arg1);
        }
        public function clearOrganic():void{
            _debug.info("clearOrganic()");
            _config.organic.clearEngines();
        }
        public function getDetectFlash():Boolean{
            _debug.info("getDetectFlash()");
            return (_config.detectFlash);
        }
        public function setCampMediumKey(_arg1:String):void{
            _config.campaignKey.UCMD = _arg1;
            var _local2 = (("setCampMediumKey( " + _config.campaignKey.UCMD) + " )");
            if (_debug.mode == VisualDebugMode.geek){
                _debug.info((_local2 + " [UCMD]"));
            } else {
                _debug.info(_local2);
            };
        }
        private function _getUniqueSessionId():Number{
            var _local1:Number = ((Utils.generate32bitRandom() ^ _generateUserDataHash()) * 2147483647);
            _debug.info(("Session ID: " + _local1), VisualDebugMode.geek);
            return (_local1);
        }
        private function _getDomainHash():Number{
            if (((((!(_config.domainName)) || ((_config.domainName == "")))) || ((_config.domain.mode == DomainNameMode.none)))){
                _config.domainName = "";
                return (1);
            };
            _updateDomainName();
            if (_config.allowDomainHash){
                return (Utils.generateHash(_config.domainName));
            };
            return (1);
        }
        public function setSessionTimeout(_arg1:int):void{
            _config.sessionTimeout = _arg1;
            _debug.info((("setSessionTimeout( " + _config.sessionTimeout) + " )"));
        }
        public function getAccount():String{
            _debug.info("getAccount()");
            return (_account);
        }
        public function link(_arg1:String, _arg2:Boolean=false):void{
            _debug.warning((("link( " + [_arg1, _arg2].join(", ")) + " ) not implemented"));
        }
        public function setRemoteServerMode():void{
            _config.serverMode = ServerOperationMode.remote;
            _debug.info("setRemoteServerMode()");
        }

    }
}//package com.google.analytics.v4 
﻿package com.google.analytics.campaign {
    import com.google.analytics.utils.*;
    import com.google.analytics.core.*;
    import com.google.analytics.v4.*;
    import com.google.analytics.debug.*;

    public class CampaignManager {

        public static const trackingDelimiter:String = "|";

        private var _config:Configuration;
        private var _domainHash:Number;
        private var _debug:DebugConfiguration;
        private var _timeStamp:Number;
        private var _referrer:String;
        private var _buffer:Buffer;

        public function CampaignManager(_arg1:Configuration, _arg2:DebugConfiguration, _arg3:Buffer, _arg4:Number, _arg5:String, _arg6:Number){
            _config = _arg1;
            _debug = _arg2;
            _buffer = _arg3;
            _domainHash = _arg4;
            _referrer = _arg5;
            _timeStamp = _arg6;
        }
        public static function isInvalidReferrer(_arg1:String):Boolean{
            var _local2:URL;
            if ((((((_arg1 == "")) || ((_arg1 == "-")))) || ((_arg1 == "0")))){
                return (true);
            };
            if (_arg1.indexOf("://") > -1){
                _local2 = new URL(_arg1);
                if ((((_local2.protocol == Protocols.file)) || ((_local2.protocol == Protocols.none)))){
                    return (true);
                };
            };
            return (false);
        }
        public static function isFromGoogleCSE(_arg1:String, _arg2:Configuration):Boolean{
            var _local3:URL = new URL(_arg1);
            if (_local3.hostName.indexOf(_arg2.google) > -1){
                if (_local3.search.indexOf((_arg2.googleSearchParam + "=")) > -1){
                    if (_local3.path == ("/" + _arg2.googleCsePath)){
                        return (true);
                    };
                };
            };
            return (false);
        }

        public function getCampaignInformation(_arg1:String, _arg2:Boolean):CampaignInfo{
            var _local4:CampaignTracker;
            var _local8:CampaignTracker;
            var _local9:int;
            var _local3:CampaignInfo = new CampaignInfo();
            var _local5:Boolean;
            var _local6:Boolean;
            var _local7:int;
            if (((_config.allowLinker) && (_buffer.isGenuine()))){
                if (!_buffer.hasUTMZ()){
                    return (_local3);
                };
            };
            _local4 = getTrackerFromSearchString(_arg1);
            if (isValid(_local4)){
                _local6 = hasNoOverride(_arg1);
                if (((_local6) && (!(_buffer.hasUTMZ())))){
                    return (_local3);
                };
            };
            if (!isValid(_local4)){
                _local4 = getOrganicCampaign();
                if (((!(_buffer.hasUTMZ())) && (isIgnoredKeyword(_local4)))){
                    return (_local3);
                };
            };
            if (((!(isValid(_local4))) && (_arg2))){
                _local4 = getReferrerCampaign();
                if (((!(_buffer.hasUTMZ())) && (isIgnoredReferral(_local4)))){
                    return (_local3);
                };
            };
            if (!isValid(_local4)){
                if (((!(_buffer.hasUTMZ())) && (_arg2))){
                    _local4 = getDirectCampaign();
                };
            };
            if (!isValid(_local4)){
                return (_local3);
            };
            if (((_buffer.hasUTMZ()) && (!(_buffer.utmz.isEmpty())))){
                _local8 = new CampaignTracker();
                _local8.fromTrackerString(_buffer.utmz.campaignTracking);
                _local5 = (_local8.toTrackerString() == _local4.toTrackerString());
                _local7 = _buffer.utmz.responseCount;
            };
            if (((!(_local5)) || (_arg2))){
                _local9 = _buffer.utma.sessionCount;
                _local7++;
                if (_local9 == 0){
                    _local9 = 1;
                };
                _buffer.utmz.domainHash = _domainHash;
                _buffer.utmz.campaignCreation = _timeStamp;
                _buffer.utmz.campaignSessions = _local9;
                _buffer.utmz.responseCount = _local7;
                _buffer.utmz.campaignTracking = _local4.toTrackerString();
                _debug.info(_buffer.utmz.toString(), VisualDebugMode.geek);
                _local3 = new CampaignInfo(false, true);
            } else {
                _local3 = new CampaignInfo(false, false);
            };
            return (_local3);
        }
        public function hasNoOverride(_arg1:String):Boolean{
            var _local2:CampaignKey = _config.campaignKey;
            if (_arg1 == ""){
                return (false);
            };
            var _local3:Variables = new Variables(_arg1);
            var _local4 = "";
            if (_local3.hasOwnProperty(_local2.UCNO)){
                _local4 = _local3[_local2.UCNO];
                switch (_local4){
                    case "1":
                        return (true);
                    case "":
                    case "0":
                    default:
                        return (false);
                };
            };
            return (false);
        }
        public function getTrackerFromSearchString(_arg1:String):CampaignTracker{
            var _local2:CampaignTracker = getOrganicCampaign();
            var _local3:CampaignTracker = new CampaignTracker();
            var _local4:CampaignKey = _config.campaignKey;
            if (_arg1 == ""){
                return (_local3);
            };
            var _local5:Variables = new Variables(_arg1);
            if (_local5.hasOwnProperty(_local4.UCID)){
                _local3.id = _local5[_local4.UCID];
            };
            if (_local5.hasOwnProperty(_local4.UCSR)){
                _local3.source = _local5[_local4.UCSR];
            };
            if (_local5.hasOwnProperty(_local4.UGCLID)){
                _local3.clickId = _local5[_local4.UGCLID];
            };
            if (_local5.hasOwnProperty(_local4.UCCN)){
                _local3.name = _local5[_local4.UCCN];
            } else {
                _local3.name = "(not set)";
            };
            if (_local5.hasOwnProperty(_local4.UCMD)){
                _local3.medium = _local5[_local4.UCMD];
            } else {
                _local3.medium = "(not set)";
            };
            if (_local5.hasOwnProperty(_local4.UCTR)){
                _local3.term = _local5[_local4.UCTR];
            } else {
                if (((_local2) && (!((_local2.term == ""))))){
                    _local3.term = _local2.term;
                };
            };
            if (_local5.hasOwnProperty(_local4.UCCT)){
                _local3.content = _local5[_local4.UCCT];
            };
            return (_local3);
        }
        public function getOrganicCampaign():CampaignTracker{
            var _local1:CampaignTracker;
            var _local4:Array;
            var _local5:OrganicReferrer;
            var _local6:String;
            if (((isInvalidReferrer(_referrer)) || (isFromGoogleCSE(_referrer, _config)))){
                return (_local1);
            };
            var _local2:URL = new URL(_referrer);
            var _local3 = "";
            if (_local2.hostName != ""){
                if (_local2.hostName.indexOf(".") > -1){
                    _local4 = _local2.hostName.split(".");
                    switch (_local4.length){
                        case 2:
                            _local3 = _local4[0];
                            break;
                        case 3:
                            _local3 = _local4[1];
                            break;
                    };
                };
            };
            if (_config.organic.match(_local3)){
                _local5 = _config.organic.getReferrerByName(_local3);
                _local6 = _config.organic.getKeywordValue(_local5, _local2.search);
                _local1 = new CampaignTracker();
                _local1.source = _local5.engine;
                _local1.name = "(organic)";
                _local1.medium = "organic";
                _local1.term = _local6;
            };
            return (_local1);
        }
        public function getDirectCampaign():CampaignTracker{
            var _local1:CampaignTracker = new CampaignTracker();
            _local1.source = "(direct)";
            _local1.name = "(direct)";
            _local1.medium = "(none)";
            return (_local1);
        }
        public function isIgnoredKeyword(_arg1:CampaignTracker):Boolean{
            if (((_arg1) && ((_arg1.medium == "organic")))){
                return (_config.organic.isIgnoredKeyword(_arg1.term));
            };
            return (false);
        }
        public function isIgnoredReferral(_arg1:CampaignTracker):Boolean{
            if (((_arg1) && ((_arg1.medium == "referral")))){
                return (_config.organic.isIgnoredReferral(_arg1.source));
            };
            return (false);
        }
        public function isValid(_arg1:CampaignTracker):Boolean{
            if (((_arg1) && (_arg1.isValid()))){
                return (true);
            };
            return (false);
        }
        public function getReferrerCampaign():CampaignTracker{
            var _local1:CampaignTracker;
            if (((isInvalidReferrer(_referrer)) || (isFromGoogleCSE(_referrer, _config)))){
                return (_local1);
            };
            var _local2:URL = new URL(_referrer);
            var _local3:String = _local2.hostName;
            var _local4:String = _local2.path;
            if (_local3.indexOf("www.") == 0){
                _local3 = _local3.substr(4);
            };
            _local1 = new CampaignTracker();
            _local1.source = _local3;
            _local1.name = "(referral)";
            _local1.medium = "referral";
            _local1.content = _local4;
            return (_local1);
        }

    }
}//package com.google.analytics.campaign 
﻿package com.google.analytics.campaign {
    import com.google.analytics.utils.*;

    public class CampaignTracker {

        public var content:String;
        public var source:String;
        public var clickId:String;
        public var name:String;
        public var term:String;
        public var medium:String;
        public var id:String;

        public function CampaignTracker(_arg1:String="", _arg2:String="", _arg3:String="", _arg4:String="", _arg5:String="", _arg6:String="", _arg7:String=""){
            this.id = _arg1;
            this.source = _arg2;
            this.clickId = _arg3;
            this.name = _arg4;
            this.medium = _arg5;
            this.term = _arg6;
            this.content = _arg7;
        }
        public function isValid():Boolean{
            if (((((!((id == ""))) || (!((source == ""))))) || (!((clickId == ""))))){
                return (true);
            };
            return (false);
        }
        public function toTrackerString():String{
            var _local1:Array = [];
            _addIfNotEmpty(_local1, "utmcsr=", source);
            _addIfNotEmpty(_local1, "utmccn=", name);
            _addIfNotEmpty(_local1, "utmcmd=", medium);
            _addIfNotEmpty(_local1, "utmctr=", term);
            _addIfNotEmpty(_local1, "utmcct=", content);
            _addIfNotEmpty(_local1, "utmcid=", id);
            _addIfNotEmpty(_local1, "utmgclid=", clickId);
            return (_local1.join(CampaignManager.trackingDelimiter));
        }
        private function _addIfNotEmpty(_arg1:Array, _arg2:String, _arg3:String):void{
            if (_arg3 != ""){
                _arg3 = _arg3.split("+").join("%20");
                _arg3 = _arg3.split(" ").join("%20");
                _arg1.push((_arg2 + _arg3));
            };
        }
        public function fromTrackerString(_arg1:String):void{
            var _local2:String = _arg1.split(CampaignManager.trackingDelimiter).join("&");
            var _local3:Variables = new Variables(_local2);
            if (_local3.hasOwnProperty("utmcid")){
                this.id = _local3["utmcid"];
            };
            if (_local3.hasOwnProperty("utmcsr")){
                this.source = _local3["utmcsr"];
            };
            if (_local3.hasOwnProperty("utmccn")){
                this.name = _local3["utmccn"];
            };
            if (_local3.hasOwnProperty("utmcmd")){
                this.medium = _local3["utmcmd"];
            };
            if (_local3.hasOwnProperty("utmctr")){
                this.term = _local3["utmctr"];
            };
            if (_local3.hasOwnProperty("utmcct")){
                this.content = _local3["utmcct"];
            };
            if (_local3.hasOwnProperty("utmgclid")){
                this.clickId = _local3["utmgclid"];
            };
        }

    }
}//package com.google.analytics.campaign 
﻿package com.google.analytics.campaign {

    public class CampaignKey {

        public var UCMD:String = "utm_medium";
        public var UCID:String = "utm_id";
        public var UCTR:String = "utm_term";
        public var UCSR:String = "utm_source";
        public var UCNO:String = "utm_nooverride";
        public var UCCN:String = "utm_campaign";
        public var UGCLID:String = "gclid";
        public var UCCT:String = "utm_content";

    }
}//package com.google.analytics.campaign 
﻿package com.google.analytics.campaign {
    import com.google.analytics.utils.*;

    public class CampaignInfo {

        private var _new:Boolean;
        private var _empty:Boolean;

        public function CampaignInfo(_arg1:Boolean=true, _arg2:Boolean=false){
            _empty = _arg1;
            _new = _arg2;
        }
        public function toURLString():String{
            var _local1:Variables = toVariables();
            return (_local1.toString());
        }
        public function isNew():Boolean{
            return (_new);
        }
        public function get utmcn():String{
            return ("1");
        }
        public function isEmpty():Boolean{
            return (_empty);
        }
        public function toVariables():Variables{
            var _local1:Variables = new Variables();
            _local1.URIencode = true;
            if (((!(isEmpty())) && (isNew()))){
                _local1.utmcn = utmcn;
            };
            if (((!(isEmpty())) && (!(isNew())))){
                _local1.utmcr = utmcr;
            };
            return (_local1);
        }
        public function get utmcr():String{
            return ("1");
        }

    }
}//package com.google.analytics.campaign 
﻿package com.google.analytics {
    import com.google.analytics.utils.*;

    public class API {

        public static var version:Version = new Version();

        version.major = 1;
        version.minor = 0;
        version.build = 1;
        version.revision = "$Rev: 319 $ ".split(" ")[1];
    }
}//package com.google.analytics 
﻿package com.google.analytics.external {
    import com.google.analytics.debug.*;

    public class AdSenseGlobals extends JavascriptProxy {

        public static var gaGlobal_js:XML = <script>
            <![CDATA[
                function()
                {
                    try
                    {
                        gaGlobal
                    }
                    catch(e)
                    {
                        gaGlobal = {} ;
                    }
                }
            ]]>
        </script>
        ;

        private var _gaGlobalVerified:Boolean = false;

        public function AdSenseGlobals(_arg1:DebugConfiguration){
            super(_arg1);
        }
        public function set vid(_arg1:String):void{
            if (!isAvailable()){
                return;
            };
            _verify();
            setProperty("gaGlobal.vid", _arg1);
        }
        public function get hid():String{
            if (!isAvailable()){
                return (null);
            };
            _verify();
            return (getProperty("gaGlobal.hid"));
        }
        public function set hid(_arg1:String):void{
            if (!isAvailable()){
                return;
            };
            _verify();
            setProperty("gaGlobal.hid", _arg1);
        }
        public function get dh():String{
            if (!isAvailable()){
                return (null);
            };
            _verify();
            return (getProperty("gaGlobal.dh"));
        }
        public function get sid():String{
            if (!isAvailable()){
                return (null);
            };
            _verify();
            return (getProperty("gaGlobal.sid"));
        }
        public function get vid():String{
            if (!isAvailable()){
                return (null);
            };
            _verify();
            return (getProperty("gaGlobal.vid"));
        }
        private function _verify():void{
            if (!_gaGlobalVerified){
                executeBlock(gaGlobal_js);
                _gaGlobalVerified = true;
            };
        }
        public function set sid(_arg1:String):void{
            if (!isAvailable()){
                return;
            };
            _verify();
            setProperty("gaGlobal.sid", _arg1);
        }
        public function get gaGlobal():Object{
            if (!isAvailable()){
                return (null);
            };
            _verify();
            return (getProperty("gaGlobal"));
        }

    }
}//package com.google.analytics.external 
﻿package com.google.analytics.external {
    import com.google.analytics.debug.*;

    public class HTMLDOM extends JavascriptProxy {

        public static var cache_properties_js:XML = <script>
            <![CDATA[
                    function()
                    {
                        var obj = {};
                            obj.host         = document.location.host;
                            obj.language     = navigator.language ? navigator.language : navigator.browserLanguage;
                            obj.characterSet = document.characterSet ? document.characterSet : document.charset;
                            obj.colorDepth   = window.screen.colorDepth;
                            obj.location     = document.location.toString();
                            obj.pathname     = document.location.pathname;
                            obj.protocol     = document.location.protocol;
                            obj.search       = document.location.search;
                            obj.referrer     = document.referrer;
                            obj.title        = document.title;
                        
                        return obj;
                    }
                ]]>
         </script>
        ;

        private var _referrer:String;
        private var _language:String;
        private var _host:String;
        private var _pathname:String;
        private var _location:String;
        private var _search:String;
        private var _characterSet:String;
        private var _title:String;
        private var _protocol:String;
        private var _colorDepth:String;

        public function HTMLDOM(_arg1:DebugConfiguration){
            super(_arg1);
        }
        public function get search():String{
            if (_search){
                return (_search);
            };
            if (!isAvailable()){
                return (null);
            };
            _search = getProperty("document.location.search");
            return (_search);
        }
        public function get location():String{
            if (_location){
                return (_location);
            };
            if (!isAvailable()){
                return (null);
            };
            _location = getPropertyString("document.location");
            return (_location);
        }
        public function get pathname():String{
            if (_pathname){
                return (_pathname);
            };
            if (!isAvailable()){
                return (null);
            };
            _pathname = getProperty("document.location.pathname");
            return (_pathname);
        }
        public function cacheProperties():void{
            if (!isAvailable()){
                return;
            };
            var _local1:Object = call(cache_properties_js);
            if (_local1){
                _host = _local1.host;
                _language = _local1.language;
                _characterSet = _local1.characterSet;
                _colorDepth = _local1.colorDepth;
                _location = _local1.location;
                _pathname = _local1.pathname;
                _protocol = _local1.protocol;
                _search = _local1.search;
                _referrer = _local1.referrer;
                _title = _local1.title;
            };
        }
        public function get language():String{
            if (_language){
                return (_language);
            };
            if (!isAvailable()){
                return (null);
            };
            var _local1:String = getProperty("navigator.language");
            if (_local1 == null){
                _local1 = getProperty("navigator.browserLanguage");
            };
            _language = _local1;
            return (_language);
        }
        public function get colorDepth():String{
            if (_colorDepth){
                return (_colorDepth);
            };
            if (!isAvailable()){
                return (null);
            };
            _colorDepth = getProperty("window.screen.colorDepth");
            return (_colorDepth);
        }
        public function get referrer():String{
            if (_referrer){
                return (_referrer);
            };
            if (!isAvailable()){
                return (null);
            };
            _referrer = getProperty("document.referrer");
            return (_referrer);
        }
        public function get protocol():String{
            if (_protocol){
                return (_protocol);
            };
            if (!isAvailable()){
                return (null);
            };
            _protocol = getProperty("document.location.protocol");
            return (_protocol);
        }
        public function get host():String{
            if (_host){
                return (_host);
            };
            if (!isAvailable()){
                return (null);
            };
            _host = getProperty("document.location.host");
            return (_host);
        }
        public function get characterSet():String{
            if (_characterSet){
                return (_characterSet);
            };
            if (!isAvailable()){
                return (null);
            };
            var _local1:String = getProperty("document.characterSet");
            if (_local1 == null){
                _local1 = getProperty("document.charset");
            };
            _characterSet = _local1;
            return (_characterSet);
        }
        public function get title():String{
            if (_title){
                return (_title);
            };
            if (!isAvailable()){
                return (null);
            };
            _title = getProperty("document.title");
            return (_title);
        }

    }
}//package com.google.analytics.external 
﻿package com.google.analytics.external {
    import flash.system.*;
    import com.google.analytics.debug.*;
    import flash.external.*;

    public class JavascriptProxy {

        public static var setProperty_js:XML = <script>
                <![CDATA[
                    function( path , value )
                    {
                        var paths;
                        var prop;
                        if( path.indexOf(".") > 0 )
                        {
                            paths = path.split(".");
                            prop  = paths.pop() ;
                        }
                        else
                        {
                            paths = [];
                            prop  = path;
                        }
                        var target = window ;
                        var len    = paths.length ;
                        for( var i = 0 ; i < len ; i++ )
                        {
                            target = target[ paths[i] ] ;
                        }
                        
                        target[ prop ] = value ;
                    }
                ]]>
            </script>
        ;
        public static var hasProperty_js:XML = <script>
                <![CDATA[
                    function( path )
                    {
                        var paths;
                        if( path.indexOf(".") > 0 )
                        {
                            paths = path.split(".");
                        }
                        else
                        {
                            paths = [path];
                        }
                        var target = window ;
                        var len    = paths.length ;
                        for( var i = 0 ; i < len ; i++ )
                        {
                            target = target[ paths[i] ] ;
                        }
                        if( target )
                        {
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }
                ]]>
            </script>
        ;
        public static var setPropertyRef_js:XML = <script>
                <![CDATA[
                    function( path , target )
                    {
                        var paths;
                        var prop;
                        if( path.indexOf(".") > 0 )
                        {
                            paths = path.split(".");
                            prop  = paths.pop() ;
                        }
                        else
                        {
                            paths = [];
                            prop  = path;
                        }
                        alert( "paths:"+paths.length+", prop:"+prop );
                        var targets;
                        var name;
                        if( target.indexOf(".") > 0 )
                        {
                            targets = target.split(".");
                            name    = targets.pop();
                        }
                        else
                        {
                            targets = [];
                            name    = target;
                        }
                        alert( "targets:"+targets.length+", name:"+name );
                        var root = window;
                        var len  = paths.length;
                        for( var i = 0 ; i < len ; i++ )
                        {
                            root = root[ paths[i] ] ;
                        }
                        var ref   = window;
                        var depth = targets.length;
                        for( var j = 0 ; j < depth ; j++ )
                        {
                            ref = ref[ targets[j] ] ;
                        }
                        root[ prop ] = ref[name] ;
                    }
                ]]>
            </script>
        ;

        private var _notAvailableWarning:Boolean = true;
        private var _debug:DebugConfiguration;

        public function JavascriptProxy(_arg1:DebugConfiguration){
            _debug = _arg1;
        }
        public function getProperty(_arg1:String){
            return (call((_arg1 + ".valueOf")));
        }
        public function hasProperty(_arg1:String):Boolean{
            return (call(hasProperty_js, _arg1));
        }
        public function setProperty(_arg1:String, _arg2):void{
            call(setProperty_js, _arg1, _arg2);
        }
        public function executeBlock(_arg1:String):void{
            var data:* = _arg1;
            if (isAvailable()){
                try {
                    ExternalInterface.call(data);
                } catch(e:SecurityError) {
                    if (_debug.javascript){
                        _debug.warning("ExternalInterface is not allowed.\nEnsure that allowScriptAccess is set to \"always\" in the Flash embed HTML.");
                    };
                } catch(e:Error) {
                    if (_debug.javascript){
                        _debug.warning(("ExternalInterface failed to make the call\nreason: " + e.message));
                    };
                };
            };
        }
        public function getPropertyString(_arg1:String):String{
            return (call((_arg1 + ".toString")));
        }
        public function setPropertyByReference(_arg1:String, _arg2:String):void{
            call(setPropertyRef_js, _arg1, _arg2);
        }
        public function call(_arg1:String, ... _args){
            var output:* = null;
            var functionName:* = _arg1;
            var args:* = _args;
            if (isAvailable()){
                try {
                    if (((_debug.javascript) && (_debug.verbose))){
                        output = "";
                        output = ("Flash->JS: " + functionName);
                        output = (output + "( ");
                        if (args.length > 0){
                            output = (output + args.join(","));
                        };
                        output = (output + " )");
                        _debug.info(output);
                    };
                    args.unshift(functionName);
                    return (ExternalInterface.call.apply(ExternalInterface, args));
                } catch(e:SecurityError) {
                    if (_debug.javascript){
                        _debug.warning("ExternalInterface is not allowed.\nEnsure that allowScriptAccess is set to \"always\" in the Flash embed HTML.");
                    };
                } catch(e:Error) {
                    if (_debug.javascript){
                        _debug.warning(("ExternalInterface failed to make the call\nreason: " + e.message));
                    };
                };
            };
            return (null);
        }
        public function isAvailable():Boolean{
            var _local1:Boolean = ExternalInterface.available;
            if (((_local1) && ((Capabilities.playerType == "External")))){
                _local1 = false;
            };
            if (((((!(_local1)) && (_debug.javascript))) && (_notAvailableWarning))){
                _debug.warning("ExternalInterface is not available.");
                _notAvailableWarning = false;
            };
            return (_local1);
        }

    }
}//package com.google.analytics.external 
﻿package com.google.analytics.components {
    import flash.display.*;
    import com.google.analytics.utils.*;
    import com.google.analytics.*;

    public class GATrackerLibrary extends MovieClip {

        public static var version:Version = API.version;

    }
}//package com.google.analytics.components 
﻿package com.google.analytics.core {

    public namespace ga_internal;
}//package com.google.analytics.core 
﻿package com.google.analytics.core {
    import com.google.analytics.debug.*;

    public class Domain {

        private var _mode:DomainNameMode;
        private var _debug:DebugConfiguration;
        private var _name:String;

        public function Domain(_arg1:DomainNameMode=null, _arg2:String="", _arg3:DebugConfiguration=null){
            _debug = _arg3;
            if (_arg1 == null){
                _arg1 = DomainNameMode.auto;
            };
            _mode = _arg1;
            if (_arg1 == DomainNameMode.custom){
                this.name = _arg2;
            } else {
                _name = _arg2;
            };
        }
        public function get mode():DomainNameMode{
            return (_mode);
        }
        public function set mode(_arg1:DomainNameMode):void{
            _mode = _arg1;
            if (_mode == DomainNameMode.none){
                _name = "";
            };
        }
        public function get name():String{
            return (_name);
        }
        public function set name(_arg1:String):void{
            if (((!((_arg1.charAt(0) == "."))) && (_debug))){
                _debug.warning(("missing leading period \".\", cookie will only be accessible on " + _arg1), VisualDebugMode.geek);
            };
            _name = _arg1;
        }

    }
}//package com.google.analytics.core 
﻿package com.google.analytics.core {
    import com.google.analytics.utils.*;

    public class Organic {

        public static var throwErrors:Boolean = false;

        private var _sourcesCache:Array;
        private var _sourcesEngine:Array;
        private var _ignoredKeywords:Array;
        private var _ignoredReferralsCache:Object;
        private var _ignoredReferrals:Array;
        private var _ignoredKeywordsCache:Object;
        private var _sources:Array;

        public function Organic(){
            _sources = [];
            _sourcesCache = [];
            _sourcesEngine = [];
            _ignoredReferrals = [];
            _ignoredReferralsCache = {};
            _ignoredKeywords = [];
            _ignoredKeywordsCache = {};
        }
        public static function getKeywordValueFromPath(_arg1:String, _arg2:String):String{
            var _local3:String;
            var _local4:Variables;
            if (_arg2.indexOf((_arg1 + "=")) > -1){
                if (_arg2.charAt(0) == "?"){
                    _arg2 = _arg2.substr(1);
                };
                _arg2 = _arg2.split("+").join("%20");
                _local4 = new Variables(_arg2);
                _local3 = _local4[_arg1];
            };
            return (_local3);
        }

        public function isIgnoredKeyword(_arg1:String):Boolean{
            if (_ignoredKeywordsCache.hasOwnProperty(_arg1)){
                return (true);
            };
            return (false);
        }
        public function getKeywordValue(_arg1:OrganicReferrer, _arg2:String):String{
            var _local3:String = _arg1.keyword;
            return (getKeywordValueFromPath(_local3, _arg2));
        }
        public function isIgnoredReferral(_arg1:String):Boolean{
            if (_ignoredReferralsCache.hasOwnProperty(_arg1)){
                return (true);
            };
            return (false);
        }
        public function clear():void{
            clearEngines();
            clearIgnoredReferrals();
            clearIgnoredKeywords();
        }
        public function get count():int{
            return (_sources.length);
        }
        public function get ignoredKeywordsCount():int{
            return (_ignoredKeywords.length);
        }
        public function match(_arg1:String):Boolean{
            if (_arg1 == ""){
                return (false);
            };
            _arg1 = _arg1.toLowerCase();
            if (_sourcesEngine[_arg1] != undefined){
                return (true);
            };
            return (false);
        }
        public function clearIgnoredKeywords():void{
            _ignoredKeywords = [];
            _ignoredKeywordsCache = {};
        }
        public function addSource(_arg1:String, _arg2:String):void{
            var _local3:OrganicReferrer = new OrganicReferrer(_arg1, _arg2);
            if (_sourcesCache[_local3.toString()] == undefined){
                _sources.push(_local3);
                _sourcesCache[_local3.toString()] = (_sources.length - 1);
                if (_sourcesEngine[_local3.engine] == undefined){
                    _sourcesEngine[_local3.engine] = [(_sources.length - 1)];
                } else {
                    _sourcesEngine[_local3.engine].push((_sources.length - 1));
                };
            } else {
                if (throwErrors){
                    throw (new Error((_local3.toString() + " already exists, we don't add it.")));
                };
            };
        }
        public function clearEngines():void{
            _sources = [];
            _sourcesCache = [];
            _sourcesEngine = [];
        }
        public function get ignoredReferralsCount():int{
            return (_ignoredReferrals.length);
        }
        public function addIgnoredReferral(_arg1:String):void{
            if (_ignoredReferralsCache[_arg1] == undefined){
                _ignoredReferrals.push(_arg1);
                _ignoredReferralsCache[_arg1] = (_ignoredReferrals.length - 1);
            } else {
                if (throwErrors){
                    throw (new Error((("\"" + _arg1) + "\" already exists, we don't add it.")));
                };
            };
        }
        public function clearIgnoredReferrals():void{
            _ignoredReferrals = [];
            _ignoredReferralsCache = {};
        }
        public function getReferrerByName(_arg1:String):OrganicReferrer{
            var _local2:int;
            if (match(_arg1)){
                _local2 = _sourcesEngine[_arg1][0];
                return (_sources[_local2]);
            };
            return (null);
        }
        public function addIgnoredKeyword(_arg1:String):void{
            if (_ignoredKeywordsCache[_arg1] == undefined){
                _ignoredKeywords.push(_arg1);
                _ignoredKeywordsCache[_arg1] = (_ignoredKeywords.length - 1);
            } else {
                if (throwErrors){
                    throw (new Error((("\"" + _arg1) + "\" already exists, we don't add it.")));
                };
            };
        }
        public function get sources():Array{
            return (_sources);
        }

    }
}//package com.google.analytics.core 
﻿package com.google.analytics.core {
    import flash.events.*;
    import flash.net.*;
    import com.google.analytics.v4.*;
    import com.google.analytics.debug.*;
    import com.google.analytics.data.*;

    public dynamic class Buffer {

        private var _SO:SharedObject;
        private var _OBJ:Object;
        private var _utma:UTMA;
        private var _utmb:UTMB;
        private var _utmc:UTMC;
        private var _debug:DebugConfiguration;
        private var _utmk:UTMK;
        private var _config:Configuration;
        private var _utmv:UTMV;
        private var _utmz:UTMZ;
        private var _volatile:Boolean;

        public function Buffer(_arg1:Configuration, _arg2:DebugConfiguration, _arg3:Boolean=false, _arg4:Object=null){
            var _local5:Boolean;
            var _local6:String;
            super();
            _config = _arg1;
            _debug = _arg2;
            UTMB.defaultTimespan = _config.sessionTimeout;
            UTMZ.defaultTimespan = _config.conversionTimeout;
            if (!_arg3){
                _SO = SharedObject.getLocal(_config.cookieName, _config.cookiePath);
                _local5 = false;
                if (_SO.data.utma){
                    if (!hasUTMA()){
                        _createUMTA();
                    };
                    _utma.fromSharedObject(_SO.data.utma);
                    if (_debug.verbose){
                        _debug.info(("found: " + _utma.toString(true)), VisualDebugMode.geek);
                    };
                    if (_utma.isExpired()){
                        if (_debug.verbose){
                            _debug.warning("UTMA has expired", VisualDebugMode.advanced);
                        };
                        _clearUTMA();
                        _local5 = true;
                    };
                };
                if (_SO.data.utmb){
                    if (!hasUTMB()){
                        _createUMTB();
                    };
                    _utmb.fromSharedObject(_SO.data.utmb);
                    if (_debug.verbose){
                        _debug.info(("found: " + _utmb.toString(true)), VisualDebugMode.geek);
                    };
                    if (_utmb.isExpired()){
                        if (_debug.verbose){
                            _debug.warning("UTMB has expired", VisualDebugMode.advanced);
                        };
                        _clearUTMB();
                        _local5 = true;
                    };
                };
                if (_SO.data.utmc){
                    delete _SO.data.utmc;
                    _local5 = true;
                };
                if (_SO.data.utmk){
                    if (!hasUTMK()){
                        _createUMTK();
                    };
                    _utmk.fromSharedObject(_SO.data.utmk);
                    if (_debug.verbose){
                        _debug.info(("found: " + _utmk.toString()), VisualDebugMode.geek);
                    };
                };
                if (_SO.data.utmv){
                    if (!hasUTMV()){
                        _createUMTV();
                    };
                    _utmv.fromSharedObject(_SO.data.utmv);
                    if (_debug.verbose){
                        _debug.info(("found: " + _utmv.toString(true)), VisualDebugMode.geek);
                    };
                    if (_utmv.isExpired()){
                        if (_debug.verbose){
                            _debug.warning("UTMV has expired", VisualDebugMode.advanced);
                        };
                        _clearUTMV();
                        _local5 = true;
                    };
                };
                if (_SO.data.utmz){
                    if (!hasUTMZ()){
                        _createUMTZ();
                    };
                    _utmz.fromSharedObject(_SO.data.utmz);
                    if (_debug.verbose){
                        _debug.info(("found: " + _utmz.toString(true)), VisualDebugMode.geek);
                    };
                    if (_utmz.isExpired()){
                        if (_debug.verbose){
                            _debug.warning("UTMZ has expired", VisualDebugMode.advanced);
                        };
                        _clearUTMZ();
                        _local5 = true;
                    };
                };
                if (_local5){
                    save();
                };
            } else {
                _OBJ = new Object();
                if (_arg4){
                    for (_local6 in _arg4) {
                        _OBJ[_local6] = _arg4[_local6];
                    };
                };
            };
            _volatile = _arg3;
        }
        public function clearCookies():void{
            utma.reset();
            utmb.reset();
            utmc.reset();
            utmz.reset();
            utmv.reset();
            utmk.reset();
        }
        public function save():void{
            var flushStatus:* = null;
            if (!isVolatile()){
                flushStatus = null;
                try {
                    flushStatus = _SO.flush();
                } catch(e:Error) {
                    _debug.warning("Error...Could not write SharedObject to disk");
                };
                switch (flushStatus){
                    case SharedObjectFlushStatus.PENDING:
                        _debug.info("Requesting permission to save object...");
                        _SO.addEventListener(NetStatusEvent.NET_STATUS, _onFlushStatus);
                        break;
                    case SharedObjectFlushStatus.FLUSHED:
                        _debug.info("Value flushed to disk.");
                        break;
                };
            };
        }
        public function get utmv():UTMV{
            if (!hasUTMV()){
                _createUMTV();
            };
            return (_utmv);
        }
        public function get utmz():UTMZ{
            if (!hasUTMZ()){
                _createUMTZ();
            };
            return (_utmz);
        }
        public function hasUTMA():Boolean{
            if (_utma){
                return (true);
            };
            return (false);
        }
        public function hasUTMB():Boolean{
            if (_utmb){
                return (true);
            };
            return (false);
        }
        public function hasUTMC():Boolean{
            if (_utmc){
                return (true);
            };
            return (false);
        }
        public function isGenuine():Boolean{
            if (!hasUTMK()){
                return (true);
            };
            return ((utmk.hash == generateCookiesHash()));
        }
        public function resetCurrentSession():void{
            _clearUTMB();
            _clearUTMC();
            save();
        }
        public function hasUTMK():Boolean{
            if (_utmk){
                return (true);
            };
            return (false);
        }
        public function generateCookiesHash():Number{
            var _local1 = "";
            _local1 = (_local1 + utma.valueOf());
            _local1 = (_local1 + utmb.valueOf());
            _local1 = (_local1 + utmc.valueOf());
            _local1 = (_local1 + utmz.valueOf());
            _local1 = (_local1 + utmv.valueOf());
            return (Utils.generateHash(_local1));
        }
        private function _createUMTB():void{
            _utmb = new UTMB();
            _utmb.proxy = this;
        }
        private function _createUMTC():void{
            _utmc = new UTMC();
        }
        private function _createUMTA():void{
            _utma = new UTMA();
            _utma.proxy = this;
        }
        public function hasUTMV():Boolean{
            if (_utmv){
                return (true);
            };
            return (false);
        }
        private function _createUMTK():void{
            _utmk = new UTMK();
            _utmk.proxy = this;
        }
        public function hasUTMZ():Boolean{
            if (_utmz){
                return (true);
            };
            return (false);
        }
        private function _createUMTV():void{
            _utmv = new UTMV();
            _utmv.proxy = this;
        }
        private function _onFlushStatus(_arg1:NetStatusEvent):void{
            _debug.info("User closed permission dialog...");
            switch (_arg1.info.code){
                case "SharedObject.Flush.Success":
                    _debug.info("User granted permission -- value saved.");
                    break;
                case "SharedObject.Flush.Failed":
                    _debug.info("User denied permission -- value not saved.");
                    break;
            };
            _SO.removeEventListener(NetStatusEvent.NET_STATUS, _onFlushStatus);
        }
        private function _createUMTZ():void{
            _utmz = new UTMZ();
            _utmz.proxy = this;
        }
        public function updateUTMA(_arg1:Number):void{
            if (_debug.verbose){
                _debug.info((("updateUTMA( " + _arg1) + " )"), VisualDebugMode.advanced);
            };
            if (!utma.isEmpty()){
                if (isNaN(utma.sessionCount)){
                    utma.sessionCount = 1;
                } else {
                    utma.sessionCount = (utma.sessionCount + 1);
                };
                utma.lastTime = utma.currentTime;
                utma.currentTime = _arg1;
            };
        }
        private function _clearUTMA():void{
            _utma = null;
            if (!isVolatile()){
                _SO.data.utma = null;
                delete _SO.data.utma;
            };
        }
        private function _clearUTMC():void{
            _utmc = null;
        }
        private function _clearUTMB():void{
            _utmb = null;
            if (!isVolatile()){
                _SO.data.utmb = null;
                delete _SO.data.utmb;
            };
        }
        public function update(_arg1:String, _arg2):void{
            if (isVolatile()){
                _OBJ[_arg1] = _arg2;
            } else {
                _SO.data[_arg1] = _arg2;
            };
        }
        private function _clearUTMZ():void{
            _utmz = null;
            if (!isVolatile()){
                _SO.data.utmz = null;
                delete _SO.data.utmz;
            };
        }
        private function _clearUTMV():void{
            _utmv = null;
            if (!isVolatile()){
                _SO.data.utmv = null;
                delete _SO.data.utmv;
            };
        }
        public function isVolatile():Boolean{
            return (_volatile);
        }
        public function get utma():UTMA{
            if (!hasUTMA()){
                _createUMTA();
            };
            return (_utma);
        }
        public function get utmb():UTMB{
            if (!hasUTMB()){
                _createUMTB();
            };
            return (_utmb);
        }
        public function get utmc():UTMC{
            if (!hasUTMC()){
                _createUMTC();
            };
            return (_utmc);
        }
        public function get utmk():UTMK{
            if (!hasUTMK()){
                _createUMTK();
            };
            return (_utmk);
        }

    }
}//package com.google.analytics.core 
﻿package com.google.analytics.core {
    import com.google.analytics.v4.*;

    public class EventTracker {

        private var _parent:GoogleAnalyticsAPI;
        public var name:String;

        public function EventTracker(_arg1:String, _arg2:GoogleAnalyticsAPI){
            this.name = _arg1;
            _parent = _arg2;
        }
        public function trackEvent(_arg1:String, _arg2:String=null, _arg3:Number=NaN):Boolean{
            return (_parent.trackEvent(name, _arg1, _arg2, _arg3));
        }

    }
}//package com.google.analytics.core 
﻿package com.google.analytics.core {

    public class Utils {

        public static function trim(_arg1:String, _arg2:Boolean=false):String{
            var _local5:int;
            var _local6:int;
            var _local7:int;
            if (_arg1 == ""){
                return ("");
            };
            var _local3:Array = [" ", "\n", "\r", "\t"];
            var _local4:String = _arg1;
            if (_arg2){
                _local5 = 0;
                while ((((_local5 < _local3.length)) && ((_local4.indexOf(_local3[_local5]) > -1)))) {
                    _local4 = _local4.split(_local3[_local5]).join("");
                    _local5++;
                };
            } else {
                _local6 = 0;
                while ((((_local6 < _local4.length)) && ((_local3.indexOf(_local4.charAt(_local6)) > -1)))) {
                    _local6++;
                };
                _local4 = _local4.substr(_local6);
                _local7 = (_local4.length - 1);
                while ((((_local7 >= 0)) && ((_local3.indexOf(_local4.charAt(_local7)) > -1)))) {
                    _local7--;
                };
                _local4 = _local4.substring(0, (_local7 + 1));
            };
            return (_local4);
        }
        public static function generateHash(_arg1:String):int{
            var _local4:int;
            var _local5:int;
            var _local2 = 1;
            var _local3:int;
            if (((!((_arg1 == null))) && (!((_arg1 == ""))))){
                _local2 = 0;
                _local4 = (_arg1.length - 1);
                while (_local4 >= 0) {
                    _local5 = _arg1.charCodeAt(_local4);
                    _local2 = ((((_local2 << 6) & 268435455) + _local5) + (_local5 << 14));
                    _local3 = (_local2 & 266338304);
                    if (_local3 != 0){
                        _local2 = (_local2 ^ (_local3 >> 21));
                    };
                    _local4--;
                };
            };
            return (_local2);
        }
        public static function generate32bitRandom():int{
            return (Math.round((Math.random() * 2147483647)));
        }
        public static function validateAccount(_arg1:String):Boolean{
            var _local2:RegExp = /^UA-[0-9]*-[0-9]*$/;
            return (_local2.test(_arg1));
        }

    }
}//package com.google.analytics.core 
﻿package com.google.analytics.core {
    import flash.net.*;
    import flash.utils.*;

    public class RequestObject {

        public var start:int;
        public var end:int;
        public var request:URLRequest;

        public function RequestObject(_arg1:URLRequest){
            start = getTimer();
            this.request = _arg1;
        }
        public function hasCompleted():Boolean{
            return ((end > 0));
        }
        public function toString():String{
            var _local1:Array = [];
            _local1.push((("duration: " + duration) + "ms"));
            _local1.push(("url: " + request.url));
            return ((("{ " + _local1.join(", ")) + " }"));
        }
        public function complete():void{
            end = getTimer();
        }
        public function get duration():int{
            if (!hasCompleted()){
                return (0);
            };
            return ((end - start));
        }

    }
}//package com.google.analytics.core 
﻿package com.google.analytics.core {

    public class OrganicReferrer {

        private var _engine:String;
        private var _keyword:String;

        public function OrganicReferrer(_arg1:String, _arg2:String){
            this.engine = _arg1;
            this.keyword = _arg2;
        }
        public function get keyword():String{
            return (_keyword);
        }
        public function get engine():String{
            return (_engine);
        }
        public function set engine(_arg1:String):void{
            _engine = _arg1.toLowerCase();
        }
        public function toString():String{
            return (((engine + "?") + keyword));
        }
        public function set keyword(_arg1:String):void{
            _keyword = _arg1.toLowerCase();
        }

    }
}//package com.google.analytics.core 
﻿package com.google.analytics.core {

    public class DomainNameMode {

        public static const custom:DomainNameMode = new DomainNameMode(2, "custom");
;
        public static const none:DomainNameMode = new DomainNameMode(0, "none");
;
        public static const auto:DomainNameMode = new DomainNameMode(1, "auto");
;

        private var _value:int;
        private var _name:String;

        public function DomainNameMode(_arg1:int=0, _arg2:String=""){
            _value = _arg1;
            _name = _arg2;
        }
        public function valueOf():int{
            return (_value);
        }
        public function toString():String{
            return (_name);
        }

    }
}//package com.google.analytics.core 
﻿package com.google.analytics.core {
    import com.google.analytics.utils.*;
    import com.google.analytics.data.*;

    public class EventInfo {

        private var _ext10:X10;
        private var _isEventHit:Boolean;
        private var _x10:X10;

        public function EventInfo(_arg1:Boolean, _arg2:X10, _arg3:X10=null){
            _isEventHit = _arg1;
            _x10 = _arg2;
            _ext10 = _arg3;
        }
        public function toURLString():String{
            var _local1:Variables = toVariables();
            return (_local1.toString());
        }
        public function get utmt():String{
            return ("event");
        }
        public function get utme():String{
            return (_x10.renderMergedUrlString(_ext10));
        }
        public function toVariables():Variables{
            var _local1:Variables = new Variables();
            _local1.URIencode = true;
            if (_isEventHit){
                _local1.utmt = utmt;
            };
            _local1.utme = utme;
            return (_local1);
        }

    }
}//package com.google.analytics.core 
﻿package com.google.analytics.core {
    import flash.display.*;
    import com.google.analytics.utils.*;
    import flash.events.*;
    import flash.net.*;
    import flash.system.*;
    import com.google.analytics.v4.*;
    import com.google.analytics.debug.*;

    public class GIFRequest {

        private var _info:Environment;
        private var _count:int;
        private var _utmac:String;
        private var _alertcount:int;
        private var _debug:DebugConfiguration;
        private var _lastRequest:URLRequest;
        private var _buffer:Buffer;
        private var _config:Configuration;
        private var _requests:Array;

        public function GIFRequest(_arg1:Configuration, _arg2:DebugConfiguration, _arg3:Buffer, _arg4:Environment){
            _config = _arg1;
            _debug = _arg2;
            _buffer = _arg3;
            _info = _arg4;
            _count = 0;
            _alertcount = 0;
            _requests = [];
        }
        public function get utmn():String{
            return ((Utils.generate32bitRandom() as String));
        }
        public function onIOError(_arg1:IOErrorEvent):void{
            var _local2:String = _lastRequest.url;
            var _local3:String = String((_requests.length - 1));
            var _local4 = (("Gif Request #" + _local3) + " failed");
            if (_debug.GIFRequests){
                if (!_debug.verbose){
                    if (_local2.indexOf("?") > -1){
                        _local2 = _local2.split("?")[0];
                    };
                    _local2 = _shortenURL(_local2);
                };
                if (int(_debug.mode) > int(VisualDebugMode.basic)){
                    _local4 = (_local4 + ((" \"" + _local2) + "\" does not exists or is unreachable"));
                };
                _debug.failure(_local4);
            } else {
                _debug.warning(_local4);
            };
            _removeListeners(_arg1.target);
        }
        public function send(_arg1:String, _arg2:Variables=null, _arg3:Boolean=false, _arg4:Boolean=false):void{
            var _local5:String;
            var _local6:URLRequest;
            var _local7:URLRequest;
            _utmac = _arg1;
            if (!_arg2){
                _arg2 = new Variables();
            };
            _arg2.URIencode = false;
            _arg2.pre = ["utmwv", "utmn", "utmhn", "utmt", "utme", "utmcs", "utmsr", "utmsc", "utmul", "utmje", "utmfl", "utmdt", "utmhid", "utmr", "utmp"];
            _arg2.post = ["utmcc"];
            if (_debug.verbose){
                _debug.info(((("tracking: " + _buffer.utmb.trackCount) + "/") + _config.trackingLimitPerSession), VisualDebugMode.geek);
            };
            if ((((_buffer.utmb.trackCount < _config.trackingLimitPerSession)) || (_arg3))){
                if (_arg4){
                    updateToken();
                };
                if (((((_arg3) || (!(_arg4)))) || ((_buffer.utmb.token >= 1)))){
                    if (((!(_arg3)) && (_arg4))){
                        _buffer.utmb.token = (_buffer.utmb.token - 1);
                    };
                    _buffer.utmb.trackCount = (_buffer.utmb.trackCount + 1);
                    if (_debug.verbose){
                        _debug.info(_buffer.utmb.toString(), VisualDebugMode.geek);
                    };
                    _arg2.utmwv = utmwv;
                    _arg2.utmn = Utils.generate32bitRandom();
                    if (_info.domainName != ""){
                        _arg2.utmhn = _info.domainName;
                    };
                    if (_config.sampleRate < 1){
                        _arg2.utmsp = (_config.sampleRate * 100);
                    };
                    if ((((_config.serverMode == ServerOperationMode.local)) || ((_config.serverMode == ServerOperationMode.both)))){
                        _local5 = _info.locationSWFPath;
                        if (_local5.lastIndexOf("/") > 0){
                            _local5 = _local5.substring(0, _local5.lastIndexOf("/"));
                        };
                        _local6 = new URLRequest();
                        if (_config.localGIFpath.indexOf("http") == 0){
                            _local6.url = _config.localGIFpath;
                        } else {
                            _local6.url = (_local5 + _config.localGIFpath);
                        };
                        _local6.url = (_local6.url + ("?" + _arg2.toString()));
                        if (((_debug.active) && (_debug.GIFRequests))){
                            _debugSend(_local6);
                        } else {
                            sendRequest(_local6);
                        };
                    };
                    if ((((_config.serverMode == ServerOperationMode.remote)) || ((_config.serverMode == ServerOperationMode.both)))){
                        _local7 = new URLRequest();
                        if (_info.protocol == Protocols.HTTPS){
                            _local7.url = _config.secureRemoteGIFpath;
                        } else {
                            if (_info.protocol == Protocols.HTTP){
                                _local7.url = _config.remoteGIFpath;
                            } else {
                                _local7.url = _config.remoteGIFpath;
                            };
                        };
                        _arg2.utmac = utmac;
                        _arg2.utmcc = encodeURIComponent(utmcc);
                        _local7.url = (_local7.url + ("?" + _arg2.toString()));
                        if (((_debug.active) && (_debug.GIFRequests))){
                            _debugSend(_local7);
                        } else {
                            sendRequest(_local7);
                        };
                    };
                };
            };
        }
        public function onSecurityError(_arg1:SecurityErrorEvent):void{
            if (_debug.GIFRequests){
                _debug.failure(_arg1.text);
            };
        }
        public function get utmsp():String{
            return (((_config.sampleRate * 100) as String));
        }
        public function get utmcc():String{
            var _local1:Array = [];
            if (_buffer.hasUTMA()){
                _local1.push((_buffer.utma.toURLString() + ";"));
            };
            if (_buffer.hasUTMZ()){
                _local1.push((_buffer.utmz.toURLString() + ";"));
            };
            if (_buffer.hasUTMV()){
                _local1.push((_buffer.utmv.toURLString() + ";"));
            };
            return (_local1.join("+"));
        }
        public function get utmac():String{
            return (_utmac);
        }
        public function get utmwv():String{
            return (_config.version);
        }
        public function sendRequest(_arg1:URLRequest):void{
            var request:* = _arg1;
            var loader:* = new Loader();
            loader.name = String(_count++);
            var context:* = new LoaderContext(false);
            loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onIOError);
            loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onComplete);
            _lastRequest = request;
            _requests[loader.name] = new RequestObject(request);
            try {
                loader.load(request, context);
            } catch(e:Error) {
                _debug.failure("\"Loader.load()\" could not instanciate Gif Request");
            };
        }
        private function _removeListeners(_arg1:Object):void{
            _arg1.removeEventListener(IOErrorEvent.IO_ERROR, onIOError);
            _arg1.removeEventListener(Event.COMPLETE, onComplete);
        }
        public function updateToken():void{
            var _local2:Number;
            var _local1:Number = new Date().getTime();
            _local2 = ((_local1 - _buffer.utmb.lastTime) * (_config.tokenRate / 1000));
            if (_debug.verbose){
                _debug.info(("tokenDelta: " + _local2), VisualDebugMode.geek);
            };
            if (_local2 >= 1){
                _buffer.utmb.token = Math.min(Math.floor((_buffer.utmb.token + _local2)), _config.bucketCapacity);
                _buffer.utmb.lastTime = _local1;
                if (_debug.verbose){
                    _debug.info(_buffer.utmb.toString(), VisualDebugMode.geek);
                };
            };
        }
        public function get utmhn():String{
            return (_info.domainName);
        }
        private function _shortenURL(_arg1:String):String{
            var _local2:Array;
            if (_arg1.length > 60){
                _local2 = _arg1.split("/");
                while (_arg1.length > 60) {
                    _local2.shift();
                    _arg1 = ("../" + _local2.join("/"));
                };
            };
            return (_arg1);
        }
        private function _debugSend(_arg1:URLRequest):void{
            var _local3:String;
            var _local2 = "";
            switch (_debug.mode){
                case VisualDebugMode.geek:
                    _local2 = ((("Gif Request #" + _alertcount) + ":\n") + _arg1.url);
                    break;
                case VisualDebugMode.advanced:
                    _local3 = _arg1.url;
                    if (_local3.indexOf("?") > -1){
                        _local3 = _local3.split("?")[0];
                    };
                    _local3 = _shortenURL(_local3);
                    _local2 = (((("Send Gif Request #" + _alertcount) + ":\n") + _local3) + " ?");
                    break;
                case VisualDebugMode.basic:
                default:
                    _local2 = (((("Send " + _config.serverMode.toString()) + " Gif Request #") + _alertcount) + " ?");
            };
            _debug.alertGifRequest(_local2, _arg1, this);
            _alertcount++;
        }
        public function onComplete(_arg1:Event):void{
            var _local2:String = _arg1.target.loader.name;
            _requests[_local2].complete();
            var _local3 = (("Gif Request #" + _local2) + " sent");
            var _local4:String = _requests[_local2].request.url;
            if (_debug.GIFRequests){
                if (!_debug.verbose){
                    if (_local4.indexOf("?") > -1){
                        _local4 = _local4.split("?")[0];
                    };
                    _local4 = _shortenURL(_local4);
                };
                if (int(_debug.mode) > int(VisualDebugMode.basic)){
                    _local3 = (_local3 + ((" to \"" + _local4) + "\""));
                };
                _debug.success(_local3);
            } else {
                _debug.info(_local3);
            };
            _removeListeners(_arg1.target);
        }

    }
}//package com.google.analytics.core 
﻿package com.google.analytics.core {

    public class TrackerMode {

        public static const BRIDGE:String = "Bridge";
        public static const AS3:String = "AS3";

    }
}//package com.google.analytics.core 
﻿package com.google.analytics.core {
    import com.google.analytics.utils.*;
    import com.google.analytics.v4.*;
    import com.google.analytics.external.*;

    public class DocumentInfo {

        private var _pageURL:String;
        private var _utmr:String;
        private var _config:Configuration;
        private var _adSense:AdSenseGlobals;
        private var _info:Environment;

        public function DocumentInfo(_arg1:Configuration, _arg2:Environment, _arg3:String, _arg4:String=null, _arg5:AdSenseGlobals=null){
            _config = _arg1;
            _info = _arg2;
            _utmr = _arg3;
            _pageURL = _arg4;
            _adSense = _arg5;
        }
        public function get utmr():String{
            if (!_utmr){
                return ("-");
            };
            return (_utmr);
        }
        public function toURLString():String{
            var _local1:Variables = toVariables();
            return (_local1.toString());
        }
        private function _renderPageURL(_arg1:String=""):String{
            var _local2:String = _info.locationPath;
            var _local3:String = _info.locationSearch;
            if (((!(_arg1)) || ((_arg1 == "")))){
                _arg1 = (_local2 + unescape(_local3));
            };
            return (_arg1);
        }
        public function get utmp():String{
            return (_renderPageURL(_pageURL));
        }
        public function get utmhid():String{
            return (String(_generateHitId()));
        }
        private function _generateHitId():Number{
            var _local1:Number;
            if (((_adSense.hid) && (!((_adSense.hid == ""))))){
                _local1 = Number(_adSense.hid);
            } else {
                _local1 = Math.round((Math.random() * 2147483647));
                _adSense.hid = String(_local1);
            };
            return (_local1);
        }
        public function toVariables():Variables{
            var _local1:Variables = new Variables();
            _local1.URIencode = true;
            if (((_config.detectTitle) && (!((utmdt == ""))))){
                _local1.utmdt = utmdt;
            };
            _local1.utmhid = utmhid;
            _local1.utmr = utmr;
            _local1.utmp = utmp;
            return (_local1);
        }
        public function get utmdt():String{
            return (_info.documentTitle);
        }

    }
}//package com.google.analytics.core 
﻿package com.google.analytics.core {
    import com.google.analytics.utils.*;
    import com.google.analytics.v4.*;

    public class BrowserInfo {

        private var _config:Configuration;
        private var _info:Environment;

        public function BrowserInfo(_arg1:Configuration, _arg2:Environment){
            _config = _arg1;
            _info = _arg2;
        }
        public function get utmul():String{
            return (_info.language.toLowerCase());
        }
        public function get utmje():String{
            return ("0");
        }
        public function toURLString():String{
            var _local1:Variables = toVariables();
            return (_local1.toString());
        }
        public function get utmsr():String{
            return (((_info.screenWidth + "x") + _info.screenHeight));
        }
        public function get utmfl():String{
            var _local1:Version;
            if (_config.detectFlash){
                _local1 = _info.flashVersion;
                return (((((_local1.major + ".") + _local1.minor) + " r") + _local1.build));
            };
            return ("-");
        }
        public function get utmcs():String{
            return (_info.languageEncoding);
        }
        public function toVariables():Variables{
            var _local1:Variables = new Variables();
            _local1.URIencode = true;
            _local1.utmcs = utmcs;
            _local1.utmsr = utmsr;
            _local1.utmsc = utmsc;
            _local1.utmul = utmul;
            _local1.utmje = utmje;
            _local1.utmfl = utmfl;
            return (_local1);
        }
        public function get utmsc():String{
            return ((_info.screenColorDepth + "-bit"));
        }

    }
}//package com.google.analytics.core 
﻿package com.google.analytics.core {

    public class ServerOperationMode {

        public static const both:ServerOperationMode = new ServerOperationMode(2, "both");
;
        public static const remote:ServerOperationMode = new ServerOperationMode(1, "remote");
;
        public static const local:ServerOperationMode = new ServerOperationMode(0, "local");
;

        private var _value:int;
        private var _name:String;

        public function ServerOperationMode(_arg1:int=0, _arg2:String=""){
            _value = _arg1;
            _name = _arg2;
        }
        public function valueOf():int{
            return (_value);
        }
        public function toString():String{
            return (_name);
        }

    }
}//package com.google.analytics.core 
﻿package com.google.analytics.core {
    import com.google.analytics.v4.*;
    import flash.errors.*;

    public class TrackerCache implements GoogleAnalyticsAPI {

        public static var CACHE_THROW_ERROR:Boolean;

        public var tracker:GoogleAnalyticsAPI;
        private var _ar:Array;

        public function TrackerCache(_arg1:GoogleAnalyticsAPI=null){
            this.tracker = _arg1;
            _ar = [];
        }
        public function size():uint{
            return (_ar.length);
        }
        public function flush():void{
            var _local1:Object;
            var _local2:String;
            var _local3:Array;
            var _local4:int;
            var _local5:int;
            if (tracker == null){
                return;
            };
            if (size() > 0){
                _local4 = _ar.length;
                while (_local5 < _local4) {
                    _local1 = _ar.shift();
                    _local2 = (_local1.name as String);
                    _local3 = (_local1.args as Array);
                    if (((!((_local2 == null))) && ((_local2 in tracker)))){
                        (tracker[_local2] as Function).apply(tracker, _local3);
                    };
                    _local5++;
                };
            };
        }
        public function enqueue(_arg1:String, ... _args):Boolean{
            if (_arg1 == null){
                return (false);
            };
            _ar.push({
                name:_arg1,
                args:_args
            });
            return (true);
        }
        public function link(_arg1:String, _arg2:Boolean=false):void{
            enqueue("link", _arg1, _arg2);
        }
        public function addOrganic(_arg1:String, _arg2:String):void{
            enqueue("addOrganic", _arg1, _arg2);
        }
        public function setAllowLinker(_arg1:Boolean):void{
            enqueue("setAllowLinker", _arg1);
        }
        public function trackEvent(_arg1:String, _arg2:String, _arg3:String=null, _arg4:Number=NaN):Boolean{
            enqueue("trackEvent", _arg1, _arg2, _arg3, _arg4);
            return (true);
        }
        public function getClientInfo():Boolean{
            if (CACHE_THROW_ERROR){
                throw (new IllegalOperationError("The tracker is not ready and you can use the 'getClientInfo' method for the moment."));
            };
            return (false);
        }
        public function trackTrans():void{
            enqueue("trackTrans");
        }
        public function trackPageview(_arg1:String=""):void{
            enqueue("trackPageview", _arg1);
        }
        public function setClientInfo(_arg1:Boolean):void{
            enqueue("setClientInfo", _arg1);
        }
        public function linkByPost(_arg1:Object, _arg2:Boolean=false):void{
            enqueue("linkByPost", _arg1, _arg2);
        }
        public function setCookieTimeout(_arg1:int):void{
            enqueue("setCookieTimeout", _arg1);
        }
        public function isEmpty():Boolean{
            return ((_ar.length == 0));
        }
        public function getDetectTitle():Boolean{
            if (CACHE_THROW_ERROR){
                throw (new IllegalOperationError("The tracker is not ready and you can use the 'getDetectTitle' method for the moment."));
            };
            return (false);
        }
        public function resetSession():void{
            enqueue("resetSession");
        }
        public function setDetectFlash(_arg1:Boolean):void{
            enqueue("setDetectFlash", _arg1);
        }
        public function clear():void{
            _ar = [];
        }
        public function setCampNameKey(_arg1:String):void{
            enqueue("setCampNameKey", _arg1);
        }
        public function addItem(_arg1:String, _arg2:String, _arg3:String, _arg4:String, _arg5:Number, _arg6:int):void{
            enqueue("addItem", _arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
        }
        public function createEventTracker(_arg1:String):EventTracker{
            if (CACHE_THROW_ERROR){
                throw (new IllegalOperationError("The tracker is not ready and you can use the 'createEventTracker' method for the moment."));
            };
            return (null);
        }
        public function setVar(_arg1:String):void{
            enqueue("setVar", _arg1);
        }
        public function clearIgnoredOrganic():void{
            enqueue("clearIgnoredOrganic");
        }
        public function setDomainName(_arg1:String):void{
            enqueue("setDomainName", _arg1);
        }
        public function setCampSourceKey(_arg1:String):void{
            enqueue("setCampSourceKey", _arg1);
        }
        public function addTrans(_arg1:String, _arg2:String, _arg3:Number, _arg4:Number, _arg5:Number, _arg6:String, _arg7:String, _arg8:String):Object{
            if (CACHE_THROW_ERROR){
                throw (new IllegalOperationError("The tracker is not ready and you can use the 'addTrans' method for the moment."));
            };
            return (null);
        }
        public function setCampContentKey(_arg1:String):void{
            enqueue("setCampContentKey", _arg1);
        }
        public function setLocalServerMode():void{
            enqueue("setLocalServerMode");
        }
        public function getLocalGifPath():String{
            if (CACHE_THROW_ERROR){
                throw (new IllegalOperationError("The tracker is not ready and you can use the 'getLocalGifPath' method for the moment."));
            };
            return ("");
        }
        public function setAllowAnchor(_arg1:Boolean):void{
            enqueue("setAllowAnchor", _arg1);
        }
        public function clearIgnoredRef():void{
            enqueue("clearIgnoredRef");
        }
        public function setLocalGifPath(_arg1:String):void{
            enqueue("setLocalGifPath", _arg1);
        }
        public function getVersion():String{
            if (CACHE_THROW_ERROR){
                throw (new IllegalOperationError("The tracker is not ready and you can use the 'getVersion' method for the moment."));
            };
            return ("");
        }
        public function setCookiePath(_arg1:String):void{
            enqueue("setCookiePath", _arg1);
        }
        public function setSampleRate(_arg1:Number):void{
            enqueue("setSampleRate", _arg1);
        }
        public function setDetectTitle(_arg1:Boolean):void{
            enqueue("setDetectTitle", _arg1);
        }
        public function setAllowHash(_arg1:Boolean):void{
            enqueue("setAllowHash", _arg1);
        }
        public function addIgnoredOrganic(_arg1:String):void{
            enqueue("addIgnoredOrganic", _arg1);
        }
        public function setCampNOKey(_arg1:String):void{
            enqueue("setCampNOKey", _arg1);
        }
        public function getServiceMode():ServerOperationMode{
            if (CACHE_THROW_ERROR){
                throw (new IllegalOperationError("The tracker is not ready and you can use the 'getServiceMode' method for the moment."));
            };
            return (null);
        }
        public function setLocalRemoteServerMode():void{
            enqueue("setLocalRemoteServerMode");
        }
        public function cookiePathCopy(_arg1:String):void{
            enqueue("cookiePathCopy", _arg1);
        }
        public function getDetectFlash():Boolean{
            if (CACHE_THROW_ERROR){
                throw (new IllegalOperationError("The tracker is not ready and you can use the 'getDetectFlash' method for the moment."));
            };
            return (false);
        }
        public function setCampaignTrack(_arg1:Boolean):void{
            enqueue("setCampaignTrack", _arg1);
        }
        public function clearOrganic():void{
            enqueue("clearOrganic");
        }
        public function setCampTermKey(_arg1:String):void{
            enqueue("setCampTermKey", _arg1);
        }
        public function addIgnoredRef(_arg1:String):void{
            enqueue("addIgnoredRef", _arg1);
        }
        public function setCampMediumKey(_arg1:String):void{
            enqueue("setCampMediumKey", _arg1);
        }
        public function setSessionTimeout(_arg1:int):void{
            enqueue("setSessionTimeout", _arg1);
        }
        public function setRemoteServerMode():void{
            enqueue("setRemoteServerMode");
        }
        public function element(){
            return (_ar[0]);
        }
        public function getAccount():String{
            if (CACHE_THROW_ERROR){
                throw (new IllegalOperationError("The tracker is not ready and you can use the 'getAccount' method for the moment."));
            };
            return ("");
        }

    }
}//package com.google.analytics.core 
﻿package com.google.analytics.core {
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import com.google.analytics.v4.*;
    import com.google.analytics.debug.*;

    public class IdleTimer {

        private var _stage:Stage;
        private var _loop:Timer;
        private var _lastMove:int;
        private var _inactivity:Number;
        private var _debug:DebugConfiguration;
        private var _session:Timer;
        private var _buffer:Buffer;

        public function IdleTimer(_arg1:Configuration, _arg2:DebugConfiguration, _arg3:DisplayObject, _arg4:Buffer){
            var _local5:Number = _arg1.idleLoop;
            var _local6:Number = _arg1.idleTimeout;
            var _local7:Number = _arg1.sessionTimeout;
            _loop = new Timer((_local5 * 1000));
            _session = new Timer((_local7 * 1000), 1);
            _debug = _arg2;
            _stage = _arg3.stage;
            _buffer = _arg4;
            _lastMove = getTimer();
            _inactivity = (_local6 * 1000);
            _loop.addEventListener(TimerEvent.TIMER, checkForIdle);
            _session.addEventListener(TimerEvent.TIMER_COMPLETE, endSession);
            _stage.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
            _debug.info(((((("delay: " + _local5) + "sec , inactivity: ") + _local6) + "sec, sessionTimeout: ") + _local7), VisualDebugMode.geek);
            _loop.start();
        }
        private function onMouseMove(_arg1:MouseEvent):void{
            _lastMove = getTimer();
            if (_session.running){
                _debug.info("session timer reset", VisualDebugMode.geek);
                _session.reset();
            };
        }
        public function endSession(_arg1:TimerEvent):void{
            _session.removeEventListener(TimerEvent.TIMER_COMPLETE, endSession);
            _debug.info("session timer end session", VisualDebugMode.geek);
            _session.reset();
            _buffer.resetCurrentSession();
            _debug.info(_buffer.utmb.toString(), VisualDebugMode.geek);
            _debug.info(_buffer.utmc.toString(), VisualDebugMode.geek);
            _session.addEventListener(TimerEvent.TIMER_COMPLETE, endSession);
        }
        public function checkForIdle(_arg1:TimerEvent):void{
            var _local2:int = getTimer();
            if ((_local2 - _lastMove) >= _inactivity){
                if (!_session.running){
                    _debug.info("session timer start", VisualDebugMode.geek);
                    _session.start();
                };
            };
        }

    }
}//package com.google.analytics.core 
﻿package com.google.analytics {
    import flash.display.*;
    import com.google.analytics.utils.*;
    import flash.events.*;
    import com.google.analytics.core.*;
    import com.google.analytics.v4.*;
    import com.google.analytics.debug.*;
    import com.google.analytics.external.*;
    import com.google.analytics.events.*;

    public class GATracker implements AnalyticsTracker {

        public static var version:Version = API.version;
        public static var autobuild:Boolean = true;

        private var _adSense:AdSenseGlobals;
        private var _env:Environment;
        private var _visualDebug:Boolean;
        private var _idleTimer:IdleTimer;
        private var _debug:DebugConfiguration;
        private var _buffer:Buffer;
        private var _config:Configuration;
        private var _mode:String;
        private var _display:DisplayObject;
        private var _jsproxy:JavascriptProxy;
        private var _dom:HTMLDOM;
        private var _eventDispatcher:EventDispatcher;
        private var _ready:Boolean = false;
        private var _gifRequest:GIFRequest;
        private var _account:String;
        private var _tracker:GoogleAnalyticsAPI;

        public function GATracker(_arg1:DisplayObject, _arg2:String, _arg3:String="AS3", _arg4:Boolean=false, _arg5:Configuration=null, _arg6:DebugConfiguration=null){
            _display = _arg1;
            _eventDispatcher = new EventDispatcher(this);
            _tracker = new TrackerCache();
            this.account = _arg2;
            this.mode = _arg3;
            this.visualDebug = _arg4;
            if (!_arg6){
                this.debug = new DebugConfiguration();
            };
            if (!_arg5){
                this.config = new Configuration(_arg6);
            };
            if (autobuild){
                _factory();
            };
        }
        public function link(_arg1:String, _arg2:Boolean=false):void{
            _tracker.link(_arg1, _arg2);
        }
        public function addOrganic(_arg1:String, _arg2:String):void{
            _tracker.addOrganic(_arg1, _arg2);
        }
        public function setAllowLinker(_arg1:Boolean):void{
            _tracker.setAllowLinker(_arg1);
        }
        public function trackEvent(_arg1:String, _arg2:String, _arg3:String=null, _arg4:Number=NaN):Boolean{
            return (_tracker.trackEvent(_arg1, _arg2, _arg3, _arg4));
        }
        public function setCookieTimeout(_arg1:int):void{
            _tracker.setCookieTimeout(_arg1);
        }
        public function trackTrans():void{
            _tracker.trackTrans();
        }
        public function getClientInfo():Boolean{
            return (_tracker.getClientInfo());
        }
        public function trackPageview(_arg1:String=""):void{
            _tracker.trackPageview(_arg1);
        }
        public function setClientInfo(_arg1:Boolean):void{
            _tracker.setClientInfo(_arg1);
        }
        public function get account():String{
            return (_account);
        }
        public function linkByPost(_arg1:Object, _arg2:Boolean=false):void{
            _tracker.linkByPost(_arg1, _arg2);
        }
        public function getDetectTitle():Boolean{
            return (_tracker.getDetectTitle());
        }
        public function dispatchEvent(_arg1:Event):Boolean{
            return (_eventDispatcher.dispatchEvent(_arg1));
        }
        public function get config():Configuration{
            return (_config);
        }
        public function set mode(_arg1:String):void{
            _mode = _arg1;
        }
        public function removeEventListener(_arg1:String, _arg2:Function, _arg3:Boolean=false):void{
            _eventDispatcher.removeEventListener(_arg1, _arg2, _arg3);
        }
        public function setDetectFlash(_arg1:Boolean):void{
            _tracker.setDetectFlash(_arg1);
        }
        public function resetSession():void{
            _tracker.resetSession();
        }
        public function setCampNameKey(_arg1:String):void{
            _tracker.setCampNameKey(_arg1);
        }
        public function get debug():DebugConfiguration{
            return (_debug);
        }
        public function addItem(_arg1:String, _arg2:String, _arg3:String, _arg4:String, _arg5:Number, _arg6:int):void{
            _tracker.addItem(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
        }
        private function _bridgeFactory():GoogleAnalyticsAPI{
            debug.info(((("GATracker (Bridge) v" + version) + "\naccount: ") + account));
            return (new Bridge(account, _debug, _jsproxy));
        }
        public function clearIgnoredOrganic():void{
            _tracker.clearIgnoredOrganic();
        }
        public function set account(_arg1:String):void{
            _account = _arg1;
        }
        public function setVar(_arg1:String):void{
            _tracker.setVar(_arg1);
        }
        public function build():void{
            if (!isReady()){
                _factory();
            };
        }
        public function addEventListener(_arg1:String, _arg2:Function, _arg3:Boolean=false, _arg4:int=0, _arg5:Boolean=false):void{
            _eventDispatcher.addEventListener(_arg1, _arg2, _arg3, _arg4, _arg5);
        }
        public function setDomainName(_arg1:String):void{
            _tracker.setDomainName(_arg1);
        }
        public function createEventTracker(_arg1:String):EventTracker{
            return (_tracker.createEventTracker(_arg1));
        }
        public function setCampSourceKey(_arg1:String):void{
            _tracker.setCampSourceKey(_arg1);
        }
        public function set config(_arg1:Configuration):void{
            _config = _arg1;
        }
        public function addTrans(_arg1:String, _arg2:String, _arg3:Number, _arg4:Number, _arg5:Number, _arg6:String, _arg7:String, _arg8:String):Object{
            return (_tracker.addTrans(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8));
        }
        public function setCampContentKey(_arg1:String):void{
            _tracker.setCampContentKey(_arg1);
        }
        public function willTrigger(_arg1:String):Boolean{
            return (_eventDispatcher.willTrigger(_arg1));
        }
        public function setLocalServerMode():void{
            _tracker.setLocalServerMode();
        }
        public function getLocalGifPath():String{
            return (_tracker.getLocalGifPath());
        }
        public function setAllowAnchor(_arg1:Boolean):void{
            _tracker.setAllowAnchor(_arg1);
        }
        public function clearIgnoredRef():void{
            _tracker.clearIgnoredRef();
        }
        public function isReady():Boolean{
            return (_ready);
        }
        public function get mode():String{
            return (_mode);
        }
        public function set debug(_arg1:DebugConfiguration):void{
            _debug = _arg1;
        }
        public function setLocalGifPath(_arg1:String):void{
            _tracker.setLocalGifPath(_arg1);
        }
        public function getVersion():String{
            return (_tracker.getVersion());
        }
        public function setSampleRate(_arg1:Number):void{
            _tracker.setSampleRate(_arg1);
        }
        public function setCookiePath(_arg1:String):void{
            _tracker.setCookiePath(_arg1);
        }
        public function setAllowHash(_arg1:Boolean):void{
            _tracker.setAllowHash(_arg1);
        }
        public function addIgnoredOrganic(_arg1:String):void{
            _tracker.addIgnoredOrganic(_arg1);
        }
        public function setLocalRemoteServerMode():void{
            _tracker.setLocalRemoteServerMode();
        }
        public function cookiePathCopy(_arg1:String):void{
            _tracker.cookiePathCopy(_arg1);
        }
        private function _factory():void{
            var _local1:GoogleAnalyticsAPI;
            _jsproxy = new JavascriptProxy(debug);
            if (visualDebug){
                debug.layout = new Layout(debug, _display);
                debug.active = visualDebug;
            };
            var _local2:TrackerCache = (_tracker as TrackerCache);
            switch (mode){
                case TrackerMode.BRIDGE:
                    _local1 = _bridgeFactory();
                    break;
                case TrackerMode.AS3:
                default:
                    _local1 = _trackerFactory();
            };
            if (!_local2.isEmpty()){
                _local2.tracker = _local1;
                _local2.flush();
            };
            _tracker = _local1;
            _ready = true;
            dispatchEvent(new AnalyticsEvent(AnalyticsEvent.READY, this));
        }
        public function setCampTermKey(_arg1:String):void{
            _tracker.setCampTermKey(_arg1);
        }
        private function _trackerFactory():GoogleAnalyticsAPI{
            debug.info(((("GATracker (AS3) v" + version) + "\naccount: ") + account));
            _adSense = new AdSenseGlobals(debug);
            _dom = new HTMLDOM(debug);
            _dom.cacheProperties();
            _env = new Environment("", "", "", debug, _dom);
            _buffer = new Buffer(config, debug, false);
            _gifRequest = new GIFRequest(config, debug, _buffer, _env);
            _idleTimer = new IdleTimer(config, debug, _display, _buffer);
            _env.ga_internal::url = _display.stage.loaderInfo.url;
            return (new Tracker(account, config, debug, _env, _buffer, _gifRequest, _adSense));
        }
        public function setCampNOKey(_arg1:String):void{
            _tracker.setCampNOKey(_arg1);
        }
        public function setDetectTitle(_arg1:Boolean):void{
            _tracker.setDetectTitle(_arg1);
        }
        public function getServiceMode():ServerOperationMode{
            return (_tracker.getServiceMode());
        }
        public function clearOrganic():void{
            _tracker.clearOrganic();
        }
        public function setCampaignTrack(_arg1:Boolean):void{
            _tracker.setCampaignTrack(_arg1);
        }
        public function addIgnoredRef(_arg1:String):void{
            _tracker.addIgnoredRef(_arg1);
        }
        public function set visualDebug(_arg1:Boolean):void{
            _visualDebug = _arg1;
        }
        public function setCampMediumKey(_arg1:String):void{
            _tracker.setCampMediumKey(_arg1);
        }
        public function getDetectFlash():Boolean{
            return (_tracker.getDetectFlash());
        }
        public function get visualDebug():Boolean{
            return (_visualDebug);
        }
        public function hasEventListener(_arg1:String):Boolean{
            return (_eventDispatcher.hasEventListener(_arg1));
        }
        public function getAccount():String{
            return (_tracker.getAccount());
        }
        public function setSessionTimeout(_arg1:int):void{
            _tracker.setSessionTimeout(_arg1);
        }
        public function setRemoteServerMode():void{
            _tracker.setRemoteServerMode();
        }

    }
    var _local1:* = ServerOperationMode;
    return (_local1);
}//package com.google.analytics 
﻿package com.google.analytics {
    import flash.events.*;
    import com.google.analytics.v4.*;
    import com.google.analytics.debug.*;

    public interface AnalyticsTracker extends GoogleAnalyticsAPI, IEventDispatcher {

        function set account(_arg1:String):void;
        function get config():Configuration;
        function get mode():String;
        function set config(_arg1:Configuration):void;
        function set mode(_arg1:String):void;
        function set debug(_arg1:DebugConfiguration):void;
        function get visualDebug():Boolean;
        function get account():String;
        function set visualDebug(_arg1:Boolean):void;
        function isReady():Boolean;
        function get debug():DebugConfiguration;

    }
}//package com.google.analytics 
﻿package com.google.analytics.data {

    public interface Cookie {

        function fromSharedObject(_arg1:Object):void;
        function toURLString():String;
        function get creation():Date;
        function toSharedObject():Object;
        function isExpired():Boolean;
        function set creation(_arg1:Date):void;
        function set expiration(_arg1:Date):void;
        function get expiration():Date;

    }
}//package com.google.analytics.data 
﻿package com.google.analytics.data {

    public class X10 {

        private var _delimEnd:String = ")";
        private var _minimum:int;
        private var _delimSet:String = "*";
        private var _escapeChar:String = "'";
        private var _delimBegin:String = "(";
        private var _delimNumValue:String = "!";
        private var _key:String = "k";
        private var _set:Array;
        private var _hasData:int;
        private var _escapeCharMap:Object;
        private var _projectData:Object;
        private var _value:String = "v";

        public function X10(){
            _set = [_key, _value];
            super();
            _projectData = {};
            _escapeCharMap = {};
            _escapeCharMap[_escapeChar] = "'0";
            _escapeCharMap[_delimEnd] = "'1";
            _escapeCharMap[_delimSet] = "'2";
            _escapeCharMap[_delimNumValue] = "'3";
            _minimum = 1;
        }
        private function _setInternal(_arg1:Number, _arg2:String, _arg3:Number, _arg4:String):void{
            if (!hasProject(_arg1)){
                _projectData[_arg1] = {};
            };
            if (_projectData[_arg1][_arg2] == undefined){
                _projectData[_arg1][_arg2] = [];
            };
            _projectData[_arg1][_arg2][_arg3] = _arg4;
            _hasData = (_hasData + 1);
        }
        private function _renderProject(_arg1:Object):String{
            var _local4:int;
            var _local5:Array;
            var _local2 = "";
            var _local3:Boolean;
            var _local6:int = _set.length;
            _local4 = 0;
            while (_local4 < _local6) {
                _local5 = _arg1[_set[_local4]];
                if (_local5){
                    if (_local3){
                        _local2 = (_local2 + _set[_local4]);
                    };
                    _local2 = (_local2 + _renderDataType(_local5));
                    _local3 = false;
                } else {
                    _local3 = true;
                };
                _local4++;
            };
            return (_local2);
        }
        public function hasProject(_arg1:Number):Boolean{
            return (_projectData[_arg1]);
        }
        public function clearKey(_arg1:Number):void{
            _clearInternal(_arg1, _key);
        }
        private function _renderDataType(_arg1:Array):String{
            var _local3:String;
            var _local4:int;
            var _local2:Array = [];
            _local4 = 0;
            while (_local4 < _arg1.length) {
                if (_arg1[_local4] != undefined){
                    _local3 = "";
                    if (((!((_local4 == _minimum))) && ((_arg1[(_local4 - 1)] == undefined)))){
                        _local3 = (_local3 + _local4.toString());
                        _local3 = (_local3 + _delimNumValue);
                    };
                    _local3 = (_local3 + _escapeExtensibleValue(_arg1[_local4]));
                    _local2.push(_local3);
                };
                _local4++;
            };
            return (((_delimBegin + _local2.join(_delimSet)) + _delimEnd));
        }
        public function getKey(_arg1:Number, _arg2:Number):String{
            return ((_getInternal(_arg1, _key, _arg2) as String));
        }
        public function hasData():Boolean{
            return ((_hasData > 0));
        }
        public function renderMergedUrlString(_arg1:X10=null):String{
            var _local3:String;
            if (!_arg1){
                return (renderUrlString());
            };
            var _local2:Array = [_arg1.renderUrlString()];
            for (_local3 in _projectData) {
                if (((hasProject(Number(_local3))) && (!(_arg1.hasProject(Number(_local3)))))){
                    _local2.push((_local3 + _renderProject(_projectData[_local3])));
                };
            };
            return (_local2.join(""));
        }
        public function setValue(_arg1:Number, _arg2:Number, _arg3:Number):Boolean{
            if (((((!((Math.round(_arg3) == _arg3))) || (isNaN(_arg3)))) || ((_arg3 == Infinity)))){
                return (false);
            };
            _setInternal(_arg1, _value, _arg2, _arg3.toString());
            return (true);
        }
        public function renderUrlString():String{
            var _local2:String;
            var _local1:Array = [];
            for (_local2 in _projectData) {
                if (hasProject(Number(_local2))){
                    _local1.push((_local2 + _renderProject(_projectData[_local2])));
                };
            };
            return (_local1.join(""));
        }
        private function _getInternal(_arg1:Number, _arg2:String, _arg3:Number):Object{
            if (((hasProject(_arg1)) && (!((_projectData[_arg1][_arg2] == undefined))))){
                return (_projectData[_arg1][_arg2][_arg3]);
            };
            return (undefined);
        }
        public function setKey(_arg1:Number, _arg2:Number, _arg3:String):Boolean{
            _setInternal(_arg1, _key, _arg2, _arg3);
            return (true);
        }
        public function clearValue(_arg1:Number):void{
            _clearInternal(_arg1, _value);
        }
        private function _clearInternal(_arg1:Number, _arg2:String):void{
            var _local3:Boolean;
            var _local4:int;
            var _local5:int;
            if (((hasProject(_arg1)) && (!((_projectData[_arg1][_arg2] == undefined))))){
                _projectData[_arg1][_arg2] = undefined;
                _local3 = true;
                _local5 = _set.length;
                _local4 = 0;
                while (_local4 < _local5) {
                    if (_projectData[_arg1][_set[_local4]] != undefined){
                        _local3 = false;
                        break;
                    };
                    _local4++;
                };
                if (_local3){
                    _projectData[_arg1] = undefined;
                    _hasData = (_hasData - 1);
                };
            };
        }
        public function getValue(_arg1:Number, _arg2:Number){
            var _local3:* = _getInternal(_arg1, _value, _arg2);
            if (_local3 == null){
                return (null);
            };
            return (Number(_local3));
        }
        private function _escapeExtensibleValue(_arg1:String):String{
            var _local3:int;
            var _local4:String;
            var _local5:String;
            var _local2 = "";
            _local3 = 0;
            while (_local3 < _arg1.length) {
                _local4 = _arg1.charAt(_local3);
                _local5 = _escapeCharMap[_local4];
                if (_local5){
                    _local2 = (_local2 + _local5);
                } else {
                    _local2 = (_local2 + _local4);
                };
                _local3++;
            };
            return (_local2);
        }

    }
}//package com.google.analytics.data 
﻿package com.google.analytics.data {
    import com.google.analytics.utils.*;

    public class UTMZ extends UTMCookie {

        public static var defaultTimespan:Number = Timespan.sixmonths;

        private var _campaignTracking:String;
        private var _campaignCreation:Number;
        private var _responseCount:Number;
        private var _domainHash:Number;
        private var _campaignSessions:Number;

        public function UTMZ(_arg1:Number=NaN, _arg2:Number=NaN, _arg3:Number=NaN, _arg4:Number=NaN, _arg5:String=""){
            super("utmz", "__utmz", ["domainHash", "campaignCreation", "campaignSessions", "responseCount", "campaignTracking"], (defaultTimespan * 1000));
            this.domainHash = _arg1;
            this.campaignCreation = _arg2;
            this.campaignSessions = _arg3;
            this.responseCount = _arg4;
            this.campaignTracking = _arg5;
        }
        public function set responseCount(_arg1:Number):void{
            _responseCount = _arg1;
            update();
        }
        public function set domainHash(_arg1:Number):void{
            _domainHash = _arg1;
            update();
        }
        public function set campaignCreation(_arg1:Number):void{
            _campaignCreation = _arg1;
            update();
        }
        public function get campaignTracking():String{
            return (_campaignTracking);
        }
        public function get campaignSessions():Number{
            return (_campaignSessions);
        }
        public function get domainHash():Number{
            return (_domainHash);
        }
        public function get responseCount():Number{
            return (_responseCount);
        }
        public function get campaignCreation():Number{
            return (_campaignCreation);
        }
        public function set campaignSessions(_arg1:Number):void{
            _campaignSessions = _arg1;
            update();
        }
        public function set campaignTracking(_arg1:String):void{
            _campaignTracking = _arg1;
            update();
        }

    }
}//package com.google.analytics.data 
﻿package com.google.analytics.data {
    import com.google.analytics.utils.*;

    public class UTMV extends UTMCookie {

        private var _domainHash:Number;
        private var _value:String;

        public function UTMV(_arg1:Number=NaN, _arg2:String=""){
            super("utmv", "__utmv", ["domainHash", "value"], (Timespan.twoyears * 1000));
            this.domainHash = _arg1;
            this.value = _arg2;
        }
        override public function toURLString():String{
            return (((inURL + "=") + encodeURI(valueOf())));
        }
        public function get value():String{
            return (_value);
        }
        public function get domainHash():Number{
            return (_domainHash);
        }
        public function set domainHash(_arg1:Number):void{
            _domainHash = _arg1;
            update();
        }
        public function set value(_arg1:String):void{
            _value = _arg1;
            update();
        }

    }
}//package com.google.analytics.data 
﻿package com.google.analytics.data {
    import com.google.analytics.utils.*;

    public class UTMA extends UTMCookie {

        private var _sessionId:Number;
        private var _domainHash:Number;
        private var _firstTime:Number;
        private var _currentTime:Number;
        private var _lastTime:Number;
        private var _sessionCount:Number;

        public function UTMA(_arg1:Number=NaN, _arg2:Number=NaN, _arg3:Number=NaN, _arg4:Number=NaN, _arg5:Number=NaN, _arg6:Number=NaN){
            super("utma", "__utma", ["domainHash", "sessionId", "firstTime", "lastTime", "currentTime", "sessionCount"], (Timespan.twoyears * 1000));
            this.domainHash = _arg1;
            this.sessionId = _arg2;
            this.firstTime = _arg3;
            this.lastTime = _arg4;
            this.currentTime = _arg5;
            this.sessionCount = _arg6;
        }
        public function get lastTime():Number{
            return (_lastTime);
        }
        public function set lastTime(_arg1:Number):void{
            _lastTime = _arg1;
            update();
        }
        public function set currentTime(_arg1:Number):void{
            _currentTime = _arg1;
            update();
        }
        public function get sessionId():Number{
            return (_sessionId);
        }
        public function get sessionCount():Number{
            return (_sessionCount);
        }
        public function get firstTime():Number{
            return (_firstTime);
        }
        public function get currentTime():Number{
            return (_currentTime);
        }
        public function set domainHash(_arg1:Number):void{
            _domainHash = _arg1;
            update();
        }
        public function set sessionId(_arg1:Number):void{
            _sessionId = _arg1;
            update();
        }
        public function set sessionCount(_arg1:Number):void{
            _sessionCount = _arg1;
            update();
        }
        public function get domainHash():Number{
            return (_domainHash);
        }
        public function set firstTime(_arg1:Number):void{
            _firstTime = _arg1;
            update();
        }

    }
}//package com.google.analytics.data 
﻿package com.google.analytics.data {

    public class UTMK extends UTMCookie {

        private var _hash:Number;

        public function UTMK(_arg1:Number=NaN){
            super("utmk", "__utmk", ["hash"]);
            this.hash = _arg1;
        }
        public function set hash(_arg1:Number):void{
            _hash = _arg1;
            update();
        }
        public function get hash():Number{
            return (_hash);
        }

    }
}//package com.google.analytics.data 
﻿package com.google.analytics.data {
    import com.google.analytics.core.*;

    public class UTMCookie implements Cookie {

        protected var inURL:String;
        protected var name:String;
        private var _creation:Date;
        private var _expiration:Date;
        public var proxy:Buffer;
        protected var fields:Array;
        private var _timespan:Number;

        public function UTMCookie(_arg1:String, _arg2:String, _arg3:Array, _arg4:Number=0){
            this.name = _arg1;
            this.inURL = _arg2;
            this.fields = _arg3;
            _timestamp(_arg4);
        }
        public function isEmpty():Boolean{
            var _local2:String;
            var _local1:int;
            var _local3:int;
            while (_local3 < fields.length) {
                _local2 = fields[_local3];
                if ((((this[_local2] is Number)) && (isNaN(this[_local2])))){
                    _local1++;
                } else {
                    if ((((this[_local2] is String)) && ((this[_local2] == "")))){
                        _local1++;
                    };
                };
                _local3++;
            };
            if (_local1 == fields.length){
                return (true);
            };
            return (false);
        }
        public function resetTimestamp(_arg1:Number=NaN):void{
            if (!isNaN(_arg1)){
                _timespan = _arg1;
            };
            _creation = null;
            _expiration = null;
            _timestamp(_timespan);
        }
        protected function update():void{
            resetTimestamp();
            if (proxy){
                proxy.update(name, toSharedObject());
            };
        }
        public function reset():void{
            var _local1:String;
            var _local2:int;
            while (_local2 < fields.length) {
                _local1 = fields[_local2];
                if ((this[_local1] is Number)){
                    this[_local1] = NaN;
                } else {
                    if ((this[_local1] is String)){
                        this[_local1] = "";
                    };
                };
                _local2++;
            };
            resetTimestamp();
            update();
        }
        public function fromSharedObject(_arg1:Object):void{
            var _local2:String;
            var _local3:int = fields.length;
            var _local4:int;
            while (_local4 < _local3) {
                _local2 = fields[_local4];
                if (_arg1[_local2]){
                    this[_local2] = _arg1[_local2];
                };
                _local4++;
            };
            if (_arg1.creation){
                this.creation = _arg1.creation;
            };
            if (_arg1.expiration){
                this.expiration = _arg1.expiration;
            };
        }
        private function _timestamp(_arg1:Number):void{
            creation = new Date();
            _timespan = _arg1;
            if (_arg1 > 0){
                expiration = new Date((creation.valueOf() + _arg1));
            };
        }
        public function isExpired():Boolean{
            var _local1:Date = new Date();
            var _local2:Number = (expiration.valueOf() - _local1.valueOf());
            if (_local2 <= 0){
                return (true);
            };
            return (false);
        }
        public function set expiration(_arg1:Date):void{
            _expiration = _arg1;
        }
        public function get creation():Date{
            return (_creation);
        }
        public function valueOf():String{
            var _local2:String;
            var _local3:*;
            var _local1:Array = [];
            var _local4:int;
            while (_local4 < fields.length) {
                _local2 = fields[_local4];
                _local3 = this[_local2];
                if ((_local3 is String)){
                    if (_local3 == ""){
                        _local3 = "-";
                        _local1.push(_local3);
                    } else {
                        _local1.push(_local3);
                    };
                } else {
                    if ((_local3 is Number)){
                        if (_local3 == 0){
                            _local1.push(_local3);
                        } else {
                            if (isNaN(_local3)){
                                _local3 = "-";
                                _local1.push(_local3);
                            } else {
                                _local1.push(_local3);
                            };
                        };
                    };
                };
                _local4++;
            };
            return (("" + _local1.join(".")));
        }
        public function toURLString():String{
            return (((inURL + "=") + valueOf()));
        }
        public function get expiration():Date{
            if (_expiration){
                return (_expiration);
            };
            return (new Date((new Date().valueOf() + 1000)));
        }
        public function toSharedObject():Object{
            var _local2:String;
            var _local3:*;
            var _local1:Object = {};
            var _local4:int;
            while (_local4 < fields.length) {
                _local2 = fields[_local4];
                _local3 = this[_local2];
                if ((_local3 is String)){
                    _local1[_local2] = _local3;
                } else {
                    if (_local3 == 0){
                        _local1[_local2] = _local3;
                    } else {
                        if (isNaN(_local3)){
                        } else {
                            _local1[_local2] = _local3;
                        };
                    };
                };
                _local4++;
            };
            _local1.creation = creation;
            _local1.expiration = expiration;
            return (_local1);
        }
        public function toString(_arg1:Boolean=false):String{
            var _local3:String;
            var _local4:*;
            var _local2:Array = [];
            var _local5:int = fields.length;
            var _local6:int;
            while (_local6 < _local5) {
                _local3 = fields[_local6];
                _local4 = this[_local3];
                if ((_local4 is String)){
                    _local2.push((((_local3 + ": \"") + _local4) + "\""));
                } else {
                    if (_local4 == 0){
                        _local2.push(((_local3 + ": ") + _local4));
                    } else {
                        if (isNaN(_local4)){
                        } else {
                            _local2.push(((_local3 + ": ") + _local4));
                        };
                    };
                };
                _local6++;
            };
            var _local7 = (((name.toUpperCase() + " {") + _local2.join(", ")) + "}");
            if (_arg1){
                _local7 = (_local7 + (((" creation:" + creation) + ", expiration:") + expiration));
            };
            return (_local7);
        }
        public function set creation(_arg1:Date):void{
            _creation = _arg1;
        }

    }
}//package com.google.analytics.data 
﻿package com.google.analytics.data {
    import com.google.analytics.utils.*;

    public class UTMB extends UTMCookie {

        public static var defaultTimespan:Number = Timespan.thirtyminutes;

        private var _trackCount:Number;
        private var _lastTime:Number;
        private var _domainHash:Number;
        private var _token:Number;

        public function UTMB(_arg1:Number=NaN, _arg2:Number=NaN, _arg3:Number=NaN, _arg4:Number=NaN){
            super("utmb", "__utmb", ["domainHash", "trackCount", "token", "lastTime"], (defaultTimespan * 1000));
            this.domainHash = _arg1;
            this.trackCount = _arg2;
            this.token = _arg3;
            this.lastTime = _arg4;
        }
        public function set token(_arg1:Number):void{
            _token = _arg1;
            update();
        }
        public function set trackCount(_arg1:Number):void{
            _trackCount = _arg1;
            update();
        }
        public function get lastTime():Number{
            return (_lastTime);
        }
        public function set domainHash(_arg1:Number):void{
            _domainHash = _arg1;
            update();
        }
        public function set lastTime(_arg1:Number):void{
            _lastTime = _arg1;
            update();
        }
        public function get domainHash():Number{
            return (_domainHash);
        }
        public function get token():Number{
            return (_token);
        }
        public function get trackCount():Number{
            return (_trackCount);
        }

    }
}//package com.google.analytics.data 
﻿package com.google.analytics.data {

    public class UTMC extends UTMCookie {

        private var _domainHash:Number;

        public function UTMC(_arg1:Number=NaN){
            super("utmc", "__utmc", ["domainHash"]);
            this.domainHash = _arg1;
        }
        public function get domainHash():Number{
            return (_domainHash);
        }
        public function set domainHash(_arg1:Number):void{
            _domainHash = _arg1;
            update();
        }

    }
}//package com.google.analytics.data 
﻿package com.google.analytics.events {
    import flash.events.*;
    import com.google.analytics.*;

    public class AnalyticsEvent extends Event {

        public static const READY:String = "ready";

        public var tracker:AnalyticsTracker;

        public function AnalyticsEvent(_arg1:String, _arg2:AnalyticsTracker, _arg3:Boolean=false, _arg4:Boolean=false){
            super(_arg1, _arg3, _arg4);
            this.tracker = _arg2;
        }
        override public function clone():Event{
            return (new AnalyticsEvent(type, tracker, bubbles, cancelable));
        }

    }
}//package com.google.analytics.events 
﻿package com.google.analytics.utils {
    import flash.system.*;
    import com.google.analytics.core.*;

    public class UserAgent {

        public static var minimal:Boolean = false;

        private var _localInfo:Environment;
        private var _applicationProduct:String;
        private var _version:Version;

        public function UserAgent(_arg1:Environment, _arg2:String="", _arg3:String=""){
            _localInfo = _arg1;
            applicationProduct = _arg2;
            _version = Version.fromString(_arg3);
        }
        public function get tamarinProductToken():String{
            if (UserAgent.minimal){
                return ("");
            };
            if (System.vmVersion){
                return (("Tamarin/" + Utils.trim(System.vmVersion, true)));
            };
            return ("");
        }
        public function get applicationVersion():String{
            return (_version.toString(2));
        }
        public function get vendorProductToken():String{
            var _local1 = "";
            if (_localInfo.isAIR()){
                _local1 = (_local1 + "AIR");
            } else {
                _local1 = (_local1 + "FlashPlayer");
            };
            _local1 = (_local1 + "/");
            _local1 = (_local1 + _version.toString(3));
            return (_local1);
        }
        public function toString():String{
            var _local1 = "";
            _local1 = (_local1 + applicationProductToken);
            if (applicationComment != ""){
                _local1 = (_local1 + (" " + applicationComment));
            };
            if (tamarinProductToken != ""){
                _local1 = (_local1 + (" " + tamarinProductToken));
            };
            if (vendorProductToken != ""){
                _local1 = (_local1 + (" " + vendorProductToken));
            };
            return (_local1);
        }
        public function get applicationComment():String{
            var _local1:Array = [];
            _local1.push(_localInfo.platform);
            _local1.push(_localInfo.playerType);
            if (!UserAgent.minimal){
                _local1.push(_localInfo.operatingSystem);
                _local1.push(_localInfo.language);
            };
            if (Capabilities.isDebugger){
                _local1.push("DEBUG");
            };
            if (_local1.length > 0){
                return ((("(" + _local1.join("; ")) + ")"));
            };
            return ("");
        }
        public function set applicationVersion(_arg1:String):void{
            _version = Version.fromString(_arg1);
        }
        public function get applicationProductToken():String{
            var _local1:String = applicationProduct;
            if (applicationVersion != ""){
                _local1 = (_local1 + ("/" + applicationVersion));
            };
            return (_local1);
        }
        public function set applicationProduct(_arg1:String):void{
            _applicationProduct = _arg1;
        }
        public function get applicationProduct():String{
            return (_applicationProduct);
        }

    }
}//package com.google.analytics.utils 
﻿package com.google.analytics.utils {

    public class URL {

        private var _url:String;

        public function URL(_arg1:String=""){
            _url = _arg1.toLowerCase();
        }
        public function get domain():String{
            var _local1:Array;
            if (((!((hostName == ""))) && ((hostName.indexOf(".") > -1)))){
                _local1 = hostName.split(".");
                switch (_local1.length){
                    case 2:
                        return (hostName);
                    case 3:
                        if (_local1[1] == "co"){
                            return (hostName);
                        };
                        _local1.shift();
                        return (_local1.join("."));
                    case 4:
                        _local1.shift();
                        return (_local1.join("."));
                };
            };
            return ("");
        }
        public function get path():String{
            var _local1:String = _url;
            if (_local1.indexOf("://") > -1){
                _local1 = _local1.split("://")[1];
            };
            if (_local1.indexOf(hostName) == 0){
                _local1 = _local1.substr(hostName.length);
            };
            if (_local1.indexOf("?") > -1){
                _local1 = _local1.split("?")[0];
            };
            if (_local1.charAt(0) != "/"){
                _local1 = ("/" + _local1);
            };
            return (_local1);
        }
        public function get protocol():Protocols{
            var _local1:String = _url.split("://")[0];
            switch (_local1){
                case "file":
                    return (Protocols.file);
                case "http":
                    return (Protocols.HTTP);
                case "https":
                    return (Protocols.HTTPS);
                default:
                    return (Protocols.none);
            };
        }
        public function get hostName():String{
            var _local1:String = _url;
            if (_local1.indexOf("://") > -1){
                _local1 = _local1.split("://")[1];
            };
            if (_local1.indexOf("/") > -1){
                _local1 = _local1.split("/")[0];
            };
            if (_local1.indexOf("?") > -1){
                _local1 = _local1.split("?")[0];
            };
            if ((((protocol == Protocols.file)) || ((protocol == Protocols.none)))){
                return ("");
            };
            return (_local1);
        }
        public function get subDomain():String{
            if (((!((domain == ""))) && (!((domain == hostName))))){
                return (hostName.split(("." + domain)).join(""));
            };
            return ("");
        }
        public function get search():String{
            var _local1:String = _url;
            if (_local1.indexOf("://") > -1){
                _local1 = _local1.split("://")[1];
            };
            if (_local1.indexOf(hostName) == 0){
                _local1 = _local1.substr(hostName.length);
            };
            if (_local1.indexOf("?") > -1){
                _local1 = _local1.split("?")[1];
            } else {
                _local1 = "";
            };
            return (_local1);
        }

    }
}//package com.google.analytics.utils 
﻿package com.google.analytics.utils {

    public class Timespan {

        public static var sixmonths:Number = 15768000;
        public static var twoyears:Number = 63072000;
        public static var thirtyminutes:Number = 1800;

    }
}//package com.google.analytics.utils 
﻿package com.google.analytics.utils {

    public class Protocols {

        public static const none:Protocols = new Protocols(0, "none");
;
        public static const HTTPS:Protocols = new Protocols(3, "HTTPS");
;
        public static const file:Protocols = new Protocols(1, "file");
;
        public static const HTTP:Protocols = new Protocols(2, "HTTP");
;

        private var _value:int;
        private var _name:String;

        public function Protocols(_arg1:int=0, _arg2:String=""){
            _value = _arg1;
            _name = _arg2;
        }
        public function valueOf():int{
            return (_value);
        }
        public function toString():String{
            return (_name);
        }

    }
}//package com.google.analytics.utils 
﻿package com.google.analytics.utils {

    public class Version {

        private var _revision:uint;
        private var _maxBuild:uint = 0xFF;
        private var _maxMinor:uint = 15;
        private var _maxMajor:uint = 15;
        private var _separator:String = ".";
        private var _maxRevision:uint = 0xFFFF;
        private var _build:uint;
        private var _major:uint;
        private var _minor:uint;

        public function Version(_arg1:uint=0, _arg2:uint=0, _arg3:uint=0, _arg4:uint=0){
            var _local5:Version;
            super();
            if ((((((((_arg1 > _maxMajor)) && ((_arg2 == 0)))) && ((_arg3 == 0)))) && ((_arg4 == 0)))){
                _local5 = Version.fromNumber(_arg1);
                _arg1 = _local5.major;
                _arg2 = _local5.minor;
                _arg3 = _local5.build;
                _arg4 = _local5.revision;
            };
            this.major = _arg1;
            this.minor = _arg2;
            this.build = _arg3;
            this.revision = _arg4;
        }
        public static function fromString(_arg1:String="", _arg2:String="."):Version{
            var _local4:Array;
            var _local3:Version = new (Version)();
            if ((((_arg1 == "")) || ((_arg1 == null)))){
                return (_local3);
            };
            if (_arg1.indexOf(_arg2) > -1){
                _local4 = _arg1.split(_arg2);
                _local3.major = parseInt(_local4[0]);
                _local3.minor = parseInt(_local4[1]);
                _local3.build = parseInt(_local4[2]);
                _local3.revision = parseInt(_local4[3]);
            } else {
                _local3.major = parseInt(_arg1);
            };
            return (_local3);
        }
        public static function fromNumber(_arg1:Number=0):Version{
            var _local2:Version = new (Version)();
            if (((((((((((isNaN(_arg1)) || ((_arg1 == 0)))) || ((_arg1 < 0)))) || ((_arg1 == Number.MAX_VALUE)))) || ((_arg1 == Number.POSITIVE_INFINITY)))) || ((_arg1 == Number.NEGATIVE_INFINITY)))){
                return (_local2);
            };
            _local2.major = (_arg1 >>> 28);
            _local2.minor = ((_arg1 & 251658240) >>> 24);
            _local2.build = ((_arg1 & 0xFF0000) >>> 16);
            _local2.revision = (_arg1 & 0xFFFF);
            return (_local2);
        }

        public function toString(_arg1:int=0):String{
            var _local2:Array;
            if ((((_arg1 <= 0)) || ((_arg1 > 4)))){
                _arg1 = getFields();
            };
            switch (_arg1){
                case 1:
                    _local2 = [major];
                    break;
                case 2:
                    _local2 = [major, minor];
                    break;
                case 3:
                    _local2 = [major, minor, build];
                    break;
                case 4:
                default:
                    _local2 = [major, minor, build, revision];
            };
            return (_local2.join(_separator));
        }
        public function set revision(_arg1:uint):void{
            _revision = Math.min(_arg1, _maxRevision);
        }
        public function get revision():uint{
            return (_revision);
        }
        public function set build(_arg1:uint):void{
            _build = Math.min(_arg1, _maxBuild);
        }
        public function set minor(_arg1:uint):void{
            _minor = Math.min(_arg1, _maxMinor);
        }
        public function get build():uint{
            return (_build);
        }
        public function set major(_arg1:uint):void{
            _major = Math.min(_arg1, _maxMajor);
        }
        public function get minor():uint{
            return (_minor);
        }
        private function getFields():int{
            var _local1 = 4;
            if (revision == 0){
                _local1--;
            };
            if ((((_local1 == 3)) && ((build == 0)))){
                _local1--;
            };
            if ((((_local1 == 2)) && ((minor == 0)))){
                _local1--;
            };
            return (_local1);
        }
        public function valueOf():uint{
            return (((((major << 28) | (minor << 24)) | (build << 16)) | revision));
        }
        public function get major():uint{
            return (_major);
        }
        public function equals(_arg1):Boolean{
            if (!(_arg1 is Version)){
                return (false);
            };
            if ((((((((_arg1.major == major)) && ((_arg1.minor == minor)))) && ((_arg1.build == build)))) && ((_arg1.revision == revision)))){
                return (true);
            };
            return (false);
        }

    }
}//package com.google.analytics.utils 
﻿package com.google.analytics.utils {
    import flash.net.*;

    public dynamic class Variables {

        public var post:Array;
        public var URIencode:Boolean;
        public var pre:Array;
        public var sort:Boolean = true;

        public function Variables(_arg1:String=null, _arg2:Array=null, _arg3:Array=null){
            pre = [];
            post = [];
            super();
            if (_arg1){
                decode(_arg1);
            };
            if (_arg2){
                this.pre = _arg2;
            };
            if (_arg3){
                this.post = _arg3;
            };
        }
        private function _join(_arg1:Variables):void{
            var _local2:String;
            if (!_arg1){
                return;
            };
            for (_local2 in _arg1) {
                this[_local2] = _arg1[_local2];
            };
        }
        public function join(... _args):void{
            var _local2:int = _args.length;
            var _local3:int;
            while (_local3 < _local2) {
                if (!(_args[_local3] is Variables)){
                } else {
                    _join(_args[_local3]);
                };
                _local3++;
            };
        }
        public function toString():String{
            var _local2:String;
            var _local3:String;
            var _local4:String;
            var _local5:int;
            var _local6:int;
            var _local7:String;
            var _local8:String;
            var _local1:Array = [];
            for (_local3 in this) {
                _local2 = this[_local3];
                if (URIencode){
                    _local2 = encodeURI(_local2);
                };
                _local1.push(((_local3 + "=") + _local2));
            };
            if (sort){
                _local1.sort();
            };
            if (pre.length > 0){
                pre.reverse();
                _local5 = 0;
                while (_local5 < pre.length) {
                    _local7 = pre[_local5];
                    _local6 = 0;
                    while (_local6 < _local1.length) {
                        _local4 = _local1[_local6];
                        if (_local4.indexOf(_local7) == 0){
                            _local1.unshift(_local1.splice(_local6, 1)[0]);
                        };
                        _local6++;
                    };
                    _local5++;
                };
                pre.reverse();
            };
            if (post.length > 0){
                _local5 = 0;
                while (_local5 < post.length) {
                    _local8 = post[_local5];
                    _local6 = 0;
                    while (_local6 < _local1.length) {
                        _local4 = _local1[_local6];
                        if (_local4.indexOf(_local8) == 0){
                            _local1.push(_local1.splice(_local6, 1)[0]);
                        };
                        _local6++;
                    };
                    _local5++;
                };
            };
            return (_local1.join("&"));
        }
        public function decode(_arg1:String):void{
            var _local2:Array;
            var _local3:String;
            var _local4:String;
            var _local5:String;
            var _local6:Array;
            if (_arg1 == ""){
                return;
            };
            if (_arg1.indexOf("&") > -1){
                _local2 = _arg1.split("&");
            } else {
                _local2 = [_arg1];
            };
            var _local7:int;
            while (_local7 < _local2.length) {
                _local3 = _local2[_local7];
                if (_local3.indexOf("=") > -1){
                    _local6 = _local3.split("=");
                    _local4 = _local6[0];
                    _local5 = decodeURI(_local6[1]);
                    this[_local4] = _local5;
                };
                _local7++;
            };
        }
        public function toURLVariables():URLVariables{
            var _local2:String;
            var _local1:URLVariables = new URLVariables();
            for (_local2 in this) {
                _local1[_local2] = this[_local2];
            };
            return (_local1);
        }

    }
}//package com.google.analytics.utils 
﻿package com.google.analytics.utils {
    import flash.system.*;
    import com.google.analytics.core.*;
    import com.google.analytics.debug.*;
    import com.google.analytics.external.*;

    public class Environment {

        private var _dom:HTMLDOM;
        private var _appName:String;
        private var _debug:DebugConfiguration;
        private var _appVersion:Version;
        private var _url:String;
        private var _protocol:Protocols;
        private var _userAgent:UserAgent;

        public function Environment(_arg1:String="", _arg2:String="", _arg3:String="", _arg4:DebugConfiguration=null, _arg5:HTMLDOM=null){
            var _local6:Version;
            super();
            if (_arg2 == ""){
                if (isAIR()){
                    _arg2 = "AIR";
                } else {
                    _arg2 = "Flash";
                };
            };
            if (_arg3 == ""){
                _local6 = flashVersion;
            } else {
                _local6 = Version.fromString(_arg3);
            };
            _url = _arg1;
            _appName = _arg2;
            _appVersion = _local6;
            _debug = _arg4;
            _dom = _arg5;
        }
        public function isAIR():Boolean{
            return ((((playerType == "Desktop")) && ((Security.sandboxType.toString() == "application"))));
        }
        public function get screenWidth():Number{
            return (Capabilities.screenResolutionX);
        }
        public function get playerType():String{
            return (Capabilities.playerType);
        }
        public function get locationSearch():String{
            var _local1:String = _dom.search;
            if (_local1){
                return (_local1);
            };
            return ("");
        }
        public function get protocol():Protocols{
            if (!_protocol){
                _findProtocol();
            };
            return (_protocol);
        }
        public function get flashVersion():Version{
            var _local1:Version = Version.fromString(Capabilities.version.split(" ")[1], ",");
            return (_local1);
        }
        public function get userAgent():UserAgent{
            if (!_userAgent){
                _userAgent = new UserAgent(this, appName, appVersion.toString(4));
            };
            return (_userAgent);
        }
        public function get languageEncoding():String{
            var _local1:String;
            if (System.useCodePage){
                _local1 = _dom.characterSet;
                if (_local1){
                    return (_local1);
                };
                return ("-");
            };
            return ("UTF-8");
        }
        public function get appName():String{
            return (_appName);
        }
        public function get screenColorDepth():String{
            var _local1:String;
            switch (Capabilities.screenColor){
                case "bw":
                    _local1 = "1";
                    break;
                case "gray":
                    _local1 = "2";
                    break;
                case "color":
                default:
                    _local1 = "24";
            };
            var _local2:String = _dom.colorDepth;
            if (_local2){
                _local1 = _local2;
            };
            return (_local1);
        }
        private function _findProtocol():void{
            var _local4:String;
            var _local5:String;
            var _local1:Protocols = Protocols.none;
            if (_url != ""){
                _local4 = _url.toLowerCase();
                _local5 = _local4.substr(0, 5);
                switch (_local5){
                    case "file:":
                        _local1 = Protocols.file;
                        break;
                    case "http:":
                        _local1 = Protocols.HTTP;
                        break;
                    case "https":
                        if (_local4.charAt(5) == ":"){
                            _local1 = Protocols.HTTPS;
                        };
                        break;
                    default:
                        _protocol = Protocols.none;
                };
            };
            var _local2:String = _dom.protocol;
            var _local3:String = (_local1.toString() + ":").toLowerCase();
            if (((((_local2) && (!((_local2 == _local3))))) && (_debug))){
                _debug.warning(((("Protocol mismatch: SWF=" + _local3) + ", DOM=") + _local2));
            };
            _protocol = _local1;
        }
        public function get locationSWFPath():String{
            return (_url);
        }
        public function get platform():String{
            var _local1:String = Capabilities.manufacturer;
            return (_local1.split("Adobe ")[1]);
        }
        public function get operatingSystem():String{
            return (Capabilities.os);
        }
        public function set appName(_arg1:String):void{
            _appName = _arg1;
            userAgent.applicationProduct = _arg1;
        }
        ga_internal function set url(_arg1:String):void{
            _url = _arg1;
        }
        public function get referrer():String{
            var _local1:String = _dom.referrer;
            if (_local1){
                return (_local1);
            };
            if (protocol == Protocols.file){
                return ("localhost");
            };
            return ("");
        }
        public function isInHTML():Boolean{
            return ((Capabilities.playerType == "PlugIn"));
        }
        public function get language():String{
            var _local1:String = _dom.language;
            var _local2:String = Capabilities.language;
            if (_local1){
                if ((((_local1.length > _local2.length)) && ((_local1.substr(0, _local2.length) == _local2)))){
                    _local2 = _local1;
                };
            };
            return (_local2);
        }
        public function get domainName():String{
            var _local1:String;
            var _local2:String;
            var _local3:int;
            if ((((protocol == Protocols.HTTP)) || ((protocol == Protocols.HTTPS)))){
                _local1 = _url.toLowerCase();
                if (protocol == Protocols.HTTP){
                    _local2 = _local1.split("http://").join("");
                } else {
                    if (protocol == Protocols.HTTPS){
                        _local2 = _local1.split("https://").join("");
                    };
                };
                _local3 = _local2.indexOf("/");
                if (_local3 > -1){
                    _local2 = _local2.substring(0, _local3);
                };
                return (_local2);
            };
            if (protocol == Protocols.file){
                return ("localhost");
            };
            return ("");
        }
        public function set userAgent(_arg1:UserAgent):void{
            _userAgent = _arg1;
        }
        public function set appVersion(_arg1:Version):void{
            _appVersion = _arg1;
            userAgent.applicationVersion = _arg1.toString(4);
        }
        public function get screenHeight():Number{
            return (Capabilities.screenResolutionY);
        }
        public function get locationPath():String{
            var _local1:String = _dom.pathname;
            if (_local1){
                return (_local1);
            };
            return ("");
        }
        public function get documentTitle():String{
            var _local1:String = _dom.title;
            if (_local1){
                return (_local1);
            };
            return ("");
        }
        public function get appVersion():Version{
            return (_appVersion);
        }

    }
}//package com.google.analytics.utils 
﻿package com.google.analytics.debug {

    public class Margin {

        public var top:int;
        public var left:int;
        public var bottom:int;
        public var right:int;

        public function Margin(_arg1:int=0, _arg2:int=0, _arg3:int=0, _arg4:int=0){
            this.top = _arg1;
            this.bottom = _arg2;
            this.left = _arg3;
            this.right = _arg4;
        }
    }
}//package com.google.analytics.debug 
﻿package com.google.analytics.debug {
    import flash.net.*;
    import flash.utils.*;
    import com.google.analytics.core.*;
    import flash.ui.*;

    public class DebugConfiguration {

        public var showHideKey:Number;
        private var _mode:VisualDebugMode;
        private var _verbose:Boolean = false;
        public var destroyKey:Number;
        public var GIFRequests:Boolean = false;
        public var showInfos:Boolean = true;
        public var infoTimeout:Number = 1000;
        public var minimizedOnStart:Boolean = false;
        private var _active:Boolean = false;
        public var traceOutput:Boolean = false;
        public var layout:ILayout;
        public var warningTimeout:Number = 1500;
        public var javascript:Boolean = false;
        public var showWarnings:Boolean = true;
        private var _visualInitialized:Boolean = false;

        public function DebugConfiguration(){
            _mode = VisualDebugMode.basic;
            showHideKey = Keyboard.SPACE;
            destroyKey = Keyboard.BACKSPACE;
            super();
        }
        public function get verbose():Boolean{
            return (_verbose);
        }
        public function set verbose(_arg1:Boolean):void{
            _verbose = _arg1;
        }
        public function set mode(_arg1):void{
            if ((_arg1 is String)){
                switch (_arg1){
                    case "geek":
                        _arg1 = VisualDebugMode.geek;
                        break;
                    case "advanced":
                        _arg1 = VisualDebugMode.advanced;
                        break;
                    case "basic":
                    default:
                        _arg1 = VisualDebugMode.basic;
                };
            };
            _mode = _arg1;
        }
        public function success(_arg1:String):void{
            if (layout){
                layout.createSuccessAlert(_arg1);
            };
            if (traceOutput){
                trace((("[+] " + _arg1) + " !!"));
            };
        }
        public function get active():Boolean{
            return (_active);
        }
        private function _initializeVisual():void{
            if (layout){
                layout.init();
                _visualInitialized = true;
            };
        }
        private function _destroyVisual():void{
            if (((layout) && (_visualInitialized))){
                layout.destroy();
            };
        }
        public function warning(_arg1:String, _arg2:VisualDebugMode=null):void{
            if (_filter(_arg2)){
                return;
            };
            if (((layout) && (showWarnings))){
                layout.createWarning(_arg1);
            };
            if (traceOutput){
                trace((("## " + _arg1) + " ##"));
            };
        }
        private function _filter(_arg1:VisualDebugMode=null):Boolean{
            return (((_arg1) && ((int(_arg1) >= int(this.mode)))));
        }
        public function failure(_arg1:String):void{
            if (layout){
                layout.createFailureAlert(_arg1);
            };
            if (traceOutput){
                trace((("[-] " + _arg1) + " !!"));
            };
        }
        public function get mode(){
            return (_mode);
        }
        public function set active(_arg1:Boolean):void{
            _active = _arg1;
            if (_active){
                _initializeVisual();
            } else {
                _destroyVisual();
            };
        }
        protected function trace(_arg1:String):void{
            var _local7:Array;
            var _local8:int;
            var _local2:Array = [];
            var _local3 = "";
            var _local4 = "";
            if (this.mode == VisualDebugMode.geek){
                _local3 = (getTimer() + " - ");
                _local4 = (new Array(_local3.length).join(" ") + " ");
            };
            if (_arg1.indexOf("\n") > -1){
                _local7 = _arg1.split("\n");
                _local8 = 0;
                while (_local8 < _local7.length) {
                    if (_local7[_local8] == ""){
                    } else {
                        if (_local8 == 0){
                            _local2.push((_local3 + _local7[_local8]));
                        } else {
                            _local2.push((_local4 + _local7[_local8]));
                        };
                    };
                    _local8++;
                };
            } else {
                _local2.push((_local3 + _arg1));
            };
            var _local5:int = _local2.length;
            var _local6:int;
            while (_local6 < _local5) {
                trace(_local2[_local6]);
                _local6++;
            };
        }
        public function alert(_arg1:String):void{
            if (layout){
                layout.createAlert(_arg1);
            };
            if (traceOutput){
                trace((("!! " + _arg1) + " !!"));
            };
        }
        public function info(_arg1:String, _arg2:VisualDebugMode=null):void{
            if (_filter(_arg2)){
                return;
            };
            if (((layout) && (showInfos))){
                layout.createInfo(_arg1);
            };
            if (traceOutput){
                trace(_arg1);
            };
        }
        public function alertGifRequest(_arg1:String, _arg2:URLRequest, _arg3:GIFRequest):void{
            if (layout){
                layout.createGIFRequestAlert(_arg1, _arg2, _arg3);
            };
            if (traceOutput){
                trace(((">> " + _arg1) + " <<"));
            };
        }

    }
}//package com.google.analytics.debug 
﻿package com.google.analytics.debug {

    public class Align {

        public static const bottomRight:Align = new Align(18, "bottomRight");
;
        public static const right:Align = new Align(16, "right");
;
        public static const left:Align = new Align(32, "left");
;
        public static const topRight:Align = new Align(17, "topRight");
;
        public static const bottom:Align = new Align(2, "bottom");
;
        public static const bottomLeft:Align = new Align(34, "bottomLeft");
;
        public static const topLeft:Align = new Align(33, "topLeft");
;
        public static const center:Align = new Align(0x0100, "center");
;
        public static const none:Align = new Align(0, "none");
;
        public static const top:Align = new Align(1, "top");
;

        private var _value:int;
        private var _name:String;

        public function Align(_arg1:int=0, _arg2:String=""){
            _value = _arg1;
            _name = _arg2;
        }
        public function valueOf():int{
            return (_value);
        }
        public function toString():String{
            return (_name);
        }

    }
}//package com.google.analytics.debug 
﻿package com.google.analytics.debug {

    public const Style:_Style = new _Style();
}//package com.google.analytics.debug 
﻿package com.google.analytics.debug {
    import flash.events.*;
    import flash.utils.*;

    public class Warning extends Label {

        private var _timer:Timer;

        public function Warning(_arg1:String="", _arg2:uint=3000){
            super(_arg1, "uiWarning", Style.warningColor, Align.top, false);
            margin.top = 32;
            if (_arg2 > 0){
                _timer = new Timer(_arg2, 1);
                _timer.start();
                _timer.addEventListener(TimerEvent.TIMER_COMPLETE, onComplete, false, 0, true);
            };
        }
        public function close():void{
            if (parent != null){
                parent.removeChild(this);
            };
        }
        override public function onLink(_arg1:TextEvent):void{
            switch (_arg1.text){
                case "hide":
                    close();
                    break;
            };
        }
        public function onComplete(_arg1:TimerEvent):void{
            close();
        }

    }
}//package com.google.analytics.debug 
﻿package com.google.analytics.debug {
    import flash.display.*;
    import flash.text.*;
    import flash.events.*;

    public class Label extends UISprite {

        public static var count:uint = 0;

        private var _color:uint;
        private var _background:Shape;
        private var _textField:TextField;
        public var stickToEdge:Boolean;
        private var _text:String;
        protected var selectable:Boolean;
        private var _tag:String;

        public function Label(_arg1:String="", _arg2:String="uiLabel", _arg3:uint=0, _arg4:Align=null, _arg5:Boolean=false){
            this.name = ("Label" + count++);
            selectable = false;
            _background = new Shape();
            _textField = new TextField();
            _text = _arg1;
            _tag = _arg2;
            if (_arg4 == null){
                _arg4 = Align.none;
            };
            this.alignement = _arg4;
            this.stickToEdge = _arg5;
            if (_arg3 == 0){
                _arg3 = Style.backgroundColor;
            };
            _color = _arg3;
            _textField.addEventListener(TextEvent.LINK, onLink);
        }
        public function get tag():String{
            return (_tag);
        }
        private function _draw():void{
            var _local1:Graphics = _background.graphics;
            _local1.clear();
            _local1.beginFill(_color);
            var _local2:uint = _textField.width;
            var _local3:uint = _textField.height;
            if (forcedWidth > 0){
                _local2 = forcedWidth;
            };
            Background.drawRounded(this, _local1, _local2, _local3);
            _local1.endFill();
        }
        public function get text():String{
            return (_textField.text);
        }
        public function appendText(_arg1:String, _arg2:String=""):void{
            if (_arg1 == ""){
                return;
            };
            if (_arg2 == ""){
                _arg2 = tag;
            };
            _textField.htmlText = (_textField.htmlText + (((("<span class=\"" + _arg2) + "\">") + _arg1) + "</span>"));
            _text = (_text + _arg1);
            _draw();
            resize();
        }
        public function set text(_arg1:String):void{
            if (_arg1 == ""){
                _arg1 = _text;
            };
            _textField.htmlText = (((("<span class=\"" + tag) + "\">") + _arg1) + "</span>");
            _text = _arg1;
            _draw();
            resize();
        }
        override protected function layout():void{
            _textField.type = TextFieldType.DYNAMIC;
            _textField.autoSize = TextFieldAutoSize.LEFT;
            _textField.background = false;
            _textField.selectable = selectable;
            _textField.multiline = true;
            _textField.styleSheet = Style.sheet;
            this.text = _text;
            addChild(_background);
            addChild(_textField);
        }
        public function set tag(_arg1:String):void{
            _tag = _arg1;
            text = "";
        }
        public function onLink(_arg1:TextEvent):void{
        }
        override protected function dispose():void{
            _textField.removeEventListener(TextEvent.LINK, onLink);
            super.dispose();
        }

    }
}//package com.google.analytics.debug 
﻿package com.google.analytics.debug {
    import flash.display.*;

    public class Background {

        public static function drawRounded(_arg1, _arg2:Graphics, _arg3:uint=0, _arg4:uint=0):void{
            var _local5:uint;
            var _local6:uint;
            var _local7:uint = Style.roundedCorner;
            if ((((_arg3 > 0)) && ((_arg4 > 0)))){
                _local5 = _arg3;
                _local6 = _arg4;
            } else {
                _local5 = _arg1.width;
                _local6 = _arg1.height;
            };
            if (((_arg1.stickToEdge) && (!((_arg1.alignement == Align.none))))){
                switch (_arg1.alignement){
                    case Align.top:
                        _arg2.drawRoundRectComplex(0, 0, _local5, _local6, 0, 0, _local7, _local7);
                        break;
                    case Align.topLeft:
                        _arg2.drawRoundRectComplex(0, 0, _local5, _local6, 0, 0, 0, _local7);
                        break;
                    case Align.topRight:
                        _arg2.drawRoundRectComplex(0, 0, _local5, _local6, 0, 0, _local7, 0);
                        break;
                    case Align.bottom:
                        _arg2.drawRoundRectComplex(0, 0, _local5, _local6, _local7, _local7, 0, 0);
                        break;
                    case Align.bottomLeft:
                        _arg2.drawRoundRectComplex(0, 0, _local5, _local6, 0, _local7, 0, 0);
                        break;
                    case Align.bottomRight:
                        _arg2.drawRoundRectComplex(0, 0, _local5, _local6, _local7, 0, 0, 0);
                        break;
                    case Align.left:
                        _arg2.drawRoundRectComplex(0, 0, _local5, _local6, 0, _local7, 0, _local7);
                        break;
                    case Align.right:
                        _arg2.drawRoundRectComplex(0, 0, _local5, _local6, _local7, 0, _local7, 0);
                        break;
                    case Align.center:
                        _arg2.drawRoundRect(0, 0, _local5, _local6, _local7, _local7);
                        break;
                };
            } else {
                _arg2.drawRoundRect(0, 0, _local5, _local6, _local7, _local7);
            };
        }

    }
}//package com.google.analytics.debug 
﻿package com.google.analytics.debug {

    public class GIFRequestAlert extends Alert {

        public function GIFRequestAlert(_arg1:String, _arg2:Array){
            super(_arg1, _arg2);
        }
    }
}//package com.google.analytics.debug 
﻿package com.google.analytics.debug {
    import flash.display.*;
    import flash.events.*;

    public class Panel extends UISprite {

        private var _savedH:uint;
        private var _data:UISprite;
        private var _mask:Sprite;
        private var _background:Shape;
        private var _savedW:uint;
        private var _stickToEdge:Boolean;
        private var _border:Shape;
        private var _borderColor:uint;
        protected var baseAlpha:Number;
        private var _backgroundColor:uint;
        private var _title:Label;
        private var _colapsed:Boolean;
        private var _name:String;

        public function Panel(_arg1:String, _arg2:uint, _arg3:uint, _arg4:uint=0, _arg5:uint=0, _arg6:Number=0.3, _arg7:Align=null, _arg8:Boolean=false){
            _name = _arg1;
            this.name = _arg1;
            this.mouseEnabled = false;
            _colapsed = false;
            forcedWidth = _arg2;
            forcedHeight = _arg3;
            this.baseAlpha = _arg6;
            _background = new Shape();
            _data = new UISprite();
            _data.forcedWidth = _arg2;
            _data.forcedHeight = _arg3;
            _data.mouseEnabled = false;
            _title = new Label(_arg1, "uiLabel", 0xFFFFFF, Align.topLeft, _arg8);
            _title.buttonMode = true;
            _title.margin.top = 0.6;
            _title.margin.left = 0.6;
            _title.addEventListener(MouseEvent.CLICK, onToggle);
            _title.mouseChildren = false;
            _border = new Shape();
            _mask = new Sprite();
            _mask.useHandCursor = false;
            _mask.mouseEnabled = false;
            _mask.mouseChildren = false;
            if (_arg7 == null){
                _arg7 = Align.none;
            };
            this.alignement = _arg7;
            this.stickToEdge = _arg8;
            if (_arg4 == 0){
                _arg4 = Style.backgroundColor;
            };
            _backgroundColor = _arg4;
            if (_arg5 == 0){
                _arg5 = Style.borderColor;
            };
            _borderColor = _arg5;
        }
        public function get stickToEdge():Boolean{
            return (_stickToEdge);
        }
        public function onToggle(_arg1:MouseEvent=null):void{
            if (_colapsed){
                _data.visible = true;
            } else {
                _data.visible = false;
            };
            _colapsed = !(_colapsed);
            _update();
            resize();
        }
        public function set stickToEdge(_arg1:Boolean):void{
            _stickToEdge = _arg1;
            _title.stickToEdge = _arg1;
        }
        override protected function dispose():void{
            _title.removeEventListener(MouseEvent.CLICK, onToggle);
            super.dispose();
        }
        private function _draw():void{
            var _local1:uint;
            var _local2:uint;
            if (((_savedW) && (_savedH))){
                forcedWidth = _savedW;
                forcedHeight = _savedH;
            };
            if (!_colapsed){
                _local1 = forcedWidth;
                _local2 = forcedHeight;
            } else {
                _local1 = _title.width;
                _local2 = _title.height;
                _savedW = forcedWidth;
                _savedH = forcedHeight;
                forcedWidth = _local1;
                forcedHeight = _local2;
            };
            var _local3:Graphics = _background.graphics;
            _local3.clear();
            _local3.beginFill(_backgroundColor);
            Background.drawRounded(this, _local3, _local1, _local2);
            _local3.endFill();
            var _local4:Graphics = _data.graphics;
            _local4.clear();
            _local4.beginFill(_backgroundColor, 0);
            Background.drawRounded(this, _local4, _local1, _local2);
            _local4.endFill();
            var _local5:Graphics = _border.graphics;
            _local5.clear();
            _local5.lineStyle(0.1, _borderColor);
            Background.drawRounded(this, _local5, _local1, _local2);
            _local5.endFill();
            var _local6:Graphics = _mask.graphics;
            _local6.clear();
            _local6.beginFill(_backgroundColor);
            Background.drawRounded(this, _local6, (_local1 + 1), (_local2 + 1));
            _local6.endFill();
        }
        public function get title():String{
            return (_title.text);
        }
        private function _update():void{
            _draw();
            if (baseAlpha < 1){
                _background.alpha = baseAlpha;
                _border.alpha = baseAlpha;
            };
        }
        public function addData(_arg1:DisplayObject):void{
            _data.addChild(_arg1);
        }
        override protected function layout():void{
            _update();
            addChild(_background);
            addChild(_data);
            addChild(_title);
            addChild(_border);
            addChild(_mask);
            mask = _mask;
        }
        public function set title(_arg1:String):void{
            _title.text = _arg1;
        }
        public function close():void{
            dispose();
            if (parent != null){
                parent.removeChild(this);
            };
        }

    }
}//package com.google.analytics.debug 
﻿package com.google.analytics.debug {
    import flash.display.*;
    import flash.net.*;
    import com.google.analytics.core.*;

    public interface ILayout {

        function createAlert(_arg1:String):void;
        function addToStage(_arg1:DisplayObject):void;
        function createGIFRequestAlert(_arg1:String, _arg2:URLRequest, _arg3:GIFRequest):void;
        function createWarning(_arg1:String):void;
        function createPanel(_arg1:String, _arg2:uint, _arg3:uint):void;
        function createInfo(_arg1:String):void;
        function createFailureAlert(_arg1:String):void;
        function addToPanel(_arg1:String, _arg2:DisplayObject):void;
        function init():void;
        function createSuccessAlert(_arg1:String):void;
        function createVisualDebug():void;
        function destroy():void;
        function bringToFront(_arg1:DisplayObject):void;
        function isAvailable():Boolean;

    }
}//package com.google.analytics.debug 
﻿package com.google.analytics.debug {
    import flash.display.*;
    import flash.events.*;

    public class UISprite extends Sprite {

        private var _forcedWidth:uint;
        public var margin:Margin;
        protected var alignTarget:DisplayObject;
        protected var listenResize:Boolean;
        public var alignement:Align;
        private var _forcedHeight:uint;

        public function UISprite(_arg1:DisplayObject=null){
            listenResize = false;
            alignement = Align.none;
            this.alignTarget = _arg1;
            margin = new Margin();
            addEventListener(Event.ADDED_TO_STAGE, _onAddedToStage);
            addEventListener(Event.REMOVED_FROM_STAGE, _onRemovedFromStage);
        }
        public function get forcedHeight():uint{
            if (_forcedHeight){
                return (_forcedHeight);
            };
            return (height);
        }
        private function _onAddedToStage(_arg1:Event):void{
            layout();
            resize();
        }
        protected function dispose():void{
            var _local1:DisplayObject;
            var _local2:int;
            while (_local2 < numChildren) {
                _local1 = getChildAt(_local2);
                if (_local1){
                    removeChild(_local1);
                };
                _local2++;
            };
        }
        public function set forcedHeight(_arg1:uint):void{
            _forcedHeight = _arg1;
        }
        public function set forcedWidth(_arg1:uint):void{
            _forcedWidth = _arg1;
        }
        protected function layout():void{
        }
        public function get forcedWidth():uint{
            if (_forcedWidth){
                return (_forcedWidth);
            };
            return (width);
        }
        public function alignTo(_arg1:Align, _arg2:DisplayObject=null):void{
            var _local3:uint;
            var _local4:uint;
            var _local5:uint;
            var _local6:uint;
            var _local7:UISprite;
            if (_arg2 == null){
                if ((parent is Stage)){
                    _arg2 = this.stage;
                } else {
                    _arg2 = parent;
                };
            };
            if (_arg2 == this.stage){
                if (this.stage == null){
                    return;
                };
                _local3 = this.stage.stageHeight;
                _local4 = this.stage.stageWidth;
                _local5 = 0;
                _local6 = 0;
            } else {
                _local7 = (_arg2 as UISprite);
                if (_local7.forcedHeight){
                    _local3 = _local7.forcedHeight;
                } else {
                    _local3 = _local7.height;
                };
                if (_local7.forcedWidth){
                    _local4 = _local7.forcedWidth;
                } else {
                    _local4 = _local7.width;
                };
                _local5 = 0;
                _local6 = 0;
            };
            switch (_arg1){
                case Align.top:
                    x = ((_local4 / 2) - (forcedWidth / 2));
                    y = (_local6 + margin.top);
                    break;
                case Align.bottom:
                    x = ((_local4 / 2) - (forcedWidth / 2));
                    y = (((_local6 + _local3) - forcedHeight) - margin.bottom);
                    break;
                case Align.left:
                    x = (_local5 + margin.left);
                    y = ((_local3 / 2) - (forcedHeight / 2));
                    break;
                case Align.right:
                    x = (((_local5 + _local4) - forcedWidth) - margin.right);
                    y = ((_local3 / 2) - (forcedHeight / 2));
                    break;
                case Align.center:
                    x = ((_local4 / 2) - (forcedWidth / 2));
                    y = ((_local3 / 2) - (forcedHeight / 2));
                    break;
                case Align.topLeft:
                    x = (_local5 + margin.left);
                    y = (_local6 + margin.top);
                    break;
                case Align.topRight:
                    x = (((_local5 + _local4) - forcedWidth) - margin.right);
                    y = (_local6 + margin.top);
                    break;
                case Align.bottomLeft:
                    x = (_local5 + margin.left);
                    y = (((_local6 + _local3) - forcedHeight) - margin.bottom);
                    break;
                case Align.bottomRight:
                    x = (((_local5 + _local4) - forcedWidth) - margin.right);
                    y = (((_local6 + _local3) - forcedHeight) - margin.bottom);
                    break;
            };
            if (((!(listenResize)) && (!((_arg1 == Align.none))))){
                _arg2.addEventListener(Event.RESIZE, onResize, false, 0, true);
                listenResize = true;
            };
            this.alignement = _arg1;
            this.alignTarget = _arg2;
        }
        private function _onRemovedFromStage(_arg1:Event):void{
            removeEventListener(Event.ADDED_TO_STAGE, _onAddedToStage);
            removeEventListener(Event.REMOVED_FROM_STAGE, _onRemovedFromStage);
            dispose();
        }
        public function resize():void{
            if (alignement != Align.none){
                alignTo(alignement, alignTarget);
            };
        }
        protected function onResize(_arg1:Event):void{
            resize();
        }

    }
}//package com.google.analytics.debug 
﻿package com.google.analytics.debug {
    import flash.text.*;
    import flash.net.*;

    public class _Style {

        public var failureColor:uint;
        public var borderColor:uint;
        public var backgroundColor:uint;
        private var _sheet:StyleSheet;
        public var roundedCorner:uint;
        public var warningColor:uint;
        public var infoColor:uint;
        public var alertColor:uint;
        public var successColor:uint;
        private var _loader:URLLoader;
        private var _defaultSheet:String;

        public function _Style(){
            _sheet = new StyleSheet();
            _loader = new URLLoader();
            _init();
        }
        private function _parseSheet(_arg1:String):void{
            _sheet.parseCSS(_arg1);
        }
        public function get sheet():StyleSheet{
            return (_sheet);
        }
        private function _init():void{
            _defaultSheet = "";
            _defaultSheet = (_defaultSheet + "a{text-decoration: underline;}\n");
            _defaultSheet = (_defaultSheet + ".uiLabel{color: #000000;font-family: Arial;font-size: 12;margin-left: 2;margin-right: 2;}\n");
            _defaultSheet = (_defaultSheet + ".uiWarning{color: #ffffff;font-family: Arial;font-size: 14;font-weight: bold;margin-left: 6;margin-right: 6;}\n");
            _defaultSheet = (_defaultSheet + ".uiAlert{color: #ffffff;font-family: Arial;font-size: 14;font-weight: bold;margin-left: 6;margin-right: 6;}\n");
            _defaultSheet = (_defaultSheet + ".uiInfo{color: #000000;font-family: Arial;font-size: 14;font-weight: bold;margin-left: 6;margin-right: 6;}\n");
            _defaultSheet = (_defaultSheet + ".uiSuccess{color: #ffffff;font-family: Arial;font-size: 12;font-weight: bold;margin-left: 6;margin-right: 6;}\n");
            _defaultSheet = (_defaultSheet + ".uiFailure{color: #ffffff;font-family: Arial;font-size: 12;font-weight: bold;margin-left: 6;margin-right: 6;}\n");
            _defaultSheet = (_defaultSheet + ".uiAlertAction{color: #ffffff;text-align: center;font-family: Arial;font-size: 12;font-weight: bold;margin-left: 6;margin-right: 6;}\n");
            _defaultSheet = (_defaultSheet + ".uiAlertTitle{color: #ffffff;font-family: Arial;font-size: 16;font-weight: bold;margin-left: 6;margin-right: 6;}\n");
            _defaultSheet = (_defaultSheet + "\n");
            roundedCorner = 6;
            backgroundColor = 0xCCCCCC;
            borderColor = 0x555555;
            infoColor = 16777113;
            alertColor = 0xFFCC00;
            warningColor = 0xCC0000;
            successColor = 0xFF00;
            failureColor = 0xFF0000;
            _parseSheet(_defaultSheet);
        }

    }
}//package com.google.analytics.debug 
﻿package com.google.analytics.debug {

    public class AlertAction {

        public var container:Alert;
        private var _callback;
        public var activator:String;
        public var name:String;

        public function AlertAction(_arg1:String, _arg2:String, _arg3){
            this.name = _arg1;
            this.activator = _arg2;
            _callback = _arg3;
        }
        public function execute():void{
            if (_callback){
                if ((_callback is Function)){
                    (_callback as Function)();
                } else {
                    if ((_callback is String)){
                        var _local1 = container;
                        _local1[_callback]();
                    };
                };
            };
        }

    }
}//package com.google.analytics.debug 
﻿package com.google.analytics.debug {

    public class FailureAlert extends Alert {

        public function FailureAlert(_arg1:DebugConfiguration, _arg2:String, _arg3:Array){
            var _local4:Align = Align.bottomLeft;
            var _local5:Boolean;
            var _local6:Boolean;
            if (_arg1.verbose){
                _arg2 = ((("<u><span class=\"uiAlertTitle\">Failure</span>" + spaces(18)) + "</u>\n\n") + _arg2);
                _local4 = Align.center;
                _local5 = false;
                _local6 = true;
            };
            super(_arg2, _arg3, "uiFailure", Style.failureColor, _local4, _local5, _local6);
        }
    }
}//package com.google.analytics.debug 
﻿package com.google.analytics.debug {

    public class SuccessAlert extends Alert {

        public function SuccessAlert(_arg1:DebugConfiguration, _arg2:String, _arg3:Array){
            var _local4:Align = Align.bottomLeft;
            var _local5:Boolean;
            var _local6:Boolean;
            if (_arg1.verbose){
                _arg2 = ((("<u><span class=\"uiAlertTitle\">Success</span>" + spaces(18)) + "</u>\n\n") + _arg2);
                _local4 = Align.center;
                _local5 = false;
                _local6 = true;
            };
            super(_arg2, _arg3, "uiSuccess", Style.successColor, _local4, _local5, _local6);
        }
    }
}//package com.google.analytics.debug 
﻿package com.google.analytics.debug {
    import flash.display.*;
    import flash.events.*;
    import flash.net.*;
    import com.google.analytics.core.*;
    import com.google.analytics.*;

    public class Layout implements ILayout {

        private var _display:DisplayObject;
        private var _infoQueue:Array;
        private var _maxCharPerLine:int = 85;
        private var _hasInfo:Boolean;
        private var _warningQueue:Array;
        private var _hasDebug:Boolean;
        private var _hasWarning:Boolean;
        private var _mainPanel:Panel;
        private var _GRAlertQueue:Array;
        private var _debug:DebugConfiguration;
        public var visualDebug:Debug;
        private var _hasGRAlert:Boolean;

        public function Layout(_arg1:DebugConfiguration, _arg2:DisplayObject){
            _display = _arg2;
            _debug = _arg1;
            _hasWarning = false;
            _hasInfo = false;
            _hasDebug = false;
            _hasGRAlert = false;
            _warningQueue = [];
            _infoQueue = [];
            _GRAlertQueue = [];
        }
        private function onKey(_arg1:KeyboardEvent=null):void{
            switch (_arg1.keyCode){
                case _debug.showHideKey:
                    _mainPanel.visible = !(_mainPanel.visible);
                    break;
                case _debug.destroyKey:
                    destroy();
                    break;
            };
        }
        public function createWarning(_arg1:String):void{
            if (((_hasWarning) || (!(isAvailable())))){
                _warningQueue.push(_arg1);
                return;
            };
            _arg1 = _filterMaxChars(_arg1);
            _hasWarning = true;
            var _local2:Warning = new Warning(_arg1, _debug.warningTimeout);
            addToPanel("analytics", _local2);
            _local2.addEventListener(Event.REMOVED_FROM_STAGE, _clearWarning, false, 0, true);
            if (_hasDebug){
                visualDebug.writeBold(_arg1);
            };
        }
        public function bringToFront(_arg1:DisplayObject):void{
            _display.stage.setChildIndex(_arg1, (_display.stage.numChildren - 1));
        }
        public function createFailureAlert(_arg1:String):void{
            var _local2:AlertAction;
            if (_debug.verbose){
                _arg1 = _filterMaxChars(_arg1);
                _local2 = new AlertAction("Close", "close", "close");
            } else {
                _local2 = new AlertAction("X", "close", "close");
            };
            var _local3:Alert = new FailureAlert(_debug, _arg1, [_local2]);
            addToPanel("analytics", _local3);
            if (_hasDebug){
                if (_debug.verbose){
                    _arg1 = _arg1.split("\n").join("");
                    _arg1 = _filterMaxChars(_arg1, 66);
                };
                visualDebug.writeBold(_arg1);
            };
        }
        public function init():void{
            var _local1 = 10;
            var _local2:uint = (_display.stage.stageWidth - (_local1 * 2));
            var _local3:uint = (_display.stage.stageHeight - (_local1 * 2));
            var _local4:Panel = new Panel("analytics", _local2, _local3);
            _local4.alignement = Align.top;
            _local4.stickToEdge = false;
            _local4.title = ("Google Analytics v" + GATracker.version);
            _mainPanel = _local4;
            addToStage(_local4);
            bringToFront(_local4);
            if (_debug.minimizedOnStart){
                _mainPanel.onToggle();
            };
            createVisualDebug();
            _display.stage.addEventListener(KeyboardEvent.KEY_DOWN, onKey, false, 0, true);
        }
        public function addToPanel(_arg1:String, _arg2:DisplayObject):void{
            var _local4:Panel;
            var _local3:DisplayObject = _display.stage.getChildByName(_arg1);
            if (_local3){
                _local4 = (_local3 as Panel);
                _local4.addData(_arg2);
            } else {
                trace((("panel \"" + _arg1) + "\" not found"));
            };
        }
        private function _clearInfo(_arg1:Event):void{
            _hasInfo = false;
            if (_infoQueue.length > 0){
                createInfo(_infoQueue.shift());
            };
        }
        private function _filterMaxChars(_arg1:String, _arg2:int=0):String{
            var _local6:String;
            var _local3 = "\n";
            var _local4:Array = [];
            var _local5:Array = _arg1.split(_local3);
            if (_arg2 == 0){
                _arg2 = _maxCharPerLine;
            };
            var _local7:int;
            while (_local7 < _local5.length) {
                _local6 = _local5[_local7];
                while (_local6.length > _arg2) {
                    _local4.push(_local6.substr(0, _arg2));
                    _local6 = _local6.substring(_arg2);
                };
                _local4.push(_local6);
                _local7++;
            };
            return (_local4.join(_local3));
        }
        private function _clearGRAlert(_arg1:Event):void{
            _hasGRAlert = false;
            if (_GRAlertQueue.length > 0){
                createGIFRequestAlert.apply(this, _GRAlertQueue.shift());
            };
        }
        public function createSuccessAlert(_arg1:String):void{
            var _local2:AlertAction;
            if (_debug.verbose){
                _arg1 = _filterMaxChars(_arg1);
                _local2 = new AlertAction("Close", "close", "close");
            } else {
                _local2 = new AlertAction("X", "close", "close");
            };
            var _local3:Alert = new SuccessAlert(_debug, _arg1, [_local2]);
            addToPanel("analytics", _local3);
            if (_hasDebug){
                if (_debug.verbose){
                    _arg1 = _arg1.split("\n").join("");
                    _arg1 = _filterMaxChars(_arg1, 66);
                };
                visualDebug.writeBold(_arg1);
            };
        }
        public function isAvailable():Boolean{
            return (!((_display.stage == null)));
        }
        public function createAlert(_arg1:String):void{
            _arg1 = _filterMaxChars(_arg1);
            var _local2:Alert = new Alert(_arg1, [new AlertAction("Close", "close", "close")]);
            addToPanel("analytics", _local2);
            if (_hasDebug){
                visualDebug.writeBold(_arg1);
            };
        }
        public function createInfo(_arg1:String):void{
            if (((_hasInfo) || (!(isAvailable())))){
                _infoQueue.push(_arg1);
                return;
            };
            _arg1 = _filterMaxChars(_arg1);
            _hasInfo = true;
            var _local2:Info = new Info(_arg1, _debug.infoTimeout);
            addToPanel("analytics", _local2);
            _local2.addEventListener(Event.REMOVED_FROM_STAGE, _clearInfo, false, 0, true);
            if (_hasDebug){
                visualDebug.write(_arg1);
            };
        }
        public function createGIFRequestAlert(_arg1:String, _arg2:URLRequest, _arg3:GIFRequest):void{
            var message:* = _arg1;
            var request:* = _arg2;
            var ref:* = _arg3;
            if (_hasGRAlert){
                _GRAlertQueue.push([message, request, ref]);
                return;
            };
            _hasGRAlert = true;
            var f:* = function ():void{
                ref.sendRequest(request);
            };
            message = _filterMaxChars(message);
            var gra:* = new GIFRequestAlert(message, [new AlertAction("OK", "ok", f), new AlertAction("Cancel", "cancel", "close")]);
            addToPanel("analytics", gra);
            gra.addEventListener(Event.REMOVED_FROM_STAGE, _clearGRAlert, false, 0, true);
            if (_hasDebug){
                if (_debug.verbose){
                    message = message.split("\n").join("");
                    message = _filterMaxChars(message, 66);
                };
                visualDebug.write(message);
            };
        }
        public function createVisualDebug():void{
            if (!visualDebug){
                visualDebug = new Debug();
                visualDebug.alignement = Align.bottom;
                visualDebug.stickToEdge = true;
                addToPanel("analytics", visualDebug);
                _hasDebug = true;
            };
        }
        public function addToStage(_arg1:DisplayObject):void{
            _display.stage.addChild(_arg1);
        }
        private function _clearWarning(_arg1:Event):void{
            _hasWarning = false;
            if (_warningQueue.length > 0){
                createWarning(_warningQueue.shift());
            };
        }
        public function createPanel(_arg1:String, _arg2:uint, _arg3:uint):void{
            var _local4:Panel = new Panel(_arg1, _arg2, _arg3);
            _local4.alignement = Align.center;
            _local4.stickToEdge = false;
            addToStage(_local4);
            bringToFront(_local4);
        }
        public function destroy():void{
            _mainPanel.close();
            _debug.layout = null;
        }

    }
}//package com.google.analytics.debug 
﻿package com.google.analytics.debug {
    import flash.events.*;
    import flash.ui.*;

    public class Debug extends Label {

        public static var count:uint = 0;

        private var _lines:Array;
        private var _preferredForcedWidth:uint = 540;
        private var _linediff:int = 0;
        public var maxLines:uint = 16;

        public function Debug(_arg1:uint=0, _arg2:Align=null, _arg3:Boolean=false){
            if (_arg2 == null){
                _arg2 = Align.bottom;
            };
            super("", "uiLabel", _arg1, _arg2, _arg3);
            this.name = ("Debug" + count++);
            _lines = [];
            selectable = true;
            addEventListener(KeyboardEvent.KEY_DOWN, onKey);
        }
        public function writeBold(_arg1:String):void{
            write(_arg1, true);
        }
        private function _getLinesToDisplay(_arg1:int=0):Array{
            var _local2:Array;
            var _local3:uint;
            var _local4:uint;
            if ((_lines.length - 1) > maxLines){
                if ((_linediff <= 0)){
                    _linediff = (_linediff + _arg1);
                } else {
                    if ((((_linediff > 0)) && ((_arg1 < 0)))){
                        _linediff = (_linediff + _arg1);
                    };
                };
                _local3 = ((_lines.length - maxLines) + _linediff);
                _local4 = (_local3 + maxLines);
                _local2 = _lines.slice(_local3, _local4);
            } else {
                _local2 = _lines;
            };
            return (_local2);
        }
        private function onKey(_arg1:KeyboardEvent=null):void{
            var _local2:Array;
            switch (_arg1.keyCode){
                case Keyboard.DOWN:
                    _local2 = _getLinesToDisplay(1);
                    break;
                case Keyboard.UP:
                    _local2 = _getLinesToDisplay(-1);
                    break;
                default:
                    _local2 = null;
            };
            if (_local2 == null){
                return;
            };
            text = _local2.join("\n");
        }
        override public function get forcedWidth():uint{
            if (this.parent){
                if (UISprite(this.parent).forcedWidth > _preferredForcedWidth){
                    return (_preferredForcedWidth);
                };
                return (UISprite(this.parent).forcedWidth);
            };
            return (super.forcedWidth);
        }
        public function write(_arg1:String, _arg2:Boolean=false):void{
            var _local3:Array;
            if (_arg1.indexOf("") > -1){
                _local3 = _arg1.split("\n");
            } else {
                _local3 = [_arg1];
            };
            var _local4 = "";
            var _local5 = "";
            if (_arg2){
                _local4 = "<b>";
                _local5 = "</b>";
            };
            var _local6:int;
            while (_local6 < _local3.length) {
                _lines.push(((_local4 + _local3[_local6]) + _local5));
                _local6++;
            };
            var _local7:Array = _getLinesToDisplay();
            text = _local7.join("\n");
        }
        public function close():void{
            dispose();
        }
        override protected function dispose():void{
            removeEventListener(KeyboardEvent.KEY_DOWN, onKey);
            super.dispose();
        }

    }
}//package com.google.analytics.debug 
﻿package com.google.analytics.debug {
    import flash.events.*;

    public class Alert extends Label {

        public var autoClose:Boolean = true;
        public var actionOnNextLine:Boolean = true;
        private var _actions:Array;

        public function Alert(_arg1:String, _arg2:Array, _arg3:String="uiAlert", _arg4:uint=0, _arg5:Align=null, _arg6:Boolean=false, _arg7:Boolean=true){
            if (_arg4 == 0){
                _arg4 = Style.alertColor;
            };
            if (_arg5 == null){
                _arg5 = Align.center;
            };
            super(_arg1, _arg3, _arg4, _arg5, _arg6);
            this.selectable = true;
            super.mouseChildren = true;
            this.buttonMode = true;
            this.mouseEnabled = true;
            this.useHandCursor = true;
            this.actionOnNextLine = _arg7;
            _actions = [];
            var _local8:int;
            while (_local8 < _arg2.length) {
                _arg2[_local8].container = this;
                _actions.push(_arg2[_local8]);
                _local8++;
            };
        }
        private function _defineActions():void{
            var _local3:AlertAction;
            var _local1 = "";
            if (actionOnNextLine){
                _local1 = (_local1 + "\n");
            } else {
                _local1 = (_local1 + " |");
            };
            _local1 = (_local1 + " ");
            var _local2:Array = [];
            var _local4:int;
            while (_local4 < _actions.length) {
                _local3 = _actions[_local4];
                _local2.push((((("<a href=\"event:" + _local3.activator) + "\">") + _local3.name) + "</a>"));
                _local4++;
            };
            _local1 = (_local1 + _local2.join(" | "));
            appendText(_local1, "uiAlertAction");
        }
        protected function isValidAction(_arg1:String):Boolean{
            var _local2:int;
            while (_local2 < _actions.length) {
                if (_arg1 == _actions[_local2].activator){
                    return (true);
                };
                _local2++;
            };
            return (false);
        }
        override protected function layout():void{
            super.layout();
            _defineActions();
        }
        protected function getAction(_arg1:String):AlertAction{
            var _local2:int;
            while (_local2 < _actions.length) {
                if (_arg1 == _actions[_local2].activator){
                    return (_actions[_local2]);
                };
                _local2++;
            };
            return (null);
        }
        protected function spaces(_arg1:int):String{
            var _local2 = "";
            var _local3 = "          ";
            var _local4:int;
            while (_local4 < (_arg1 + 1)) {
                _local2 = (_local2 + _local3);
                _local4++;
            };
            return (_local2);
        }
        override public function onLink(_arg1:TextEvent):void{
            var _local2:AlertAction;
            if (isValidAction(_arg1.text)){
                _local2 = getAction(_arg1.text);
                if (_local2){
                    _local2.execute();
                };
            };
            if (autoClose){
                close();
            };
        }
        public function close():void{
            if (parent != null){
                parent.removeChild(this);
            };
        }

    }
}//package com.google.analytics.debug 
﻿package com.google.analytics.debug {

    public class VisualDebugMode {

        public static const advanced:VisualDebugMode = new VisualDebugMode(1, "advanced");
;
        public static const geek:VisualDebugMode = new VisualDebugMode(2, "geek");
;
        public static const basic:VisualDebugMode = new VisualDebugMode(0, "basic");
;

        private var _value:int;
        private var _name:String;

        public function VisualDebugMode(_arg1:int=0, _arg2:String=""){
            _value = _arg1;
            _name = _arg2;
        }
        public function valueOf():int{
            return (_value);
        }
        public function toString():String{
            return (_name);
        }

    }
}//package com.google.analytics.debug 
﻿package com.google.analytics.debug {
    import flash.events.*;
    import flash.utils.*;

    public class Info extends Label {

        private var _timer:Timer;

        public function Info(_arg1:String="", _arg2:uint=3000){
            super(_arg1, "uiInfo", Style.infoColor, Align.top, true);
            if (_arg2 > 0){
                _timer = new Timer(_arg2, 1);
                _timer.start();
                _timer.addEventListener(TimerEvent.TIMER_COMPLETE, onComplete, false, 0, true);
            };
        }
        public function close():void{
            if (parent != null){
                parent.removeChild(this);
            };
        }
        override public function onLink(_arg1:TextEvent):void{
            switch (_arg1.text){
                case "hide":
                    close();
                    break;
            };
        }
        public function onComplete(_arg1:TimerEvent):void{
            close();
        }

    }
}//package com.google.analytics.debug 
﻿package {
    import flash.display.*;

    public dynamic class MarkerSymbol extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;
    import mb.data.*;
    import flash.text.*;
    import mb.*;
    import mb.table.*;
    import mb.styles.*;
    import mb.text.*;

    public class HomicidesTable {

        private static const TABLE_SPACING:int = 14;
        private static const CELL_HEIGHT:int = 17;
        private static const PERCENT:String = "pct";
        private static const COUNT:String = "count";
        private static const NORMALIZED_COUNT:String = "normalized";
        private static const DOT_WIDTH:int = 20;
        private static const LABEL_WIDTH:int = 80;
        private static const RACE_LABELS:Array = ["Black", "Hispanic", "White", "Asian"];
        private static const AGE_LABELS:Array = ["Under 18", "18-24", "25-34", "35-44", "45-54", "55 up"];
        private static const SEX_LABELS:Array = ["Male", "Female"];
        private static const DAYTIME_LABELS:Array = ["Night", "Day"];
        private static const WEAPON_LABELS:Array = ["Firearm", "Knife", "Blunt object", "Other"];
        private static const BORO_LABELS:Array = ["Brooklyn", "The Bronx", "Manhattan", "Queens", "Staten I."];

        private var _incidents_data:PointDataTable;
        private var _victims_data:DataTable;
        private var _perps_data:DataTable;
        private var _titleStyle:TextCellStyle;
        private var _titleCellSize:CellSize;
        private var _keyTitleStyle:TextCellStyle;
        private var _keyTitleCellSize:CellSize;
        private var _barStyle:BarCellStyle;
        private var _greyBarStyle:BarCellStyle;
        private var _barCellSize:CellSize;
        private var _tailStyle:TextCellStyle;
        private var _tailCellSize:CellSize;
        private var _defaultLabelStyle:TextCellStyle;
        private var _countDataStyle:TextCellStyle;
        private var _pctDataStyle:TextCellStyle;
        private var _defaultLabelSize:CellSize;
        private var _countDataSize:CellSize;
        private var _pctDataSize:CellSize;
        private var _summaryLabelStyle:TextCellStyle;
        private var _summaryValueStyle:TextCellStyle;
        private var _summaryLabelSize:CellSize;
        private var _summaryValueSize:CellSize;
        private var _keyDotStyle:DotCellStyle;
        private var _keyLabelStyle:TextCellStyle;
        private var _keyDotSize:CellSize;
        private var _keyLabelSize:CellSize;
        private var _tableIndex:Object;
        public var _incidentFilter:IFilter;
        private var _year:int = 0;
        public var _victimsYearFilter:IFilter;
        public var _perpsYearFilter:IFilter;
        public var _incidentsYearFilter:IFilter;
        public var _spatialFilter:IFilter;
        public var _yearLookupArr:Array;
        public var _victimCountsByYear:Array;
        public var _missingLocationByYear:Array;
        private var _dataNote:String = "Chart shows non-Hispanic black and non-Hispanic white totals, as reported by the N.Y.C. Police Department.";
        private var _linkCSS:StyleSheet;

        public function HomicidesTable(_arg1:PointDataTable, _arg2:DataTable, _arg3:DataTable){
            this._victims_data = _arg2;
            this._perps_data = _arg3;
            this._incidents_data = _arg1;
            this.initYearLookup();
            this._barStyle = new BarCellStyle();
            this._barStyle.shapeStyle.setFill(A.CHART_COL, 1);
            this._barStyle.height = 9;
            this._greyBarStyle = new BarCellStyle();
            this._greyBarStyle.shapeStyle.setFill(A.GREY_BAR_COL, 1);
            this._greyBarStyle.height = 10;
            this._defaultLabelStyle = new TextCellStyle();
            var _local4:TextStyle = new TextStyle();
            _local4.size = 12;
            this._defaultLabelStyle.textStyle = _local4;
            this._linkCSS = new StyleSheet();
            var _local5:Object = {
                color:"#004276",
                textDecoration:"underline"
            };
            this._linkCSS.setStyle("a", _local5);
            this._tailStyle = new TextCellStyle();
            this._tailStyle.textStyle.size = 11;
            this._tailStyle.textStyle.useHTML = true;
            this._tailStyle.textStyle.color = 0x777777;
            this._tailStyle.textStyle.styleSheet = this._linkCSS;
            this._tailStyle.textStyle.mouseEnabled = true;
            this._countDataStyle = this._defaultLabelStyle.clone();
            this._countDataStyle.align = C.RIGHT;
            this._pctDataStyle = this._defaultLabelStyle.clone();
            this._pctDataStyle.initialSuffix = "%";
            this._pctDataStyle.align = C.RIGHT;
            this._titleStyle = this._defaultLabelStyle.clone();
            this._titleStyle.textStyle.bold = true;
            this._titleStyle.textStyle.size = 10;
            this._keyTitleStyle = this._defaultLabelStyle.clone();
            this._keyTitleStyle.textStyle.size = 10;
            this._keyTitleStyle.textStyle.bold = true;
            this._keyTitleStyle.textStyle.color = 0x444444;
            this._keyDotStyle = new DotCellStyle();
            this._keyDotSize = new CellSize(DOT_WIDTH, CELL_HEIGHT);
            this._keyDotStyle.size = 8;
            this._keyDotStyle.shapeStyle.setFill(0, 1);
            this._keyLabelSize = new CellSize(80, CELL_HEIGHT);
            this._keyLabelStyle = this._defaultLabelStyle.clone();
            this._defaultLabelSize = new CellSize(LABEL_WIDTH, CELL_HEIGHT);
            this._countDataSize = new CellSize(30, CELL_HEIGHT, 0, 8);
            this._pctDataSize = new CellSize(30, CELL_HEIGHT, 0, 14);
            this._summaryLabelStyle = this._defaultLabelStyle.clone();
            this._summaryLabelSize = new CellSize(160, CELL_HEIGHT);
            this._summaryValueStyle = this._countDataStyle;
            this._summaryValueSize = this._countDataSize;
            this._barCellSize = new CellSize(72, CELL_HEIGHT);
            this._barCellSize.topPadding = 2;
            this._titleCellSize = new CellSize(100, (CELL_HEIGHT + 1));
            this._keyTitleCellSize = new CellSize(100, CELL_HEIGHT);
            this._tailCellSize = new CellSize(100, CELL_HEIGHT);
            this._tailCellSize.topPadding = 2;
            this._tableIndex = {};
            this._victimsYearFilter = new MethodFilter(this.filterIncidentByYear, this._victims_data);
            this._perpsYearFilter = new MethodFilter(this.filterIncidentByYear, this._perps_data);
            this._incidentsYearFilter = new MethodFilter(this.filterIncidentByYear, this._incidents_data);
            this._spatialFilter = new MethodFilter(this.filterLatLongMissing, this._incidents_data);
        }
        private function initYearLookup(){
            this._yearLookupArr = [];
        }
        public function getMissingLocationByYear(_arg1:Array):Array{
            var _local4:int;
            var _local5:int;
            if (!this._missingLocationByYear){
                this.getVictimCountsByYear([]);
            };
            var _local2:Array = [];
            var _local3:int;
            while (_local3 < _arg1.length) {
                _local4 = _arg1[_local3];
                _local5 = (((this._missingLocationByYear[_local4] === undefined)) ? 0 : this._missingLocationByYear[_local4]);
                _local2[_local3] = _local5;
                _local3++;
            };
            return (_local2);
        }
        public function getVictimCountsByYear(_arg1:Array):Array{
            var _local4:Array;
            var _local5:Array;
            var _local6:int;
            var _local7:int;
            var _local8:int;
            var _local9:int;
            var _local10:int;
            var _local11:int;
            var _local12:int;
            var _local13:RecordSet;
            var _local14:Date;
            var _local15:Date;
            var _local16:Date;
            var _local17:Date;
            var _local18:Date;
            var _local19:Date;
            var _local20:Number;
            var _local21:Number;
            var _local22:Number;
            var _local23:Number;
            var _local24:Number;
            var _local25:Number;
            var _local26:RecordSet;
            var _local27:Record;
            var _local28:Number;
            var _local29:int;
            var _local30:int;
            var _local31:Record;
            var _local32:Number;
            var _local33:int;
            var _local34:int;
            if (!this._victimCountsByYear){
                _local4 = [];
                _local5 = [];
                _local6 = 0;
                _local7 = 0;
                _local8 = 0;
                _local9 = 0;
                _local10 = 0;
                _local11 = 0;
                _local12 = 0;
                _local13 = this._incidents_data.getRecordSet();
                while (_local13.hasNext) {
                    _local27 = _local13.nextRecord;
                    _local28 = _local27.getNumber("LAT");
                    _local29 = _local27.getNumber(A.F_RECENT_FLAG);
                    _local30 = _local27.getNumber("year");
                    if (_local5[_local30] === undefined){
                        _local5[_local30] = 0;
                    };
                    if (((isNaN(_local28)) || ((_local28 == 0)))){
                        var _local35 = _local5;
                        var _local36 = _local30;
                        var _local37 = (_local35[_local36] + 1);
                        _local35[_local36] = _local37;
                        _local7++;
                        if (_local29 == 1){
                            _local9++;
                        };
                    };
                };
                _local14 = new Date();
                _local15 = new Date(_local14.getFullYear(), _local14.getMonth(), _local14.getDate());
                _local16 = new Date(_local15.getFullYear(), _local15.getMonth(), (_local15.getDate() - 30));
                _local17 = new Date((_local15.fullYear - 1), _local15.month, _local15.date);
                _local18 = new Date(_local17.fullYear, 0, 1);
                _local19 = new Date(_local15.fullYear, 0, 1);
                _local20 = _local15.time;
                _local21 = _local16.time;
                _local22 = new Date(_local17.fullYear, _local17.month, (_local17.date - 30)).getTime();
                _local23 = _local17.time;
                _local24 = _local18.time;
                _local25 = _local19.time;
                _local26 = this._victims_data.getRecordSet();
                while (_local26.hasNext) {
                    _local31 = _local26.nextRecord;
                    _local30 = _local31.getNumber("year");
                    if (_local30 == 0){
                    } else {
                        if (_local4[_local30] === undefined){
                            _local4[_local30] = 0;
                        };
                        _local32 = _local31.getNumber("time");
                        _local29 = _local31.getNumber(A.F_RECENT_FLAG);
                        if (_local29){
                            _local8++;
                        };
                        if ((((_local32 >= _local24)) && ((_local32 <= _local23)))){
                            _local12++;
                        };
                        if ((((_local32 >= _local22)) && ((_local32 <= _local23)))){
                            _local11++;
                        };
                        _local6++;
                        _local35 = _local4;
                        _local36 = _local30;
                        _local37 = (_local35[_local36] + 1);
                        _local35[_local36] = _local37;
                    };
                };
                _local4[0] = _local6;
                _local5[0] = _local7;
                _local4[A.RECENT_CODE] = _local8;
                _local5[A.RECENT_CODE] = _local9;
                _local4[A.LAST_YEAR_RECENT_CODE] = _local11;
                _local4[A.LAST_YEAR_CODE] = _local12;
                this._victimCountsByYear = _local4;
                this._missingLocationByYear = _local5;
            };
            var _local2:Array = [];
            var _local3:int;
            while (_local3 < _arg1.length) {
                _local33 = _arg1[_local3];
                _local34 = (((this._victimCountsByYear[_local33] === undefined)) ? 0 : this._victimCountsByYear[_local33]);
                _local2[_local3] = _local34;
                _local3++;
            };
            return (_local2);
        }
        private function filterLatLongMissing(_arg1:Record):Boolean{
            var _local2:int = _arg1.getNumber("LAT");
            return ((_local2 == 0));
        }
        private function filterIncidentByYear(_arg1:Record):Boolean{
            var _local2:int;
            var _local3:int;
            if (this._year == 0){
                return (true);
            };
            if (this._year == A.RECENT_CODE){
                _local2 = _arg1.getNumber(A.F_RECENT_FLAG);
                return ((_local2 == 1));
            };
            _local3 = _arg1.getNumber("year");
            return ((_local3 == this._year));
        }
        public function fetchTableSet(_arg1:String, _arg2:Array, _arg3:int=0, _arg4:String=""):Sprite{
            var _local9:String;
            var _local10:Sprite;
            this._year = _arg3;
            var _local5:Sprite = new Sprite();
            var _local6:int;
            var _local7:int = TABLE_SPACING;
            var _local8:int;
            while (_local8 < _arg2.length) {
                _local9 = _arg2[_local8];
                _local10 = this.fetchTable(_local9, _arg4);
                _local5.addChild(_local10);
                _local10.y = _local6;
                _local6 = (_local6 + (_local10.height + _local7));
                _local8++;
            };
            return (_local5);
        }
        public function fetchTable(_arg1:String, _arg2:String=""):Sprite{
            var _local11:Array;
            var _local14:int;
            var _local15:int;
            var _local16:CellSize;
            var _local17:Array;
            var _local18:Array;
            var _local19:int;
            var _local20:Number;
            var _local21:DotCellStyle;
            if (this._tableIndex[_arg1]){
            };
            var _local3:TableDisplay = new TableDisplay();
            var _local4:TextCellStyle = this._defaultLabelStyle;
            var _local5:CellSize = this._defaultLabelSize;
            var _local6:TextCellStyle = this._pctDataStyle;
            var _local7:CellSize = this._pctDataSize;
            var _local8:BarCellStyle = this._barStyle;
            var _local9:CellSize = this._barCellSize;
            var _local10:Object = {};
            switch (_arg1){
                case A.BY_YEAR:
                    _local10 = this.getYearData();
                    if (this._year != 0){
                        _local8 = this._greyBarStyle;
                        _local14 = 2;
                        _local15 = (A.LAST_YEAR - this._year);
                        _local3.setCellStyle(this._barStyle, _local14, _local15);
                    };
                    break;
                case A.BORO:
                    _local10 = this.getBoroData();
                    break;
                case A.NORMALIZED_BORO:
                    if ((((this._year == A.LAST_YEAR)) || ((this._year == A.RECENT_CODE)))){
                        return (new Sprite());
                    };
                    _local10 = this.getNormalizedBoroData();
                    break;
                case A.PERP_RACE:
                    _local10 = this.getPerpRaceData();
                    break;
                case A.VICTIM_RACE:
                    _local10 = this.getVictimRaceData();
                    break;
                case A.PERP_AGE:
                    _local10 = this.getPerpAgeData();
                    break;
                case A.VICTIM_AGE:
                    _local10 = this.getVictimAgeData();
                    break;
                case A.VICTIM_SEX:
                    _local10 = this.getVictimSexData();
                    break;
                case A.PERP_SEX:
                    _local10 = this.getPerpSexData();
                    break;
                case A.WEAPON:
                    _local10 = this.getWeaponData();
                    break;
                case A.TIME_OF_DAY:
                    _local10 = this.getTimeOfDayData();
                    break;
                case A.BY_MONTH:
                    _local10 = this.getMonthData();
                    break;
                default:
                    return (new Sprite());
            };
            if (_local10.units == COUNT){
                _local6 = this._countDataStyle;
                _local7 = this._countDataSize;
            };
            var _local12:Array = [_local4, _local6, _local8];
            var _local13:Array = [_local5, _local7, _local9];
            if (_local10.labelWidth){
                _local16 = _local5.clone();
                _local16.width = _local10.labelWidth;
                _local13[0] = _local16;
            };
            if (((_arg2) && (_local10.colors))){
                if (_arg2 == _arg1){
                    _local17 = _local10.rows;
                    _local18 = _local10.colors;
                    if (((_local18) && ((_local18.length == _local17.length)))){
                        _local12.unshift(this._keyDotStyle);
                        _local13.unshift(this._keyDotSize);
                        _local19 = 0;
                        while (_local19 < _local17.length) {
                            _local20 = _local18[_local19];
                            _local21 = new DotCellStyle();
                            _local21.size = 8;
                            _local21.shapeStyle.setFill(_local20, 1);
                            _local17[_local19].unshift(_local20);
                            _local19++;
                        };
                    };
                };
            };
            _local3.setTitleFormat(this._titleStyle, this._titleCellSize);
            _local3.setColFormat(_local12, _local13);
            _local10.title = _local10.title.toUpperCase();
            if (_local10.tail){
                _local3.setTailFormat(this._tailStyle, this._tailCellSize);
            };
            _local3.display(_local10);
            this._tableIndex[_arg1] = _local3;
            return (_local3);
        }
        private function getStandardTableData(_arg1:Array, _arg2:Array, _arg3:String, _arg4:DataTable, _arg5:String, _arg6:Boolean=false, _arg7:Boolean=true, _arg8:Object=null):Object{
            var _local9:IFilter;
            var _local19:Object;
            var _local20:RecordSet;
            var _local21:Number;
            var _local22:String;
            var _local23:int;
            var _local24:String;
            var _local25:int;
            var _local26:Number;
            var _local27:Number;
            var _local28:String;
            var _local29:String;
            if (!_arg8){
                _arg8 = {};
            };
            if (_arg4 == this._incidents_data){
                _local9 = this._incidentsYearFilter;
            } else {
                if (_arg4 == this._victims_data){
                    _local9 = this._victimsYearFilter;
                } else {
                    _local9 = this._perpsYearFilter;
                };
            };
            var _local10:Number = _arg8.max_count;
            var _local11:Number = _arg8.max_percent;
            var _local12:Object = {};
            var _local13:Array = [];
            var _local14:int = _arg4.length;
            if (_arg7){
                _local14 = _arg4.getRecordSet(_local9).size();
            };
            var _local15:Number = 0;
            var _local16:int;
            var _local17:int;
            while (_local17 < _arg2.length) {
                _local19 = _arg2[_local17];
                _local20 = _arg4.getMatchingRecordSet(_arg3, _local19);
                if (((!((this._year == 0))) && (_arg7))){
                    _local20.applyFilter(_local9);
                };
                _local21 = _local20.size();
                if (_local19){
                    _local16 = (_local16 + _local21);
                };
                _local13.push(_local21);
                _local15 = Math.max(_local15, _local21);
                _local17++;
            };
            if (_local10){
                _local15 = _local10;
            };
            var _local18:Array = [];
            _local17 = 0;
            while (_local17 < _arg2.length) {
                _local19 = _arg2[_local17];
                _local22 = _arg1[_local17];
                _local21 = _local13[_local17];
                if ((((_arg5 == NORMALIZED_COUNT)) && (_arg8.denominators))){
                    _local21 = (_local21 / _arg8.denominators[_local17]);
                };
                _local23 = ((_arg8.decimals) ? _arg8.decimals : 0);
                _local24 = Text.formatNumber(_local21, _local23);
                _local25 = ((_arg6) ? _local14 : _local16);
                _local26 = (((_local25 == 0)) ? 0 : (_local21 / _local25));
                _local27 = (((_local15 == 0)) ? 0 : (_local21 / _local15));
                if ((((_local27 > 0)) && (_local11))){
                    _local27 = (_local26 / (_local11 / 100));
                };
                _local28 = Text.formatNumber((_local26 * 100), _local23);
                if ((((_local26 == 0)) && ((_arg3 == "daytime")))){
                    _local28 = "-";
                };
                _local29 = (((_arg5 == PERCENT)) ? _local28 : _local24);
                _local18.push([_local22, _local29, _local27]);
                _local17++;
            };
            _local12.units = (((_arg5 == PERCENT)) ? PERCENT : COUNT);
            _local12.rows = _local18;
            return (_local12);
        }
        private function getYearData():Object{
            var _local8:int;
            var _local9:Number;
            var _local1:Array = A.CHART_YEAR_LABELS;
            var _local2:Array = A.CHART_YEARS;
            var _local3:Array = this.getVictimCountsByYear(_local2);
            var _local4:int;
            var _local5:int;
            while (_local5 < _local2.length) {
                _local8 = _local3[_local5];
                if (_local4 < _local8){
                    _local4 = _local8;
                };
                _local5++;
            };
            var _local6:Array = [];
            _local5 = 0;
            while (_local5 < _local2.length) {
                _local8 = _local3[_local5];
                _local9 = (((_local4 == 0)) ? 0 : (_local8 / _local4));
                _local6[_local5] = [_local1[_local5], Text.formatNumber(_local8), _local9];
                _local5++;
            };
            var _local7:Object = {units:COUNT};
            _local7.rows = _local6;
            _local7.title = "Homicides in each year";
            return (_local7);
        }
        private function getWeaponData():Object{
            var _local1:Array = ["Firearm", "Knife", "Other"];
            var _local2:Array = [A.GUN, A.KNIFE, A.OTHER];
            var _local3:Object = this.getStandardTableData(_local1, _local2, "weapon", this._incidents_data, PERCENT);
            _local3.title = "Weapon";
            _local3.colors = [A.GUN_COL, A.KNIFE_COL, A.OTHER_WEAPON_COL];
            return (_local3);
        }
        private function getNormalizedBoroData():Object{
            var _local1:Array = ["The Bronx", "Brooklyn", "Manhattan", "Queens", "Staten Island"];
            var _local2:Array = ["Bronx", "Brooklyn", "Manhattan", "Queens", "Staten Island"];
            var _local3:Array = A.getBoroPopulations(["Bronx", "Brooklyn", "Manhattan", "Queens", "Staten Island"], this._year);
            var _local4:int;
            while (_local4 < _local3.length) {
                _local3[_local4] = (_local3[_local4] / 100000);
                _local4++;
            };
            var _local5:Object = {
                denominators:_local3,
                max_count:10.5,
                decimals:1
            };
            var _local6:Object = this.getStandardTableData(_local1, _local2, "boro", this._victims_data, NORMALIZED_COUNT, false, true, _local5);
            _local6.title = "Borough";
            _local6.title = "Homicides per million residents";
            _local6.title = "Annual homicides\nper 100,000 residents";
            _local6.labelWidth = (LABEL_WIDTH + DOT_WIDTH);
            return (_local6);
        }
        private function getBoroData():Object{
            var _local4:Object;
            var _local5:Object;
            var _local1:Array = ["Brooklyn", "The Bronx", "Queens", "Manhattan", "Staten Island"];
            var _local2:Array = ["Brooklyn", "Bronx", "Queens", "Manhattan", "Staten Island"];
            var _local3:DataTable = this._victims_data;
            if (this._year == 0){
                _local4 = this.getStandardTableData(_local1, _local2, "boro", _local3, PERCENT, false, true);
            } else {
                _local5 = {max_count:235};
                _local4 = this.getStandardTableData(_local1, _local2, "boro", _local3, COUNT, false, true, _local5);
            };
            _local4.title = "Borough";
            _local4.title = "Number of homicides";
            _local4.colors = [A.BROOKLYN_COL, A.BRONX_COL, A.QUEENS_COL, A.MANHATTAN_COL, A.STATEN_COL];
            return (_local4);
        }
        private function getPerpRaceData():Object{
            var _local1:Array = RACE_LABELS;
            var _local2:Array = [A.BLACK, A.HISPANIC, A.WHITE, A.ASIAN];
            var _local3:Object = {max_percent:70};
            var _local4:Object = this.getStandardTableData(_local1, _local2, "race", this._perps_data, PERCENT, false, true, _local3);
            _local4.title = "Race/ethnicity of perpetrator";
            _local4.colors = [A.BLACK_COL, A.HISPANIC_COL, A.WHITE_COL, A.ASIAN_COL];
            _local4.tail = this._dataNote;
            return (_local4);
        }
        private function getVictimRaceData():Object{
            var _local1:Array = RACE_LABELS;
            var _local2:Array = [A.BLACK, A.HISPANIC, A.WHITE, A.ASIAN];
            var _local3:Object = {max_percent:70};
            var _local4:Object = this.getStandardTableData(_local1, _local2, "race", this._victims_data, PERCENT, false, true, _local3);
            _local4.title = "Race/ethnicity of victim";
            _local4.colors = [A.BLACK_COL, A.HISPANIC_COL, A.WHITE_COL, A.ASIAN_COL];
            _local4.tail = this._dataNote;
            return (_local4);
        }
        private function getPerpAgeData():Object{
            var _local1:Array = AGE_LABELS;
            var _local2:Array = [A.UNDER_18, A.UNDER_25, A.UNDER_35, A.UNDER_45, A.UNDER_55, A.SENIORS];
            var _local3:Object = {max_percent:39};
            var _local4:Object = this.getStandardTableData(_local1, _local2, "age_group", this._perps_data, PERCENT, false, true, _local3);
            _local4.title = "Age of perpetrator";
            _local4.colors = A.AGE_COLORS;
            return (_local4);
        }
        private function getVictimAgeData():Object{
            var _local1:Array = AGE_LABELS;
            var _local2:Array = [A.UNDER_18, A.UNDER_25, A.UNDER_35, A.UNDER_45, A.UNDER_55, A.SENIORS];
            var _local3:Object = {max_percent:39};
            var _local4:Object = this.getStandardTableData(_local1, _local2, "age_group", this._victims_data, PERCENT, false, true, _local3);
            _local4.title = "Age of victim";
            _local4.colors = A.AGE_COLORS;
            return (_local4);
        }
        private function getVictimSexData():Object{
            var _local1:Array = SEX_LABELS;
            var _local2:Array = [A.MALE, A.FEMALE];
            var _local3:Object = this.getStandardTableData(_local1, _local2, "sex", this._victims_data, PERCENT);
            _local3.title = "Sex of victim";
            _local3.colors = [A.MALE_COL, A.FEMALE_COL];
            return (_local3);
        }
        private function getPerpSexData():Object{
            var _local1:Array = SEX_LABELS;
            var _local2:Array = [A.MALE, A.FEMALE];
            var _local3:Object = this.getStandardTableData(_local1, _local2, "sex", this._perps_data, PERCENT);
            _local3.title = "Sex of perpetrator";
            _local3.colors = [A.MALE_COL, A.FEMALE_COL];
            return (_local3);
        }
        private function getTimeOfDayData():Object{
            var _local1:Array = DAYTIME_LABELS;
            var _local2:Array = [1, 2];
            if ((((((this._year == 2003)) || ((this._year == 2004)))) || ((this._year == 2005)))){
                _local2 = [3, 3];
            };
            var _local3:Object = {max_percent:70};
            var _local4:Object = this.getStandardTableData(_local1, _local2, "daytime", this._incidents_data, PERCENT, false, true, _local3);
            _local4.colors = [A.NIGHT_COL, A.DAY_COL];
            _local4.title = "Time of day";
            _local4.labelWidth = (LABEL_WIDTH - DOT_WIDTH);
            return (_local4);
        }
        private function getMonthData():Object{
            var _local1:Array = ["Jan.", "Feb.", "March", "April", "May", "June", "July", "Aug.", "Sept.", "Oct.", "Nov.", "Dec."];
            var _local2:Array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
            var _local3:String = (((this._year == 0)) ? PERCENT : COUNT);
            var _local4:Object = {};
            if (_local3 == COUNT){
                _local4.max_count = 65;
            };
            var _local5:Object = this.getStandardTableData(_local1, _local2, "month", this._incidents_data, _local3, false, true, _local4);
            _local5.title = "Month";
            return (_local5);
        }

    }
}//package